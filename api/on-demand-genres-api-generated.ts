/* tslint:disable */
/* eslint-disable */
/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

The version of the OpenAPI document: 3.4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { LegacyError } from '../models';
// @ts-ignore
import { OnDemandGenre } from '../models';
// @ts-ignore
import { OnDemandPage } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * OnDemandGenresApi - axios parameter creator
 * @export
 */
export const OnDemandGenresApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method adds the specified genre designation to an On Demand page. A page can be associated with a maximum of two genres. The authenticated user must be the owner of the page.
         * @summary Add a genre to an On Demand page
         * @param {string} genreId The ID of the genre.
         * @param {number} ondemandId The ID of the On Demand page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addGenreToPage: async (genreId: string, ondemandId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'genreId' is not null or undefined
            assertParamExists('addGenreToPage', 'genreId', genreId)
            // verify required parameter 'ondemandId' is not null or undefined
            assertParamExists('addGenreToPage', 'ondemandId', ondemandId)
            const localVarPath = `/ondemand/pages/{ondemand_id}/genres/{genre_id}`
                .replace(`{${"genre_id"}}`, encodeURIComponent(String(genreId !== undefined ? genreId : `-genre_id-`)))
                .replace(`{${"ondemand_id"}}`, encodeURIComponent(String(ondemandId !== undefined ? ondemandId : `-ondemand_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ondemand/pages/{ondemand_id}/genres/{genre_id}',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method determines whether an On Demand page is associated with the specified genre.
         * @summary Check whether an On Demand page belongs to a specific genre
         * @param {string} genreId The ID of the genre.
         * @param {number} ondemandId The ID of the On Demand page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkGenreAssociation: async (genreId: string, ondemandId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'genreId' is not null or undefined
            assertParamExists('checkGenreAssociation', 'genreId', genreId)
            // verify required parameter 'ondemandId' is not null or undefined
            assertParamExists('checkGenreAssociation', 'ondemandId', ondemandId)
            const localVarPath = `/ondemand/pages/{ondemand_id}/genres/{genre_id}`
                .replace(`{${"genre_id"}}`, encodeURIComponent(String(genreId !== undefined ? genreId : `-genre_id-`)))
                .replace(`{${"ondemand_id"}}`, encodeURIComponent(String(ondemandId !== undefined ? ondemandId : `-ondemand_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ondemand/pages/{ondemand_id}/genres/{genre_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every existing On Demand genre.
         * @summary Get all On Demand genres
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllGenres: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ondemand/genres`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ondemand/genres',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every On Demand page that belongs to the specified genre.
         * @summary Get all the On Demand pages in a genre
         * @param {string} genreId The ID of the genre.
         * @param {'asc' | 'desc'} [direction] The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order. 
         * @param {'country' | 'my_region'} [filter] The attribute by which to filter the results.  Option descriptions:  * &#x60;country&#x60; - Sort the results by country.  * &#x60;my_region&#x60; - Sort the results by user\&#39;s region. 
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {string} [query] The search query to use to filter the results.
         * @param {'alphabetical' | 'date' | 'name' | 'publish.time' | 'videos'} [sort] The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;name&#x60; - Sort the results by name.  * &#x60;publish.time&#x60; - Sort the results by time of publishing.  * &#x60;videos&#x60; - Sort the results by video. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPagesInGenre: async (genreId: string, direction?: 'asc' | 'desc', filter?: 'country' | 'my_region', page?: number, perPage?: number, query?: string, sort?: 'alphabetical' | 'date' | 'name' | 'publish.time' | 'videos', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'genreId' is not null or undefined
            assertParamExists('getAllPagesInGenre', 'genreId', genreId)
            const localVarPath = `/ondemand/genres/{genre_id}/pages`
                .replace(`{${"genre_id"}}`, encodeURIComponent(String(genreId !== undefined ? genreId : `-genre_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ondemand/genres/{genre_id}/pages',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every genre associated with the specified On Demand page.
         * @summary Get all the genres of an On Demand page
         * @param {number} ondemandId The ID of the On Demand page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGenres: async (ondemandId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ondemandId' is not null or undefined
            assertParamExists('getGenres', 'ondemandId', ondemandId)
            const localVarPath = `/ondemand/pages/{ondemand_id}/genres`
                .replace(`{${"ondemand_id"}}`, encodeURIComponent(String(ondemandId !== undefined ? ondemandId : `-ondemand_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ondemand/pages/{ondemand_id}/genres',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns a single On Demand page that belongs to the specified genre.
         * @summary Get a specific On Demand page in a genre
         * @param {string} genreId The ID of the genre.
         * @param {number} ondemandId The ID of the On Demand page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificPageInGenre: async (genreId: string, ondemandId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'genreId' is not null or undefined
            assertParamExists('getSpecificPageInGenre', 'genreId', genreId)
            // verify required parameter 'ondemandId' is not null or undefined
            assertParamExists('getSpecificPageInGenre', 'ondemandId', ondemandId)
            const localVarPath = `/ondemand/genres/{genre_id}/pages/{ondemand_id}`
                .replace(`{${"genre_id"}}`, encodeURIComponent(String(genreId !== undefined ? genreId : `-genre_id-`)))
                .replace(`{${"ondemand_id"}}`, encodeURIComponent(String(ondemandId !== undefined ? ondemandId : `-ondemand_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ondemand/genres/{genre_id}/pages/{ondemand_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method removes a genre association from the specified On Demand page. The authenticated user must be the owner of the page.
         * @summary Remove a genre from an On Demand page
         * @param {string} genreId The ID of the genre.
         * @param {number} ondemandId The ID of the On Demand page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeGenreFromPage: async (genreId: string, ondemandId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'genreId' is not null or undefined
            assertParamExists('removeGenreFromPage', 'genreId', genreId)
            // verify required parameter 'ondemandId' is not null or undefined
            assertParamExists('removeGenreFromPage', 'ondemandId', ondemandId)
            const localVarPath = `/ondemand/pages/{ondemand_id}/genres/{genre_id}`
                .replace(`{${"genre_id"}}`, encodeURIComponent(String(genreId !== undefined ? genreId : `-genre_id-`)))
                .replace(`{${"ondemand_id"}}`, encodeURIComponent(String(ondemandId !== undefined ? ondemandId : `-ondemand_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ondemand/pages/{ondemand_id}/genres/{genre_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns a single On Demand genre.
         * @summary Get a specific On Demand genre
         * @param {string} genreId The ID of the genre.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        specificGenreGet: async (genreId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'genreId' is not null or undefined
            assertParamExists('specificGenreGet', 'genreId', genreId)
            const localVarPath = `/ondemand/genres/{genre_id}`
                .replace(`{${"genre_id"}}`, encodeURIComponent(String(genreId !== undefined ? genreId : `-genre_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ondemand/genres/{genre_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OnDemandGenresApi - functional programming interface
 * @export
 */
export const OnDemandGenresApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OnDemandGenresApiAxiosParamCreator(configuration)
    return {
        /**
         * This method adds the specified genre designation to an On Demand page. A page can be associated with a maximum of two genres. The authenticated user must be the owner of the page.
         * @summary Add a genre to an On Demand page
         * @param {OnDemandGenresApiAddGenreToPageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addGenreToPage(requestParameters: OnDemandGenresApiAddGenreToPageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OnDemandGenre>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addGenreToPage(requestParameters.genreId, requestParameters.ondemandId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method determines whether an On Demand page is associated with the specified genre.
         * @summary Check whether an On Demand page belongs to a specific genre
         * @param {OnDemandGenresApiCheckGenreAssociationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkGenreAssociation(requestParameters: OnDemandGenresApiCheckGenreAssociationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OnDemandGenre>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkGenreAssociation(requestParameters.genreId, requestParameters.ondemandId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every existing On Demand genre.
         * @summary Get all On Demand genres
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllGenres(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OnDemandGenre>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllGenres(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every On Demand page that belongs to the specified genre.
         * @summary Get all the On Demand pages in a genre
         * @param {OnDemandGenresApiGetAllPagesInGenreRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllPagesInGenre(requestParameters: OnDemandGenresApiGetAllPagesInGenreRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OnDemandPage>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllPagesInGenre(requestParameters.genreId, requestParameters.direction, requestParameters.filter, requestParameters.page, requestParameters.perPage, requestParameters.query, requestParameters.sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every genre associated with the specified On Demand page.
         * @summary Get all the genres of an On Demand page
         * @param {OnDemandGenresApiGetGenresRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGenres(requestParameters: OnDemandGenresApiGetGenresRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OnDemandGenre>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGenres(requestParameters.ondemandId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns a single On Demand page that belongs to the specified genre.
         * @summary Get a specific On Demand page in a genre
         * @param {OnDemandGenresApiGetSpecificPageInGenreRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpecificPageInGenre(requestParameters: OnDemandGenresApiGetSpecificPageInGenreRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OnDemandPage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpecificPageInGenre(requestParameters.genreId, requestParameters.ondemandId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method removes a genre association from the specified On Demand page. The authenticated user must be the owner of the page.
         * @summary Remove a genre from an On Demand page
         * @param {OnDemandGenresApiRemoveGenreFromPageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeGenreFromPage(requestParameters: OnDemandGenresApiRemoveGenreFromPageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeGenreFromPage(requestParameters.genreId, requestParameters.ondemandId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns a single On Demand genre.
         * @summary Get a specific On Demand genre
         * @param {OnDemandGenresApiSpecificGenreGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async specificGenreGet(requestParameters: OnDemandGenresApiSpecificGenreGetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OnDemandGenre>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.specificGenreGet(requestParameters.genreId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OnDemandGenresApi - factory interface
 * @export
 */
export const OnDemandGenresApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OnDemandGenresApiFp(configuration)
    return {
        /**
         * This method adds the specified genre designation to an On Demand page. A page can be associated with a maximum of two genres. The authenticated user must be the owner of the page.
         * @summary Add a genre to an On Demand page
         * @param {OnDemandGenresApiAddGenreToPageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addGenreToPage(requestParameters: OnDemandGenresApiAddGenreToPageRequest, options?: AxiosRequestConfig): AxiosPromise<OnDemandGenre> {
            return localVarFp.addGenreToPage(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method determines whether an On Demand page is associated with the specified genre.
         * @summary Check whether an On Demand page belongs to a specific genre
         * @param {OnDemandGenresApiCheckGenreAssociationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkGenreAssociation(requestParameters: OnDemandGenresApiCheckGenreAssociationRequest, options?: AxiosRequestConfig): AxiosPromise<OnDemandGenre> {
            return localVarFp.checkGenreAssociation(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every existing On Demand genre.
         * @summary Get all On Demand genres
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllGenres(options?: AxiosRequestConfig): AxiosPromise<Array<OnDemandGenre>> {
            return localVarFp.getAllGenres(options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every On Demand page that belongs to the specified genre.
         * @summary Get all the On Demand pages in a genre
         * @param {OnDemandGenresApiGetAllPagesInGenreRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPagesInGenre(requestParameters: OnDemandGenresApiGetAllPagesInGenreRequest, options?: AxiosRequestConfig): AxiosPromise<Array<OnDemandPage>> {
            return localVarFp.getAllPagesInGenre(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every genre associated with the specified On Demand page.
         * @summary Get all the genres of an On Demand page
         * @param {OnDemandGenresApiGetGenresRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGenres(requestParameters: OnDemandGenresApiGetGenresRequest, options?: AxiosRequestConfig): AxiosPromise<Array<OnDemandGenre>> {
            return localVarFp.getGenres(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns a single On Demand page that belongs to the specified genre.
         * @summary Get a specific On Demand page in a genre
         * @param {OnDemandGenresApiGetSpecificPageInGenreRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificPageInGenre(requestParameters: OnDemandGenresApiGetSpecificPageInGenreRequest, options?: AxiosRequestConfig): AxiosPromise<OnDemandPage> {
            return localVarFp.getSpecificPageInGenre(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method removes a genre association from the specified On Demand page. The authenticated user must be the owner of the page.
         * @summary Remove a genre from an On Demand page
         * @param {OnDemandGenresApiRemoveGenreFromPageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeGenreFromPage(requestParameters: OnDemandGenresApiRemoveGenreFromPageRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeGenreFromPage(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns a single On Demand genre.
         * @summary Get a specific On Demand genre
         * @param {OnDemandGenresApiSpecificGenreGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        specificGenreGet(requestParameters: OnDemandGenresApiSpecificGenreGetRequest, options?: AxiosRequestConfig): AxiosPromise<OnDemandGenre> {
            return localVarFp.specificGenreGet(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addGenreToPage operation in OnDemandGenresApi.
 * @export
 * @interface OnDemandGenresApiAddGenreToPageRequest
 */
export type OnDemandGenresApiAddGenreToPageRequest = {
    
    /**
    * The ID of the genre.
    * @type {string}
    * @memberof OnDemandGenresApiAddGenreToPage
    */
    readonly genreId: string
    
    /**
    * The ID of the On Demand page.
    * @type {number}
    * @memberof OnDemandGenresApiAddGenreToPage
    */
    readonly ondemandId: number
    
}

/**
 * Request parameters for checkGenreAssociation operation in OnDemandGenresApi.
 * @export
 * @interface OnDemandGenresApiCheckGenreAssociationRequest
 */
export type OnDemandGenresApiCheckGenreAssociationRequest = {
    
    /**
    * The ID of the genre.
    * @type {string}
    * @memberof OnDemandGenresApiCheckGenreAssociation
    */
    readonly genreId: string
    
    /**
    * The ID of the On Demand page.
    * @type {number}
    * @memberof OnDemandGenresApiCheckGenreAssociation
    */
    readonly ondemandId: number
    
}

/**
 * Request parameters for getAllPagesInGenre operation in OnDemandGenresApi.
 * @export
 * @interface OnDemandGenresApiGetAllPagesInGenreRequest
 */
export type OnDemandGenresApiGetAllPagesInGenreRequest = {
    
    /**
    * The ID of the genre.
    * @type {string}
    * @memberof OnDemandGenresApiGetAllPagesInGenre
    */
    readonly genreId: string
    
    /**
    * The sort direction of the results.  Option descriptions:  * `asc` - Sort the results in ascending order.  * `desc` - Sort the results in descending order. 
    * @type {'asc' | 'desc'}
    * @memberof OnDemandGenresApiGetAllPagesInGenre
    */
    readonly direction?: 'asc' | 'desc'
    
    /**
    * The attribute by which to filter the results.  Option descriptions:  * `country` - Sort the results by country.  * `my_region` - Sort the results by user\'s region. 
    * @type {'country' | 'my_region'}
    * @memberof OnDemandGenresApiGetAllPagesInGenre
    */
    readonly filter?: 'country' | 'my_region'
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof OnDemandGenresApiGetAllPagesInGenre
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof OnDemandGenresApiGetAllPagesInGenre
    */
    readonly perPage?: number
    
    /**
    * The search query to use to filter the results.
    * @type {string}
    * @memberof OnDemandGenresApiGetAllPagesInGenre
    */
    readonly query?: string
    
    /**
    * The way to sort the results.  Option descriptions:  * `alphabetical` - Sort the results alphabetically.  * `date` - Sort the results by date.  * `name` - Sort the results by name.  * `publish.time` - Sort the results by time of publishing.  * `videos` - Sort the results by video. 
    * @type {'alphabetical' | 'date' | 'name' | 'publish.time' | 'videos'}
    * @memberof OnDemandGenresApiGetAllPagesInGenre
    */
    readonly sort?: 'alphabetical' | 'date' | 'name' | 'publish.time' | 'videos'
    
}

/**
 * Request parameters for getGenres operation in OnDemandGenresApi.
 * @export
 * @interface OnDemandGenresApiGetGenresRequest
 */
export type OnDemandGenresApiGetGenresRequest = {
    
    /**
    * The ID of the On Demand page.
    * @type {number}
    * @memberof OnDemandGenresApiGetGenres
    */
    readonly ondemandId: number
    
}

/**
 * Request parameters for getSpecificPageInGenre operation in OnDemandGenresApi.
 * @export
 * @interface OnDemandGenresApiGetSpecificPageInGenreRequest
 */
export type OnDemandGenresApiGetSpecificPageInGenreRequest = {
    
    /**
    * The ID of the genre.
    * @type {string}
    * @memberof OnDemandGenresApiGetSpecificPageInGenre
    */
    readonly genreId: string
    
    /**
    * The ID of the On Demand page.
    * @type {number}
    * @memberof OnDemandGenresApiGetSpecificPageInGenre
    */
    readonly ondemandId: number
    
}

/**
 * Request parameters for removeGenreFromPage operation in OnDemandGenresApi.
 * @export
 * @interface OnDemandGenresApiRemoveGenreFromPageRequest
 */
export type OnDemandGenresApiRemoveGenreFromPageRequest = {
    
    /**
    * The ID of the genre.
    * @type {string}
    * @memberof OnDemandGenresApiRemoveGenreFromPage
    */
    readonly genreId: string
    
    /**
    * The ID of the On Demand page.
    * @type {number}
    * @memberof OnDemandGenresApiRemoveGenreFromPage
    */
    readonly ondemandId: number
    
}

/**
 * Request parameters for specificGenreGet operation in OnDemandGenresApi.
 * @export
 * @interface OnDemandGenresApiSpecificGenreGetRequest
 */
export type OnDemandGenresApiSpecificGenreGetRequest = {
    
    /**
    * The ID of the genre.
    * @type {string}
    * @memberof OnDemandGenresApiSpecificGenreGet
    */
    readonly genreId: string
    
}

/**
 * OnDemandGenresApiGenerated - object-oriented interface
 * @export
 * @class OnDemandGenresApiGenerated
 * @extends {BaseAPI}
 */
export class OnDemandGenresApiGenerated extends BaseAPI {
    /**
     * This method adds the specified genre designation to an On Demand page. A page can be associated with a maximum of two genres. The authenticated user must be the owner of the page.
     * @summary Add a genre to an On Demand page
     * @param {OnDemandGenresApiAddGenreToPageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnDemandGenresApiGenerated
     */
    public addGenreToPage(requestParameters: OnDemandGenresApiAddGenreToPageRequest, options?: AxiosRequestConfig) {
        return OnDemandGenresApiFp(this.configuration).addGenreToPage(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method determines whether an On Demand page is associated with the specified genre.
     * @summary Check whether an On Demand page belongs to a specific genre
     * @param {OnDemandGenresApiCheckGenreAssociationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnDemandGenresApiGenerated
     */
    public checkGenreAssociation(requestParameters: OnDemandGenresApiCheckGenreAssociationRequest, options?: AxiosRequestConfig) {
        return OnDemandGenresApiFp(this.configuration).checkGenreAssociation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every existing On Demand genre.
     * @summary Get all On Demand genres
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnDemandGenresApiGenerated
     */
    public getAllGenres(options?: AxiosRequestConfig) {
        return OnDemandGenresApiFp(this.configuration).getAllGenres(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every On Demand page that belongs to the specified genre.
     * @summary Get all the On Demand pages in a genre
     * @param {OnDemandGenresApiGetAllPagesInGenreRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnDemandGenresApiGenerated
     */
    public getAllPagesInGenre(requestParameters: OnDemandGenresApiGetAllPagesInGenreRequest, options?: AxiosRequestConfig) {
        return OnDemandGenresApiFp(this.configuration).getAllPagesInGenre(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every genre associated with the specified On Demand page.
     * @summary Get all the genres of an On Demand page
     * @param {OnDemandGenresApiGetGenresRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnDemandGenresApiGenerated
     */
    public getGenres(requestParameters: OnDemandGenresApiGetGenresRequest, options?: AxiosRequestConfig) {
        return OnDemandGenresApiFp(this.configuration).getGenres(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns a single On Demand page that belongs to the specified genre.
     * @summary Get a specific On Demand page in a genre
     * @param {OnDemandGenresApiGetSpecificPageInGenreRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnDemandGenresApiGenerated
     */
    public getSpecificPageInGenre(requestParameters: OnDemandGenresApiGetSpecificPageInGenreRequest, options?: AxiosRequestConfig) {
        return OnDemandGenresApiFp(this.configuration).getSpecificPageInGenre(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method removes a genre association from the specified On Demand page. The authenticated user must be the owner of the page.
     * @summary Remove a genre from an On Demand page
     * @param {OnDemandGenresApiRemoveGenreFromPageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnDemandGenresApiGenerated
     */
    public removeGenreFromPage(requestParameters: OnDemandGenresApiRemoveGenreFromPageRequest, options?: AxiosRequestConfig) {
        return OnDemandGenresApiFp(this.configuration).removeGenreFromPage(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns a single On Demand genre.
     * @summary Get a specific On Demand genre
     * @param {OnDemandGenresApiSpecificGenreGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnDemandGenresApiGenerated
     */
    public specificGenreGet(requestParameters: OnDemandGenresApiSpecificGenreGetRequest, options?: AxiosRequestConfig) {
        return OnDemandGenresApiFp(this.configuration).specificGenreGet(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
