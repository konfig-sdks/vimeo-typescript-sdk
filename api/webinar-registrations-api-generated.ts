/* tslint:disable */
/* eslint-disable */
/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

The version of the OpenAPI document: 3.4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ModelError } from '../models';
// @ts-ignore
import { WebinarRegistrant } from '../models';
// @ts-ignore
import { WebinarRegistrationsCaptureUserRegistrationListRequest } from '../models';
// @ts-ignore
import { WebinarRegistrationsCaptureUserRegistrationListRequest1 } from '../models';
// @ts-ignore
import { WebinarRegistrationsCaptureUserRegistrationListRequest1RegistrantsInner } from '../models';
// @ts-ignore
import { WebinarRegistrationsCaptureUserRegistrationListRequestRegistrantsInner } from '../models';
// @ts-ignore
import { WebinarRegistrationsUpdateUserRegistrationDataRequest } from '../models';
// @ts-ignore
import { WebinarRegistrationsUpdateUserRegistrationDataRequest1 } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * WebinarRegistrationsApi - axios parameter creator
 * @export
 */
export const WebinarRegistrationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method captures the user registration list associated with the specified webinar. A maximum of 50 registrants are permitted as part of the request.
         * @summary Capture the user registration list associated with a webinar
         * @param {string} webinarId The ID of the webinar.
         * @param {WebinarRegistrationsCaptureUserRegistrationListRequest} [webinarRegistrationsCaptureUserRegistrationListRequest] 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        captureUserRegistrationList: async (webinarId: string, webinarRegistrationsCaptureUserRegistrationListRequest?: WebinarRegistrationsCaptureUserRegistrationListRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webinarId' is not null or undefined
            assertParamExists('captureUserRegistrationList', 'webinarId', webinarId)
            const localVarPath = `/me/webinars/{webinar_id}/registrants`
                .replace(`{${"webinar_id"}}`, encodeURIComponent(String(webinarId !== undefined ? webinarId : `-webinar_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: webinarRegistrationsCaptureUserRegistrationListRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/webinars/{webinar_id}/registrants',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(webinarRegistrationsCaptureUserRegistrationListRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method captures the user registration list associated with the specified webinar. A maximum of 50 registrants are permitted as part of the request.
         * @summary Capture the user registration list associated with a webinar
         * @param {number} userId The ID of the user.
         * @param {string} webinarId The ID of the webinar.
         * @param {WebinarRegistrationsCaptureUserRegistrationListRequest1} [webinarRegistrationsCaptureUserRegistrationListRequest1] 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        captureUserRegistrationList_1: async (userId: number, webinarId: string, webinarRegistrationsCaptureUserRegistrationListRequest1?: WebinarRegistrationsCaptureUserRegistrationListRequest1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('captureUserRegistrationList_1', 'userId', userId)
            // verify required parameter 'webinarId' is not null or undefined
            assertParamExists('captureUserRegistrationList_1', 'webinarId', webinarId)
            const localVarPath = `/users/{user_id}/webinars/{webinar_id}/registrants`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)))
                .replace(`{${"webinar_id"}}`, encodeURIComponent(String(webinarId !== undefined ? webinarId : `-webinar_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: webinarRegistrationsCaptureUserRegistrationListRequest1,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/webinars/{webinar_id}/registrants',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(webinarRegistrationsCaptureUserRegistrationListRequest1, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method deletes the specified registrant associated with a webinar and originally submitted through a webinar form.
         * @summary Delete a registrant record associated with a webinar
         * @param {string} registrantId The ID of the webinar registrant.
         * @param {string} webinarId The ID of the webinar.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        deleteRegistrantRecord: async (registrantId: string, webinarId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registrantId' is not null or undefined
            assertParamExists('deleteRegistrantRecord', 'registrantId', registrantId)
            // verify required parameter 'webinarId' is not null or undefined
            assertParamExists('deleteRegistrantRecord', 'webinarId', webinarId)
            const localVarPath = `/me/webinars/{webinar_id}/registrants/{registrant_id}`
                .replace(`{${"registrant_id"}}`, encodeURIComponent(String(registrantId !== undefined ? registrantId : `-registrant_id-`)))
                .replace(`{${"webinar_id"}}`, encodeURIComponent(String(webinarId !== undefined ? webinarId : `-webinar_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["delete"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["delete"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/webinars/{webinar_id}/registrants/{registrant_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method deletes the specified registrant associated with a webinar and originally submitted through a webinar form.
         * @summary Delete a registrant record associated with a webinar
         * @param {string} registrantId The ID of the webinar registrant.
         * @param {number} userId The ID of the user.
         * @param {string} webinarId The ID of the webinar.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        deleteRegistrantRecord_2: async (registrantId: string, userId: number, webinarId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registrantId' is not null or undefined
            assertParamExists('deleteRegistrantRecord_2', 'registrantId', registrantId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('deleteRegistrantRecord_2', 'userId', userId)
            // verify required parameter 'webinarId' is not null or undefined
            assertParamExists('deleteRegistrantRecord_2', 'webinarId', webinarId)
            const localVarPath = `/users/{user_id}/webinars/{webinar_id}/registrants/{registrant_id}`
                .replace(`{${"registrant_id"}}`, encodeURIComponent(String(registrantId !== undefined ? registrantId : `-registrant_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)))
                .replace(`{${"webinar_id"}}`, encodeURIComponent(String(webinarId !== undefined ? webinarId : `-webinar_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["delete"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["delete"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/webinars/{webinar_id}/registrants/{registrant_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns the list of user registrations that is associated with the specified webinar and was originally submitted through a webinar form.
         * @summary Get user registration data associated with a webinar
         * @param {string} webinarId The ID of the webinar.
         * @param {'asc' | 'desc'} [direction] The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order. 
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {'registration_date'} [sort] The way to sort the results.  Option descriptions:  * &#x60;registration_date&#x60; - Sort the results by registration date. 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getUserRegistrationsByWebinarId: async (webinarId: string, direction?: 'asc' | 'desc', page?: number, perPage?: number, sort?: 'registration_date', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webinarId' is not null or undefined
            assertParamExists('getUserRegistrationsByWebinarId', 'webinarId', webinarId)
            const localVarPath = `/me/webinars/{webinar_id}/registrants`
                .replace(`{${"webinar_id"}}`, encodeURIComponent(String(webinarId !== undefined ? webinarId : `-webinar_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["stats", "private"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["stats", "private"], configuration)
            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/webinars/{webinar_id}/registrants',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns the list of user registrations that is associated with the specified webinar and was originally submitted through a webinar form.
         * @summary Get user registration data associated with a webinar
         * @param {number} userId The ID of the user.
         * @param {string} webinarId The ID of the webinar.
         * @param {'asc' | 'desc'} [direction] The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order. 
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {'registration_date'} [sort] The way to sort the results.  Option descriptions:  * &#x60;registration_date&#x60; - Sort the results by registration date. 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getUserRegistrationsByWebinarId_3: async (userId: number, webinarId: string, direction?: 'asc' | 'desc', page?: number, perPage?: number, sort?: 'registration_date', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUserRegistrationsByWebinarId_3', 'userId', userId)
            // verify required parameter 'webinarId' is not null or undefined
            assertParamExists('getUserRegistrationsByWebinarId_3', 'webinarId', webinarId)
            const localVarPath = `/users/{user_id}/webinars/{webinar_id}/registrants`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)))
                .replace(`{${"webinar_id"}}`, encodeURIComponent(String(webinarId !== undefined ? webinarId : `-webinar_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["stats", "private"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["stats", "private"], configuration)
            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/webinars/{webinar_id}/registrants',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method updates the specified user registration data associated with a webinar and originally submitted through a webinar form.
         * @summary Update user registration data associated with a webinar
         * @param {string} registrantId The ID of the webinar registrant.
         * @param {string} webinarId The ID of the webinar.
         * @param {WebinarRegistrationsUpdateUserRegistrationDataRequest} [webinarRegistrationsUpdateUserRegistrationDataRequest] 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        updateUserRegistrationData: async (registrantId: string, webinarId: string, webinarRegistrationsUpdateUserRegistrationDataRequest?: WebinarRegistrationsUpdateUserRegistrationDataRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registrantId' is not null or undefined
            assertParamExists('updateUserRegistrationData', 'registrantId', registrantId)
            // verify required parameter 'webinarId' is not null or undefined
            assertParamExists('updateUserRegistrationData', 'webinarId', webinarId)
            const localVarPath = `/me/webinars/{webinar_id}/registrants/{registrant_id}`
                .replace(`{${"registrant_id"}}`, encodeURIComponent(String(registrantId !== undefined ? registrantId : `-registrant_id-`)))
                .replace(`{${"webinar_id"}}`, encodeURIComponent(String(webinarId !== undefined ? webinarId : `-webinar_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: webinarRegistrationsUpdateUserRegistrationDataRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/webinars/{webinar_id}/registrants/{registrant_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(webinarRegistrationsUpdateUserRegistrationDataRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method updates the specified user registration data associated with a webinar and originally submitted through a webinar form.
         * @summary Update user registration data associated with a webinar
         * @param {string} registrantId The ID of the webinar registrant.
         * @param {number} userId The ID of the user.
         * @param {string} webinarId The ID of the webinar.
         * @param {WebinarRegistrationsUpdateUserRegistrationDataRequest1} [webinarRegistrationsUpdateUserRegistrationDataRequest1] 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        updateUserRegistrationData_4: async (registrantId: string, userId: number, webinarId: string, webinarRegistrationsUpdateUserRegistrationDataRequest1?: WebinarRegistrationsUpdateUserRegistrationDataRequest1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registrantId' is not null or undefined
            assertParamExists('updateUserRegistrationData_4', 'registrantId', registrantId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('updateUserRegistrationData_4', 'userId', userId)
            // verify required parameter 'webinarId' is not null or undefined
            assertParamExists('updateUserRegistrationData_4', 'webinarId', webinarId)
            const localVarPath = `/users/{user_id}/webinars/{webinar_id}/registrants/{registrant_id}`
                .replace(`{${"registrant_id"}}`, encodeURIComponent(String(registrantId !== undefined ? registrantId : `-registrant_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)))
                .replace(`{${"webinar_id"}}`, encodeURIComponent(String(webinarId !== undefined ? webinarId : `-webinar_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: webinarRegistrationsUpdateUserRegistrationDataRequest1,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/webinars/{webinar_id}/registrants/{registrant_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(webinarRegistrationsUpdateUserRegistrationDataRequest1, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WebinarRegistrationsApi - functional programming interface
 * @export
 */
export const WebinarRegistrationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WebinarRegistrationsApiAxiosParamCreator(configuration)
    return {
        /**
         * This method captures the user registration list associated with the specified webinar. A maximum of 50 registrants are permitted as part of the request.
         * @summary Capture the user registration list associated with a webinar
         * @param {WebinarRegistrationsApiCaptureUserRegistrationListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async captureUserRegistrationList(requestParameters: WebinarRegistrationsApiCaptureUserRegistrationListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const webinarRegistrationsCaptureUserRegistrationListRequest: WebinarRegistrationsCaptureUserRegistrationListRequest = {
                registrants: requestParameters.registrants
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.captureUserRegistrationList(requestParameters.webinarId, webinarRegistrationsCaptureUserRegistrationListRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method captures the user registration list associated with the specified webinar. A maximum of 50 registrants are permitted as part of the request.
         * @summary Capture the user registration list associated with a webinar
         * @param {WebinarRegistrationsApiCaptureUserRegistrationList0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async captureUserRegistrationList_1(requestParameters: WebinarRegistrationsApiCaptureUserRegistrationList0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const webinarRegistrationsCaptureUserRegistrationListRequest1: WebinarRegistrationsCaptureUserRegistrationListRequest1 = {
                registrants: requestParameters.registrants
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.captureUserRegistrationList_1(requestParameters.userId, requestParameters.webinarId, webinarRegistrationsCaptureUserRegistrationListRequest1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method deletes the specified registrant associated with a webinar and originally submitted through a webinar form.
         * @summary Delete a registrant record associated with a webinar
         * @param {WebinarRegistrationsApiDeleteRegistrantRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async deleteRegistrantRecord(requestParameters: WebinarRegistrationsApiDeleteRegistrantRecordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRegistrantRecord(requestParameters.registrantId, requestParameters.webinarId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method deletes the specified registrant associated with a webinar and originally submitted through a webinar form.
         * @summary Delete a registrant record associated with a webinar
         * @param {WebinarRegistrationsApiDeleteRegistrantRecord0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async deleteRegistrantRecord_2(requestParameters: WebinarRegistrationsApiDeleteRegistrantRecord0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRegistrantRecord_2(requestParameters.registrantId, requestParameters.userId, requestParameters.webinarId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns the list of user registrations that is associated with the specified webinar and was originally submitted through a webinar form.
         * @summary Get user registration data associated with a webinar
         * @param {WebinarRegistrationsApiGetUserRegistrationsByWebinarIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async getUserRegistrationsByWebinarId(requestParameters: WebinarRegistrationsApiGetUserRegistrationsByWebinarIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebinarRegistrant>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserRegistrationsByWebinarId(requestParameters.webinarId, requestParameters.direction, requestParameters.page, requestParameters.perPage, requestParameters.sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns the list of user registrations that is associated with the specified webinar and was originally submitted through a webinar form.
         * @summary Get user registration data associated with a webinar
         * @param {WebinarRegistrationsApiGetUserRegistrationsByWebinarId0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async getUserRegistrationsByWebinarId_3(requestParameters: WebinarRegistrationsApiGetUserRegistrationsByWebinarId0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebinarRegistrant>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserRegistrationsByWebinarId_3(requestParameters.userId, requestParameters.webinarId, requestParameters.direction, requestParameters.page, requestParameters.perPage, requestParameters.sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method updates the specified user registration data associated with a webinar and originally submitted through a webinar form.
         * @summary Update user registration data associated with a webinar
         * @param {WebinarRegistrationsApiUpdateUserRegistrationDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async updateUserRegistrationData(requestParameters: WebinarRegistrationsApiUpdateUserRegistrationDataRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebinarRegistrant>> {
            const webinarRegistrationsUpdateUserRegistrationDataRequest: WebinarRegistrationsUpdateUserRegistrationDataRequest = {
                is_blocked: requestParameters.is_blocked
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserRegistrationData(requestParameters.registrantId, requestParameters.webinarId, webinarRegistrationsUpdateUserRegistrationDataRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method updates the specified user registration data associated with a webinar and originally submitted through a webinar form.
         * @summary Update user registration data associated with a webinar
         * @param {WebinarRegistrationsApiUpdateUserRegistrationData0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async updateUserRegistrationData_4(requestParameters: WebinarRegistrationsApiUpdateUserRegistrationData0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebinarRegistrant>> {
            const webinarRegistrationsUpdateUserRegistrationDataRequest1: WebinarRegistrationsUpdateUserRegistrationDataRequest1 = {
                is_blocked: requestParameters.is_blocked
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserRegistrationData_4(requestParameters.registrantId, requestParameters.userId, requestParameters.webinarId, webinarRegistrationsUpdateUserRegistrationDataRequest1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WebinarRegistrationsApi - factory interface
 * @export
 */
export const WebinarRegistrationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WebinarRegistrationsApiFp(configuration)
    return {
        /**
         * This method captures the user registration list associated with the specified webinar. A maximum of 50 registrants are permitted as part of the request.
         * @summary Capture the user registration list associated with a webinar
         * @param {WebinarRegistrationsApiCaptureUserRegistrationListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        captureUserRegistrationList(requestParameters: WebinarRegistrationsApiCaptureUserRegistrationListRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.captureUserRegistrationList(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method captures the user registration list associated with the specified webinar. A maximum of 50 registrants are permitted as part of the request.
         * @summary Capture the user registration list associated with a webinar
         * @param {WebinarRegistrationsApiCaptureUserRegistrationList0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        captureUserRegistrationList_1(requestParameters: WebinarRegistrationsApiCaptureUserRegistrationList0Request, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.captureUserRegistrationList_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method deletes the specified registrant associated with a webinar and originally submitted through a webinar form.
         * @summary Delete a registrant record associated with a webinar
         * @param {WebinarRegistrationsApiDeleteRegistrantRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        deleteRegistrantRecord(requestParameters: WebinarRegistrationsApiDeleteRegistrantRecordRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteRegistrantRecord(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method deletes the specified registrant associated with a webinar and originally submitted through a webinar form.
         * @summary Delete a registrant record associated with a webinar
         * @param {WebinarRegistrationsApiDeleteRegistrantRecord0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        deleteRegistrantRecord_2(requestParameters: WebinarRegistrationsApiDeleteRegistrantRecord0Request, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteRegistrantRecord_2(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns the list of user registrations that is associated with the specified webinar and was originally submitted through a webinar form.
         * @summary Get user registration data associated with a webinar
         * @param {WebinarRegistrationsApiGetUserRegistrationsByWebinarIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getUserRegistrationsByWebinarId(requestParameters: WebinarRegistrationsApiGetUserRegistrationsByWebinarIdRequest, options?: AxiosRequestConfig): AxiosPromise<WebinarRegistrant> {
            return localVarFp.getUserRegistrationsByWebinarId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns the list of user registrations that is associated with the specified webinar and was originally submitted through a webinar form.
         * @summary Get user registration data associated with a webinar
         * @param {WebinarRegistrationsApiGetUserRegistrationsByWebinarId0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getUserRegistrationsByWebinarId_3(requestParameters: WebinarRegistrationsApiGetUserRegistrationsByWebinarId0Request, options?: AxiosRequestConfig): AxiosPromise<WebinarRegistrant> {
            return localVarFp.getUserRegistrationsByWebinarId_3(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method updates the specified user registration data associated with a webinar and originally submitted through a webinar form.
         * @summary Update user registration data associated with a webinar
         * @param {WebinarRegistrationsApiUpdateUserRegistrationDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        updateUserRegistrationData(requestParameters: WebinarRegistrationsApiUpdateUserRegistrationDataRequest, options?: AxiosRequestConfig): AxiosPromise<WebinarRegistrant> {
            return localVarFp.updateUserRegistrationData(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method updates the specified user registration data associated with a webinar and originally submitted through a webinar form.
         * @summary Update user registration data associated with a webinar
         * @param {WebinarRegistrationsApiUpdateUserRegistrationData0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        updateUserRegistrationData_4(requestParameters: WebinarRegistrationsApiUpdateUserRegistrationData0Request, options?: AxiosRequestConfig): AxiosPromise<WebinarRegistrant> {
            return localVarFp.updateUserRegistrationData_4(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for captureUserRegistrationList operation in WebinarRegistrationsApi.
 * @export
 * @interface WebinarRegistrationsApiCaptureUserRegistrationListRequest
 */
export type WebinarRegistrationsApiCaptureUserRegistrationListRequest = {
    
    /**
    * The ID of the webinar.
    * @type {string}
    * @memberof WebinarRegistrationsApiCaptureUserRegistrationList
    */
    readonly webinarId: string
    
} & WebinarRegistrationsCaptureUserRegistrationListRequest

/**
 * Request parameters for captureUserRegistrationList_1 operation in WebinarRegistrationsApi.
 * @export
 * @interface WebinarRegistrationsApiCaptureUserRegistrationList0Request
 */
export type WebinarRegistrationsApiCaptureUserRegistrationList0Request = {
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof WebinarRegistrationsApiCaptureUserRegistrationList0
    */
    readonly userId: number
    
    /**
    * The ID of the webinar.
    * @type {string}
    * @memberof WebinarRegistrationsApiCaptureUserRegistrationList0
    */
    readonly webinarId: string
    
} & WebinarRegistrationsCaptureUserRegistrationListRequest1

/**
 * Request parameters for deleteRegistrantRecord operation in WebinarRegistrationsApi.
 * @export
 * @interface WebinarRegistrationsApiDeleteRegistrantRecordRequest
 */
export type WebinarRegistrationsApiDeleteRegistrantRecordRequest = {
    
    /**
    * The ID of the webinar registrant.
    * @type {string}
    * @memberof WebinarRegistrationsApiDeleteRegistrantRecord
    */
    readonly registrantId: string
    
    /**
    * The ID of the webinar.
    * @type {string}
    * @memberof WebinarRegistrationsApiDeleteRegistrantRecord
    */
    readonly webinarId: string
    
}

/**
 * Request parameters for deleteRegistrantRecord_2 operation in WebinarRegistrationsApi.
 * @export
 * @interface WebinarRegistrationsApiDeleteRegistrantRecord0Request
 */
export type WebinarRegistrationsApiDeleteRegistrantRecord0Request = {
    
    /**
    * The ID of the webinar registrant.
    * @type {string}
    * @memberof WebinarRegistrationsApiDeleteRegistrantRecord0
    */
    readonly registrantId: string
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof WebinarRegistrationsApiDeleteRegistrantRecord0
    */
    readonly userId: number
    
    /**
    * The ID of the webinar.
    * @type {string}
    * @memberof WebinarRegistrationsApiDeleteRegistrantRecord0
    */
    readonly webinarId: string
    
}

/**
 * Request parameters for getUserRegistrationsByWebinarId operation in WebinarRegistrationsApi.
 * @export
 * @interface WebinarRegistrationsApiGetUserRegistrationsByWebinarIdRequest
 */
export type WebinarRegistrationsApiGetUserRegistrationsByWebinarIdRequest = {
    
    /**
    * The ID of the webinar.
    * @type {string}
    * @memberof WebinarRegistrationsApiGetUserRegistrationsByWebinarId
    */
    readonly webinarId: string
    
    /**
    * The sort direction of the results.  Option descriptions:  * `asc` - Sort the results in ascending order.  * `desc` - Sort the results in descending order. 
    * @type {'asc' | 'desc'}
    * @memberof WebinarRegistrationsApiGetUserRegistrationsByWebinarId
    */
    readonly direction?: 'asc' | 'desc'
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof WebinarRegistrationsApiGetUserRegistrationsByWebinarId
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof WebinarRegistrationsApiGetUserRegistrationsByWebinarId
    */
    readonly perPage?: number
    
    /**
    * The way to sort the results.  Option descriptions:  * `registration_date` - Sort the results by registration date. 
    * @type {'registration_date'}
    * @memberof WebinarRegistrationsApiGetUserRegistrationsByWebinarId
    */
    readonly sort?: 'registration_date'
    
}

/**
 * Request parameters for getUserRegistrationsByWebinarId_3 operation in WebinarRegistrationsApi.
 * @export
 * @interface WebinarRegistrationsApiGetUserRegistrationsByWebinarId0Request
 */
export type WebinarRegistrationsApiGetUserRegistrationsByWebinarId0Request = {
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof WebinarRegistrationsApiGetUserRegistrationsByWebinarId0
    */
    readonly userId: number
    
    /**
    * The ID of the webinar.
    * @type {string}
    * @memberof WebinarRegistrationsApiGetUserRegistrationsByWebinarId0
    */
    readonly webinarId: string
    
    /**
    * The sort direction of the results.  Option descriptions:  * `asc` - Sort the results in ascending order.  * `desc` - Sort the results in descending order. 
    * @type {'asc' | 'desc'}
    * @memberof WebinarRegistrationsApiGetUserRegistrationsByWebinarId0
    */
    readonly direction?: 'asc' | 'desc'
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof WebinarRegistrationsApiGetUserRegistrationsByWebinarId0
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof WebinarRegistrationsApiGetUserRegistrationsByWebinarId0
    */
    readonly perPage?: number
    
    /**
    * The way to sort the results.  Option descriptions:  * `registration_date` - Sort the results by registration date. 
    * @type {'registration_date'}
    * @memberof WebinarRegistrationsApiGetUserRegistrationsByWebinarId0
    */
    readonly sort?: 'registration_date'
    
}

/**
 * Request parameters for updateUserRegistrationData operation in WebinarRegistrationsApi.
 * @export
 * @interface WebinarRegistrationsApiUpdateUserRegistrationDataRequest
 */
export type WebinarRegistrationsApiUpdateUserRegistrationDataRequest = {
    
    /**
    * The ID of the webinar registrant.
    * @type {string}
    * @memberof WebinarRegistrationsApiUpdateUserRegistrationData
    */
    readonly registrantId: string
    
    /**
    * The ID of the webinar.
    * @type {string}
    * @memberof WebinarRegistrationsApiUpdateUserRegistrationData
    */
    readonly webinarId: string
    
} & WebinarRegistrationsUpdateUserRegistrationDataRequest

/**
 * Request parameters for updateUserRegistrationData_4 operation in WebinarRegistrationsApi.
 * @export
 * @interface WebinarRegistrationsApiUpdateUserRegistrationData0Request
 */
export type WebinarRegistrationsApiUpdateUserRegistrationData0Request = {
    
    /**
    * The ID of the webinar registrant.
    * @type {string}
    * @memberof WebinarRegistrationsApiUpdateUserRegistrationData0
    */
    readonly registrantId: string
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof WebinarRegistrationsApiUpdateUserRegistrationData0
    */
    readonly userId: number
    
    /**
    * The ID of the webinar.
    * @type {string}
    * @memberof WebinarRegistrationsApiUpdateUserRegistrationData0
    */
    readonly webinarId: string
    
} & WebinarRegistrationsUpdateUserRegistrationDataRequest1

/**
 * WebinarRegistrationsApiGenerated - object-oriented interface
 * @export
 * @class WebinarRegistrationsApiGenerated
 * @extends {BaseAPI}
 */
export class WebinarRegistrationsApiGenerated extends BaseAPI {
    /**
     * This method captures the user registration list associated with the specified webinar. A maximum of 50 registrants are permitted as part of the request.
     * @summary Capture the user registration list associated with a webinar
     * @param {WebinarRegistrationsApiCaptureUserRegistrationListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof WebinarRegistrationsApiGenerated
     */
    public captureUserRegistrationList(requestParameters: WebinarRegistrationsApiCaptureUserRegistrationListRequest, options?: AxiosRequestConfig) {
        return WebinarRegistrationsApiFp(this.configuration).captureUserRegistrationList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method captures the user registration list associated with the specified webinar. A maximum of 50 registrants are permitted as part of the request.
     * @summary Capture the user registration list associated with a webinar
     * @param {WebinarRegistrationsApiCaptureUserRegistrationList0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof WebinarRegistrationsApiGenerated
     */
    public captureUserRegistrationList_1(requestParameters: WebinarRegistrationsApiCaptureUserRegistrationList0Request, options?: AxiosRequestConfig) {
        return WebinarRegistrationsApiFp(this.configuration).captureUserRegistrationList_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method deletes the specified registrant associated with a webinar and originally submitted through a webinar form.
     * @summary Delete a registrant record associated with a webinar
     * @param {WebinarRegistrationsApiDeleteRegistrantRecordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof WebinarRegistrationsApiGenerated
     */
    public deleteRegistrantRecord(requestParameters: WebinarRegistrationsApiDeleteRegistrantRecordRequest, options?: AxiosRequestConfig) {
        return WebinarRegistrationsApiFp(this.configuration).deleteRegistrantRecord(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method deletes the specified registrant associated with a webinar and originally submitted through a webinar form.
     * @summary Delete a registrant record associated with a webinar
     * @param {WebinarRegistrationsApiDeleteRegistrantRecord0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof WebinarRegistrationsApiGenerated
     */
    public deleteRegistrantRecord_2(requestParameters: WebinarRegistrationsApiDeleteRegistrantRecord0Request, options?: AxiosRequestConfig) {
        return WebinarRegistrationsApiFp(this.configuration).deleteRegistrantRecord_2(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns the list of user registrations that is associated with the specified webinar and was originally submitted through a webinar form.
     * @summary Get user registration data associated with a webinar
     * @param {WebinarRegistrationsApiGetUserRegistrationsByWebinarIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof WebinarRegistrationsApiGenerated
     */
    public getUserRegistrationsByWebinarId(requestParameters: WebinarRegistrationsApiGetUserRegistrationsByWebinarIdRequest, options?: AxiosRequestConfig) {
        return WebinarRegistrationsApiFp(this.configuration).getUserRegistrationsByWebinarId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns the list of user registrations that is associated with the specified webinar and was originally submitted through a webinar form.
     * @summary Get user registration data associated with a webinar
     * @param {WebinarRegistrationsApiGetUserRegistrationsByWebinarId0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof WebinarRegistrationsApiGenerated
     */
    public getUserRegistrationsByWebinarId_3(requestParameters: WebinarRegistrationsApiGetUserRegistrationsByWebinarId0Request, options?: AxiosRequestConfig) {
        return WebinarRegistrationsApiFp(this.configuration).getUserRegistrationsByWebinarId_3(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method updates the specified user registration data associated with a webinar and originally submitted through a webinar form.
     * @summary Update user registration data associated with a webinar
     * @param {WebinarRegistrationsApiUpdateUserRegistrationDataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof WebinarRegistrationsApiGenerated
     */
    public updateUserRegistrationData(requestParameters: WebinarRegistrationsApiUpdateUserRegistrationDataRequest, options?: AxiosRequestConfig) {
        return WebinarRegistrationsApiFp(this.configuration).updateUserRegistrationData(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method updates the specified user registration data associated with a webinar and originally submitted through a webinar form.
     * @summary Update user registration data associated with a webinar
     * @param {WebinarRegistrationsApiUpdateUserRegistrationData0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof WebinarRegistrationsApiGenerated
     */
    public updateUserRegistrationData_4(requestParameters: WebinarRegistrationsApiUpdateUserRegistrationData0Request, options?: AxiosRequestConfig) {
        return WebinarRegistrationsApiFp(this.configuration).updateUserRegistrationData_4(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
