/* tslint:disable */
/* eslint-disable */
/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

The version of the OpenAPI document: 3.4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Portfolio } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PortfoliosEssentialsApi - axios parameter creator
 * @export
 */
export const PortfoliosEssentialsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method returns every portfolio belonging to the authenticated user.
         * @summary Get all the portfolios that belong to the user
         * @param {'asc' | 'desc'} [direction] The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order. 
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {string} [query] The search query to use to filter the results.
         * @param {'alphabetical' | 'date'} [sort] The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by creation date. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUserPortfolios: async (direction?: 'asc' | 'desc', page?: number, perPage?: number, query?: string, sort?: 'alphabetical' | 'date', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/portfolios`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/portfolios',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns a single portfolio belonging to the authenticated user.
         * @summary Get a specific portfolio
         * @param {number} portfolioId The ID of the portfolio.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserPortfolio: async (portfolioId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'portfolioId' is not null or undefined
            assertParamExists('getUserPortfolio', 'portfolioId', portfolioId)
            const localVarPath = `/me/portfolios/{portfolio_id}`
                .replace(`{${"portfolio_id"}}`, encodeURIComponent(String(portfolioId !== undefined ? portfolioId : `-portfolio_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/portfolios/{portfolio_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns a single portfolio belonging to the authenticated user.
         * @summary Get a specific portfolio
         * @param {number} portfolioId The ID of the portfolio.
         * @param {number} userId The ID of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portfolio: async (portfolioId: number, userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'portfolioId' is not null or undefined
            assertParamExists('portfolio', 'portfolioId', portfolioId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('portfolio', 'userId', userId)
            const localVarPath = `/users/{user_id}/portfolios/{portfolio_id}`
                .replace(`{${"portfolio_id"}}`, encodeURIComponent(String(portfolioId !== undefined ? portfolioId : `-portfolio_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/portfolios/{portfolio_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every portfolio belonging to the authenticated user.
         * @summary Get all the portfolios that belong to the user
         * @param {number} userId The ID of the user.
         * @param {'asc' | 'desc'} [direction] The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order. 
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {string} [query] The search query to use to filter the results.
         * @param {'alphabetical' | 'date'} [sort] The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by creation date. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portfolios: async (userId: number, direction?: 'asc' | 'desc', page?: number, perPage?: number, query?: string, sort?: 'alphabetical' | 'date', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('portfolios', 'userId', userId)
            const localVarPath = `/users/{user_id}/portfolios`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/portfolios',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PortfoliosEssentialsApi - functional programming interface
 * @export
 */
export const PortfoliosEssentialsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PortfoliosEssentialsApiAxiosParamCreator(configuration)
    return {
        /**
         * This method returns every portfolio belonging to the authenticated user.
         * @summary Get all the portfolios that belong to the user
         * @param {PortfoliosEssentialsApiGetAllUserPortfoliosRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllUserPortfolios(requestParameters: PortfoliosEssentialsApiGetAllUserPortfoliosRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Portfolio>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllUserPortfolios(requestParameters.direction, requestParameters.page, requestParameters.perPage, requestParameters.query, requestParameters.sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns a single portfolio belonging to the authenticated user.
         * @summary Get a specific portfolio
         * @param {PortfoliosEssentialsApiGetUserPortfolioRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserPortfolio(requestParameters: PortfoliosEssentialsApiGetUserPortfolioRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Portfolio>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserPortfolio(requestParameters.portfolioId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns a single portfolio belonging to the authenticated user.
         * @summary Get a specific portfolio
         * @param {PortfoliosEssentialsApiPortfolioRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async portfolio(requestParameters: PortfoliosEssentialsApiPortfolioRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Portfolio>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.portfolio(requestParameters.portfolioId, requestParameters.userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every portfolio belonging to the authenticated user.
         * @summary Get all the portfolios that belong to the user
         * @param {PortfoliosEssentialsApiPortfoliosRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async portfolios(requestParameters: PortfoliosEssentialsApiPortfoliosRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Portfolio>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.portfolios(requestParameters.userId, requestParameters.direction, requestParameters.page, requestParameters.perPage, requestParameters.query, requestParameters.sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PortfoliosEssentialsApi - factory interface
 * @export
 */
export const PortfoliosEssentialsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PortfoliosEssentialsApiFp(configuration)
    return {
        /**
         * This method returns every portfolio belonging to the authenticated user.
         * @summary Get all the portfolios that belong to the user
         * @param {PortfoliosEssentialsApiGetAllUserPortfoliosRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUserPortfolios(requestParameters: PortfoliosEssentialsApiGetAllUserPortfoliosRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<Portfolio>> {
            return localVarFp.getAllUserPortfolios(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns a single portfolio belonging to the authenticated user.
         * @summary Get a specific portfolio
         * @param {PortfoliosEssentialsApiGetUserPortfolioRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserPortfolio(requestParameters: PortfoliosEssentialsApiGetUserPortfolioRequest, options?: AxiosRequestConfig): AxiosPromise<Portfolio> {
            return localVarFp.getUserPortfolio(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns a single portfolio belonging to the authenticated user.
         * @summary Get a specific portfolio
         * @param {PortfoliosEssentialsApiPortfolioRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portfolio(requestParameters: PortfoliosEssentialsApiPortfolioRequest, options?: AxiosRequestConfig): AxiosPromise<Portfolio> {
            return localVarFp.portfolio(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every portfolio belonging to the authenticated user.
         * @summary Get all the portfolios that belong to the user
         * @param {PortfoliosEssentialsApiPortfoliosRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portfolios(requestParameters: PortfoliosEssentialsApiPortfoliosRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Portfolio>> {
            return localVarFp.portfolios(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAllUserPortfolios operation in PortfoliosEssentialsApi.
 * @export
 * @interface PortfoliosEssentialsApiGetAllUserPortfoliosRequest
 */
export type PortfoliosEssentialsApiGetAllUserPortfoliosRequest = {
    
    /**
    * The sort direction of the results.  Option descriptions:  * `asc` - Sort the results in ascending order.  * `desc` - Sort the results in descending order. 
    * @type {'asc' | 'desc'}
    * @memberof PortfoliosEssentialsApiGetAllUserPortfolios
    */
    readonly direction?: 'asc' | 'desc'
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof PortfoliosEssentialsApiGetAllUserPortfolios
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof PortfoliosEssentialsApiGetAllUserPortfolios
    */
    readonly perPage?: number
    
    /**
    * The search query to use to filter the results.
    * @type {string}
    * @memberof PortfoliosEssentialsApiGetAllUserPortfolios
    */
    readonly query?: string
    
    /**
    * The way to sort the results.  Option descriptions:  * `alphabetical` - Sort the results alphabetically.  * `date` - Sort the results by creation date. 
    * @type {'alphabetical' | 'date'}
    * @memberof PortfoliosEssentialsApiGetAllUserPortfolios
    */
    readonly sort?: 'alphabetical' | 'date'
    
}

/**
 * Request parameters for getUserPortfolio operation in PortfoliosEssentialsApi.
 * @export
 * @interface PortfoliosEssentialsApiGetUserPortfolioRequest
 */
export type PortfoliosEssentialsApiGetUserPortfolioRequest = {
    
    /**
    * The ID of the portfolio.
    * @type {number}
    * @memberof PortfoliosEssentialsApiGetUserPortfolio
    */
    readonly portfolioId: number
    
}

/**
 * Request parameters for portfolio operation in PortfoliosEssentialsApi.
 * @export
 * @interface PortfoliosEssentialsApiPortfolioRequest
 */
export type PortfoliosEssentialsApiPortfolioRequest = {
    
    /**
    * The ID of the portfolio.
    * @type {number}
    * @memberof PortfoliosEssentialsApiPortfolio
    */
    readonly portfolioId: number
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof PortfoliosEssentialsApiPortfolio
    */
    readonly userId: number
    
}

/**
 * Request parameters for portfolios operation in PortfoliosEssentialsApi.
 * @export
 * @interface PortfoliosEssentialsApiPortfoliosRequest
 */
export type PortfoliosEssentialsApiPortfoliosRequest = {
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof PortfoliosEssentialsApiPortfolios
    */
    readonly userId: number
    
    /**
    * The sort direction of the results.  Option descriptions:  * `asc` - Sort the results in ascending order.  * `desc` - Sort the results in descending order. 
    * @type {'asc' | 'desc'}
    * @memberof PortfoliosEssentialsApiPortfolios
    */
    readonly direction?: 'asc' | 'desc'
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof PortfoliosEssentialsApiPortfolios
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof PortfoliosEssentialsApiPortfolios
    */
    readonly perPage?: number
    
    /**
    * The search query to use to filter the results.
    * @type {string}
    * @memberof PortfoliosEssentialsApiPortfolios
    */
    readonly query?: string
    
    /**
    * The way to sort the results.  Option descriptions:  * `alphabetical` - Sort the results alphabetically.  * `date` - Sort the results by creation date. 
    * @type {'alphabetical' | 'date'}
    * @memberof PortfoliosEssentialsApiPortfolios
    */
    readonly sort?: 'alphabetical' | 'date'
    
}

/**
 * PortfoliosEssentialsApiGenerated - object-oriented interface
 * @export
 * @class PortfoliosEssentialsApiGenerated
 * @extends {BaseAPI}
 */
export class PortfoliosEssentialsApiGenerated extends BaseAPI {
    /**
     * This method returns every portfolio belonging to the authenticated user.
     * @summary Get all the portfolios that belong to the user
     * @param {PortfoliosEssentialsApiGetAllUserPortfoliosRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfoliosEssentialsApiGenerated
     */
    public getAllUserPortfolios(requestParameters: PortfoliosEssentialsApiGetAllUserPortfoliosRequest = {}, options?: AxiosRequestConfig) {
        return PortfoliosEssentialsApiFp(this.configuration).getAllUserPortfolios(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns a single portfolio belonging to the authenticated user.
     * @summary Get a specific portfolio
     * @param {PortfoliosEssentialsApiGetUserPortfolioRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfoliosEssentialsApiGenerated
     */
    public getUserPortfolio(requestParameters: PortfoliosEssentialsApiGetUserPortfolioRequest, options?: AxiosRequestConfig) {
        return PortfoliosEssentialsApiFp(this.configuration).getUserPortfolio(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns a single portfolio belonging to the authenticated user.
     * @summary Get a specific portfolio
     * @param {PortfoliosEssentialsApiPortfolioRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfoliosEssentialsApiGenerated
     */
    public portfolio(requestParameters: PortfoliosEssentialsApiPortfolioRequest, options?: AxiosRequestConfig) {
        return PortfoliosEssentialsApiFp(this.configuration).portfolio(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every portfolio belonging to the authenticated user.
     * @summary Get all the portfolios that belong to the user
     * @param {PortfoliosEssentialsApiPortfoliosRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfoliosEssentialsApiGenerated
     */
    public portfolios(requestParameters: PortfoliosEssentialsApiPortfoliosRequest, options?: AxiosRequestConfig) {
        return PortfoliosEssentialsApiFp(this.configuration).portfolios(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
