/* tslint:disable */
/* eslint-disable */
/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

The version of the OpenAPI document: 3.4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ModelError } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * VideosLiveM3u8PlaybackApi - axios parameter creator
 * @export
 */
export const VideosLiveM3u8PlaybackApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method returns an M3U8 playback URL for the specified event stream. You should use this endpoint only in conjunction with our recommended procedure for playing events via HLS. For more information, see our [HLS guide](https://developer.vimeo.com/api/live/playback).
         * @summary Get an M3U8 playback URL for a one-time live event
         * @param {number} videoId The ID of the video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlaybackUrl: async (videoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('getPlaybackUrl', 'videoId', videoId)
            const localVarPath = `/me/videos/{video_id}/m3u8_playback`
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/videos/{video_id}/m3u8_playback',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns an M3U8 playback URL for the specified event stream. You should use this endpoint only in conjunction with our recommended procedure for playing events via HLS. For more information, see our [HLS guide](https://developer.vimeo.com/api/live/playback).
         * @summary Get an M3U8 playback URL for a one-time live event
         * @param {number} userId The ID of the user.
         * @param {number} videoId The ID of the video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlaybackUrlForEventStream: async (userId: number, videoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getPlaybackUrlForEventStream', 'userId', userId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('getPlaybackUrlForEventStream', 'videoId', videoId)
            const localVarPath = `/users/{user_id}/videos/{video_id}/m3u8_playback`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/videos/{video_id}/m3u8_playback',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VideosLiveM3u8PlaybackApi - functional programming interface
 * @export
 */
export const VideosLiveM3u8PlaybackApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VideosLiveM3u8PlaybackApiAxiosParamCreator(configuration)
    return {
        /**
         * This method returns an M3U8 playback URL for the specified event stream. You should use this endpoint only in conjunction with our recommended procedure for playing events via HLS. For more information, see our [HLS guide](https://developer.vimeo.com/api/live/playback).
         * @summary Get an M3U8 playback URL for a one-time live event
         * @param {VideosLiveM3u8PlaybackApiGetPlaybackUrlRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPlaybackUrl(requestParameters: VideosLiveM3u8PlaybackApiGetPlaybackUrlRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPlaybackUrl(requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns an M3U8 playback URL for the specified event stream. You should use this endpoint only in conjunction with our recommended procedure for playing events via HLS. For more information, see our [HLS guide](https://developer.vimeo.com/api/live/playback).
         * @summary Get an M3U8 playback URL for a one-time live event
         * @param {VideosLiveM3u8PlaybackApiGetPlaybackUrlForEventStreamRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPlaybackUrlForEventStream(requestParameters: VideosLiveM3u8PlaybackApiGetPlaybackUrlForEventStreamRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPlaybackUrlForEventStream(requestParameters.userId, requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VideosLiveM3u8PlaybackApi - factory interface
 * @export
 */
export const VideosLiveM3u8PlaybackApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VideosLiveM3u8PlaybackApiFp(configuration)
    return {
        /**
         * This method returns an M3U8 playback URL for the specified event stream. You should use this endpoint only in conjunction with our recommended procedure for playing events via HLS. For more information, see our [HLS guide](https://developer.vimeo.com/api/live/playback).
         * @summary Get an M3U8 playback URL for a one-time live event
         * @param {VideosLiveM3u8PlaybackApiGetPlaybackUrlRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlaybackUrl(requestParameters: VideosLiveM3u8PlaybackApiGetPlaybackUrlRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getPlaybackUrl(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns an M3U8 playback URL for the specified event stream. You should use this endpoint only in conjunction with our recommended procedure for playing events via HLS. For more information, see our [HLS guide](https://developer.vimeo.com/api/live/playback).
         * @summary Get an M3U8 playback URL for a one-time live event
         * @param {VideosLiveM3u8PlaybackApiGetPlaybackUrlForEventStreamRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlaybackUrlForEventStream(requestParameters: VideosLiveM3u8PlaybackApiGetPlaybackUrlForEventStreamRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getPlaybackUrlForEventStream(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getPlaybackUrl operation in VideosLiveM3u8PlaybackApi.
 * @export
 * @interface VideosLiveM3u8PlaybackApiGetPlaybackUrlRequest
 */
export type VideosLiveM3u8PlaybackApiGetPlaybackUrlRequest = {
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof VideosLiveM3u8PlaybackApiGetPlaybackUrl
    */
    readonly videoId: number
    
}

/**
 * Request parameters for getPlaybackUrlForEventStream operation in VideosLiveM3u8PlaybackApi.
 * @export
 * @interface VideosLiveM3u8PlaybackApiGetPlaybackUrlForEventStreamRequest
 */
export type VideosLiveM3u8PlaybackApiGetPlaybackUrlForEventStreamRequest = {
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof VideosLiveM3u8PlaybackApiGetPlaybackUrlForEventStream
    */
    readonly userId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof VideosLiveM3u8PlaybackApiGetPlaybackUrlForEventStream
    */
    readonly videoId: number
    
}

/**
 * VideosLiveM3u8PlaybackApiGenerated - object-oriented interface
 * @export
 * @class VideosLiveM3u8PlaybackApiGenerated
 * @extends {BaseAPI}
 */
export class VideosLiveM3u8PlaybackApiGenerated extends BaseAPI {
    /**
     * This method returns an M3U8 playback URL for the specified event stream. You should use this endpoint only in conjunction with our recommended procedure for playing events via HLS. For more information, see our [HLS guide](https://developer.vimeo.com/api/live/playback).
     * @summary Get an M3U8 playback URL for a one-time live event
     * @param {VideosLiveM3u8PlaybackApiGetPlaybackUrlRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosLiveM3u8PlaybackApiGenerated
     */
    public getPlaybackUrl(requestParameters: VideosLiveM3u8PlaybackApiGetPlaybackUrlRequest, options?: AxiosRequestConfig) {
        return VideosLiveM3u8PlaybackApiFp(this.configuration).getPlaybackUrl(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns an M3U8 playback URL for the specified event stream. You should use this endpoint only in conjunction with our recommended procedure for playing events via HLS. For more information, see our [HLS guide](https://developer.vimeo.com/api/live/playback).
     * @summary Get an M3U8 playback URL for a one-time live event
     * @param {VideosLiveM3u8PlaybackApiGetPlaybackUrlForEventStreamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosLiveM3u8PlaybackApiGenerated
     */
    public getPlaybackUrlForEventStream(requestParameters: VideosLiveM3u8PlaybackApiGetPlaybackUrlForEventStreamRequest, options?: AxiosRequestConfig) {
        return VideosLiveM3u8PlaybackApiFp(this.configuration).getPlaybackUrlForEventStream(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
