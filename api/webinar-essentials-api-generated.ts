/* tslint:disable */
/* eslint-disable */
/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

The version of the OpenAPI document: 3.4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateWebinarRequest } from '../models';
// @ts-ignore
import { CreateWebinarRequestEmailSettings } from '../models';
// @ts-ignore
import { CreateWebinarRequestPrivacy } from '../models';
// @ts-ignore
import { CreateWebinarRequestSchedule } from '../models';
// @ts-ignore
import { ModelError } from '../models';
// @ts-ignore
import { UpdateWebinarRequest } from '../models';
// @ts-ignore
import { UpdateWebinarRequestEmailSettings } from '../models';
// @ts-ignore
import { UpdateWebinarRequestPrivacy } from '../models';
// @ts-ignore
import { UpdateWebinarRequestSchedule } from '../models';
// @ts-ignore
import { Webinar } from '../models';
// @ts-ignore
import { WebinarEssentialsCreateWebinarRequest } from '../models';
// @ts-ignore
import { WebinarEssentialsCreateWebinarRequestEmailSettings } from '../models';
// @ts-ignore
import { WebinarEssentialsCreateWebinarRequestPrivacy } from '../models';
// @ts-ignore
import { WebinarEssentialsCreateWebinarRequestSchedule } from '../models';
// @ts-ignore
import { WebinarEssentialsUpdateWebinarBelongingToAuthenticatedUserRequest } from '../models';
// @ts-ignore
import { WebinarEssentialsUpdateWebinarBelongingToAuthenticatedUserRequestEmailSettings } from '../models';
// @ts-ignore
import { WebinarEssentialsUpdateWebinarBelongingToAuthenticatedUserRequestPrivacy } from '../models';
// @ts-ignore
import { WebinarEssentialsUpdateWebinarBelongingToAuthenticatedUserRequestSchedule } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * WebinarEssentialsApi - axios parameter creator
 * @export
 */
export const WebinarEssentialsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method creates a new webinar for the authenticated user.
         * @summary Create a webinar
         * @param {WebinarEssentialsCreateWebinarRequest} webinarEssentialsCreateWebinarRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWebinar: async (webinarEssentialsCreateWebinarRequest: WebinarEssentialsCreateWebinarRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webinarEssentialsCreateWebinarRequest' is not null or undefined
            assertParamExists('createWebinar', 'webinarEssentialsCreateWebinarRequest', webinarEssentialsCreateWebinarRequest)
            const localVarPath = `/me/webinars`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.vimeo.webinars+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: webinarEssentialsCreateWebinarRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/webinars',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(webinarEssentialsCreateWebinarRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns a single webinar belonging to the authenticated user.
         * @summary Get a specific webinar
         * @param {string} webinarId The ID of the webinar.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getSpecificWebinar: async (webinarId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webinarId' is not null or undefined
            assertParamExists('getSpecificWebinar', 'webinarId', webinarId)
            const localVarPath = `/me/webinars/{webinar_id}`
                .replace(`{${"webinar_id"}}`, encodeURIComponent(String(webinarId !== undefined ? webinarId : `-webinar_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/webinars/{webinar_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns a single webinar belonging to the authenticated user.
         * @summary Get a specific webinar
         * @param {string} webinarId The ID of the webinar.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getSpecificWebinar_1: async (webinarId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webinarId' is not null or undefined
            assertParamExists('getSpecificWebinar_1', 'webinarId', webinarId)
            const localVarPath = `/webinars/{webinar_id}`
                .replace(`{${"webinar_id"}}`, encodeURIComponent(String(webinarId !== undefined ? webinarId : `-webinar_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/webinars/{webinar_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method updates a webinar belonging to the authenticated user.
         * @summary Update a webinar
         * @param {string} webinarId The ID of the webinar.
         * @param {WebinarEssentialsUpdateWebinarBelongingToAuthenticatedUserRequest} [webinarEssentialsUpdateWebinarBelongingToAuthenticatedUserRequest] 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        updateWebinarBelongingToAuthenticatedUser: async (webinarId: string, webinarEssentialsUpdateWebinarBelongingToAuthenticatedUserRequest?: WebinarEssentialsUpdateWebinarBelongingToAuthenticatedUserRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webinarId' is not null or undefined
            assertParamExists('updateWebinarBelongingToAuthenticatedUser', 'webinarId', webinarId)
            const localVarPath = `/me/webinars/{webinar_id}`
                .replace(`{${"webinar_id"}}`, encodeURIComponent(String(webinarId !== undefined ? webinarId : `-webinar_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.vimeo.webinars+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: webinarEssentialsUpdateWebinarBelongingToAuthenticatedUserRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/webinars/{webinar_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(webinarEssentialsUpdateWebinarBelongingToAuthenticatedUserRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method creates a new webinar for the authenticated user.
         * @summary Create a webinar
         * @param {number} userId The ID of the user.
         * @param {CreateWebinarRequest} createWebinarRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webinar: async (userId: number, createWebinarRequest: CreateWebinarRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('webinar', 'userId', userId)
            // verify required parameter 'createWebinarRequest' is not null or undefined
            assertParamExists('webinar', 'createWebinarRequest', createWebinarRequest)
            const localVarPath = `/users/{user_id}/webinars`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.vimeo.webinars+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createWebinarRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/webinars',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createWebinarRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns a single webinar belonging to the authenticated user.
         * @summary Get a specific webinar
         * @param {number} userId The ID of the user.
         * @param {string} webinarId The ID of the webinar.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        webinar_2: async (userId: number, webinarId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('webinar_2', 'userId', userId)
            // verify required parameter 'webinarId' is not null or undefined
            assertParamExists('webinar_2', 'webinarId', webinarId)
            const localVarPath = `/users/{user_id}/webinars/{webinar_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)))
                .replace(`{${"webinar_id"}}`, encodeURIComponent(String(webinarId !== undefined ? webinarId : `-webinar_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/webinars/{webinar_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method updates a webinar belonging to the authenticated user.
         * @summary Update a webinar
         * @param {number} userId The ID of the user.
         * @param {string} webinarId The ID of the webinar.
         * @param {UpdateWebinarRequest} [updateWebinarRequest] 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        webinar_3: async (userId: number, webinarId: string, updateWebinarRequest?: UpdateWebinarRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('webinar_3', 'userId', userId)
            // verify required parameter 'webinarId' is not null or undefined
            assertParamExists('webinar_3', 'webinarId', webinarId)
            const localVarPath = `/users/{user_id}/webinars/{webinar_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)))
                .replace(`{${"webinar_id"}}`, encodeURIComponent(String(webinarId !== undefined ? webinarId : `-webinar_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.vimeo.webinars+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateWebinarRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/webinars/{webinar_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateWebinarRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WebinarEssentialsApi - functional programming interface
 * @export
 */
export const WebinarEssentialsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WebinarEssentialsApiAxiosParamCreator(configuration)
    return {
        /**
         * This method creates a new webinar for the authenticated user.
         * @summary Create a webinar
         * @param {WebinarEssentialsApiCreateWebinarRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createWebinar(requestParameters: WebinarEssentialsApiCreateWebinarRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Webinar>> {
            const webinarEssentialsCreateWebinarRequest: WebinarEssentialsCreateWebinarRequest = {
                title: requestParameters.title,
                description: requestParameters.description,
                email_settings: requestParameters.email_settings,
                folder_uri: requestParameters.folder_uri,
                password: requestParameters.password,
                privacy: requestParameters.privacy,
                schedule: requestParameters.schedule,
                time_zone: requestParameters.time_zone
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createWebinar(webinarEssentialsCreateWebinarRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns a single webinar belonging to the authenticated user.
         * @summary Get a specific webinar
         * @param {WebinarEssentialsApiGetSpecificWebinarRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async getSpecificWebinar(requestParameters: WebinarEssentialsApiGetSpecificWebinarRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Webinar>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpecificWebinar(requestParameters.webinarId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns a single webinar belonging to the authenticated user.
         * @summary Get a specific webinar
         * @param {WebinarEssentialsApiGetSpecificWebinar0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async getSpecificWebinar_1(requestParameters: WebinarEssentialsApiGetSpecificWebinar0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Webinar>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpecificWebinar_1(requestParameters.webinarId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method updates a webinar belonging to the authenticated user.
         * @summary Update a webinar
         * @param {WebinarEssentialsApiUpdateWebinarBelongingToAuthenticatedUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async updateWebinarBelongingToAuthenticatedUser(requestParameters: WebinarEssentialsApiUpdateWebinarBelongingToAuthenticatedUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Webinar>> {
            const webinarEssentialsUpdateWebinarBelongingToAuthenticatedUserRequest: WebinarEssentialsUpdateWebinarBelongingToAuthenticatedUserRequest = {
                title: requestParameters.title,
                description: requestParameters.description,
                email_settings: requestParameters.email_settings,
                password: requestParameters.password,
                privacy: requestParameters.privacy,
                schedule: requestParameters.schedule,
                status: requestParameters.status,
                time_zone: requestParameters.time_zone
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateWebinarBelongingToAuthenticatedUser(requestParameters.webinarId, webinarEssentialsUpdateWebinarBelongingToAuthenticatedUserRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method creates a new webinar for the authenticated user.
         * @summary Create a webinar
         * @param {WebinarEssentialsApiWebinarRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webinar(requestParameters: WebinarEssentialsApiWebinarRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Webinar>> {
            const createWebinarRequest: CreateWebinarRequest = {
                title: requestParameters.title,
                description: requestParameters.description,
                email_settings: requestParameters.email_settings,
                folder_uri: requestParameters.folder_uri,
                password: requestParameters.password,
                privacy: requestParameters.privacy,
                schedule: requestParameters.schedule,
                time_zone: requestParameters.time_zone
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.webinar(requestParameters.userId, createWebinarRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns a single webinar belonging to the authenticated user.
         * @summary Get a specific webinar
         * @param {WebinarEssentialsApiWebinar0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async webinar_2(requestParameters: WebinarEssentialsApiWebinar0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Webinar>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.webinar_2(requestParameters.userId, requestParameters.webinarId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method updates a webinar belonging to the authenticated user.
         * @summary Update a webinar
         * @param {WebinarEssentialsApiWebinar1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async webinar_3(requestParameters: WebinarEssentialsApiWebinar1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Webinar>> {
            const updateWebinarRequest: UpdateWebinarRequest = {
                title: requestParameters.title,
                description: requestParameters.description,
                email_settings: requestParameters.email_settings,
                password: requestParameters.password,
                privacy: requestParameters.privacy,
                schedule: requestParameters.schedule,
                status: requestParameters.status,
                time_zone: requestParameters.time_zone
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.webinar_3(requestParameters.userId, requestParameters.webinarId, updateWebinarRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WebinarEssentialsApi - factory interface
 * @export
 */
export const WebinarEssentialsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WebinarEssentialsApiFp(configuration)
    return {
        /**
         * This method creates a new webinar for the authenticated user.
         * @summary Create a webinar
         * @param {WebinarEssentialsApiCreateWebinarRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWebinar(requestParameters: WebinarEssentialsApiCreateWebinarRequest, options?: AxiosRequestConfig): AxiosPromise<Webinar> {
            return localVarFp.createWebinar(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns a single webinar belonging to the authenticated user.
         * @summary Get a specific webinar
         * @param {WebinarEssentialsApiGetSpecificWebinarRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getSpecificWebinar(requestParameters: WebinarEssentialsApiGetSpecificWebinarRequest, options?: AxiosRequestConfig): AxiosPromise<Webinar> {
            return localVarFp.getSpecificWebinar(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns a single webinar belonging to the authenticated user.
         * @summary Get a specific webinar
         * @param {WebinarEssentialsApiGetSpecificWebinar0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getSpecificWebinar_1(requestParameters: WebinarEssentialsApiGetSpecificWebinar0Request, options?: AxiosRequestConfig): AxiosPromise<Webinar> {
            return localVarFp.getSpecificWebinar_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method updates a webinar belonging to the authenticated user.
         * @summary Update a webinar
         * @param {WebinarEssentialsApiUpdateWebinarBelongingToAuthenticatedUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        updateWebinarBelongingToAuthenticatedUser(requestParameters: WebinarEssentialsApiUpdateWebinarBelongingToAuthenticatedUserRequest, options?: AxiosRequestConfig): AxiosPromise<Webinar> {
            return localVarFp.updateWebinarBelongingToAuthenticatedUser(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method creates a new webinar for the authenticated user.
         * @summary Create a webinar
         * @param {WebinarEssentialsApiWebinarRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webinar(requestParameters: WebinarEssentialsApiWebinarRequest, options?: AxiosRequestConfig): AxiosPromise<Webinar> {
            return localVarFp.webinar(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns a single webinar belonging to the authenticated user.
         * @summary Get a specific webinar
         * @param {WebinarEssentialsApiWebinar0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        webinar_2(requestParameters: WebinarEssentialsApiWebinar0Request, options?: AxiosRequestConfig): AxiosPromise<Webinar> {
            return localVarFp.webinar_2(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method updates a webinar belonging to the authenticated user.
         * @summary Update a webinar
         * @param {WebinarEssentialsApiWebinar1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        webinar_3(requestParameters: WebinarEssentialsApiWebinar1Request, options?: AxiosRequestConfig): AxiosPromise<Webinar> {
            return localVarFp.webinar_3(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createWebinar operation in WebinarEssentialsApi.
 * @export
 * @interface WebinarEssentialsApiCreateWebinarRequest
 */
export type WebinarEssentialsApiCreateWebinarRequest = {
    
} & WebinarEssentialsCreateWebinarRequest

/**
 * Request parameters for getSpecificWebinar operation in WebinarEssentialsApi.
 * @export
 * @interface WebinarEssentialsApiGetSpecificWebinarRequest
 */
export type WebinarEssentialsApiGetSpecificWebinarRequest = {
    
    /**
    * The ID of the webinar.
    * @type {string}
    * @memberof WebinarEssentialsApiGetSpecificWebinar
    */
    readonly webinarId: string
    
}

/**
 * Request parameters for getSpecificWebinar_1 operation in WebinarEssentialsApi.
 * @export
 * @interface WebinarEssentialsApiGetSpecificWebinar0Request
 */
export type WebinarEssentialsApiGetSpecificWebinar0Request = {
    
    /**
    * The ID of the webinar.
    * @type {string}
    * @memberof WebinarEssentialsApiGetSpecificWebinar0
    */
    readonly webinarId: string
    
}

/**
 * Request parameters for updateWebinarBelongingToAuthenticatedUser operation in WebinarEssentialsApi.
 * @export
 * @interface WebinarEssentialsApiUpdateWebinarBelongingToAuthenticatedUserRequest
 */
export type WebinarEssentialsApiUpdateWebinarBelongingToAuthenticatedUserRequest = {
    
    /**
    * The ID of the webinar.
    * @type {string}
    * @memberof WebinarEssentialsApiUpdateWebinarBelongingToAuthenticatedUser
    */
    readonly webinarId: string
    
} & WebinarEssentialsUpdateWebinarBelongingToAuthenticatedUserRequest

/**
 * Request parameters for webinar operation in WebinarEssentialsApi.
 * @export
 * @interface WebinarEssentialsApiWebinarRequest
 */
export type WebinarEssentialsApiWebinarRequest = {
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof WebinarEssentialsApiWebinar
    */
    readonly userId: number
    
} & CreateWebinarRequest

/**
 * Request parameters for webinar_2 operation in WebinarEssentialsApi.
 * @export
 * @interface WebinarEssentialsApiWebinar0Request
 */
export type WebinarEssentialsApiWebinar0Request = {
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof WebinarEssentialsApiWebinar0
    */
    readonly userId: number
    
    /**
    * The ID of the webinar.
    * @type {string}
    * @memberof WebinarEssentialsApiWebinar0
    */
    readonly webinarId: string
    
}

/**
 * Request parameters for webinar_3 operation in WebinarEssentialsApi.
 * @export
 * @interface WebinarEssentialsApiWebinar1Request
 */
export type WebinarEssentialsApiWebinar1Request = {
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof WebinarEssentialsApiWebinar1
    */
    readonly userId: number
    
    /**
    * The ID of the webinar.
    * @type {string}
    * @memberof WebinarEssentialsApiWebinar1
    */
    readonly webinarId: string
    
} & UpdateWebinarRequest

/**
 * WebinarEssentialsApiGenerated - object-oriented interface
 * @export
 * @class WebinarEssentialsApiGenerated
 * @extends {BaseAPI}
 */
export class WebinarEssentialsApiGenerated extends BaseAPI {
    /**
     * This method creates a new webinar for the authenticated user.
     * @summary Create a webinar
     * @param {WebinarEssentialsApiCreateWebinarRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebinarEssentialsApiGenerated
     */
    public createWebinar(requestParameters: WebinarEssentialsApiCreateWebinarRequest, options?: AxiosRequestConfig) {
        return WebinarEssentialsApiFp(this.configuration).createWebinar(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns a single webinar belonging to the authenticated user.
     * @summary Get a specific webinar
     * @param {WebinarEssentialsApiGetSpecificWebinarRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof WebinarEssentialsApiGenerated
     */
    public getSpecificWebinar(requestParameters: WebinarEssentialsApiGetSpecificWebinarRequest, options?: AxiosRequestConfig) {
        return WebinarEssentialsApiFp(this.configuration).getSpecificWebinar(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns a single webinar belonging to the authenticated user.
     * @summary Get a specific webinar
     * @param {WebinarEssentialsApiGetSpecificWebinar0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof WebinarEssentialsApiGenerated
     */
    public getSpecificWebinar_1(requestParameters: WebinarEssentialsApiGetSpecificWebinar0Request, options?: AxiosRequestConfig) {
        return WebinarEssentialsApiFp(this.configuration).getSpecificWebinar_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method updates a webinar belonging to the authenticated user.
     * @summary Update a webinar
     * @param {WebinarEssentialsApiUpdateWebinarBelongingToAuthenticatedUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof WebinarEssentialsApiGenerated
     */
    public updateWebinarBelongingToAuthenticatedUser(requestParameters: WebinarEssentialsApiUpdateWebinarBelongingToAuthenticatedUserRequest, options?: AxiosRequestConfig) {
        return WebinarEssentialsApiFp(this.configuration).updateWebinarBelongingToAuthenticatedUser(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method creates a new webinar for the authenticated user.
     * @summary Create a webinar
     * @param {WebinarEssentialsApiWebinarRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebinarEssentialsApiGenerated
     */
    public webinar(requestParameters: WebinarEssentialsApiWebinarRequest, options?: AxiosRequestConfig) {
        return WebinarEssentialsApiFp(this.configuration).webinar(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns a single webinar belonging to the authenticated user.
     * @summary Get a specific webinar
     * @param {WebinarEssentialsApiWebinar0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof WebinarEssentialsApiGenerated
     */
    public webinar_2(requestParameters: WebinarEssentialsApiWebinar0Request, options?: AxiosRequestConfig) {
        return WebinarEssentialsApiFp(this.configuration).webinar_2(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method updates a webinar belonging to the authenticated user.
     * @summary Update a webinar
     * @param {WebinarEssentialsApiWebinar1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof WebinarEssentialsApiGenerated
     */
    public webinar_3(requestParameters: WebinarEssentialsApiWebinar1Request, options?: AxiosRequestConfig) {
        return WebinarEssentialsApiFp(this.configuration).webinar_3(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
