/* tslint:disable */
/* eslint-disable */
/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

The version of the OpenAPI document: 3.4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Category } from '../models';
// @ts-ignore
import { ChannelsCategoriesAddChannelToMultipleCategoriesRequest } from '../models';
// @ts-ignore
import { LegacyError } from '../models';
// @ts-ignore
import { ModelError } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ChannelsCategoriesApi - axios parameter creator
 * @export
 */
export const ChannelsCategoriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method adds the specified channel to multiple categories.
         * @summary Add a channel to a list of categories
         * @param {number} channelId The ID of the channel.
         * @param {ChannelsCategoriesAddChannelToMultipleCategoriesRequest} channelsCategoriesAddChannelToMultipleCategoriesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addChannelToMultipleCategories: async (channelId: number, channelsCategoriesAddChannelToMultipleCategoriesRequest: ChannelsCategoriesAddChannelToMultipleCategoriesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('addChannelToMultipleCategories', 'channelId', channelId)
            // verify required parameter 'channelsCategoriesAddChannelToMultipleCategoriesRequest' is not null or undefined
            assertParamExists('addChannelToMultipleCategories', 'channelsCategoriesAddChannelToMultipleCategoriesRequest', channelsCategoriesAddChannelToMultipleCategoriesRequest)
            const localVarPath = `/channels/{channel_id}/categories`
                .replace(`{${"channel_id"}}`, encodeURIComponent(String(channelId !== undefined ? channelId : `-channel_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: channelsCategoriesAddChannelToMultipleCategoriesRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/channels/{channel_id}/categories',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(channelsCategoriesAddChannelToMultipleCategoriesRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method adds the specified channel to a single category. The authenticated user must be the owner of the channel.
         * @summary Add a channel to a specific category
         * @param {string} category The name of the category.
         * @param {number} channelId The ID of the channel.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channel: async (category: string, channelId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'category' is not null or undefined
            assertParamExists('channel', 'category', category)
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('channel', 'channelId', channelId)
            const localVarPath = `/channels/{channel_id}/categories/{category}`
                .replace(`{${"category"}}`, encodeURIComponent(String(category !== undefined ? category : `-category-`)))
                .replace(`{${"channel_id"}}`, encodeURIComponent(String(channelId !== undefined ? channelId : `-channel_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/channels/{channel_id}/categories/{category}',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every category to which the specified channel belongs.
         * @summary Get all the categories to which a channel belongs
         * @param {number} channelId The ID of the channel.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBelongingCategories: async (channelId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('getBelongingCategories', 'channelId', channelId)
            const localVarPath = `/channels/{channel_id}/categories`
                .replace(`{${"channel_id"}}`, encodeURIComponent(String(channelId !== undefined ? channelId : `-channel_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/channels/{channel_id}/categories',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method removes a channel from the specified category. The authenticated user must be the owner of the channel.
         * @summary Remove a channel from a category
         * @param {string} category The name of the category.
         * @param {number} channelId The ID of the channel.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeChannelFromCategory: async (category: string, channelId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'category' is not null or undefined
            assertParamExists('removeChannelFromCategory', 'category', category)
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('removeChannelFromCategory', 'channelId', channelId)
            const localVarPath = `/channels/{channel_id}/categories/{category}`
                .replace(`{${"category"}}`, encodeURIComponent(String(category !== undefined ? category : `-category-`)))
                .replace(`{${"channel_id"}}`, encodeURIComponent(String(channelId !== undefined ? channelId : `-channel_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/channels/{channel_id}/categories/{category}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChannelsCategoriesApi - functional programming interface
 * @export
 */
export const ChannelsCategoriesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ChannelsCategoriesApiAxiosParamCreator(configuration)
    return {
        /**
         * This method adds the specified channel to multiple categories.
         * @summary Add a channel to a list of categories
         * @param {ChannelsCategoriesApiAddChannelToMultipleCategoriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addChannelToMultipleCategories(requestParameters: ChannelsCategoriesApiAddChannelToMultipleCategoriesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const channelsCategoriesAddChannelToMultipleCategoriesRequest: ChannelsCategoriesAddChannelToMultipleCategoriesRequest = {
                channels: requestParameters.channels
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addChannelToMultipleCategories(requestParameters.channelId, channelsCategoriesAddChannelToMultipleCategoriesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method adds the specified channel to a single category. The authenticated user must be the owner of the channel.
         * @summary Add a channel to a specific category
         * @param {ChannelsCategoriesApiChannelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async channel(requestParameters: ChannelsCategoriesApiChannelRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.channel(requestParameters.category, requestParameters.channelId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every category to which the specified channel belongs.
         * @summary Get all the categories to which a channel belongs
         * @param {ChannelsCategoriesApiGetBelongingCategoriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBelongingCategories(requestParameters: ChannelsCategoriesApiGetBelongingCategoriesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Category>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBelongingCategories(requestParameters.channelId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method removes a channel from the specified category. The authenticated user must be the owner of the channel.
         * @summary Remove a channel from a category
         * @param {ChannelsCategoriesApiRemoveChannelFromCategoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeChannelFromCategory(requestParameters: ChannelsCategoriesApiRemoveChannelFromCategoryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeChannelFromCategory(requestParameters.category, requestParameters.channelId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ChannelsCategoriesApi - factory interface
 * @export
 */
export const ChannelsCategoriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ChannelsCategoriesApiFp(configuration)
    return {
        /**
         * This method adds the specified channel to multiple categories.
         * @summary Add a channel to a list of categories
         * @param {ChannelsCategoriesApiAddChannelToMultipleCategoriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addChannelToMultipleCategories(requestParameters: ChannelsCategoriesApiAddChannelToMultipleCategoriesRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addChannelToMultipleCategories(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method adds the specified channel to a single category. The authenticated user must be the owner of the channel.
         * @summary Add a channel to a specific category
         * @param {ChannelsCategoriesApiChannelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channel(requestParameters: ChannelsCategoriesApiChannelRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.channel(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every category to which the specified channel belongs.
         * @summary Get all the categories to which a channel belongs
         * @param {ChannelsCategoriesApiGetBelongingCategoriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBelongingCategories(requestParameters: ChannelsCategoriesApiGetBelongingCategoriesRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Category>> {
            return localVarFp.getBelongingCategories(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method removes a channel from the specified category. The authenticated user must be the owner of the channel.
         * @summary Remove a channel from a category
         * @param {ChannelsCategoriesApiRemoveChannelFromCategoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeChannelFromCategory(requestParameters: ChannelsCategoriesApiRemoveChannelFromCategoryRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeChannelFromCategory(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addChannelToMultipleCategories operation in ChannelsCategoriesApi.
 * @export
 * @interface ChannelsCategoriesApiAddChannelToMultipleCategoriesRequest
 */
export type ChannelsCategoriesApiAddChannelToMultipleCategoriesRequest = {
    
    /**
    * The ID of the channel.
    * @type {number}
    * @memberof ChannelsCategoriesApiAddChannelToMultipleCategories
    */
    readonly channelId: number
    
} & ChannelsCategoriesAddChannelToMultipleCategoriesRequest

/**
 * Request parameters for channel operation in ChannelsCategoriesApi.
 * @export
 * @interface ChannelsCategoriesApiChannelRequest
 */
export type ChannelsCategoriesApiChannelRequest = {
    
    /**
    * The name of the category.
    * @type {string}
    * @memberof ChannelsCategoriesApiChannel
    */
    readonly category: string
    
    /**
    * The ID of the channel.
    * @type {number}
    * @memberof ChannelsCategoriesApiChannel
    */
    readonly channelId: number
    
}

/**
 * Request parameters for getBelongingCategories operation in ChannelsCategoriesApi.
 * @export
 * @interface ChannelsCategoriesApiGetBelongingCategoriesRequest
 */
export type ChannelsCategoriesApiGetBelongingCategoriesRequest = {
    
    /**
    * The ID of the channel.
    * @type {number}
    * @memberof ChannelsCategoriesApiGetBelongingCategories
    */
    readonly channelId: number
    
}

/**
 * Request parameters for removeChannelFromCategory operation in ChannelsCategoriesApi.
 * @export
 * @interface ChannelsCategoriesApiRemoveChannelFromCategoryRequest
 */
export type ChannelsCategoriesApiRemoveChannelFromCategoryRequest = {
    
    /**
    * The name of the category.
    * @type {string}
    * @memberof ChannelsCategoriesApiRemoveChannelFromCategory
    */
    readonly category: string
    
    /**
    * The ID of the channel.
    * @type {number}
    * @memberof ChannelsCategoriesApiRemoveChannelFromCategory
    */
    readonly channelId: number
    
}

/**
 * ChannelsCategoriesApiGenerated - object-oriented interface
 * @export
 * @class ChannelsCategoriesApiGenerated
 * @extends {BaseAPI}
 */
export class ChannelsCategoriesApiGenerated extends BaseAPI {
    /**
     * This method adds the specified channel to multiple categories.
     * @summary Add a channel to a list of categories
     * @param {ChannelsCategoriesApiAddChannelToMultipleCategoriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelsCategoriesApiGenerated
     */
    public addChannelToMultipleCategories(requestParameters: ChannelsCategoriesApiAddChannelToMultipleCategoriesRequest, options?: AxiosRequestConfig) {
        return ChannelsCategoriesApiFp(this.configuration).addChannelToMultipleCategories(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method adds the specified channel to a single category. The authenticated user must be the owner of the channel.
     * @summary Add a channel to a specific category
     * @param {ChannelsCategoriesApiChannelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelsCategoriesApiGenerated
     */
    public channel(requestParameters: ChannelsCategoriesApiChannelRequest, options?: AxiosRequestConfig) {
        return ChannelsCategoriesApiFp(this.configuration).channel(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every category to which the specified channel belongs.
     * @summary Get all the categories to which a channel belongs
     * @param {ChannelsCategoriesApiGetBelongingCategoriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelsCategoriesApiGenerated
     */
    public getBelongingCategories(requestParameters: ChannelsCategoriesApiGetBelongingCategoriesRequest, options?: AxiosRequestConfig) {
        return ChannelsCategoriesApiFp(this.configuration).getBelongingCategories(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method removes a channel from the specified category. The authenticated user must be the owner of the channel.
     * @summary Remove a channel from a category
     * @param {ChannelsCategoriesApiRemoveChannelFromCategoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelsCategoriesApiGenerated
     */
    public removeChannelFromCategory(requestParameters: ChannelsCategoriesApiRemoveChannelFromCategoryRequest, options?: AxiosRequestConfig) {
        return ChannelsCategoriesApiFp(this.configuration).removeChannelFromCategory(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
