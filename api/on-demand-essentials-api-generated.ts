/* tslint:disable */
/* eslint-disable */
/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

The version of the OpenAPI document: 3.4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateVodRequest } from '../models';
// @ts-ignore
import { CreateVodRequestBuy } from '../models';
// @ts-ignore
import { CreateVodRequestEpisodes } from '../models';
// @ts-ignore
import { CreateVodRequestRent } from '../models';
// @ts-ignore
import { CreateVodRequestSubscription } from '../models';
// @ts-ignore
import { EditVodRequest } from '../models';
// @ts-ignore
import { EditVodRequestPreorder } from '../models';
// @ts-ignore
import { EditVodRequestPublish } from '../models';
// @ts-ignore
import { LegacyError } from '../models';
// @ts-ignore
import { OnDemandEssentialsCreatePageRequest } from '../models';
// @ts-ignore
import { OnDemandEssentialsCreatePageRequestBuy } from '../models';
// @ts-ignore
import { OnDemandEssentialsCreatePageRequestEpisodes } from '../models';
// @ts-ignore
import { OnDemandEssentialsCreatePageRequestRent } from '../models';
// @ts-ignore
import { OnDemandEssentialsCreatePageRequestSubscription } from '../models';
// @ts-ignore
import { OnDemandPage } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * OnDemandEssentialsApi - axios parameter creator
 * @export
 */
export const OnDemandEssentialsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method creates a new On Demand page for the specified user. To publish the page, use the [edit](https://developer.vimeo.com/api/reference/on-demand#edit_vod) method.
         * @summary Create an On Demand page
         * @param {OnDemandEssentialsCreatePageRequest} onDemandEssentialsCreatePageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPage: async (onDemandEssentialsCreatePageRequest: OnDemandEssentialsCreatePageRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'onDemandEssentialsCreatePageRequest' is not null or undefined
            assertParamExists('createPage', 'onDemandEssentialsCreatePageRequest', onDemandEssentialsCreatePageRequest)
            const localVarPath = `/me/ondemand/pages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: onDemandEssentialsCreatePageRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/ondemand/pages',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(onDemandEssentialsCreatePageRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method deletes the specified On Demand page.
         * @summary Delete an On Demand page
         * @param {number} ondemandId The ID of the On Demand page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOnDemandPage: async (ondemandId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ondemandId' is not null or undefined
            assertParamExists('deleteOnDemandPage', 'ondemandId', ondemandId)
            const localVarPath = `/ondemand/pages/{ondemand_id}`
                .replace(`{${"ondemand_id"}}`, encodeURIComponent(String(ondemandId !== undefined ? ondemandId : `-ondemand_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["delete"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["delete"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ondemand/pages/{ondemand_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every On Demand page belonging to the authenticated user.
         * @summary Get all the On Demand pages of the user
         * @param {'asc' | 'desc'} [direction] The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order. 
         * @param {'film' | 'series'} [filter] The type of the page to return.  Option descriptions:  * &#x60;film&#x60; - The page type is a film.  * &#x60;series&#x60; - The page type is a series. 
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {'added' | 'alphabetical' | 'date' | 'modified_time' | 'name' | 'publish.time' | 'rating'} [sort] The way to sort the results.  Option descriptions:  * &#x60;added&#x60; - Sort the results by most recently added page.  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;modified_time&#x60; - Sort the results by time of page modification.  * &#x60;name&#x60; - Sort the results by page name.  * &#x60;publish.time&#x60; - Sort the results by time of page publishing.  * &#x60;rating&#x60; - Sort the results by content rating. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUserPages: async (direction?: 'asc' | 'desc', filter?: 'film' | 'series', page?: number, perPage?: number, sort?: 'added' | 'alphabetical' | 'date' | 'modified_time' | 'name' | 'publish.time' | 'rating', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/ondemand/pages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/ondemand/pages',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every On Demand page belonging to the authenticated user.
         * @summary Get all the On Demand pages of the user
         * @param {number} userId The ID of the user.
         * @param {'asc' | 'desc'} [direction] The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order. 
         * @param {'film' | 'series'} [filter] The type of the page to return.  Option descriptions:  * &#x60;film&#x60; - The page type is a film.  * &#x60;series&#x60; - The page type is a series. 
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {'added' | 'alphabetical' | 'date' | 'modified_time' | 'name' | 'publish.time' | 'rating'} [sort] The way to sort the results.  Option descriptions:  * &#x60;added&#x60; - Sort the results by most recently added page.  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;modified_time&#x60; - Sort the results by time of page modification.  * &#x60;name&#x60; - Sort the results by page name.  * &#x60;publish.time&#x60; - Sort the results by time of page publishing.  * &#x60;rating&#x60; - Sort the results by content rating. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUserPages_1: async (userId: number, direction?: 'asc' | 'desc', filter?: 'film' | 'series', page?: number, perPage?: number, sort?: 'added' | 'alphabetical' | 'date' | 'modified_time' | 'name' | 'publish.time' | 'rating', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getAllUserPages_1', 'userId', userId)
            const localVarPath = `/users/{user_id}/ondemand/pages`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/ondemand/pages',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns the specified On Demand page.
         * @summary Get a specific On Demand page
         * @param {number} ondemandId The ID of the On Demand page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vod: async (ondemandId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ondemandId' is not null or undefined
            assertParamExists('vod', 'ondemandId', ondemandId)
            const localVarPath = `/ondemand/pages/{ondemand_id}`
                .replace(`{${"ondemand_id"}}`, encodeURIComponent(String(ondemandId !== undefined ? ondemandId : `-ondemand_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ondemand/pages/{ondemand_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method edits the specified On Demand page. Use this method to enable preorders on the page or to publish the page.
         * @summary Edit an On Demand page
         * @param {number} ondemandId The ID of the On Demand page.
         * @param {EditVodRequest} [editVodRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vod_2: async (ondemandId: number, editVodRequest?: EditVodRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ondemandId' is not null or undefined
            assertParamExists('vod_2', 'ondemandId', ondemandId)
            const localVarPath = `/ondemand/pages/{ondemand_id}`
                .replace(`{${"ondemand_id"}}`, encodeURIComponent(String(ondemandId !== undefined ? ondemandId : `-ondemand_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.vimeo.ondemand.page+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: editVodRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ondemand/pages/{ondemand_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(editVodRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method creates a new On Demand page for the specified user. To publish the page, use the [edit](https://developer.vimeo.com/api/reference/on-demand#edit_vod) method.
         * @summary Create an On Demand page
         * @param {number} userId The ID of the user.
         * @param {CreateVodRequest} createVodRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vod_3: async (userId: number, createVodRequest: CreateVodRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('vod_3', 'userId', userId)
            // verify required parameter 'createVodRequest' is not null or undefined
            assertParamExists('vod_3', 'createVodRequest', createVodRequest)
            const localVarPath = `/users/{user_id}/ondemand/pages`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createVodRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/ondemand/pages',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createVodRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OnDemandEssentialsApi - functional programming interface
 * @export
 */
export const OnDemandEssentialsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OnDemandEssentialsApiAxiosParamCreator(configuration)
    return {
        /**
         * This method creates a new On Demand page for the specified user. To publish the page, use the [edit](https://developer.vimeo.com/api/reference/on-demand#edit_vod) method.
         * @summary Create an On Demand page
         * @param {OnDemandEssentialsApiCreatePageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPage(requestParameters: OnDemandEssentialsApiCreatePageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OnDemandPage>> {
            const onDemandEssentialsCreatePageRequest: OnDemandEssentialsCreatePageRequest = {
                description: requestParameters.description,
                accepted_currencies: requestParameters.accepted_currencies,
                buy: requestParameters.buy,
                content_rating: requestParameters.content_rating,
                domain_link: requestParameters.domain_link,
                episodes: requestParameters.episodes,
                link: requestParameters.link,
                name: requestParameters.name,
                rent: requestParameters.rent,
                subscription: requestParameters.subscription,
                type: requestParameters.type
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPage(onDemandEssentialsCreatePageRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method deletes the specified On Demand page.
         * @summary Delete an On Demand page
         * @param {OnDemandEssentialsApiDeleteOnDemandPageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOnDemandPage(requestParameters: OnDemandEssentialsApiDeleteOnDemandPageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOnDemandPage(requestParameters.ondemandId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every On Demand page belonging to the authenticated user.
         * @summary Get all the On Demand pages of the user
         * @param {OnDemandEssentialsApiGetAllUserPagesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllUserPages(requestParameters: OnDemandEssentialsApiGetAllUserPagesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OnDemandPage>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllUserPages(requestParameters.direction, requestParameters.filter, requestParameters.page, requestParameters.perPage, requestParameters.sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every On Demand page belonging to the authenticated user.
         * @summary Get all the On Demand pages of the user
         * @param {OnDemandEssentialsApiGetAllUserPages0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllUserPages_1(requestParameters: OnDemandEssentialsApiGetAllUserPages0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OnDemandPage>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllUserPages_1(requestParameters.userId, requestParameters.direction, requestParameters.filter, requestParameters.page, requestParameters.perPage, requestParameters.sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns the specified On Demand page.
         * @summary Get a specific On Demand page
         * @param {OnDemandEssentialsApiVodRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vod(requestParameters: OnDemandEssentialsApiVodRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OnDemandPage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vod(requestParameters.ondemandId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method edits the specified On Demand page. Use this method to enable preorders on the page or to publish the page.
         * @summary Edit an On Demand page
         * @param {OnDemandEssentialsApiVod0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vod_2(requestParameters: OnDemandEssentialsApiVod0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OnDemandPage>> {
            const editVodRequest: EditVodRequest = {
                link: requestParameters.link,
                preorder: requestParameters.preorder,
                publish: requestParameters.publish,
                publish_when_ready: requestParameters.publish_when_ready
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.vod_2(requestParameters.ondemandId, editVodRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method creates a new On Demand page for the specified user. To publish the page, use the [edit](https://developer.vimeo.com/api/reference/on-demand#edit_vod) method.
         * @summary Create an On Demand page
         * @param {OnDemandEssentialsApiVod1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vod_3(requestParameters: OnDemandEssentialsApiVod1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OnDemandPage>> {
            const createVodRequest: CreateVodRequest = {
                description: requestParameters.description,
                accepted_currencies: requestParameters.accepted_currencies,
                buy: requestParameters.buy,
                content_rating: requestParameters.content_rating,
                domain_link: requestParameters.domain_link,
                episodes: requestParameters.episodes,
                link: requestParameters.link,
                name: requestParameters.name,
                rent: requestParameters.rent,
                subscription: requestParameters.subscription,
                type: requestParameters.type
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.vod_3(requestParameters.userId, createVodRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OnDemandEssentialsApi - factory interface
 * @export
 */
export const OnDemandEssentialsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OnDemandEssentialsApiFp(configuration)
    return {
        /**
         * This method creates a new On Demand page for the specified user. To publish the page, use the [edit](https://developer.vimeo.com/api/reference/on-demand#edit_vod) method.
         * @summary Create an On Demand page
         * @param {OnDemandEssentialsApiCreatePageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPage(requestParameters: OnDemandEssentialsApiCreatePageRequest, options?: AxiosRequestConfig): AxiosPromise<OnDemandPage> {
            return localVarFp.createPage(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method deletes the specified On Demand page.
         * @summary Delete an On Demand page
         * @param {OnDemandEssentialsApiDeleteOnDemandPageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOnDemandPage(requestParameters: OnDemandEssentialsApiDeleteOnDemandPageRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteOnDemandPage(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every On Demand page belonging to the authenticated user.
         * @summary Get all the On Demand pages of the user
         * @param {OnDemandEssentialsApiGetAllUserPagesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUserPages(requestParameters: OnDemandEssentialsApiGetAllUserPagesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<OnDemandPage>> {
            return localVarFp.getAllUserPages(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every On Demand page belonging to the authenticated user.
         * @summary Get all the On Demand pages of the user
         * @param {OnDemandEssentialsApiGetAllUserPages0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUserPages_1(requestParameters: OnDemandEssentialsApiGetAllUserPages0Request, options?: AxiosRequestConfig): AxiosPromise<Array<OnDemandPage>> {
            return localVarFp.getAllUserPages_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns the specified On Demand page.
         * @summary Get a specific On Demand page
         * @param {OnDemandEssentialsApiVodRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vod(requestParameters: OnDemandEssentialsApiVodRequest, options?: AxiosRequestConfig): AxiosPromise<OnDemandPage> {
            return localVarFp.vod(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method edits the specified On Demand page. Use this method to enable preorders on the page or to publish the page.
         * @summary Edit an On Demand page
         * @param {OnDemandEssentialsApiVod0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vod_2(requestParameters: OnDemandEssentialsApiVod0Request, options?: AxiosRequestConfig): AxiosPromise<OnDemandPage> {
            return localVarFp.vod_2(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method creates a new On Demand page for the specified user. To publish the page, use the [edit](https://developer.vimeo.com/api/reference/on-demand#edit_vod) method.
         * @summary Create an On Demand page
         * @param {OnDemandEssentialsApiVod1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vod_3(requestParameters: OnDemandEssentialsApiVod1Request, options?: AxiosRequestConfig): AxiosPromise<OnDemandPage> {
            return localVarFp.vod_3(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createPage operation in OnDemandEssentialsApi.
 * @export
 * @interface OnDemandEssentialsApiCreatePageRequest
 */
export type OnDemandEssentialsApiCreatePageRequest = {
    
} & OnDemandEssentialsCreatePageRequest

/**
 * Request parameters for deleteOnDemandPage operation in OnDemandEssentialsApi.
 * @export
 * @interface OnDemandEssentialsApiDeleteOnDemandPageRequest
 */
export type OnDemandEssentialsApiDeleteOnDemandPageRequest = {
    
    /**
    * The ID of the On Demand page.
    * @type {number}
    * @memberof OnDemandEssentialsApiDeleteOnDemandPage
    */
    readonly ondemandId: number
    
}

/**
 * Request parameters for getAllUserPages operation in OnDemandEssentialsApi.
 * @export
 * @interface OnDemandEssentialsApiGetAllUserPagesRequest
 */
export type OnDemandEssentialsApiGetAllUserPagesRequest = {
    
    /**
    * The sort direction of the results.  Option descriptions:  * `asc` - Sort the results in ascending order.  * `desc` - Sort the results in descending order. 
    * @type {'asc' | 'desc'}
    * @memberof OnDemandEssentialsApiGetAllUserPages
    */
    readonly direction?: 'asc' | 'desc'
    
    /**
    * The type of the page to return.  Option descriptions:  * `film` - The page type is a film.  * `series` - The page type is a series. 
    * @type {'film' | 'series'}
    * @memberof OnDemandEssentialsApiGetAllUserPages
    */
    readonly filter?: 'film' | 'series'
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof OnDemandEssentialsApiGetAllUserPages
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof OnDemandEssentialsApiGetAllUserPages
    */
    readonly perPage?: number
    
    /**
    * The way to sort the results.  Option descriptions:  * `added` - Sort the results by most recently added page.  * `alphabetical` - Sort the results alphabetically.  * `date` - Sort the results by date.  * `modified_time` - Sort the results by time of page modification.  * `name` - Sort the results by page name.  * `publish.time` - Sort the results by time of page publishing.  * `rating` - Sort the results by content rating. 
    * @type {'added' | 'alphabetical' | 'date' | 'modified_time' | 'name' | 'publish.time' | 'rating'}
    * @memberof OnDemandEssentialsApiGetAllUserPages
    */
    readonly sort?: 'added' | 'alphabetical' | 'date' | 'modified_time' | 'name' | 'publish.time' | 'rating'
    
}

/**
 * Request parameters for getAllUserPages_1 operation in OnDemandEssentialsApi.
 * @export
 * @interface OnDemandEssentialsApiGetAllUserPages0Request
 */
export type OnDemandEssentialsApiGetAllUserPages0Request = {
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof OnDemandEssentialsApiGetAllUserPages0
    */
    readonly userId: number
    
    /**
    * The sort direction of the results.  Option descriptions:  * `asc` - Sort the results in ascending order.  * `desc` - Sort the results in descending order. 
    * @type {'asc' | 'desc'}
    * @memberof OnDemandEssentialsApiGetAllUserPages0
    */
    readonly direction?: 'asc' | 'desc'
    
    /**
    * The type of the page to return.  Option descriptions:  * `film` - The page type is a film.  * `series` - The page type is a series. 
    * @type {'film' | 'series'}
    * @memberof OnDemandEssentialsApiGetAllUserPages0
    */
    readonly filter?: 'film' | 'series'
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof OnDemandEssentialsApiGetAllUserPages0
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof OnDemandEssentialsApiGetAllUserPages0
    */
    readonly perPage?: number
    
    /**
    * The way to sort the results.  Option descriptions:  * `added` - Sort the results by most recently added page.  * `alphabetical` - Sort the results alphabetically.  * `date` - Sort the results by date.  * `modified_time` - Sort the results by time of page modification.  * `name` - Sort the results by page name.  * `publish.time` - Sort the results by time of page publishing.  * `rating` - Sort the results by content rating. 
    * @type {'added' | 'alphabetical' | 'date' | 'modified_time' | 'name' | 'publish.time' | 'rating'}
    * @memberof OnDemandEssentialsApiGetAllUserPages0
    */
    readonly sort?: 'added' | 'alphabetical' | 'date' | 'modified_time' | 'name' | 'publish.time' | 'rating'
    
}

/**
 * Request parameters for vod operation in OnDemandEssentialsApi.
 * @export
 * @interface OnDemandEssentialsApiVodRequest
 */
export type OnDemandEssentialsApiVodRequest = {
    
    /**
    * The ID of the On Demand page.
    * @type {number}
    * @memberof OnDemandEssentialsApiVod
    */
    readonly ondemandId: number
    
}

/**
 * Request parameters for vod_2 operation in OnDemandEssentialsApi.
 * @export
 * @interface OnDemandEssentialsApiVod0Request
 */
export type OnDemandEssentialsApiVod0Request = {
    
    /**
    * The ID of the On Demand page.
    * @type {number}
    * @memberof OnDemandEssentialsApiVod0
    */
    readonly ondemandId: number
    
} & EditVodRequest

/**
 * Request parameters for vod_3 operation in OnDemandEssentialsApi.
 * @export
 * @interface OnDemandEssentialsApiVod1Request
 */
export type OnDemandEssentialsApiVod1Request = {
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof OnDemandEssentialsApiVod1
    */
    readonly userId: number
    
} & CreateVodRequest

/**
 * OnDemandEssentialsApiGenerated - object-oriented interface
 * @export
 * @class OnDemandEssentialsApiGenerated
 * @extends {BaseAPI}
 */
export class OnDemandEssentialsApiGenerated extends BaseAPI {
    /**
     * This method creates a new On Demand page for the specified user. To publish the page, use the [edit](https://developer.vimeo.com/api/reference/on-demand#edit_vod) method.
     * @summary Create an On Demand page
     * @param {OnDemandEssentialsApiCreatePageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnDemandEssentialsApiGenerated
     */
    public createPage(requestParameters: OnDemandEssentialsApiCreatePageRequest, options?: AxiosRequestConfig) {
        return OnDemandEssentialsApiFp(this.configuration).createPage(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method deletes the specified On Demand page.
     * @summary Delete an On Demand page
     * @param {OnDemandEssentialsApiDeleteOnDemandPageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnDemandEssentialsApiGenerated
     */
    public deleteOnDemandPage(requestParameters: OnDemandEssentialsApiDeleteOnDemandPageRequest, options?: AxiosRequestConfig) {
        return OnDemandEssentialsApiFp(this.configuration).deleteOnDemandPage(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every On Demand page belonging to the authenticated user.
     * @summary Get all the On Demand pages of the user
     * @param {OnDemandEssentialsApiGetAllUserPagesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnDemandEssentialsApiGenerated
     */
    public getAllUserPages(requestParameters: OnDemandEssentialsApiGetAllUserPagesRequest = {}, options?: AxiosRequestConfig) {
        return OnDemandEssentialsApiFp(this.configuration).getAllUserPages(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every On Demand page belonging to the authenticated user.
     * @summary Get all the On Demand pages of the user
     * @param {OnDemandEssentialsApiGetAllUserPages0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnDemandEssentialsApiGenerated
     */
    public getAllUserPages_1(requestParameters: OnDemandEssentialsApiGetAllUserPages0Request, options?: AxiosRequestConfig) {
        return OnDemandEssentialsApiFp(this.configuration).getAllUserPages_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns the specified On Demand page.
     * @summary Get a specific On Demand page
     * @param {OnDemandEssentialsApiVodRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnDemandEssentialsApiGenerated
     */
    public vod(requestParameters: OnDemandEssentialsApiVodRequest, options?: AxiosRequestConfig) {
        return OnDemandEssentialsApiFp(this.configuration).vod(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method edits the specified On Demand page. Use this method to enable preorders on the page or to publish the page.
     * @summary Edit an On Demand page
     * @param {OnDemandEssentialsApiVod0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnDemandEssentialsApiGenerated
     */
    public vod_2(requestParameters: OnDemandEssentialsApiVod0Request, options?: AxiosRequestConfig) {
        return OnDemandEssentialsApiFp(this.configuration).vod_2(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method creates a new On Demand page for the specified user. To publish the page, use the [edit](https://developer.vimeo.com/api/reference/on-demand#edit_vod) method.
     * @summary Create an On Demand page
     * @param {OnDemandEssentialsApiVod1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnDemandEssentialsApiGenerated
     */
    public vod_3(requestParameters: OnDemandEssentialsApiVod1Request, options?: AxiosRequestConfig) {
        return OnDemandEssentialsApiFp(this.configuration).vod_3(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
