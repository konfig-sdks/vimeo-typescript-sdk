/* tslint:disable */
/* eslint-disable */
/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

The version of the OpenAPI document: 3.4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Picture } from '../models';
// @ts-ignore
import { VideosThumbnailsAddThumbnailToVideoRequest } from '../models';
// @ts-ignore
import { VideosThumbnailsAddThumbnailToVideoRequest1 } from '../models';
// @ts-ignore
import { VideosThumbnailsEditThumbnailImageRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * VideosThumbnailsApi - axios parameter creator
 * @export
 */
export const VideosThumbnailsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method adds a thumbnail image to the specified video. The authenticated user must have team permissions for the video.
         * @summary Add a video thumbnail
         * @param {number} channelId The ID of the channel.
         * @param {number} videoId The ID of the video.
         * @param {VideosThumbnailsAddThumbnailToVideoRequest} [videosThumbnailsAddThumbnailToVideoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addThumbnailToVideo: async (channelId: number, videoId: number, videosThumbnailsAddThumbnailToVideoRequest?: VideosThumbnailsAddThumbnailToVideoRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('addThumbnailToVideo', 'channelId', channelId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('addThumbnailToVideo', 'videoId', videoId)
            const localVarPath = `/channels/{channel_id}/videos/{video_id}/pictures`
                .replace(`{${"channel_id"}}`, encodeURIComponent(String(channelId !== undefined ? channelId : `-channel_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["upload"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["upload"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.vimeo.picture+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: videosThumbnailsAddThumbnailToVideoRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/channels/{channel_id}/videos/{video_id}/pictures',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(videosThumbnailsAddThumbnailToVideoRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method adds a thumbnail image to the specified video. The authenticated user must have team permissions for the video.
         * @summary Add a video thumbnail
         * @param {number} videoId The ID of the video.
         * @param {VideosThumbnailsAddThumbnailToVideoRequest1} [videosThumbnailsAddThumbnailToVideoRequest1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addThumbnailToVideo_1: async (videoId: number, videosThumbnailsAddThumbnailToVideoRequest1?: VideosThumbnailsAddThumbnailToVideoRequest1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('addThumbnailToVideo_1', 'videoId', videoId)
            const localVarPath = `/videos/{video_id}/pictures`
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["upload"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["upload"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.vimeo.picture+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: videosThumbnailsAddThumbnailToVideoRequest1,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/videos/{video_id}/pictures',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(videosThumbnailsAddThumbnailToVideoRequest1, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method deletes the specified thumbnail image from a video. The authenticated user must have team permissions for the video.
         * @summary Delete a video thumbnail
         * @param {number} pictureId The ID of the thumbnail.
         * @param {number} videoId The ID of the video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteThumbnailFromVideo: async (pictureId: number, videoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pictureId' is not null or undefined
            assertParamExists('deleteThumbnailFromVideo', 'pictureId', pictureId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('deleteThumbnailFromVideo', 'videoId', videoId)
            const localVarPath = `/videos/{video_id}/pictures/{picture_id}`
                .replace(`{${"picture_id"}}`, encodeURIComponent(String(pictureId !== undefined ? pictureId : `-picture_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/videos/{video_id}/pictures/{picture_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method edits the specified video thumbnail image. The authenticated user must be the owner of the thumbnail.
         * @summary Edit a video thumbnail
         * @param {number} pictureId The ID of the thumbnail.
         * @param {number} videoId The ID of the video.
         * @param {VideosThumbnailsEditThumbnailImageRequest} [videosThumbnailsEditThumbnailImageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editThumbnailImage: async (pictureId: number, videoId: number, videosThumbnailsEditThumbnailImageRequest?: VideosThumbnailsEditThumbnailImageRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pictureId' is not null or undefined
            assertParamExists('editThumbnailImage', 'pictureId', pictureId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('editThumbnailImage', 'videoId', videoId)
            const localVarPath = `/videos/{video_id}/pictures/{picture_id}`
                .replace(`{${"picture_id"}}`, encodeURIComponent(String(pictureId !== undefined ? pictureId : `-picture_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.vimeo.picture+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: videosThumbnailsEditThumbnailImageRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/videos/{video_id}/pictures/{picture_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(videosThumbnailsEditThumbnailImageRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns all thumbnail images of the specified video. The authenticated user must have team permissions for the video.
         * @summary Get all the thumbnails of a video
         * @param {number} channelId The ID of the channel.
         * @param {number} videoId The ID of the video.
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllByVideoId: async (channelId: number, videoId: number, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('getAllByVideoId', 'channelId', channelId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('getAllByVideoId', 'videoId', videoId)
            const localVarPath = `/channels/{channel_id}/videos/{video_id}/pictures`
                .replace(`{${"channel_id"}}`, encodeURIComponent(String(channelId !== undefined ? channelId : `-channel_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/channels/{channel_id}/videos/{video_id}/pictures',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns all thumbnail images of the specified video. The authenticated user must have team permissions for the video.
         * @summary Get all the thumbnails of a video
         * @param {number} videoId The ID of the video.
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllByVideoId_2: async (videoId: number, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('getAllByVideoId_2', 'videoId', videoId)
            const localVarPath = `/videos/{video_id}/pictures`
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/videos/{video_id}/pictures',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns a single thumbnail image from the specified video. The authenticated user must have team permissions for the video.
         * @summary Get a specific video thumbnail
         * @param {number} pictureId The ID of the thumbnail.
         * @param {number} videoId The ID of the video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getThumbnailFromVideo: async (pictureId: number, videoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pictureId' is not null or undefined
            assertParamExists('getThumbnailFromVideo', 'pictureId', pictureId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('getThumbnailFromVideo', 'videoId', videoId)
            const localVarPath = `/videos/{video_id}/pictures/{picture_id}`
                .replace(`{${"picture_id"}}`, encodeURIComponent(String(pictureId !== undefined ? pictureId : `-picture_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/videos/{video_id}/pictures/{picture_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VideosThumbnailsApi - functional programming interface
 * @export
 */
export const VideosThumbnailsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VideosThumbnailsApiAxiosParamCreator(configuration)
    return {
        /**
         * This method adds a thumbnail image to the specified video. The authenticated user must have team permissions for the video.
         * @summary Add a video thumbnail
         * @param {VideosThumbnailsApiAddThumbnailToVideoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addThumbnailToVideo(requestParameters: VideosThumbnailsApiAddThumbnailToVideoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Picture>> {
            const videosThumbnailsAddThumbnailToVideoRequest: VideosThumbnailsAddThumbnailToVideoRequest = {
                active: requestParameters.active,
                time: requestParameters.time
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addThumbnailToVideo(requestParameters.channelId, requestParameters.videoId, videosThumbnailsAddThumbnailToVideoRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method adds a thumbnail image to the specified video. The authenticated user must have team permissions for the video.
         * @summary Add a video thumbnail
         * @param {VideosThumbnailsApiAddThumbnailToVideo0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addThumbnailToVideo_1(requestParameters: VideosThumbnailsApiAddThumbnailToVideo0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Picture>> {
            const videosThumbnailsAddThumbnailToVideoRequest1: VideosThumbnailsAddThumbnailToVideoRequest1 = {
                active: requestParameters.active,
                time: requestParameters.time
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addThumbnailToVideo_1(requestParameters.videoId, videosThumbnailsAddThumbnailToVideoRequest1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method deletes the specified thumbnail image from a video. The authenticated user must have team permissions for the video.
         * @summary Delete a video thumbnail
         * @param {VideosThumbnailsApiDeleteThumbnailFromVideoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteThumbnailFromVideo(requestParameters: VideosThumbnailsApiDeleteThumbnailFromVideoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteThumbnailFromVideo(requestParameters.pictureId, requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method edits the specified video thumbnail image. The authenticated user must be the owner of the thumbnail.
         * @summary Edit a video thumbnail
         * @param {VideosThumbnailsApiEditThumbnailImageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editThumbnailImage(requestParameters: VideosThumbnailsApiEditThumbnailImageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Picture>> {
            const videosThumbnailsEditThumbnailImageRequest: VideosThumbnailsEditThumbnailImageRequest = {
                active: requestParameters.active
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.editThumbnailImage(requestParameters.pictureId, requestParameters.videoId, videosThumbnailsEditThumbnailImageRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns all thumbnail images of the specified video. The authenticated user must have team permissions for the video.
         * @summary Get all the thumbnails of a video
         * @param {VideosThumbnailsApiGetAllByVideoIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllByVideoId(requestParameters: VideosThumbnailsApiGetAllByVideoIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Picture>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllByVideoId(requestParameters.channelId, requestParameters.videoId, requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns all thumbnail images of the specified video. The authenticated user must have team permissions for the video.
         * @summary Get all the thumbnails of a video
         * @param {VideosThumbnailsApiGetAllByVideoId0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllByVideoId_2(requestParameters: VideosThumbnailsApiGetAllByVideoId0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Picture>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllByVideoId_2(requestParameters.videoId, requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns a single thumbnail image from the specified video. The authenticated user must have team permissions for the video.
         * @summary Get a specific video thumbnail
         * @param {VideosThumbnailsApiGetThumbnailFromVideoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getThumbnailFromVideo(requestParameters: VideosThumbnailsApiGetThumbnailFromVideoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Picture>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getThumbnailFromVideo(requestParameters.pictureId, requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VideosThumbnailsApi - factory interface
 * @export
 */
export const VideosThumbnailsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VideosThumbnailsApiFp(configuration)
    return {
        /**
         * This method adds a thumbnail image to the specified video. The authenticated user must have team permissions for the video.
         * @summary Add a video thumbnail
         * @param {VideosThumbnailsApiAddThumbnailToVideoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addThumbnailToVideo(requestParameters: VideosThumbnailsApiAddThumbnailToVideoRequest, options?: AxiosRequestConfig): AxiosPromise<Picture> {
            return localVarFp.addThumbnailToVideo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method adds a thumbnail image to the specified video. The authenticated user must have team permissions for the video.
         * @summary Add a video thumbnail
         * @param {VideosThumbnailsApiAddThumbnailToVideo0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addThumbnailToVideo_1(requestParameters: VideosThumbnailsApiAddThumbnailToVideo0Request, options?: AxiosRequestConfig): AxiosPromise<Picture> {
            return localVarFp.addThumbnailToVideo_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method deletes the specified thumbnail image from a video. The authenticated user must have team permissions for the video.
         * @summary Delete a video thumbnail
         * @param {VideosThumbnailsApiDeleteThumbnailFromVideoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteThumbnailFromVideo(requestParameters: VideosThumbnailsApiDeleteThumbnailFromVideoRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteThumbnailFromVideo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method edits the specified video thumbnail image. The authenticated user must be the owner of the thumbnail.
         * @summary Edit a video thumbnail
         * @param {VideosThumbnailsApiEditThumbnailImageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editThumbnailImage(requestParameters: VideosThumbnailsApiEditThumbnailImageRequest, options?: AxiosRequestConfig): AxiosPromise<Picture> {
            return localVarFp.editThumbnailImage(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns all thumbnail images of the specified video. The authenticated user must have team permissions for the video.
         * @summary Get all the thumbnails of a video
         * @param {VideosThumbnailsApiGetAllByVideoIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllByVideoId(requestParameters: VideosThumbnailsApiGetAllByVideoIdRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Picture>> {
            return localVarFp.getAllByVideoId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns all thumbnail images of the specified video. The authenticated user must have team permissions for the video.
         * @summary Get all the thumbnails of a video
         * @param {VideosThumbnailsApiGetAllByVideoId0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllByVideoId_2(requestParameters: VideosThumbnailsApiGetAllByVideoId0Request, options?: AxiosRequestConfig): AxiosPromise<Array<Picture>> {
            return localVarFp.getAllByVideoId_2(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns a single thumbnail image from the specified video. The authenticated user must have team permissions for the video.
         * @summary Get a specific video thumbnail
         * @param {VideosThumbnailsApiGetThumbnailFromVideoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getThumbnailFromVideo(requestParameters: VideosThumbnailsApiGetThumbnailFromVideoRequest, options?: AxiosRequestConfig): AxiosPromise<Picture> {
            return localVarFp.getThumbnailFromVideo(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addThumbnailToVideo operation in VideosThumbnailsApi.
 * @export
 * @interface VideosThumbnailsApiAddThumbnailToVideoRequest
 */
export type VideosThumbnailsApiAddThumbnailToVideoRequest = {
    
    /**
    * The ID of the channel.
    * @type {number}
    * @memberof VideosThumbnailsApiAddThumbnailToVideo
    */
    readonly channelId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof VideosThumbnailsApiAddThumbnailToVideo
    */
    readonly videoId: number
    
} & VideosThumbnailsAddThumbnailToVideoRequest

/**
 * Request parameters for addThumbnailToVideo_1 operation in VideosThumbnailsApi.
 * @export
 * @interface VideosThumbnailsApiAddThumbnailToVideo0Request
 */
export type VideosThumbnailsApiAddThumbnailToVideo0Request = {
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof VideosThumbnailsApiAddThumbnailToVideo0
    */
    readonly videoId: number
    
} & VideosThumbnailsAddThumbnailToVideoRequest1

/**
 * Request parameters for deleteThumbnailFromVideo operation in VideosThumbnailsApi.
 * @export
 * @interface VideosThumbnailsApiDeleteThumbnailFromVideoRequest
 */
export type VideosThumbnailsApiDeleteThumbnailFromVideoRequest = {
    
    /**
    * The ID of the thumbnail.
    * @type {number}
    * @memberof VideosThumbnailsApiDeleteThumbnailFromVideo
    */
    readonly pictureId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof VideosThumbnailsApiDeleteThumbnailFromVideo
    */
    readonly videoId: number
    
}

/**
 * Request parameters for editThumbnailImage operation in VideosThumbnailsApi.
 * @export
 * @interface VideosThumbnailsApiEditThumbnailImageRequest
 */
export type VideosThumbnailsApiEditThumbnailImageRequest = {
    
    /**
    * The ID of the thumbnail.
    * @type {number}
    * @memberof VideosThumbnailsApiEditThumbnailImage
    */
    readonly pictureId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof VideosThumbnailsApiEditThumbnailImage
    */
    readonly videoId: number
    
} & VideosThumbnailsEditThumbnailImageRequest

/**
 * Request parameters for getAllByVideoId operation in VideosThumbnailsApi.
 * @export
 * @interface VideosThumbnailsApiGetAllByVideoIdRequest
 */
export type VideosThumbnailsApiGetAllByVideoIdRequest = {
    
    /**
    * The ID of the channel.
    * @type {number}
    * @memberof VideosThumbnailsApiGetAllByVideoId
    */
    readonly channelId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof VideosThumbnailsApiGetAllByVideoId
    */
    readonly videoId: number
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof VideosThumbnailsApiGetAllByVideoId
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof VideosThumbnailsApiGetAllByVideoId
    */
    readonly perPage?: number
    
}

/**
 * Request parameters for getAllByVideoId_2 operation in VideosThumbnailsApi.
 * @export
 * @interface VideosThumbnailsApiGetAllByVideoId0Request
 */
export type VideosThumbnailsApiGetAllByVideoId0Request = {
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof VideosThumbnailsApiGetAllByVideoId0
    */
    readonly videoId: number
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof VideosThumbnailsApiGetAllByVideoId0
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof VideosThumbnailsApiGetAllByVideoId0
    */
    readonly perPage?: number
    
}

/**
 * Request parameters for getThumbnailFromVideo operation in VideosThumbnailsApi.
 * @export
 * @interface VideosThumbnailsApiGetThumbnailFromVideoRequest
 */
export type VideosThumbnailsApiGetThumbnailFromVideoRequest = {
    
    /**
    * The ID of the thumbnail.
    * @type {number}
    * @memberof VideosThumbnailsApiGetThumbnailFromVideo
    */
    readonly pictureId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof VideosThumbnailsApiGetThumbnailFromVideo
    */
    readonly videoId: number
    
}

/**
 * VideosThumbnailsApiGenerated - object-oriented interface
 * @export
 * @class VideosThumbnailsApiGenerated
 * @extends {BaseAPI}
 */
export class VideosThumbnailsApiGenerated extends BaseAPI {
    /**
     * This method adds a thumbnail image to the specified video. The authenticated user must have team permissions for the video.
     * @summary Add a video thumbnail
     * @param {VideosThumbnailsApiAddThumbnailToVideoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosThumbnailsApiGenerated
     */
    public addThumbnailToVideo(requestParameters: VideosThumbnailsApiAddThumbnailToVideoRequest, options?: AxiosRequestConfig) {
        return VideosThumbnailsApiFp(this.configuration).addThumbnailToVideo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method adds a thumbnail image to the specified video. The authenticated user must have team permissions for the video.
     * @summary Add a video thumbnail
     * @param {VideosThumbnailsApiAddThumbnailToVideo0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosThumbnailsApiGenerated
     */
    public addThumbnailToVideo_1(requestParameters: VideosThumbnailsApiAddThumbnailToVideo0Request, options?: AxiosRequestConfig) {
        return VideosThumbnailsApiFp(this.configuration).addThumbnailToVideo_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method deletes the specified thumbnail image from a video. The authenticated user must have team permissions for the video.
     * @summary Delete a video thumbnail
     * @param {VideosThumbnailsApiDeleteThumbnailFromVideoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosThumbnailsApiGenerated
     */
    public deleteThumbnailFromVideo(requestParameters: VideosThumbnailsApiDeleteThumbnailFromVideoRequest, options?: AxiosRequestConfig) {
        return VideosThumbnailsApiFp(this.configuration).deleteThumbnailFromVideo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method edits the specified video thumbnail image. The authenticated user must be the owner of the thumbnail.
     * @summary Edit a video thumbnail
     * @param {VideosThumbnailsApiEditThumbnailImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosThumbnailsApiGenerated
     */
    public editThumbnailImage(requestParameters: VideosThumbnailsApiEditThumbnailImageRequest, options?: AxiosRequestConfig) {
        return VideosThumbnailsApiFp(this.configuration).editThumbnailImage(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns all thumbnail images of the specified video. The authenticated user must have team permissions for the video.
     * @summary Get all the thumbnails of a video
     * @param {VideosThumbnailsApiGetAllByVideoIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosThumbnailsApiGenerated
     */
    public getAllByVideoId(requestParameters: VideosThumbnailsApiGetAllByVideoIdRequest, options?: AxiosRequestConfig) {
        return VideosThumbnailsApiFp(this.configuration).getAllByVideoId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns all thumbnail images of the specified video. The authenticated user must have team permissions for the video.
     * @summary Get all the thumbnails of a video
     * @param {VideosThumbnailsApiGetAllByVideoId0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosThumbnailsApiGenerated
     */
    public getAllByVideoId_2(requestParameters: VideosThumbnailsApiGetAllByVideoId0Request, options?: AxiosRequestConfig) {
        return VideosThumbnailsApiFp(this.configuration).getAllByVideoId_2(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns a single thumbnail image from the specified video. The authenticated user must have team permissions for the video.
     * @summary Get a specific video thumbnail
     * @param {VideosThumbnailsApiGetThumbnailFromVideoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosThumbnailsApiGenerated
     */
    public getThumbnailFromVideo(requestParameters: VideosThumbnailsApiGetThumbnailFromVideoRequest, options?: AxiosRequestConfig) {
        return VideosThumbnailsApiFp(this.configuration).getThumbnailFromVideo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
