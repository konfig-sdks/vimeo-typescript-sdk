/* tslint:disable */
/* eslint-disable */
/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

The version of the OpenAPI document: 3.4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { LegacyError } from '../models';
// @ts-ignore
import { Video } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * UsersWatchHistoryApi - axios parameter creator
 * @export
 */
export const UsersWatchHistoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method deletes the entire watch history of the authenticated user.
         * @summary Delete the user\'s watch history
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntireWatchHistory: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/watched/videos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["delete"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["delete"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/watched/videos',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method deletes the specified video from the authenticated user\'s watch history.
         * @summary Delete a specific video from the user\'s watch history
         * @param {number} videoId The ID of the video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSpecificVideo: async (videoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('deleteSpecificVideo', 'videoId', videoId)
            const localVarPath = `/me/watched/videos/{video_id}`
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["delete"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["delete"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/watched/videos/{video_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every video on the authenticated user\'s watch history. _This endpoint is deprecated. Any request to it returns empty data with HTTP status code 200._
         * @summary Get all the videos that a user has watched
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWatchedVideos: async (page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/watched/videos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/watched/videos',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersWatchHistoryApi - functional programming interface
 * @export
 */
export const UsersWatchHistoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersWatchHistoryApiAxiosParamCreator(configuration)
    return {
        /**
         * This method deletes the entire watch history of the authenticated user.
         * @summary Delete the user\'s watch history
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEntireWatchHistory(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEntireWatchHistory(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method deletes the specified video from the authenticated user\'s watch history.
         * @summary Delete a specific video from the user\'s watch history
         * @param {UsersWatchHistoryApiDeleteSpecificVideoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSpecificVideo(requestParameters: UsersWatchHistoryApiDeleteSpecificVideoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSpecificVideo(requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every video on the authenticated user\'s watch history. _This endpoint is deprecated. Any request to it returns empty data with HTTP status code 200._
         * @summary Get all the videos that a user has watched
         * @param {UsersWatchHistoryApiGetWatchedVideosRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWatchedVideos(requestParameters: UsersWatchHistoryApiGetWatchedVideosRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Video>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWatchedVideos(requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersWatchHistoryApi - factory interface
 * @export
 */
export const UsersWatchHistoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersWatchHistoryApiFp(configuration)
    return {
        /**
         * This method deletes the entire watch history of the authenticated user.
         * @summary Delete the user\'s watch history
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntireWatchHistory(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteEntireWatchHistory(options).then((request) => request(axios, basePath));
        },
        /**
         * This method deletes the specified video from the authenticated user\'s watch history.
         * @summary Delete a specific video from the user\'s watch history
         * @param {UsersWatchHistoryApiDeleteSpecificVideoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSpecificVideo(requestParameters: UsersWatchHistoryApiDeleteSpecificVideoRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteSpecificVideo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every video on the authenticated user\'s watch history. _This endpoint is deprecated. Any request to it returns empty data with HTTP status code 200._
         * @summary Get all the videos that a user has watched
         * @param {UsersWatchHistoryApiGetWatchedVideosRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWatchedVideos(requestParameters: UsersWatchHistoryApiGetWatchedVideosRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<Video>> {
            return localVarFp.getWatchedVideos(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteSpecificVideo operation in UsersWatchHistoryApi.
 * @export
 * @interface UsersWatchHistoryApiDeleteSpecificVideoRequest
 */
export type UsersWatchHistoryApiDeleteSpecificVideoRequest = {
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof UsersWatchHistoryApiDeleteSpecificVideo
    */
    readonly videoId: number
    
}

/**
 * Request parameters for getWatchedVideos operation in UsersWatchHistoryApi.
 * @export
 * @interface UsersWatchHistoryApiGetWatchedVideosRequest
 */
export type UsersWatchHistoryApiGetWatchedVideosRequest = {
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof UsersWatchHistoryApiGetWatchedVideos
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof UsersWatchHistoryApiGetWatchedVideos
    */
    readonly perPage?: number
    
}

/**
 * UsersWatchHistoryApiGenerated - object-oriented interface
 * @export
 * @class UsersWatchHistoryApiGenerated
 * @extends {BaseAPI}
 */
export class UsersWatchHistoryApiGenerated extends BaseAPI {
    /**
     * This method deletes the entire watch history of the authenticated user.
     * @summary Delete the user\'s watch history
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersWatchHistoryApiGenerated
     */
    public deleteEntireWatchHistory(options?: AxiosRequestConfig) {
        return UsersWatchHistoryApiFp(this.configuration).deleteEntireWatchHistory(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method deletes the specified video from the authenticated user\'s watch history.
     * @summary Delete a specific video from the user\'s watch history
     * @param {UsersWatchHistoryApiDeleteSpecificVideoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersWatchHistoryApiGenerated
     */
    public deleteSpecificVideo(requestParameters: UsersWatchHistoryApiDeleteSpecificVideoRequest, options?: AxiosRequestConfig) {
        return UsersWatchHistoryApiFp(this.configuration).deleteSpecificVideo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every video on the authenticated user\'s watch history. _This endpoint is deprecated. Any request to it returns empty data with HTTP status code 200._
     * @summary Get all the videos that a user has watched
     * @param {UsersWatchHistoryApiGetWatchedVideosRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersWatchHistoryApiGenerated
     */
    public getWatchedVideos(requestParameters: UsersWatchHistoryApiGetWatchedVideosRequest = {}, options?: AxiosRequestConfig) {
        return UsersWatchHistoryApiFp(this.configuration).getWatchedVideos(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
