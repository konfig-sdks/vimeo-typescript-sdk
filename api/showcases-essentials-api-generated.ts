/* tslint:disable */
/* eslint-disable */
/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

The version of the OpenAPI document: 3.4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Album } from '../models';
// @ts-ignore
import { CreateShowcaseRequest } from '../models';
// @ts-ignore
import { EditShowcaseRequest } from '../models';
// @ts-ignore
import { LegacyError } from '../models';
// @ts-ignore
import { ShowcasesEssentialsCreateUserShowcaseRequest } from '../models';
// @ts-ignore
import { ShowcasesEssentialsEditShowcaseRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ShowcasesEssentialsApi - axios parameter creator
 * @export
 */
export const ShowcasesEssentialsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method creates a new showcase for the specified user.
         * @summary Create a showcase
         * @param {ShowcasesEssentialsCreateUserShowcaseRequest} showcasesEssentialsCreateUserShowcaseRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserShowcase: async (showcasesEssentialsCreateUserShowcaseRequest: ShowcasesEssentialsCreateUserShowcaseRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'showcasesEssentialsCreateUserShowcaseRequest' is not null or undefined
            assertParamExists('createUserShowcase', 'showcasesEssentialsCreateUserShowcaseRequest', showcasesEssentialsCreateUserShowcaseRequest)
            const localVarPath = `/me/albums`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.vimeo.album+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: showcasesEssentialsCreateUserShowcaseRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/albums',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(showcasesEssentialsCreateUserShowcaseRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method deletes the specified showcase. The authenticated user must be the owner of the showcase.
         * @summary Delete a showcase
         * @param {number} albumId The ID of the showcase.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteShowcase: async (albumId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'albumId' is not null or undefined
            assertParamExists('deleteShowcase', 'albumId', albumId)
            const localVarPath = `/me/albums/{album_id}`
                .replace(`{${"album_id"}}`, encodeURIComponent(String(albumId !== undefined ? albumId : `-album_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["delete"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["delete"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/albums/{album_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method edits the specified showcase. The authenticated user must be the owner of the showcase.
         * @summary Edit a showcase
         * @param {number} albumId The ID of the showcase.
         * @param {ShowcasesEssentialsEditShowcaseRequest} [showcasesEssentialsEditShowcaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editShowcase: async (albumId: number, showcasesEssentialsEditShowcaseRequest?: ShowcasesEssentialsEditShowcaseRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'albumId' is not null or undefined
            assertParamExists('editShowcase', 'albumId', albumId)
            const localVarPath = `/me/albums/{album_id}`
                .replace(`{${"album_id"}}`, encodeURIComponent(String(albumId !== undefined ? albumId : `-album_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.vimeo.album+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: showcasesEssentialsEditShowcaseRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/albums/{album_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(showcasesEssentialsEditShowcaseRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every showcase belonging to the authenticated user.
         * @summary Get all the showcases that belong to the user
         * @param {'asc' | 'desc'} [direction] The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order. 
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {string} [query] The search query to use to filter the results.
         * @param {'alphabetical' | 'date' | 'duration' | 'videos'} [sort] The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date of creation.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;videos&#x60; - Sort the results by the number of videos. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUserShowcases: async (direction?: 'asc' | 'desc', page?: number, perPage?: number, query?: string, sort?: 'alphabetical' | 'date' | 'duration' | 'videos', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/albums`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/albums',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns the specified showcase. The authenticated user must be the owner of the showcase.
         * @summary Get a specific showcase
         * @param {number} albumId The ID of the showcase.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificShowcase: async (albumId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'albumId' is not null or undefined
            assertParamExists('getSpecificShowcase', 'albumId', albumId)
            const localVarPath = `/me/albums/{album_id}`
                .replace(`{${"album_id"}}`, encodeURIComponent(String(albumId !== undefined ? albumId : `-album_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/albums/{album_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method creates a new showcase for the specified user.
         * @summary Create a showcase
         * @param {number} userId The ID of the user.
         * @param {CreateShowcaseRequest} createShowcaseRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showcase: async (userId: number, createShowcaseRequest: CreateShowcaseRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('showcase', 'userId', userId)
            // verify required parameter 'createShowcaseRequest' is not null or undefined
            assertParamExists('showcase', 'createShowcaseRequest', createShowcaseRequest)
            const localVarPath = `/users/{user_id}/albums`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.vimeo.album+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createShowcaseRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/albums',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createShowcaseRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns the specified showcase. The authenticated user must be the owner of the showcase.
         * @summary Get a specific showcase
         * @param {number} albumId The ID of the showcase.
         * @param {number} userId The ID of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showcase_1: async (albumId: number, userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'albumId' is not null or undefined
            assertParamExists('showcase_1', 'albumId', albumId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('showcase_1', 'userId', userId)
            const localVarPath = `/users/{user_id}/albums/{album_id}`
                .replace(`{${"album_id"}}`, encodeURIComponent(String(albumId !== undefined ? albumId : `-album_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/albums/{album_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method deletes the specified showcase. The authenticated user must be the owner of the showcase.
         * @summary Delete a showcase
         * @param {number} albumId The ID of the showcase.
         * @param {number} userId The ID of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showcase_2: async (albumId: number, userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'albumId' is not null or undefined
            assertParamExists('showcase_2', 'albumId', albumId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('showcase_2', 'userId', userId)
            const localVarPath = `/users/{user_id}/albums/{album_id}`
                .replace(`{${"album_id"}}`, encodeURIComponent(String(albumId !== undefined ? albumId : `-album_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["delete"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["delete"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/albums/{album_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method edits the specified showcase. The authenticated user must be the owner of the showcase.
         * @summary Edit a showcase
         * @param {number} albumId The ID of the showcase.
         * @param {number} userId The ID of the user.
         * @param {EditShowcaseRequest} [editShowcaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showcase_3: async (albumId: number, userId: number, editShowcaseRequest?: EditShowcaseRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'albumId' is not null or undefined
            assertParamExists('showcase_3', 'albumId', albumId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('showcase_3', 'userId', userId)
            const localVarPath = `/users/{user_id}/albums/{album_id}`
                .replace(`{${"album_id"}}`, encodeURIComponent(String(albumId !== undefined ? albumId : `-album_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.vimeo.album+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: editShowcaseRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/albums/{album_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(editShowcaseRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every showcase belonging to the authenticated user.
         * @summary Get all the showcases that belong to the user
         * @param {number} userId The ID of the user.
         * @param {'asc' | 'desc'} [direction] The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order. 
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {string} [query] The search query to use to filter the results.
         * @param {'alphabetical' | 'date' | 'duration' | 'videos'} [sort] The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date of creation.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;videos&#x60; - Sort the results by the number of videos. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showcases: async (userId: number, direction?: 'asc' | 'desc', page?: number, perPage?: number, query?: string, sort?: 'alphabetical' | 'date' | 'duration' | 'videos', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('showcases', 'userId', userId)
            const localVarPath = `/users/{user_id}/albums`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/albums',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method adds videos and events to the specified showcases. The authenticated user must either be the owner of the showcase or have team permissions.  The present setup permits only one event per showcase.
         * @summary Add videos and live events to showcases
         * @param {number} userId The ID of the user.
         * @param {string} albumItemUris A comma-separated list of video or event URIs.
         * @param {string} albumUris A comma-separated list of showcase URIs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showcases_4: async (userId: number, albumItemUris: string, albumUris: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('showcases_4', 'userId', userId)
            // verify required parameter 'albumItemUris' is not null or undefined
            assertParamExists('showcases_4', 'albumItemUris', albumItemUris)
            // verify required parameter 'albumUris' is not null or undefined
            assertParamExists('showcases_4', 'albumUris', albumUris)
            const localVarPath = `/users/{user_id}/albums`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)
            if (albumItemUris !== undefined) {
                localVarQueryParameter['album_item_uris'] = albumItemUris;
            }

            if (albumUris !== undefined) {
                localVarQueryParameter['album_uris'] = albumUris;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/albums',
                httpMethod: 'PATCH'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShowcasesEssentialsApi - functional programming interface
 * @export
 */
export const ShowcasesEssentialsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShowcasesEssentialsApiAxiosParamCreator(configuration)
    return {
        /**
         * This method creates a new showcase for the specified user.
         * @summary Create a showcase
         * @param {ShowcasesEssentialsApiCreateUserShowcaseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUserShowcase(requestParameters: ShowcasesEssentialsApiCreateUserShowcaseRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Album>> {
            const showcasesEssentialsCreateUserShowcaseRequest: ShowcasesEssentialsCreateUserShowcaseRequest = {
                description: requestParameters.description,
                brand_color: requestParameters.brand_color,
                hide_from_vimeo: requestParameters.hide_from_vimeo,
                hide_nav: requestParameters.hide_nav,
                hide_upcoming: requestParameters.hide_upcoming,
                layout: requestParameters.layout,
                name: requestParameters.name,
                password: requestParameters.password,
                privacy: requestParameters.privacy,
                review_mode: requestParameters.review_mode,
                sort: requestParameters.sort,
                theme: requestParameters.theme
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUserShowcase(showcasesEssentialsCreateUserShowcaseRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method deletes the specified showcase. The authenticated user must be the owner of the showcase.
         * @summary Delete a showcase
         * @param {ShowcasesEssentialsApiDeleteShowcaseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteShowcase(requestParameters: ShowcasesEssentialsApiDeleteShowcaseRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteShowcase(requestParameters.albumId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method edits the specified showcase. The authenticated user must be the owner of the showcase.
         * @summary Edit a showcase
         * @param {ShowcasesEssentialsApiEditShowcaseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editShowcase(requestParameters: ShowcasesEssentialsApiEditShowcaseRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Album>> {
            const showcasesEssentialsEditShowcaseRequest: ShowcasesEssentialsEditShowcaseRequest = {
                description: requestParameters.description,
                brand_color: requestParameters.brand_color,
                domain: requestParameters.domain,
                hide_nav: requestParameters.hide_nav,
                hide_upcoming: requestParameters.hide_upcoming,
                layout: requestParameters.layout,
                name: requestParameters.name,
                password: requestParameters.password,
                privacy: requestParameters.privacy,
                review_mode: requestParameters.review_mode,
                sort: requestParameters.sort,
                theme: requestParameters.theme,
                url: requestParameters.url,
                use_custom_domain: requestParameters.use_custom_domain
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.editShowcase(requestParameters.albumId, showcasesEssentialsEditShowcaseRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every showcase belonging to the authenticated user.
         * @summary Get all the showcases that belong to the user
         * @param {ShowcasesEssentialsApiGetAllUserShowcasesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllUserShowcases(requestParameters: ShowcasesEssentialsApiGetAllUserShowcasesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Album>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllUserShowcases(requestParameters.direction, requestParameters.page, requestParameters.perPage, requestParameters.query, requestParameters.sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns the specified showcase. The authenticated user must be the owner of the showcase.
         * @summary Get a specific showcase
         * @param {ShowcasesEssentialsApiGetSpecificShowcaseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpecificShowcase(requestParameters: ShowcasesEssentialsApiGetSpecificShowcaseRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Album>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpecificShowcase(requestParameters.albumId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method creates a new showcase for the specified user.
         * @summary Create a showcase
         * @param {ShowcasesEssentialsApiShowcaseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showcase(requestParameters: ShowcasesEssentialsApiShowcaseRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Album>> {
            const createShowcaseRequest: CreateShowcaseRequest = {
                description: requestParameters.description,
                brand_color: requestParameters.brand_color,
                hide_from_vimeo: requestParameters.hide_from_vimeo,
                hide_nav: requestParameters.hide_nav,
                hide_upcoming: requestParameters.hide_upcoming,
                layout: requestParameters.layout,
                name: requestParameters.name,
                password: requestParameters.password,
                privacy: requestParameters.privacy,
                review_mode: requestParameters.review_mode,
                sort: requestParameters.sort,
                theme: requestParameters.theme
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.showcase(requestParameters.userId, createShowcaseRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns the specified showcase. The authenticated user must be the owner of the showcase.
         * @summary Get a specific showcase
         * @param {ShowcasesEssentialsApiShowcase0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showcase_1(requestParameters: ShowcasesEssentialsApiShowcase0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Album>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showcase_1(requestParameters.albumId, requestParameters.userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method deletes the specified showcase. The authenticated user must be the owner of the showcase.
         * @summary Delete a showcase
         * @param {ShowcasesEssentialsApiShowcase1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showcase_2(requestParameters: ShowcasesEssentialsApiShowcase1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showcase_2(requestParameters.albumId, requestParameters.userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method edits the specified showcase. The authenticated user must be the owner of the showcase.
         * @summary Edit a showcase
         * @param {ShowcasesEssentialsApiShowcase2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showcase_3(requestParameters: ShowcasesEssentialsApiShowcase2Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Album>> {
            const editShowcaseRequest: EditShowcaseRequest = {
                description: requestParameters.description,
                brand_color: requestParameters.brand_color,
                domain: requestParameters.domain,
                hide_nav: requestParameters.hide_nav,
                hide_upcoming: requestParameters.hide_upcoming,
                layout: requestParameters.layout,
                name: requestParameters.name,
                password: requestParameters.password,
                privacy: requestParameters.privacy,
                review_mode: requestParameters.review_mode,
                sort: requestParameters.sort,
                theme: requestParameters.theme,
                url: requestParameters.url,
                use_custom_domain: requestParameters.use_custom_domain
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.showcase_3(requestParameters.albumId, requestParameters.userId, editShowcaseRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every showcase belonging to the authenticated user.
         * @summary Get all the showcases that belong to the user
         * @param {ShowcasesEssentialsApiShowcasesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showcases(requestParameters: ShowcasesEssentialsApiShowcasesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Album>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showcases(requestParameters.userId, requestParameters.direction, requestParameters.page, requestParameters.perPage, requestParameters.query, requestParameters.sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method adds videos and events to the specified showcases. The authenticated user must either be the owner of the showcase or have team permissions.  The present setup permits only one event per showcase.
         * @summary Add videos and live events to showcases
         * @param {ShowcasesEssentialsApiShowcases0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showcases_4(requestParameters: ShowcasesEssentialsApiShowcases0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showcases_4(requestParameters.userId, requestParameters.albumItemUris, requestParameters.albumUris, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShowcasesEssentialsApi - factory interface
 * @export
 */
export const ShowcasesEssentialsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShowcasesEssentialsApiFp(configuration)
    return {
        /**
         * This method creates a new showcase for the specified user.
         * @summary Create a showcase
         * @param {ShowcasesEssentialsApiCreateUserShowcaseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserShowcase(requestParameters: ShowcasesEssentialsApiCreateUserShowcaseRequest, options?: AxiosRequestConfig): AxiosPromise<Album> {
            return localVarFp.createUserShowcase(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method deletes the specified showcase. The authenticated user must be the owner of the showcase.
         * @summary Delete a showcase
         * @param {ShowcasesEssentialsApiDeleteShowcaseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteShowcase(requestParameters: ShowcasesEssentialsApiDeleteShowcaseRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteShowcase(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method edits the specified showcase. The authenticated user must be the owner of the showcase.
         * @summary Edit a showcase
         * @param {ShowcasesEssentialsApiEditShowcaseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editShowcase(requestParameters: ShowcasesEssentialsApiEditShowcaseRequest, options?: AxiosRequestConfig): AxiosPromise<Album> {
            return localVarFp.editShowcase(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every showcase belonging to the authenticated user.
         * @summary Get all the showcases that belong to the user
         * @param {ShowcasesEssentialsApiGetAllUserShowcasesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUserShowcases(requestParameters: ShowcasesEssentialsApiGetAllUserShowcasesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<Album>> {
            return localVarFp.getAllUserShowcases(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns the specified showcase. The authenticated user must be the owner of the showcase.
         * @summary Get a specific showcase
         * @param {ShowcasesEssentialsApiGetSpecificShowcaseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificShowcase(requestParameters: ShowcasesEssentialsApiGetSpecificShowcaseRequest, options?: AxiosRequestConfig): AxiosPromise<Album> {
            return localVarFp.getSpecificShowcase(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method creates a new showcase for the specified user.
         * @summary Create a showcase
         * @param {ShowcasesEssentialsApiShowcaseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showcase(requestParameters: ShowcasesEssentialsApiShowcaseRequest, options?: AxiosRequestConfig): AxiosPromise<Album> {
            return localVarFp.showcase(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns the specified showcase. The authenticated user must be the owner of the showcase.
         * @summary Get a specific showcase
         * @param {ShowcasesEssentialsApiShowcase0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showcase_1(requestParameters: ShowcasesEssentialsApiShowcase0Request, options?: AxiosRequestConfig): AxiosPromise<Album> {
            return localVarFp.showcase_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method deletes the specified showcase. The authenticated user must be the owner of the showcase.
         * @summary Delete a showcase
         * @param {ShowcasesEssentialsApiShowcase1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showcase_2(requestParameters: ShowcasesEssentialsApiShowcase1Request, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.showcase_2(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method edits the specified showcase. The authenticated user must be the owner of the showcase.
         * @summary Edit a showcase
         * @param {ShowcasesEssentialsApiShowcase2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showcase_3(requestParameters: ShowcasesEssentialsApiShowcase2Request, options?: AxiosRequestConfig): AxiosPromise<Album> {
            return localVarFp.showcase_3(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every showcase belonging to the authenticated user.
         * @summary Get all the showcases that belong to the user
         * @param {ShowcasesEssentialsApiShowcasesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showcases(requestParameters: ShowcasesEssentialsApiShowcasesRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Album>> {
            return localVarFp.showcases(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method adds videos and events to the specified showcases. The authenticated user must either be the owner of the showcase or have team permissions.  The present setup permits only one event per showcase.
         * @summary Add videos and live events to showcases
         * @param {ShowcasesEssentialsApiShowcases0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showcases_4(requestParameters: ShowcasesEssentialsApiShowcases0Request, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.showcases_4(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createUserShowcase operation in ShowcasesEssentialsApi.
 * @export
 * @interface ShowcasesEssentialsApiCreateUserShowcaseRequest
 */
export type ShowcasesEssentialsApiCreateUserShowcaseRequest = {
    
} & ShowcasesEssentialsCreateUserShowcaseRequest

/**
 * Request parameters for deleteShowcase operation in ShowcasesEssentialsApi.
 * @export
 * @interface ShowcasesEssentialsApiDeleteShowcaseRequest
 */
export type ShowcasesEssentialsApiDeleteShowcaseRequest = {
    
    /**
    * The ID of the showcase.
    * @type {number}
    * @memberof ShowcasesEssentialsApiDeleteShowcase
    */
    readonly albumId: number
    
}

/**
 * Request parameters for editShowcase operation in ShowcasesEssentialsApi.
 * @export
 * @interface ShowcasesEssentialsApiEditShowcaseRequest
 */
export type ShowcasesEssentialsApiEditShowcaseRequest = {
    
    /**
    * The ID of the showcase.
    * @type {number}
    * @memberof ShowcasesEssentialsApiEditShowcase
    */
    readonly albumId: number
    
} & ShowcasesEssentialsEditShowcaseRequest

/**
 * Request parameters for getAllUserShowcases operation in ShowcasesEssentialsApi.
 * @export
 * @interface ShowcasesEssentialsApiGetAllUserShowcasesRequest
 */
export type ShowcasesEssentialsApiGetAllUserShowcasesRequest = {
    
    /**
    * The sort direction of the results.  Option descriptions:  * `asc` - Sort the results in ascending order.  * `desc` - Sort the results in descending order. 
    * @type {'asc' | 'desc'}
    * @memberof ShowcasesEssentialsApiGetAllUserShowcases
    */
    readonly direction?: 'asc' | 'desc'
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof ShowcasesEssentialsApiGetAllUserShowcases
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof ShowcasesEssentialsApiGetAllUserShowcases
    */
    readonly perPage?: number
    
    /**
    * The search query to use to filter the results.
    * @type {string}
    * @memberof ShowcasesEssentialsApiGetAllUserShowcases
    */
    readonly query?: string
    
    /**
    * The way to sort the results.  Option descriptions:  * `alphabetical` - Sort the results alphabetically.  * `date` - Sort the results by date of creation.  * `duration` - Sort the results by duration.  * `videos` - Sort the results by the number of videos. 
    * @type {'alphabetical' | 'date' | 'duration' | 'videos'}
    * @memberof ShowcasesEssentialsApiGetAllUserShowcases
    */
    readonly sort?: 'alphabetical' | 'date' | 'duration' | 'videos'
    
}

/**
 * Request parameters for getSpecificShowcase operation in ShowcasesEssentialsApi.
 * @export
 * @interface ShowcasesEssentialsApiGetSpecificShowcaseRequest
 */
export type ShowcasesEssentialsApiGetSpecificShowcaseRequest = {
    
    /**
    * The ID of the showcase.
    * @type {number}
    * @memberof ShowcasesEssentialsApiGetSpecificShowcase
    */
    readonly albumId: number
    
}

/**
 * Request parameters for showcase operation in ShowcasesEssentialsApi.
 * @export
 * @interface ShowcasesEssentialsApiShowcaseRequest
 */
export type ShowcasesEssentialsApiShowcaseRequest = {
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof ShowcasesEssentialsApiShowcase
    */
    readonly userId: number
    
} & CreateShowcaseRequest

/**
 * Request parameters for showcase_1 operation in ShowcasesEssentialsApi.
 * @export
 * @interface ShowcasesEssentialsApiShowcase0Request
 */
export type ShowcasesEssentialsApiShowcase0Request = {
    
    /**
    * The ID of the showcase.
    * @type {number}
    * @memberof ShowcasesEssentialsApiShowcase0
    */
    readonly albumId: number
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof ShowcasesEssentialsApiShowcase0
    */
    readonly userId: number
    
}

/**
 * Request parameters for showcase_2 operation in ShowcasesEssentialsApi.
 * @export
 * @interface ShowcasesEssentialsApiShowcase1Request
 */
export type ShowcasesEssentialsApiShowcase1Request = {
    
    /**
    * The ID of the showcase.
    * @type {number}
    * @memberof ShowcasesEssentialsApiShowcase1
    */
    readonly albumId: number
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof ShowcasesEssentialsApiShowcase1
    */
    readonly userId: number
    
}

/**
 * Request parameters for showcase_3 operation in ShowcasesEssentialsApi.
 * @export
 * @interface ShowcasesEssentialsApiShowcase2Request
 */
export type ShowcasesEssentialsApiShowcase2Request = {
    
    /**
    * The ID of the showcase.
    * @type {number}
    * @memberof ShowcasesEssentialsApiShowcase2
    */
    readonly albumId: number
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof ShowcasesEssentialsApiShowcase2
    */
    readonly userId: number
    
} & EditShowcaseRequest

/**
 * Request parameters for showcases operation in ShowcasesEssentialsApi.
 * @export
 * @interface ShowcasesEssentialsApiShowcasesRequest
 */
export type ShowcasesEssentialsApiShowcasesRequest = {
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof ShowcasesEssentialsApiShowcases
    */
    readonly userId: number
    
    /**
    * The sort direction of the results.  Option descriptions:  * `asc` - Sort the results in ascending order.  * `desc` - Sort the results in descending order. 
    * @type {'asc' | 'desc'}
    * @memberof ShowcasesEssentialsApiShowcases
    */
    readonly direction?: 'asc' | 'desc'
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof ShowcasesEssentialsApiShowcases
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof ShowcasesEssentialsApiShowcases
    */
    readonly perPage?: number
    
    /**
    * The search query to use to filter the results.
    * @type {string}
    * @memberof ShowcasesEssentialsApiShowcases
    */
    readonly query?: string
    
    /**
    * The way to sort the results.  Option descriptions:  * `alphabetical` - Sort the results alphabetically.  * `date` - Sort the results by date of creation.  * `duration` - Sort the results by duration.  * `videos` - Sort the results by the number of videos. 
    * @type {'alphabetical' | 'date' | 'duration' | 'videos'}
    * @memberof ShowcasesEssentialsApiShowcases
    */
    readonly sort?: 'alphabetical' | 'date' | 'duration' | 'videos'
    
}

/**
 * Request parameters for showcases_4 operation in ShowcasesEssentialsApi.
 * @export
 * @interface ShowcasesEssentialsApiShowcases0Request
 */
export type ShowcasesEssentialsApiShowcases0Request = {
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof ShowcasesEssentialsApiShowcases0
    */
    readonly userId: number
    
    /**
    * A comma-separated list of video or event URIs.
    * @type {string}
    * @memberof ShowcasesEssentialsApiShowcases0
    */
    readonly albumItemUris: string
    
    /**
    * A comma-separated list of showcase URIs.
    * @type {string}
    * @memberof ShowcasesEssentialsApiShowcases0
    */
    readonly albumUris: string
    
}

/**
 * ShowcasesEssentialsApiGenerated - object-oriented interface
 * @export
 * @class ShowcasesEssentialsApiGenerated
 * @extends {BaseAPI}
 */
export class ShowcasesEssentialsApiGenerated extends BaseAPI {
    /**
     * This method creates a new showcase for the specified user.
     * @summary Create a showcase
     * @param {ShowcasesEssentialsApiCreateUserShowcaseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowcasesEssentialsApiGenerated
     */
    public createUserShowcase(requestParameters: ShowcasesEssentialsApiCreateUserShowcaseRequest, options?: AxiosRequestConfig) {
        return ShowcasesEssentialsApiFp(this.configuration).createUserShowcase(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method deletes the specified showcase. The authenticated user must be the owner of the showcase.
     * @summary Delete a showcase
     * @param {ShowcasesEssentialsApiDeleteShowcaseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowcasesEssentialsApiGenerated
     */
    public deleteShowcase(requestParameters: ShowcasesEssentialsApiDeleteShowcaseRequest, options?: AxiosRequestConfig) {
        return ShowcasesEssentialsApiFp(this.configuration).deleteShowcase(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method edits the specified showcase. The authenticated user must be the owner of the showcase.
     * @summary Edit a showcase
     * @param {ShowcasesEssentialsApiEditShowcaseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowcasesEssentialsApiGenerated
     */
    public editShowcase(requestParameters: ShowcasesEssentialsApiEditShowcaseRequest, options?: AxiosRequestConfig) {
        return ShowcasesEssentialsApiFp(this.configuration).editShowcase(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every showcase belonging to the authenticated user.
     * @summary Get all the showcases that belong to the user
     * @param {ShowcasesEssentialsApiGetAllUserShowcasesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowcasesEssentialsApiGenerated
     */
    public getAllUserShowcases(requestParameters: ShowcasesEssentialsApiGetAllUserShowcasesRequest = {}, options?: AxiosRequestConfig) {
        return ShowcasesEssentialsApiFp(this.configuration).getAllUserShowcases(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns the specified showcase. The authenticated user must be the owner of the showcase.
     * @summary Get a specific showcase
     * @param {ShowcasesEssentialsApiGetSpecificShowcaseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowcasesEssentialsApiGenerated
     */
    public getSpecificShowcase(requestParameters: ShowcasesEssentialsApiGetSpecificShowcaseRequest, options?: AxiosRequestConfig) {
        return ShowcasesEssentialsApiFp(this.configuration).getSpecificShowcase(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method creates a new showcase for the specified user.
     * @summary Create a showcase
     * @param {ShowcasesEssentialsApiShowcaseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowcasesEssentialsApiGenerated
     */
    public showcase(requestParameters: ShowcasesEssentialsApiShowcaseRequest, options?: AxiosRequestConfig) {
        return ShowcasesEssentialsApiFp(this.configuration).showcase(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns the specified showcase. The authenticated user must be the owner of the showcase.
     * @summary Get a specific showcase
     * @param {ShowcasesEssentialsApiShowcase0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowcasesEssentialsApiGenerated
     */
    public showcase_1(requestParameters: ShowcasesEssentialsApiShowcase0Request, options?: AxiosRequestConfig) {
        return ShowcasesEssentialsApiFp(this.configuration).showcase_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method deletes the specified showcase. The authenticated user must be the owner of the showcase.
     * @summary Delete a showcase
     * @param {ShowcasesEssentialsApiShowcase1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowcasesEssentialsApiGenerated
     */
    public showcase_2(requestParameters: ShowcasesEssentialsApiShowcase1Request, options?: AxiosRequestConfig) {
        return ShowcasesEssentialsApiFp(this.configuration).showcase_2(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method edits the specified showcase. The authenticated user must be the owner of the showcase.
     * @summary Edit a showcase
     * @param {ShowcasesEssentialsApiShowcase2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowcasesEssentialsApiGenerated
     */
    public showcase_3(requestParameters: ShowcasesEssentialsApiShowcase2Request, options?: AxiosRequestConfig) {
        return ShowcasesEssentialsApiFp(this.configuration).showcase_3(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every showcase belonging to the authenticated user.
     * @summary Get all the showcases that belong to the user
     * @param {ShowcasesEssentialsApiShowcasesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowcasesEssentialsApiGenerated
     */
    public showcases(requestParameters: ShowcasesEssentialsApiShowcasesRequest, options?: AxiosRequestConfig) {
        return ShowcasesEssentialsApiFp(this.configuration).showcases(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method adds videos and events to the specified showcases. The authenticated user must either be the owner of the showcase or have team permissions.  The present setup permits only one event per showcase.
     * @summary Add videos and live events to showcases
     * @param {ShowcasesEssentialsApiShowcases0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowcasesEssentialsApiGenerated
     */
    public showcases_4(requestParameters: ShowcasesEssentialsApiShowcases0Request, options?: AxiosRequestConfig) {
        return ShowcasesEssentialsApiFp(this.configuration).showcases_4(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
