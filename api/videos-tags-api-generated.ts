/* tslint:disable */
/* eslint-disable */
/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

The version of the OpenAPI document: 3.4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { LegacyError } from '../models';
// @ts-ignore
import { Tag } from '../models';
// @ts-ignore
import { Video } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * VideosTagsApi - axios parameter creator
 * @export
 */
export const VideosTagsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method adds multiple tags to the specified video. Include the tags as a JSON array  as the body of the request with the  **name** field, like this: `[{ \"name\": \"funny\"}, {\"name\": \"concert\" }]`. The authenticated user must have edit access to the video. For more information on batch requests like this one, see [Using Common Formats and Parameters](https://developer.vimeo.com/api/common-formats#working-with-batch-requests).
         * @summary Add a list of tags to a video
         * @param {number} videoId The ID of the video.
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMultiple: async (videoId: number, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('addMultiple', 'videoId', videoId)
            const localVarPath = `/videos/{video_id}/tags`
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/videos/{video_id}/tags',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method adds a single tag to the specified video. The authenticated user must be the owner of the video.
         * @summary Add a specific tag to a video
         * @param {number} videoId The ID of the video.
         * @param {string} word The tag word.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTagToVideo: async (videoId: number, word: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('addTagToVideo', 'videoId', videoId)
            // verify required parameter 'word' is not null or undefined
            assertParamExists('addTagToVideo', 'word', word)
            const localVarPath = `/videos/{video_id}/tags/{word}`
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)))
                .replace(`{${"word"}}`, encodeURIComponent(String(word !== undefined ? word : `-word-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/videos/{video_id}/tags/{word}',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method determines whether the specified tag has been added to a video. The authenticated user must be the owner of the video.
         * @summary Check if a tag has been added to a video
         * @param {number} videoId The ID of the video.
         * @param {string} word The tag word.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkTagVideo: async (videoId: number, word: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('checkTagVideo', 'videoId', videoId)
            // verify required parameter 'word' is not null or undefined
            assertParamExists('checkTagVideo', 'word', word)
            const localVarPath = `/videos/{video_id}/tags/{word}`
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)))
                .replace(`{${"word"}}`, encodeURIComponent(String(word !== undefined ? word : `-word-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/videos/{video_id}/tags/{word}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns all the public videos associated with the specified tag.
         * @summary Get all the videos with a specific tag
         * @param {string} word The tag word.
         * @param {'asc' | 'desc'} [direction] The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order. 
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {'created_time' | 'duration' | 'name'} [sort] The way to sort the results.  Option descriptions:  * &#x60;created_time&#x60; - Sort the results by creation time.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;name&#x60; - Sort the results by name. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllByTag: async (word: string, direction?: 'asc' | 'desc', page?: number, perPage?: number, sort?: 'created_time' | 'duration' | 'name', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'word' is not null or undefined
            assertParamExists('getAllByTag', 'word', word)
            const localVarPath = `/tags/{word}/videos`
                .replace(`{${"word"}}`, encodeURIComponent(String(word !== undefined ? word : `-word-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/tags/{word}/videos',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns all the tags associated with the specified video. The authenticated user must be the owner of the video.
         * @summary Get all the tags of a video
         * @param {number} videoId The ID of the video.
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVideoTags: async (videoId: number, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('getVideoTags', 'videoId', videoId)
            const localVarPath = `/videos/{video_id}/tags`
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/videos/{video_id}/tags',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method removes the specified tag from a video. The authenticated user must have edit access to the video.
         * @summary Remove a tag from a video
         * @param {number} videoId The ID of the video.
         * @param {string} word The tag word.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeTag: async (videoId: number, word: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('removeTag', 'videoId', videoId)
            // verify required parameter 'word' is not null or undefined
            assertParamExists('removeTag', 'word', word)
            const localVarPath = `/videos/{video_id}/tags/{word}`
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)))
                .replace(`{${"word"}}`, encodeURIComponent(String(word !== undefined ? word : `-word-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/videos/{video_id}/tags/{word}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VideosTagsApi - functional programming interface
 * @export
 */
export const VideosTagsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VideosTagsApiAxiosParamCreator(configuration)
    return {
        /**
         * This method adds multiple tags to the specified video. Include the tags as a JSON array  as the body of the request with the  **name** field, like this: `[{ \"name\": \"funny\"}, {\"name\": \"concert\" }]`. The authenticated user must have edit access to the video. For more information on batch requests like this one, see [Using Common Formats and Parameters](https://developer.vimeo.com/api/common-formats#working-with-batch-requests).
         * @summary Add a list of tags to a video
         * @param {VideosTagsApiAddMultipleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addMultiple(requestParameters: VideosTagsApiAddMultipleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Tag>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addMultiple(requestParameters.videoId, requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method adds a single tag to the specified video. The authenticated user must be the owner of the video.
         * @summary Add a specific tag to a video
         * @param {VideosTagsApiAddTagToVideoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addTagToVideo(requestParameters: VideosTagsApiAddTagToVideoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tag>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addTagToVideo(requestParameters.videoId, requestParameters.word, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method determines whether the specified tag has been added to a video. The authenticated user must be the owner of the video.
         * @summary Check if a tag has been added to a video
         * @param {VideosTagsApiCheckTagVideoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkTagVideo(requestParameters: VideosTagsApiCheckTagVideoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tag>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkTagVideo(requestParameters.videoId, requestParameters.word, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns all the public videos associated with the specified tag.
         * @summary Get all the videos with a specific tag
         * @param {VideosTagsApiGetAllByTagRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllByTag(requestParameters: VideosTagsApiGetAllByTagRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Video>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllByTag(requestParameters.word, requestParameters.direction, requestParameters.page, requestParameters.perPage, requestParameters.sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns all the tags associated with the specified video. The authenticated user must be the owner of the video.
         * @summary Get all the tags of a video
         * @param {VideosTagsApiGetVideoTagsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVideoTags(requestParameters: VideosTagsApiGetVideoTagsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Tag>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVideoTags(requestParameters.videoId, requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method removes the specified tag from a video. The authenticated user must have edit access to the video.
         * @summary Remove a tag from a video
         * @param {VideosTagsApiRemoveTagRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeTag(requestParameters: VideosTagsApiRemoveTagRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeTag(requestParameters.videoId, requestParameters.word, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VideosTagsApi - factory interface
 * @export
 */
export const VideosTagsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VideosTagsApiFp(configuration)
    return {
        /**
         * This method adds multiple tags to the specified video. Include the tags as a JSON array  as the body of the request with the  **name** field, like this: `[{ \"name\": \"funny\"}, {\"name\": \"concert\" }]`. The authenticated user must have edit access to the video. For more information on batch requests like this one, see [Using Common Formats and Parameters](https://developer.vimeo.com/api/common-formats#working-with-batch-requests).
         * @summary Add a list of tags to a video
         * @param {VideosTagsApiAddMultipleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMultiple(requestParameters: VideosTagsApiAddMultipleRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Tag>> {
            return localVarFp.addMultiple(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method adds a single tag to the specified video. The authenticated user must be the owner of the video.
         * @summary Add a specific tag to a video
         * @param {VideosTagsApiAddTagToVideoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTagToVideo(requestParameters: VideosTagsApiAddTagToVideoRequest, options?: AxiosRequestConfig): AxiosPromise<Tag> {
            return localVarFp.addTagToVideo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method determines whether the specified tag has been added to a video. The authenticated user must be the owner of the video.
         * @summary Check if a tag has been added to a video
         * @param {VideosTagsApiCheckTagVideoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkTagVideo(requestParameters: VideosTagsApiCheckTagVideoRequest, options?: AxiosRequestConfig): AxiosPromise<Tag> {
            return localVarFp.checkTagVideo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns all the public videos associated with the specified tag.
         * @summary Get all the videos with a specific tag
         * @param {VideosTagsApiGetAllByTagRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllByTag(requestParameters: VideosTagsApiGetAllByTagRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Video>> {
            return localVarFp.getAllByTag(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns all the tags associated with the specified video. The authenticated user must be the owner of the video.
         * @summary Get all the tags of a video
         * @param {VideosTagsApiGetVideoTagsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVideoTags(requestParameters: VideosTagsApiGetVideoTagsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Tag>> {
            return localVarFp.getVideoTags(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method removes the specified tag from a video. The authenticated user must have edit access to the video.
         * @summary Remove a tag from a video
         * @param {VideosTagsApiRemoveTagRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeTag(requestParameters: VideosTagsApiRemoveTagRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeTag(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addMultiple operation in VideosTagsApi.
 * @export
 * @interface VideosTagsApiAddMultipleRequest
 */
export type VideosTagsApiAddMultipleRequest = {
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof VideosTagsApiAddMultiple
    */
    readonly videoId: number
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof VideosTagsApiAddMultiple
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof VideosTagsApiAddMultiple
    */
    readonly perPage?: number
    
}

/**
 * Request parameters for addTagToVideo operation in VideosTagsApi.
 * @export
 * @interface VideosTagsApiAddTagToVideoRequest
 */
export type VideosTagsApiAddTagToVideoRequest = {
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof VideosTagsApiAddTagToVideo
    */
    readonly videoId: number
    
    /**
    * The tag word.
    * @type {string}
    * @memberof VideosTagsApiAddTagToVideo
    */
    readonly word: string
    
}

/**
 * Request parameters for checkTagVideo operation in VideosTagsApi.
 * @export
 * @interface VideosTagsApiCheckTagVideoRequest
 */
export type VideosTagsApiCheckTagVideoRequest = {
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof VideosTagsApiCheckTagVideo
    */
    readonly videoId: number
    
    /**
    * The tag word.
    * @type {string}
    * @memberof VideosTagsApiCheckTagVideo
    */
    readonly word: string
    
}

/**
 * Request parameters for getAllByTag operation in VideosTagsApi.
 * @export
 * @interface VideosTagsApiGetAllByTagRequest
 */
export type VideosTagsApiGetAllByTagRequest = {
    
    /**
    * The tag word.
    * @type {string}
    * @memberof VideosTagsApiGetAllByTag
    */
    readonly word: string
    
    /**
    * The sort direction of the results.  Option descriptions:  * `asc` - Sort the results in ascending order.  * `desc` - Sort the results in descending order. 
    * @type {'asc' | 'desc'}
    * @memberof VideosTagsApiGetAllByTag
    */
    readonly direction?: 'asc' | 'desc'
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof VideosTagsApiGetAllByTag
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof VideosTagsApiGetAllByTag
    */
    readonly perPage?: number
    
    /**
    * The way to sort the results.  Option descriptions:  * `created_time` - Sort the results by creation time.  * `duration` - Sort the results by duration.  * `name` - Sort the results by name. 
    * @type {'created_time' | 'duration' | 'name'}
    * @memberof VideosTagsApiGetAllByTag
    */
    readonly sort?: 'created_time' | 'duration' | 'name'
    
}

/**
 * Request parameters for getVideoTags operation in VideosTagsApi.
 * @export
 * @interface VideosTagsApiGetVideoTagsRequest
 */
export type VideosTagsApiGetVideoTagsRequest = {
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof VideosTagsApiGetVideoTags
    */
    readonly videoId: number
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof VideosTagsApiGetVideoTags
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof VideosTagsApiGetVideoTags
    */
    readonly perPage?: number
    
}

/**
 * Request parameters for removeTag operation in VideosTagsApi.
 * @export
 * @interface VideosTagsApiRemoveTagRequest
 */
export type VideosTagsApiRemoveTagRequest = {
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof VideosTagsApiRemoveTag
    */
    readonly videoId: number
    
    /**
    * The tag word.
    * @type {string}
    * @memberof VideosTagsApiRemoveTag
    */
    readonly word: string
    
}

/**
 * VideosTagsApiGenerated - object-oriented interface
 * @export
 * @class VideosTagsApiGenerated
 * @extends {BaseAPI}
 */
export class VideosTagsApiGenerated extends BaseAPI {
    /**
     * This method adds multiple tags to the specified video. Include the tags as a JSON array  as the body of the request with the  **name** field, like this: `[{ \"name\": \"funny\"}, {\"name\": \"concert\" }]`. The authenticated user must have edit access to the video. For more information on batch requests like this one, see [Using Common Formats and Parameters](https://developer.vimeo.com/api/common-formats#working-with-batch-requests).
     * @summary Add a list of tags to a video
     * @param {VideosTagsApiAddMultipleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosTagsApiGenerated
     */
    public addMultiple(requestParameters: VideosTagsApiAddMultipleRequest, options?: AxiosRequestConfig) {
        return VideosTagsApiFp(this.configuration).addMultiple(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method adds a single tag to the specified video. The authenticated user must be the owner of the video.
     * @summary Add a specific tag to a video
     * @param {VideosTagsApiAddTagToVideoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosTagsApiGenerated
     */
    public addTagToVideo(requestParameters: VideosTagsApiAddTagToVideoRequest, options?: AxiosRequestConfig) {
        return VideosTagsApiFp(this.configuration).addTagToVideo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method determines whether the specified tag has been added to a video. The authenticated user must be the owner of the video.
     * @summary Check if a tag has been added to a video
     * @param {VideosTagsApiCheckTagVideoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosTagsApiGenerated
     */
    public checkTagVideo(requestParameters: VideosTagsApiCheckTagVideoRequest, options?: AxiosRequestConfig) {
        return VideosTagsApiFp(this.configuration).checkTagVideo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns all the public videos associated with the specified tag.
     * @summary Get all the videos with a specific tag
     * @param {VideosTagsApiGetAllByTagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosTagsApiGenerated
     */
    public getAllByTag(requestParameters: VideosTagsApiGetAllByTagRequest, options?: AxiosRequestConfig) {
        return VideosTagsApiFp(this.configuration).getAllByTag(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns all the tags associated with the specified video. The authenticated user must be the owner of the video.
     * @summary Get all the tags of a video
     * @param {VideosTagsApiGetVideoTagsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosTagsApiGenerated
     */
    public getVideoTags(requestParameters: VideosTagsApiGetVideoTagsRequest, options?: AxiosRequestConfig) {
        return VideosTagsApiFp(this.configuration).getVideoTags(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method removes the specified tag from a video. The authenticated user must have edit access to the video.
     * @summary Remove a tag from a video
     * @param {VideosTagsApiRemoveTagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosTagsApiGenerated
     */
    public removeTag(requestParameters: VideosTagsApiRemoveTagRequest, options?: AxiosRequestConfig) {
        return VideosTagsApiFp(this.configuration).removeTag(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
