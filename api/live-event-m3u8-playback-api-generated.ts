/* tslint:disable */
/* eslint-disable */
/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

The version of the OpenAPI document: 3.4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ModelError } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * LiveEventM3u8PlaybackApi - axios parameter creator
 * @export
 */
export const LiveEventM3u8PlaybackApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method returns an M3U8 playback URL for the specified event stream. You should use this endpoint only in conjunction with our recommended procedure for playing events via HLS. For more information, see our [HLS guide](https://developer.vimeo.com/api/live/playback).
         * @summary Get an M3U8 playback URL for a live event
         * @param {number} liveEventId The ID of the event.
         * @param {number} [maxFpsFhd] The requested maximum frames per second.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUrl: async (liveEventId: number, maxFpsFhd?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveEventId' is not null or undefined
            assertParamExists('getUrl', 'liveEventId', liveEventId)
            const localVarPath = `/me/live_events/{live_event_id}/m3u8_playback`
                .replace(`{${"live_event_id"}}`, encodeURIComponent(String(liveEventId !== undefined ? liveEventId : `-live_event_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)
            if (maxFpsFhd !== undefined) {
                localVarQueryParameter['max_fps_fhd'] = maxFpsFhd;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/live_events/{live_event_id}/m3u8_playback',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns an M3U8 playback URL for the specified event stream. You should use this endpoint only in conjunction with our recommended procedure for playing events via HLS. For more information, see our [HLS guide](https://developer.vimeo.com/api/live/playback).
         * @summary Get an M3U8 playback URL for a live event
         * @param {number} liveEventId The ID of the event.
         * @param {number} userId The ID of the user.
         * @param {number} [maxFpsFhd] The requested maximum frames per second.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUrlForEventStream: async (liveEventId: number, userId: number, maxFpsFhd?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveEventId' is not null or undefined
            assertParamExists('getUrlForEventStream', 'liveEventId', liveEventId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUrlForEventStream', 'userId', userId)
            const localVarPath = `/users/{user_id}/live_events/{live_event_id}/m3u8_playback`
                .replace(`{${"live_event_id"}}`, encodeURIComponent(String(liveEventId !== undefined ? liveEventId : `-live_event_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)
            if (maxFpsFhd !== undefined) {
                localVarQueryParameter['max_fps_fhd'] = maxFpsFhd;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/live_events/{live_event_id}/m3u8_playback',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LiveEventM3u8PlaybackApi - functional programming interface
 * @export
 */
export const LiveEventM3u8PlaybackApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LiveEventM3u8PlaybackApiAxiosParamCreator(configuration)
    return {
        /**
         * This method returns an M3U8 playback URL for the specified event stream. You should use this endpoint only in conjunction with our recommended procedure for playing events via HLS. For more information, see our [HLS guide](https://developer.vimeo.com/api/live/playback).
         * @summary Get an M3U8 playback URL for a live event
         * @param {LiveEventM3u8PlaybackApiGetUrlRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUrl(requestParameters: LiveEventM3u8PlaybackApiGetUrlRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUrl(requestParameters.liveEventId, requestParameters.maxFpsFhd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns an M3U8 playback URL for the specified event stream. You should use this endpoint only in conjunction with our recommended procedure for playing events via HLS. For more information, see our [HLS guide](https://developer.vimeo.com/api/live/playback).
         * @summary Get an M3U8 playback URL for a live event
         * @param {LiveEventM3u8PlaybackApiGetUrlForEventStreamRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUrlForEventStream(requestParameters: LiveEventM3u8PlaybackApiGetUrlForEventStreamRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUrlForEventStream(requestParameters.liveEventId, requestParameters.userId, requestParameters.maxFpsFhd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LiveEventM3u8PlaybackApi - factory interface
 * @export
 */
export const LiveEventM3u8PlaybackApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LiveEventM3u8PlaybackApiFp(configuration)
    return {
        /**
         * This method returns an M3U8 playback URL for the specified event stream. You should use this endpoint only in conjunction with our recommended procedure for playing events via HLS. For more information, see our [HLS guide](https://developer.vimeo.com/api/live/playback).
         * @summary Get an M3U8 playback URL for a live event
         * @param {LiveEventM3u8PlaybackApiGetUrlRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUrl(requestParameters: LiveEventM3u8PlaybackApiGetUrlRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getUrl(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns an M3U8 playback URL for the specified event stream. You should use this endpoint only in conjunction with our recommended procedure for playing events via HLS. For more information, see our [HLS guide](https://developer.vimeo.com/api/live/playback).
         * @summary Get an M3U8 playback URL for a live event
         * @param {LiveEventM3u8PlaybackApiGetUrlForEventStreamRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUrlForEventStream(requestParameters: LiveEventM3u8PlaybackApiGetUrlForEventStreamRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getUrlForEventStream(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getUrl operation in LiveEventM3u8PlaybackApi.
 * @export
 * @interface LiveEventM3u8PlaybackApiGetUrlRequest
 */
export type LiveEventM3u8PlaybackApiGetUrlRequest = {
    
    /**
    * The ID of the event.
    * @type {number}
    * @memberof LiveEventM3u8PlaybackApiGetUrl
    */
    readonly liveEventId: number
    
    /**
    * The requested maximum frames per second.
    * @type {number}
    * @memberof LiveEventM3u8PlaybackApiGetUrl
    */
    readonly maxFpsFhd?: number
    
}

/**
 * Request parameters for getUrlForEventStream operation in LiveEventM3u8PlaybackApi.
 * @export
 * @interface LiveEventM3u8PlaybackApiGetUrlForEventStreamRequest
 */
export type LiveEventM3u8PlaybackApiGetUrlForEventStreamRequest = {
    
    /**
    * The ID of the event.
    * @type {number}
    * @memberof LiveEventM3u8PlaybackApiGetUrlForEventStream
    */
    readonly liveEventId: number
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof LiveEventM3u8PlaybackApiGetUrlForEventStream
    */
    readonly userId: number
    
    /**
    * The requested maximum frames per second.
    * @type {number}
    * @memberof LiveEventM3u8PlaybackApiGetUrlForEventStream
    */
    readonly maxFpsFhd?: number
    
}

/**
 * LiveEventM3u8PlaybackApiGenerated - object-oriented interface
 * @export
 * @class LiveEventM3u8PlaybackApiGenerated
 * @extends {BaseAPI}
 */
export class LiveEventM3u8PlaybackApiGenerated extends BaseAPI {
    /**
     * This method returns an M3U8 playback URL for the specified event stream. You should use this endpoint only in conjunction with our recommended procedure for playing events via HLS. For more information, see our [HLS guide](https://developer.vimeo.com/api/live/playback).
     * @summary Get an M3U8 playback URL for a live event
     * @param {LiveEventM3u8PlaybackApiGetUrlRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEventM3u8PlaybackApiGenerated
     */
    public getUrl(requestParameters: LiveEventM3u8PlaybackApiGetUrlRequest, options?: AxiosRequestConfig) {
        return LiveEventM3u8PlaybackApiFp(this.configuration).getUrl(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns an M3U8 playback URL for the specified event stream. You should use this endpoint only in conjunction with our recommended procedure for playing events via HLS. For more information, see our [HLS guide](https://developer.vimeo.com/api/live/playback).
     * @summary Get an M3U8 playback URL for a live event
     * @param {LiveEventM3u8PlaybackApiGetUrlForEventStreamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEventM3u8PlaybackApiGenerated
     */
    public getUrlForEventStream(requestParameters: LiveEventM3u8PlaybackApiGetUrlForEventStreamRequest, options?: AxiosRequestConfig) {
        return LiveEventM3u8PlaybackApiFp(this.configuration).getUrlForEventStream(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
