/* tslint:disable */
/* eslint-disable */
/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

The version of the OpenAPI document: 3.4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { LegacyError } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * GroupsSubscriptionsApi - axios parameter creator
 * @export
 */
export const GroupsSubscriptionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method adds the authenticated user to the specified group.
         * @summary Add the user to a group
         * @param {number} groupId The ID of the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserToGroup: async (groupId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('addUserToGroup', 'groupId', groupId)
            const localVarPath = `/me/groups/{group_id}`
                .replace(`{${"group_id"}}`, encodeURIComponent(String(groupId !== undefined ? groupId : `-group_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["interact"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["interact"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/groups/{group_id}',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method adds the authenticated user to the specified group.
         * @summary Add the user to a group
         * @param {number} groupId The ID of the group.
         * @param {number} userId The ID of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        group: async (groupId: number, userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('group', 'groupId', groupId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('group', 'userId', userId)
            const localVarPath = `/users/{user_id}/groups/{group_id}`
                .replace(`{${"group_id"}}`, encodeURIComponent(String(groupId !== undefined ? groupId : `-group_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["interact"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["interact"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/groups/{group_id}',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method removes the authenticated user from the specified group. The authenticated user can\'t be the owner of the group; assign a new owner through a PATCH request first.
         * @summary Remove the user from a group
         * @param {number} groupId The ID of the group.
         * @param {number} userId The ID of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        group_1: async (groupId: number, userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('group_1', 'groupId', groupId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('group_1', 'userId', userId)
            const localVarPath = `/users/{user_id}/groups/{group_id}`
                .replace(`{${"group_id"}}`, encodeURIComponent(String(groupId !== undefined ? groupId : `-group_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["interact"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["interact"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/groups/{group_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method removes the authenticated user from the specified group. The authenticated user can\'t be the owner of the group; assign a new owner through a PATCH request first.
         * @summary Remove the user from a group
         * @param {number} groupId The ID of the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeUserFromGroup: async (groupId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('removeUserFromGroup', 'groupId', groupId)
            const localVarPath = `/me/groups/{group_id}`
                .replace(`{${"group_id"}}`, encodeURIComponent(String(groupId !== undefined ? groupId : `-group_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["interact"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["interact"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/groups/{group_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GroupsSubscriptionsApi - functional programming interface
 * @export
 */
export const GroupsSubscriptionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GroupsSubscriptionsApiAxiosParamCreator(configuration)
    return {
        /**
         * This method adds the authenticated user to the specified group.
         * @summary Add the user to a group
         * @param {GroupsSubscriptionsApiAddUserToGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addUserToGroup(requestParameters: GroupsSubscriptionsApiAddUserToGroupRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addUserToGroup(requestParameters.groupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method adds the authenticated user to the specified group.
         * @summary Add the user to a group
         * @param {GroupsSubscriptionsApiGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async group(requestParameters: GroupsSubscriptionsApiGroupRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.group(requestParameters.groupId, requestParameters.userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method removes the authenticated user from the specified group. The authenticated user can\'t be the owner of the group; assign a new owner through a PATCH request first.
         * @summary Remove the user from a group
         * @param {GroupsSubscriptionsApiGroup0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async group_1(requestParameters: GroupsSubscriptionsApiGroup0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.group_1(requestParameters.groupId, requestParameters.userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method removes the authenticated user from the specified group. The authenticated user can\'t be the owner of the group; assign a new owner through a PATCH request first.
         * @summary Remove the user from a group
         * @param {GroupsSubscriptionsApiRemoveUserFromGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeUserFromGroup(requestParameters: GroupsSubscriptionsApiRemoveUserFromGroupRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeUserFromGroup(requestParameters.groupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GroupsSubscriptionsApi - factory interface
 * @export
 */
export const GroupsSubscriptionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GroupsSubscriptionsApiFp(configuration)
    return {
        /**
         * This method adds the authenticated user to the specified group.
         * @summary Add the user to a group
         * @param {GroupsSubscriptionsApiAddUserToGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserToGroup(requestParameters: GroupsSubscriptionsApiAddUserToGroupRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addUserToGroup(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method adds the authenticated user to the specified group.
         * @summary Add the user to a group
         * @param {GroupsSubscriptionsApiGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        group(requestParameters: GroupsSubscriptionsApiGroupRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.group(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method removes the authenticated user from the specified group. The authenticated user can\'t be the owner of the group; assign a new owner through a PATCH request first.
         * @summary Remove the user from a group
         * @param {GroupsSubscriptionsApiGroup0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        group_1(requestParameters: GroupsSubscriptionsApiGroup0Request, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.group_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method removes the authenticated user from the specified group. The authenticated user can\'t be the owner of the group; assign a new owner through a PATCH request first.
         * @summary Remove the user from a group
         * @param {GroupsSubscriptionsApiRemoveUserFromGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeUserFromGroup(requestParameters: GroupsSubscriptionsApiRemoveUserFromGroupRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeUserFromGroup(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addUserToGroup operation in GroupsSubscriptionsApi.
 * @export
 * @interface GroupsSubscriptionsApiAddUserToGroupRequest
 */
export type GroupsSubscriptionsApiAddUserToGroupRequest = {
    
    /**
    * The ID of the group.
    * @type {number}
    * @memberof GroupsSubscriptionsApiAddUserToGroup
    */
    readonly groupId: number
    
}

/**
 * Request parameters for group operation in GroupsSubscriptionsApi.
 * @export
 * @interface GroupsSubscriptionsApiGroupRequest
 */
export type GroupsSubscriptionsApiGroupRequest = {
    
    /**
    * The ID of the group.
    * @type {number}
    * @memberof GroupsSubscriptionsApiGroup
    */
    readonly groupId: number
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof GroupsSubscriptionsApiGroup
    */
    readonly userId: number
    
}

/**
 * Request parameters for group_1 operation in GroupsSubscriptionsApi.
 * @export
 * @interface GroupsSubscriptionsApiGroup0Request
 */
export type GroupsSubscriptionsApiGroup0Request = {
    
    /**
    * The ID of the group.
    * @type {number}
    * @memberof GroupsSubscriptionsApiGroup0
    */
    readonly groupId: number
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof GroupsSubscriptionsApiGroup0
    */
    readonly userId: number
    
}

/**
 * Request parameters for removeUserFromGroup operation in GroupsSubscriptionsApi.
 * @export
 * @interface GroupsSubscriptionsApiRemoveUserFromGroupRequest
 */
export type GroupsSubscriptionsApiRemoveUserFromGroupRequest = {
    
    /**
    * The ID of the group.
    * @type {number}
    * @memberof GroupsSubscriptionsApiRemoveUserFromGroup
    */
    readonly groupId: number
    
}

/**
 * GroupsSubscriptionsApiGenerated - object-oriented interface
 * @export
 * @class GroupsSubscriptionsApiGenerated
 * @extends {BaseAPI}
 */
export class GroupsSubscriptionsApiGenerated extends BaseAPI {
    /**
     * This method adds the authenticated user to the specified group.
     * @summary Add the user to a group
     * @param {GroupsSubscriptionsApiAddUserToGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsSubscriptionsApiGenerated
     */
    public addUserToGroup(requestParameters: GroupsSubscriptionsApiAddUserToGroupRequest, options?: AxiosRequestConfig) {
        return GroupsSubscriptionsApiFp(this.configuration).addUserToGroup(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method adds the authenticated user to the specified group.
     * @summary Add the user to a group
     * @param {GroupsSubscriptionsApiGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsSubscriptionsApiGenerated
     */
    public group(requestParameters: GroupsSubscriptionsApiGroupRequest, options?: AxiosRequestConfig) {
        return GroupsSubscriptionsApiFp(this.configuration).group(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method removes the authenticated user from the specified group. The authenticated user can\'t be the owner of the group; assign a new owner through a PATCH request first.
     * @summary Remove the user from a group
     * @param {GroupsSubscriptionsApiGroup0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsSubscriptionsApiGenerated
     */
    public group_1(requestParameters: GroupsSubscriptionsApiGroup0Request, options?: AxiosRequestConfig) {
        return GroupsSubscriptionsApiFp(this.configuration).group_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method removes the authenticated user from the specified group. The authenticated user can\'t be the owner of the group; assign a new owner through a PATCH request first.
     * @summary Remove the user from a group
     * @param {GroupsSubscriptionsApiRemoveUserFromGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsSubscriptionsApiGenerated
     */
    public removeUserFromGroup(requestParameters: GroupsSubscriptionsApiRemoveUserFromGroupRequest, options?: AxiosRequestConfig) {
        return GroupsSubscriptionsApiFp(this.configuration).removeUserFromGroup(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
