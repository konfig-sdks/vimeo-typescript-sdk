/* tslint:disable */
/* eslint-disable */
/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

The version of the OpenAPI document: 3.4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { LiveEventThumbnailsAddThumbnailRequest } from '../models';
// @ts-ignore
import { LiveEventThumbnailsCreateThumbnailForEventRequest } from '../models';
// @ts-ignore
import { LiveEventThumbnailsCreateThumbnailForEventRequest1 } from '../models';
// @ts-ignore
import { LiveEventThumbnailsEditEventThumbnailRequest } from '../models';
// @ts-ignore
import { LiveEventThumbnailsEditLiveEventThumbnailRequest } from '../models';
// @ts-ignore
import { LiveEventThumbnailsUpdateEventThumbnailRequest } from '../models';
// @ts-ignore
import { ModelError } from '../models';
// @ts-ignore
import { Picture } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * LiveEventThumbnailsApi - axios parameter creator
 * @export
 */
export const LiveEventThumbnailsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method creates a thumbnail image for the specified event.
         * @summary Create a live event thumbnail
         * @param {number} liveEventId The ID of the event.
         * @param {LiveEventThumbnailsAddThumbnailRequest} [liveEventThumbnailsAddThumbnailRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addThumbnail: async (liveEventId: number, liveEventThumbnailsAddThumbnailRequest?: LiveEventThumbnailsAddThumbnailRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveEventId' is not null or undefined
            assertParamExists('addThumbnail', 'liveEventId', liveEventId)
            const localVarPath = `/me/live_events/{live_event_id}/pictures`
                .replace(`{${"live_event_id"}}`, encodeURIComponent(String(liveEventId !== undefined ? liveEventId : `-live_event_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["upload", "private"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["upload", "private"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.vimeo.picture+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: liveEventThumbnailsAddThumbnailRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/live_events/{live_event_id}/pictures',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(liveEventThumbnailsAddThumbnailRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method creates a thumbnail image for the specified event.
         * @summary Create a live event thumbnail
         * @param {number} liveEventId The ID of the event.
         * @param {LiveEventThumbnailsCreateThumbnailForEventRequest} [liveEventThumbnailsCreateThumbnailForEventRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createThumbnailForEvent: async (liveEventId: number, liveEventThumbnailsCreateThumbnailForEventRequest?: LiveEventThumbnailsCreateThumbnailForEventRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveEventId' is not null or undefined
            assertParamExists('createThumbnailForEvent', 'liveEventId', liveEventId)
            const localVarPath = `/live_events/{live_event_id}/pictures`
                .replace(`{${"live_event_id"}}`, encodeURIComponent(String(liveEventId !== undefined ? liveEventId : `-live_event_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["upload", "private"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["upload", "private"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.vimeo.picture+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: liveEventThumbnailsCreateThumbnailForEventRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/live_events/{live_event_id}/pictures',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(liveEventThumbnailsCreateThumbnailForEventRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method creates a thumbnail image for the specified event.
         * @summary Create a live event thumbnail
         * @param {number} liveEventId The ID of the event.
         * @param {number} userId The ID of the user.
         * @param {LiveEventThumbnailsCreateThumbnailForEventRequest1} [liveEventThumbnailsCreateThumbnailForEventRequest1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createThumbnailForEvent_1: async (liveEventId: number, userId: number, liveEventThumbnailsCreateThumbnailForEventRequest1?: LiveEventThumbnailsCreateThumbnailForEventRequest1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveEventId' is not null or undefined
            assertParamExists('createThumbnailForEvent_1', 'liveEventId', liveEventId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('createThumbnailForEvent_1', 'userId', userId)
            const localVarPath = `/users/{user_id}/live_events/{live_event_id}/pictures`
                .replace(`{${"live_event_id"}}`, encodeURIComponent(String(liveEventId !== undefined ? liveEventId : `-live_event_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["upload", "private"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["upload", "private"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.vimeo.picture+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: liveEventThumbnailsCreateThumbnailForEventRequest1,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/live_events/{live_event_id}/pictures',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(liveEventThumbnailsCreateThumbnailForEventRequest1, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method deletes a thumbnail image for the specified event.
         * @summary Delete a live event thumbnail
         * @param {number} liveEventId The ID of the event.
         * @param {number} thumbnailId The ID of the thumbnail.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteForEvent: async (liveEventId: number, thumbnailId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveEventId' is not null or undefined
            assertParamExists('deleteForEvent', 'liveEventId', liveEventId)
            // verify required parameter 'thumbnailId' is not null or undefined
            assertParamExists('deleteForEvent', 'thumbnailId', thumbnailId)
            const localVarPath = `/me/live_events/{live_event_id}/pictures/{thumbnail_id}`
                .replace(`{${"live_event_id"}}`, encodeURIComponent(String(liveEventId !== undefined ? liveEventId : `-live_event_id-`)))
                .replace(`{${"thumbnail_id"}}`, encodeURIComponent(String(thumbnailId !== undefined ? thumbnailId : `-thumbnail_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["delete", "private"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["delete", "private"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/live_events/{live_event_id}/pictures/{thumbnail_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method deletes a thumbnail image for the specified event.
         * @summary Delete a live event thumbnail
         * @param {number} liveEventId The ID of the event.
         * @param {number} thumbnailId The ID of the thumbnail.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteThumbnailForEvent: async (liveEventId: number, thumbnailId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveEventId' is not null or undefined
            assertParamExists('deleteThumbnailForEvent', 'liveEventId', liveEventId)
            // verify required parameter 'thumbnailId' is not null or undefined
            assertParamExists('deleteThumbnailForEvent', 'thumbnailId', thumbnailId)
            const localVarPath = `/live_events/{live_event_id}/pictures/{thumbnail_id}`
                .replace(`{${"live_event_id"}}`, encodeURIComponent(String(liveEventId !== undefined ? liveEventId : `-live_event_id-`)))
                .replace(`{${"thumbnail_id"}}`, encodeURIComponent(String(thumbnailId !== undefined ? thumbnailId : `-thumbnail_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["delete", "private"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["delete", "private"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/live_events/{live_event_id}/pictures/{thumbnail_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method deletes a thumbnail image for the specified event.
         * @summary Delete a live event thumbnail
         * @param {number} liveEventId The ID of the event.
         * @param {number} thumbnailId The ID of the thumbnail.
         * @param {number} userId The ID of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteThumbnailForEvent_2: async (liveEventId: number, thumbnailId: number, userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveEventId' is not null or undefined
            assertParamExists('deleteThumbnailForEvent_2', 'liveEventId', liveEventId)
            // verify required parameter 'thumbnailId' is not null or undefined
            assertParamExists('deleteThumbnailForEvent_2', 'thumbnailId', thumbnailId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('deleteThumbnailForEvent_2', 'userId', userId)
            const localVarPath = `/users/{user_id}/live_events/{live_event_id}/pictures/{thumbnail_id}`
                .replace(`{${"live_event_id"}}`, encodeURIComponent(String(liveEventId !== undefined ? liveEventId : `-live_event_id-`)))
                .replace(`{${"thumbnail_id"}}`, encodeURIComponent(String(thumbnailId !== undefined ? thumbnailId : `-thumbnail_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["delete", "private"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["delete", "private"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/live_events/{live_event_id}/pictures/{thumbnail_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method edits a thumbnail image for the specified event.
         * @summary Edit a live event thumbnail
         * @param {number} liveEventId The ID of the event.
         * @param {number} thumbnailId The ID of the thumbnail.
         * @param {number} userId The ID of the user.
         * @param {LiveEventThumbnailsEditEventThumbnailRequest} [liveEventThumbnailsEditEventThumbnailRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editEventThumbnail: async (liveEventId: number, thumbnailId: number, userId: number, liveEventThumbnailsEditEventThumbnailRequest?: LiveEventThumbnailsEditEventThumbnailRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveEventId' is not null or undefined
            assertParamExists('editEventThumbnail', 'liveEventId', liveEventId)
            // verify required parameter 'thumbnailId' is not null or undefined
            assertParamExists('editEventThumbnail', 'thumbnailId', thumbnailId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('editEventThumbnail', 'userId', userId)
            const localVarPath = `/users/{user_id}/live_events/{live_event_id}/pictures/{thumbnail_id}`
                .replace(`{${"live_event_id"}}`, encodeURIComponent(String(liveEventId !== undefined ? liveEventId : `-live_event_id-`)))
                .replace(`{${"thumbnail_id"}}`, encodeURIComponent(String(thumbnailId !== undefined ? thumbnailId : `-thumbnail_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit", "private"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit", "private"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.vimeo.picture+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: liveEventThumbnailsEditEventThumbnailRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/live_events/{live_event_id}/pictures/{thumbnail_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(liveEventThumbnailsEditEventThumbnailRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method edits a thumbnail image for the specified event.
         * @summary Edit a live event thumbnail
         * @param {number} liveEventId The ID of the event.
         * @param {number} thumbnailId The ID of the thumbnail.
         * @param {LiveEventThumbnailsEditLiveEventThumbnailRequest} [liveEventThumbnailsEditLiveEventThumbnailRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editLiveEventThumbnail: async (liveEventId: number, thumbnailId: number, liveEventThumbnailsEditLiveEventThumbnailRequest?: LiveEventThumbnailsEditLiveEventThumbnailRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveEventId' is not null or undefined
            assertParamExists('editLiveEventThumbnail', 'liveEventId', liveEventId)
            // verify required parameter 'thumbnailId' is not null or undefined
            assertParamExists('editLiveEventThumbnail', 'thumbnailId', thumbnailId)
            const localVarPath = `/live_events/{live_event_id}/pictures/{thumbnail_id}`
                .replace(`{${"live_event_id"}}`, encodeURIComponent(String(liveEventId !== undefined ? liveEventId : `-live_event_id-`)))
                .replace(`{${"thumbnail_id"}}`, encodeURIComponent(String(thumbnailId !== undefined ? thumbnailId : `-thumbnail_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit", "private"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit", "private"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.vimeo.picture+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: liveEventThumbnailsEditLiveEventThumbnailRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/live_events/{live_event_id}/pictures/{thumbnail_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(liveEventThumbnailsEditLiveEventThumbnailRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every thumbnail image of the specified event.
         * @summary Get all the thumbnails of a live event
         * @param {number} liveEventId The ID of the event.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll: async (liveEventId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveEventId' is not null or undefined
            assertParamExists('getAll', 'liveEventId', liveEventId)
            const localVarPath = `/me/live_events/{live_event_id}/pictures`
                .replace(`{${"live_event_id"}}`, encodeURIComponent(String(liveEventId !== undefined ? liveEventId : `-live_event_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/live_events/{live_event_id}/pictures',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every thumbnail image of the specified event.
         * @summary Get all the thumbnails of a live event
         * @param {number} liveEventId The ID of the event.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllThumbnails: async (liveEventId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveEventId' is not null or undefined
            assertParamExists('getAllThumbnails', 'liveEventId', liveEventId)
            const localVarPath = `/live_events/{live_event_id}/pictures`
                .replace(`{${"live_event_id"}}`, encodeURIComponent(String(liveEventId !== undefined ? liveEventId : `-live_event_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/live_events/{live_event_id}/pictures',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every thumbnail image of the specified event.
         * @summary Get all the thumbnails of a live event
         * @param {number} liveEventId The ID of the event.
         * @param {number} userId The ID of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllThumbs: async (liveEventId: number, userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveEventId' is not null or undefined
            assertParamExists('getAllThumbs', 'liveEventId', liveEventId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getAllThumbs', 'userId', userId)
            const localVarPath = `/users/{user_id}/live_events/{live_event_id}/pictures`
                .replace(`{${"live_event_id"}}`, encodeURIComponent(String(liveEventId !== undefined ? liveEventId : `-live_event_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/live_events/{live_event_id}/pictures',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns a single thumbnail image of the specified event.
         * @summary Get a specific live event thumbnail
         * @param {number} liveEventId The ID of the event.
         * @param {number} thumbnailId The ID of the thumbnail.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificThumbnail: async (liveEventId: number, thumbnailId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveEventId' is not null or undefined
            assertParamExists('getSpecificThumbnail', 'liveEventId', liveEventId)
            // verify required parameter 'thumbnailId' is not null or undefined
            assertParamExists('getSpecificThumbnail', 'thumbnailId', thumbnailId)
            const localVarPath = `/live_events/{live_event_id}/pictures/{thumbnail_id}`
                .replace(`{${"live_event_id"}}`, encodeURIComponent(String(liveEventId !== undefined ? liveEventId : `-live_event_id-`)))
                .replace(`{${"thumbnail_id"}}`, encodeURIComponent(String(thumbnailId !== undefined ? thumbnailId : `-thumbnail_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/live_events/{live_event_id}/pictures/{thumbnail_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns a single thumbnail image of the specified event.
         * @summary Get a specific live event thumbnail
         * @param {number} liveEventId The ID of the event.
         * @param {number} thumbnailId The ID of the thumbnail.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificThumbnail_3: async (liveEventId: number, thumbnailId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveEventId' is not null or undefined
            assertParamExists('getSpecificThumbnail_3', 'liveEventId', liveEventId)
            // verify required parameter 'thumbnailId' is not null or undefined
            assertParamExists('getSpecificThumbnail_3', 'thumbnailId', thumbnailId)
            const localVarPath = `/me/live_events/{live_event_id}/pictures/{thumbnail_id}`
                .replace(`{${"live_event_id"}}`, encodeURIComponent(String(liveEventId !== undefined ? liveEventId : `-live_event_id-`)))
                .replace(`{${"thumbnail_id"}}`, encodeURIComponent(String(thumbnailId !== undefined ? thumbnailId : `-thumbnail_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/live_events/{live_event_id}/pictures/{thumbnail_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns a single thumbnail image of the specified event.
         * @summary Get a specific live event thumbnail
         * @param {number} liveEventId The ID of the event.
         * @param {number} thumbnailId The ID of the thumbnail.
         * @param {number} userId The ID of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificThumbnail_4: async (liveEventId: number, thumbnailId: number, userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveEventId' is not null or undefined
            assertParamExists('getSpecificThumbnail_4', 'liveEventId', liveEventId)
            // verify required parameter 'thumbnailId' is not null or undefined
            assertParamExists('getSpecificThumbnail_4', 'thumbnailId', thumbnailId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getSpecificThumbnail_4', 'userId', userId)
            const localVarPath = `/users/{user_id}/live_events/{live_event_id}/pictures/{thumbnail_id}`
                .replace(`{${"live_event_id"}}`, encodeURIComponent(String(liveEventId !== undefined ? liveEventId : `-live_event_id-`)))
                .replace(`{${"thumbnail_id"}}`, encodeURIComponent(String(thumbnailId !== undefined ? thumbnailId : `-thumbnail_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/live_events/{live_event_id}/pictures/{thumbnail_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method edits a thumbnail image for the specified event.
         * @summary Edit a live event thumbnail
         * @param {number} liveEventId The ID of the event.
         * @param {number} thumbnailId The ID of the thumbnail.
         * @param {LiveEventThumbnailsUpdateEventThumbnailRequest} [liveEventThumbnailsUpdateEventThumbnailRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEventThumbnail: async (liveEventId: number, thumbnailId: number, liveEventThumbnailsUpdateEventThumbnailRequest?: LiveEventThumbnailsUpdateEventThumbnailRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveEventId' is not null or undefined
            assertParamExists('updateEventThumbnail', 'liveEventId', liveEventId)
            // verify required parameter 'thumbnailId' is not null or undefined
            assertParamExists('updateEventThumbnail', 'thumbnailId', thumbnailId)
            const localVarPath = `/me/live_events/{live_event_id}/pictures/{thumbnail_id}`
                .replace(`{${"live_event_id"}}`, encodeURIComponent(String(liveEventId !== undefined ? liveEventId : `-live_event_id-`)))
                .replace(`{${"thumbnail_id"}}`, encodeURIComponent(String(thumbnailId !== undefined ? thumbnailId : `-thumbnail_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit", "private"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit", "private"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.vimeo.picture+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: liveEventThumbnailsUpdateEventThumbnailRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/live_events/{live_event_id}/pictures/{thumbnail_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(liveEventThumbnailsUpdateEventThumbnailRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LiveEventThumbnailsApi - functional programming interface
 * @export
 */
export const LiveEventThumbnailsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LiveEventThumbnailsApiAxiosParamCreator(configuration)
    return {
        /**
         * This method creates a thumbnail image for the specified event.
         * @summary Create a live event thumbnail
         * @param {LiveEventThumbnailsApiAddThumbnailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addThumbnail(requestParameters: LiveEventThumbnailsApiAddThumbnailRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Picture>> {
            const liveEventThumbnailsAddThumbnailRequest: LiveEventThumbnailsAddThumbnailRequest = {
                active: requestParameters.active
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addThumbnail(requestParameters.liveEventId, liveEventThumbnailsAddThumbnailRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method creates a thumbnail image for the specified event.
         * @summary Create a live event thumbnail
         * @param {LiveEventThumbnailsApiCreateThumbnailForEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createThumbnailForEvent(requestParameters: LiveEventThumbnailsApiCreateThumbnailForEventRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Picture>> {
            const liveEventThumbnailsCreateThumbnailForEventRequest: LiveEventThumbnailsCreateThumbnailForEventRequest = {
                active: requestParameters.active
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createThumbnailForEvent(requestParameters.liveEventId, liveEventThumbnailsCreateThumbnailForEventRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method creates a thumbnail image for the specified event.
         * @summary Create a live event thumbnail
         * @param {LiveEventThumbnailsApiCreateThumbnailForEvent0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createThumbnailForEvent_1(requestParameters: LiveEventThumbnailsApiCreateThumbnailForEvent0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Picture>> {
            const liveEventThumbnailsCreateThumbnailForEventRequest1: LiveEventThumbnailsCreateThumbnailForEventRequest1 = {
                active: requestParameters.active
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createThumbnailForEvent_1(requestParameters.liveEventId, requestParameters.userId, liveEventThumbnailsCreateThumbnailForEventRequest1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method deletes a thumbnail image for the specified event.
         * @summary Delete a live event thumbnail
         * @param {LiveEventThumbnailsApiDeleteForEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteForEvent(requestParameters: LiveEventThumbnailsApiDeleteForEventRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteForEvent(requestParameters.liveEventId, requestParameters.thumbnailId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method deletes a thumbnail image for the specified event.
         * @summary Delete a live event thumbnail
         * @param {LiveEventThumbnailsApiDeleteThumbnailForEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteThumbnailForEvent(requestParameters: LiveEventThumbnailsApiDeleteThumbnailForEventRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteThumbnailForEvent(requestParameters.liveEventId, requestParameters.thumbnailId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method deletes a thumbnail image for the specified event.
         * @summary Delete a live event thumbnail
         * @param {LiveEventThumbnailsApiDeleteThumbnailForEvent0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteThumbnailForEvent_2(requestParameters: LiveEventThumbnailsApiDeleteThumbnailForEvent0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteThumbnailForEvent_2(requestParameters.liveEventId, requestParameters.thumbnailId, requestParameters.userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method edits a thumbnail image for the specified event.
         * @summary Edit a live event thumbnail
         * @param {LiveEventThumbnailsApiEditEventThumbnailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editEventThumbnail(requestParameters: LiveEventThumbnailsApiEditEventThumbnailRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Picture>> {
            const liveEventThumbnailsEditEventThumbnailRequest: LiveEventThumbnailsEditEventThumbnailRequest = {
                active: requestParameters.active
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.editEventThumbnail(requestParameters.liveEventId, requestParameters.thumbnailId, requestParameters.userId, liveEventThumbnailsEditEventThumbnailRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method edits a thumbnail image for the specified event.
         * @summary Edit a live event thumbnail
         * @param {LiveEventThumbnailsApiEditLiveEventThumbnailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editLiveEventThumbnail(requestParameters: LiveEventThumbnailsApiEditLiveEventThumbnailRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Picture>> {
            const liveEventThumbnailsEditLiveEventThumbnailRequest: LiveEventThumbnailsEditLiveEventThumbnailRequest = {
                active: requestParameters.active
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.editLiveEventThumbnail(requestParameters.liveEventId, requestParameters.thumbnailId, liveEventThumbnailsEditLiveEventThumbnailRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every thumbnail image of the specified event.
         * @summary Get all the thumbnails of a live event
         * @param {LiveEventThumbnailsApiGetAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAll(requestParameters: LiveEventThumbnailsApiGetAllRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Picture>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAll(requestParameters.liveEventId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every thumbnail image of the specified event.
         * @summary Get all the thumbnails of a live event
         * @param {LiveEventThumbnailsApiGetAllThumbnailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllThumbnails(requestParameters: LiveEventThumbnailsApiGetAllThumbnailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Picture>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllThumbnails(requestParameters.liveEventId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every thumbnail image of the specified event.
         * @summary Get all the thumbnails of a live event
         * @param {LiveEventThumbnailsApiGetAllThumbsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllThumbs(requestParameters: LiveEventThumbnailsApiGetAllThumbsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Picture>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllThumbs(requestParameters.liveEventId, requestParameters.userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns a single thumbnail image of the specified event.
         * @summary Get a specific live event thumbnail
         * @param {LiveEventThumbnailsApiGetSpecificThumbnailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpecificThumbnail(requestParameters: LiveEventThumbnailsApiGetSpecificThumbnailRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Picture>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpecificThumbnail(requestParameters.liveEventId, requestParameters.thumbnailId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns a single thumbnail image of the specified event.
         * @summary Get a specific live event thumbnail
         * @param {LiveEventThumbnailsApiGetSpecificThumbnail0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpecificThumbnail_3(requestParameters: LiveEventThumbnailsApiGetSpecificThumbnail0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Picture>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpecificThumbnail_3(requestParameters.liveEventId, requestParameters.thumbnailId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns a single thumbnail image of the specified event.
         * @summary Get a specific live event thumbnail
         * @param {LiveEventThumbnailsApiGetSpecificThumbnail1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpecificThumbnail_4(requestParameters: LiveEventThumbnailsApiGetSpecificThumbnail1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Picture>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpecificThumbnail_4(requestParameters.liveEventId, requestParameters.thumbnailId, requestParameters.userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method edits a thumbnail image for the specified event.
         * @summary Edit a live event thumbnail
         * @param {LiveEventThumbnailsApiUpdateEventThumbnailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEventThumbnail(requestParameters: LiveEventThumbnailsApiUpdateEventThumbnailRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Picture>> {
            const liveEventThumbnailsUpdateEventThumbnailRequest: LiveEventThumbnailsUpdateEventThumbnailRequest = {
                active: requestParameters.active
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEventThumbnail(requestParameters.liveEventId, requestParameters.thumbnailId, liveEventThumbnailsUpdateEventThumbnailRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LiveEventThumbnailsApi - factory interface
 * @export
 */
export const LiveEventThumbnailsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LiveEventThumbnailsApiFp(configuration)
    return {
        /**
         * This method creates a thumbnail image for the specified event.
         * @summary Create a live event thumbnail
         * @param {LiveEventThumbnailsApiAddThumbnailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addThumbnail(requestParameters: LiveEventThumbnailsApiAddThumbnailRequest, options?: AxiosRequestConfig): AxiosPromise<Picture> {
            return localVarFp.addThumbnail(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method creates a thumbnail image for the specified event.
         * @summary Create a live event thumbnail
         * @param {LiveEventThumbnailsApiCreateThumbnailForEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createThumbnailForEvent(requestParameters: LiveEventThumbnailsApiCreateThumbnailForEventRequest, options?: AxiosRequestConfig): AxiosPromise<Picture> {
            return localVarFp.createThumbnailForEvent(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method creates a thumbnail image for the specified event.
         * @summary Create a live event thumbnail
         * @param {LiveEventThumbnailsApiCreateThumbnailForEvent0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createThumbnailForEvent_1(requestParameters: LiveEventThumbnailsApiCreateThumbnailForEvent0Request, options?: AxiosRequestConfig): AxiosPromise<Picture> {
            return localVarFp.createThumbnailForEvent_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method deletes a thumbnail image for the specified event.
         * @summary Delete a live event thumbnail
         * @param {LiveEventThumbnailsApiDeleteForEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteForEvent(requestParameters: LiveEventThumbnailsApiDeleteForEventRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteForEvent(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method deletes a thumbnail image for the specified event.
         * @summary Delete a live event thumbnail
         * @param {LiveEventThumbnailsApiDeleteThumbnailForEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteThumbnailForEvent(requestParameters: LiveEventThumbnailsApiDeleteThumbnailForEventRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteThumbnailForEvent(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method deletes a thumbnail image for the specified event.
         * @summary Delete a live event thumbnail
         * @param {LiveEventThumbnailsApiDeleteThumbnailForEvent0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteThumbnailForEvent_2(requestParameters: LiveEventThumbnailsApiDeleteThumbnailForEvent0Request, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteThumbnailForEvent_2(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method edits a thumbnail image for the specified event.
         * @summary Edit a live event thumbnail
         * @param {LiveEventThumbnailsApiEditEventThumbnailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editEventThumbnail(requestParameters: LiveEventThumbnailsApiEditEventThumbnailRequest, options?: AxiosRequestConfig): AxiosPromise<Picture> {
            return localVarFp.editEventThumbnail(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method edits a thumbnail image for the specified event.
         * @summary Edit a live event thumbnail
         * @param {LiveEventThumbnailsApiEditLiveEventThumbnailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editLiveEventThumbnail(requestParameters: LiveEventThumbnailsApiEditLiveEventThumbnailRequest, options?: AxiosRequestConfig): AxiosPromise<Picture> {
            return localVarFp.editLiveEventThumbnail(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every thumbnail image of the specified event.
         * @summary Get all the thumbnails of a live event
         * @param {LiveEventThumbnailsApiGetAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(requestParameters: LiveEventThumbnailsApiGetAllRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Picture>> {
            return localVarFp.getAll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every thumbnail image of the specified event.
         * @summary Get all the thumbnails of a live event
         * @param {LiveEventThumbnailsApiGetAllThumbnailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllThumbnails(requestParameters: LiveEventThumbnailsApiGetAllThumbnailsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Picture>> {
            return localVarFp.getAllThumbnails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every thumbnail image of the specified event.
         * @summary Get all the thumbnails of a live event
         * @param {LiveEventThumbnailsApiGetAllThumbsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllThumbs(requestParameters: LiveEventThumbnailsApiGetAllThumbsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Picture>> {
            return localVarFp.getAllThumbs(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns a single thumbnail image of the specified event.
         * @summary Get a specific live event thumbnail
         * @param {LiveEventThumbnailsApiGetSpecificThumbnailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificThumbnail(requestParameters: LiveEventThumbnailsApiGetSpecificThumbnailRequest, options?: AxiosRequestConfig): AxiosPromise<Picture> {
            return localVarFp.getSpecificThumbnail(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns a single thumbnail image of the specified event.
         * @summary Get a specific live event thumbnail
         * @param {LiveEventThumbnailsApiGetSpecificThumbnail0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificThumbnail_3(requestParameters: LiveEventThumbnailsApiGetSpecificThumbnail0Request, options?: AxiosRequestConfig): AxiosPromise<Picture> {
            return localVarFp.getSpecificThumbnail_3(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns a single thumbnail image of the specified event.
         * @summary Get a specific live event thumbnail
         * @param {LiveEventThumbnailsApiGetSpecificThumbnail1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificThumbnail_4(requestParameters: LiveEventThumbnailsApiGetSpecificThumbnail1Request, options?: AxiosRequestConfig): AxiosPromise<Picture> {
            return localVarFp.getSpecificThumbnail_4(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method edits a thumbnail image for the specified event.
         * @summary Edit a live event thumbnail
         * @param {LiveEventThumbnailsApiUpdateEventThumbnailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEventThumbnail(requestParameters: LiveEventThumbnailsApiUpdateEventThumbnailRequest, options?: AxiosRequestConfig): AxiosPromise<Picture> {
            return localVarFp.updateEventThumbnail(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addThumbnail operation in LiveEventThumbnailsApi.
 * @export
 * @interface LiveEventThumbnailsApiAddThumbnailRequest
 */
export type LiveEventThumbnailsApiAddThumbnailRequest = {
    
    /**
    * The ID of the event.
    * @type {number}
    * @memberof LiveEventThumbnailsApiAddThumbnail
    */
    readonly liveEventId: number
    
} & LiveEventThumbnailsAddThumbnailRequest

/**
 * Request parameters for createThumbnailForEvent operation in LiveEventThumbnailsApi.
 * @export
 * @interface LiveEventThumbnailsApiCreateThumbnailForEventRequest
 */
export type LiveEventThumbnailsApiCreateThumbnailForEventRequest = {
    
    /**
    * The ID of the event.
    * @type {number}
    * @memberof LiveEventThumbnailsApiCreateThumbnailForEvent
    */
    readonly liveEventId: number
    
} & LiveEventThumbnailsCreateThumbnailForEventRequest

/**
 * Request parameters for createThumbnailForEvent_1 operation in LiveEventThumbnailsApi.
 * @export
 * @interface LiveEventThumbnailsApiCreateThumbnailForEvent0Request
 */
export type LiveEventThumbnailsApiCreateThumbnailForEvent0Request = {
    
    /**
    * The ID of the event.
    * @type {number}
    * @memberof LiveEventThumbnailsApiCreateThumbnailForEvent0
    */
    readonly liveEventId: number
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof LiveEventThumbnailsApiCreateThumbnailForEvent0
    */
    readonly userId: number
    
} & LiveEventThumbnailsCreateThumbnailForEventRequest1

/**
 * Request parameters for deleteForEvent operation in LiveEventThumbnailsApi.
 * @export
 * @interface LiveEventThumbnailsApiDeleteForEventRequest
 */
export type LiveEventThumbnailsApiDeleteForEventRequest = {
    
    /**
    * The ID of the event.
    * @type {number}
    * @memberof LiveEventThumbnailsApiDeleteForEvent
    */
    readonly liveEventId: number
    
    /**
    * The ID of the thumbnail.
    * @type {number}
    * @memberof LiveEventThumbnailsApiDeleteForEvent
    */
    readonly thumbnailId: number
    
}

/**
 * Request parameters for deleteThumbnailForEvent operation in LiveEventThumbnailsApi.
 * @export
 * @interface LiveEventThumbnailsApiDeleteThumbnailForEventRequest
 */
export type LiveEventThumbnailsApiDeleteThumbnailForEventRequest = {
    
    /**
    * The ID of the event.
    * @type {number}
    * @memberof LiveEventThumbnailsApiDeleteThumbnailForEvent
    */
    readonly liveEventId: number
    
    /**
    * The ID of the thumbnail.
    * @type {number}
    * @memberof LiveEventThumbnailsApiDeleteThumbnailForEvent
    */
    readonly thumbnailId: number
    
}

/**
 * Request parameters for deleteThumbnailForEvent_2 operation in LiveEventThumbnailsApi.
 * @export
 * @interface LiveEventThumbnailsApiDeleteThumbnailForEvent0Request
 */
export type LiveEventThumbnailsApiDeleteThumbnailForEvent0Request = {
    
    /**
    * The ID of the event.
    * @type {number}
    * @memberof LiveEventThumbnailsApiDeleteThumbnailForEvent0
    */
    readonly liveEventId: number
    
    /**
    * The ID of the thumbnail.
    * @type {number}
    * @memberof LiveEventThumbnailsApiDeleteThumbnailForEvent0
    */
    readonly thumbnailId: number
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof LiveEventThumbnailsApiDeleteThumbnailForEvent0
    */
    readonly userId: number
    
}

/**
 * Request parameters for editEventThumbnail operation in LiveEventThumbnailsApi.
 * @export
 * @interface LiveEventThumbnailsApiEditEventThumbnailRequest
 */
export type LiveEventThumbnailsApiEditEventThumbnailRequest = {
    
    /**
    * The ID of the event.
    * @type {number}
    * @memberof LiveEventThumbnailsApiEditEventThumbnail
    */
    readonly liveEventId: number
    
    /**
    * The ID of the thumbnail.
    * @type {number}
    * @memberof LiveEventThumbnailsApiEditEventThumbnail
    */
    readonly thumbnailId: number
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof LiveEventThumbnailsApiEditEventThumbnail
    */
    readonly userId: number
    
} & LiveEventThumbnailsEditEventThumbnailRequest

/**
 * Request parameters for editLiveEventThumbnail operation in LiveEventThumbnailsApi.
 * @export
 * @interface LiveEventThumbnailsApiEditLiveEventThumbnailRequest
 */
export type LiveEventThumbnailsApiEditLiveEventThumbnailRequest = {
    
    /**
    * The ID of the event.
    * @type {number}
    * @memberof LiveEventThumbnailsApiEditLiveEventThumbnail
    */
    readonly liveEventId: number
    
    /**
    * The ID of the thumbnail.
    * @type {number}
    * @memberof LiveEventThumbnailsApiEditLiveEventThumbnail
    */
    readonly thumbnailId: number
    
} & LiveEventThumbnailsEditLiveEventThumbnailRequest

/**
 * Request parameters for getAll operation in LiveEventThumbnailsApi.
 * @export
 * @interface LiveEventThumbnailsApiGetAllRequest
 */
export type LiveEventThumbnailsApiGetAllRequest = {
    
    /**
    * The ID of the event.
    * @type {number}
    * @memberof LiveEventThumbnailsApiGetAll
    */
    readonly liveEventId: number
    
}

/**
 * Request parameters for getAllThumbnails operation in LiveEventThumbnailsApi.
 * @export
 * @interface LiveEventThumbnailsApiGetAllThumbnailsRequest
 */
export type LiveEventThumbnailsApiGetAllThumbnailsRequest = {
    
    /**
    * The ID of the event.
    * @type {number}
    * @memberof LiveEventThumbnailsApiGetAllThumbnails
    */
    readonly liveEventId: number
    
}

/**
 * Request parameters for getAllThumbs operation in LiveEventThumbnailsApi.
 * @export
 * @interface LiveEventThumbnailsApiGetAllThumbsRequest
 */
export type LiveEventThumbnailsApiGetAllThumbsRequest = {
    
    /**
    * The ID of the event.
    * @type {number}
    * @memberof LiveEventThumbnailsApiGetAllThumbs
    */
    readonly liveEventId: number
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof LiveEventThumbnailsApiGetAllThumbs
    */
    readonly userId: number
    
}

/**
 * Request parameters for getSpecificThumbnail operation in LiveEventThumbnailsApi.
 * @export
 * @interface LiveEventThumbnailsApiGetSpecificThumbnailRequest
 */
export type LiveEventThumbnailsApiGetSpecificThumbnailRequest = {
    
    /**
    * The ID of the event.
    * @type {number}
    * @memberof LiveEventThumbnailsApiGetSpecificThumbnail
    */
    readonly liveEventId: number
    
    /**
    * The ID of the thumbnail.
    * @type {number}
    * @memberof LiveEventThumbnailsApiGetSpecificThumbnail
    */
    readonly thumbnailId: number
    
}

/**
 * Request parameters for getSpecificThumbnail_3 operation in LiveEventThumbnailsApi.
 * @export
 * @interface LiveEventThumbnailsApiGetSpecificThumbnail0Request
 */
export type LiveEventThumbnailsApiGetSpecificThumbnail0Request = {
    
    /**
    * The ID of the event.
    * @type {number}
    * @memberof LiveEventThumbnailsApiGetSpecificThumbnail0
    */
    readonly liveEventId: number
    
    /**
    * The ID of the thumbnail.
    * @type {number}
    * @memberof LiveEventThumbnailsApiGetSpecificThumbnail0
    */
    readonly thumbnailId: number
    
}

/**
 * Request parameters for getSpecificThumbnail_4 operation in LiveEventThumbnailsApi.
 * @export
 * @interface LiveEventThumbnailsApiGetSpecificThumbnail1Request
 */
export type LiveEventThumbnailsApiGetSpecificThumbnail1Request = {
    
    /**
    * The ID of the event.
    * @type {number}
    * @memberof LiveEventThumbnailsApiGetSpecificThumbnail1
    */
    readonly liveEventId: number
    
    /**
    * The ID of the thumbnail.
    * @type {number}
    * @memberof LiveEventThumbnailsApiGetSpecificThumbnail1
    */
    readonly thumbnailId: number
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof LiveEventThumbnailsApiGetSpecificThumbnail1
    */
    readonly userId: number
    
}

/**
 * Request parameters for updateEventThumbnail operation in LiveEventThumbnailsApi.
 * @export
 * @interface LiveEventThumbnailsApiUpdateEventThumbnailRequest
 */
export type LiveEventThumbnailsApiUpdateEventThumbnailRequest = {
    
    /**
    * The ID of the event.
    * @type {number}
    * @memberof LiveEventThumbnailsApiUpdateEventThumbnail
    */
    readonly liveEventId: number
    
    /**
    * The ID of the thumbnail.
    * @type {number}
    * @memberof LiveEventThumbnailsApiUpdateEventThumbnail
    */
    readonly thumbnailId: number
    
} & LiveEventThumbnailsUpdateEventThumbnailRequest

/**
 * LiveEventThumbnailsApiGenerated - object-oriented interface
 * @export
 * @class LiveEventThumbnailsApiGenerated
 * @extends {BaseAPI}
 */
export class LiveEventThumbnailsApiGenerated extends BaseAPI {
    /**
     * This method creates a thumbnail image for the specified event.
     * @summary Create a live event thumbnail
     * @param {LiveEventThumbnailsApiAddThumbnailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEventThumbnailsApiGenerated
     */
    public addThumbnail(requestParameters: LiveEventThumbnailsApiAddThumbnailRequest, options?: AxiosRequestConfig) {
        return LiveEventThumbnailsApiFp(this.configuration).addThumbnail(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method creates a thumbnail image for the specified event.
     * @summary Create a live event thumbnail
     * @param {LiveEventThumbnailsApiCreateThumbnailForEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEventThumbnailsApiGenerated
     */
    public createThumbnailForEvent(requestParameters: LiveEventThumbnailsApiCreateThumbnailForEventRequest, options?: AxiosRequestConfig) {
        return LiveEventThumbnailsApiFp(this.configuration).createThumbnailForEvent(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method creates a thumbnail image for the specified event.
     * @summary Create a live event thumbnail
     * @param {LiveEventThumbnailsApiCreateThumbnailForEvent0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEventThumbnailsApiGenerated
     */
    public createThumbnailForEvent_1(requestParameters: LiveEventThumbnailsApiCreateThumbnailForEvent0Request, options?: AxiosRequestConfig) {
        return LiveEventThumbnailsApiFp(this.configuration).createThumbnailForEvent_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method deletes a thumbnail image for the specified event.
     * @summary Delete a live event thumbnail
     * @param {LiveEventThumbnailsApiDeleteForEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEventThumbnailsApiGenerated
     */
    public deleteForEvent(requestParameters: LiveEventThumbnailsApiDeleteForEventRequest, options?: AxiosRequestConfig) {
        return LiveEventThumbnailsApiFp(this.configuration).deleteForEvent(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method deletes a thumbnail image for the specified event.
     * @summary Delete a live event thumbnail
     * @param {LiveEventThumbnailsApiDeleteThumbnailForEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEventThumbnailsApiGenerated
     */
    public deleteThumbnailForEvent(requestParameters: LiveEventThumbnailsApiDeleteThumbnailForEventRequest, options?: AxiosRequestConfig) {
        return LiveEventThumbnailsApiFp(this.configuration).deleteThumbnailForEvent(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method deletes a thumbnail image for the specified event.
     * @summary Delete a live event thumbnail
     * @param {LiveEventThumbnailsApiDeleteThumbnailForEvent0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEventThumbnailsApiGenerated
     */
    public deleteThumbnailForEvent_2(requestParameters: LiveEventThumbnailsApiDeleteThumbnailForEvent0Request, options?: AxiosRequestConfig) {
        return LiveEventThumbnailsApiFp(this.configuration).deleteThumbnailForEvent_2(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method edits a thumbnail image for the specified event.
     * @summary Edit a live event thumbnail
     * @param {LiveEventThumbnailsApiEditEventThumbnailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEventThumbnailsApiGenerated
     */
    public editEventThumbnail(requestParameters: LiveEventThumbnailsApiEditEventThumbnailRequest, options?: AxiosRequestConfig) {
        return LiveEventThumbnailsApiFp(this.configuration).editEventThumbnail(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method edits a thumbnail image for the specified event.
     * @summary Edit a live event thumbnail
     * @param {LiveEventThumbnailsApiEditLiveEventThumbnailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEventThumbnailsApiGenerated
     */
    public editLiveEventThumbnail(requestParameters: LiveEventThumbnailsApiEditLiveEventThumbnailRequest, options?: AxiosRequestConfig) {
        return LiveEventThumbnailsApiFp(this.configuration).editLiveEventThumbnail(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every thumbnail image of the specified event.
     * @summary Get all the thumbnails of a live event
     * @param {LiveEventThumbnailsApiGetAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEventThumbnailsApiGenerated
     */
    public getAll(requestParameters: LiveEventThumbnailsApiGetAllRequest, options?: AxiosRequestConfig) {
        return LiveEventThumbnailsApiFp(this.configuration).getAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every thumbnail image of the specified event.
     * @summary Get all the thumbnails of a live event
     * @param {LiveEventThumbnailsApiGetAllThumbnailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEventThumbnailsApiGenerated
     */
    public getAllThumbnails(requestParameters: LiveEventThumbnailsApiGetAllThumbnailsRequest, options?: AxiosRequestConfig) {
        return LiveEventThumbnailsApiFp(this.configuration).getAllThumbnails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every thumbnail image of the specified event.
     * @summary Get all the thumbnails of a live event
     * @param {LiveEventThumbnailsApiGetAllThumbsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEventThumbnailsApiGenerated
     */
    public getAllThumbs(requestParameters: LiveEventThumbnailsApiGetAllThumbsRequest, options?: AxiosRequestConfig) {
        return LiveEventThumbnailsApiFp(this.configuration).getAllThumbs(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns a single thumbnail image of the specified event.
     * @summary Get a specific live event thumbnail
     * @param {LiveEventThumbnailsApiGetSpecificThumbnailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEventThumbnailsApiGenerated
     */
    public getSpecificThumbnail(requestParameters: LiveEventThumbnailsApiGetSpecificThumbnailRequest, options?: AxiosRequestConfig) {
        return LiveEventThumbnailsApiFp(this.configuration).getSpecificThumbnail(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns a single thumbnail image of the specified event.
     * @summary Get a specific live event thumbnail
     * @param {LiveEventThumbnailsApiGetSpecificThumbnail0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEventThumbnailsApiGenerated
     */
    public getSpecificThumbnail_3(requestParameters: LiveEventThumbnailsApiGetSpecificThumbnail0Request, options?: AxiosRequestConfig) {
        return LiveEventThumbnailsApiFp(this.configuration).getSpecificThumbnail_3(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns a single thumbnail image of the specified event.
     * @summary Get a specific live event thumbnail
     * @param {LiveEventThumbnailsApiGetSpecificThumbnail1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEventThumbnailsApiGenerated
     */
    public getSpecificThumbnail_4(requestParameters: LiveEventThumbnailsApiGetSpecificThumbnail1Request, options?: AxiosRequestConfig) {
        return LiveEventThumbnailsApiFp(this.configuration).getSpecificThumbnail_4(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method edits a thumbnail image for the specified event.
     * @summary Edit a live event thumbnail
     * @param {LiveEventThumbnailsApiUpdateEventThumbnailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEventThumbnailsApiGenerated
     */
    public updateEventThumbnail(requestParameters: LiveEventThumbnailsApiUpdateEventThumbnailRequest, options?: AxiosRequestConfig) {
        return LiveEventThumbnailsApiFp(this.configuration).updateEventThumbnail(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
