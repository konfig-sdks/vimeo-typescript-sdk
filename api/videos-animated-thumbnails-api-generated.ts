/* tslint:disable */
/* eslint-disable */
/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

The version of the OpenAPI document: 3.4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AnimatedThumbset } from '../models';
// @ts-ignore
import { LegacyError } from '../models';
// @ts-ignore
import { ModelError } from '../models';
// @ts-ignore
import { VideosAnimatedThumbnailsCreateSetRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * VideosAnimatedThumbnailsApi - axios parameter creator
 * @export
 */
export const VideosAnimatedThumbnailsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method creates a set of animated thumbnails for the specified video. Please note that you can\'t create more than four sets of animated thumbnails for the same video.
         * @summary Create a set of animated thumbnails for a video
         * @param {number} videoId The ID of the video.
         * @param {VideosAnimatedThumbnailsCreateSetRequest} videosAnimatedThumbnailsCreateSetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSet: async (videoId: number, videosAnimatedThumbnailsCreateSetRequest: VideosAnimatedThumbnailsCreateSetRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('createSet', 'videoId', videoId)
            // verify required parameter 'videosAnimatedThumbnailsCreateSetRequest' is not null or undefined
            assertParamExists('createSet', 'videosAnimatedThumbnailsCreateSetRequest', videosAnimatedThumbnailsCreateSetRequest)
            const localVarPath = `/videos/{video_id}/animated_thumbsets`
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.vimeo.animatedthumbnails+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: videosAnimatedThumbnailsCreateSetRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/videos/{video_id}/animated_thumbsets',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(videosAnimatedThumbnailsCreateSetRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method deletes a set of animated thumbnails for the specified video.
         * @summary Delete a set of animated thumbnails for a video
         * @param {string} pictureId The UUID of the set of animated thumbnails.
         * @param {number} videoId The ID of the video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSet: async (pictureId: string, videoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pictureId' is not null or undefined
            assertParamExists('deleteSet', 'pictureId', pictureId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('deleteSet', 'videoId', videoId)
            const localVarPath = `/videos/{video_id}/animated_thumbsets/{picture_id}`
                .replace(`{${"picture_id"}}`, encodeURIComponent(String(pictureId !== undefined ? pictureId : `-picture_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["delete"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["delete"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/videos/{video_id}/animated_thumbsets/{picture_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns all the sets of animated thumbnails associated with the specified video. The authenticated user must be the owner of the video.
         * @summary Get all the animated thumbnails of a video
         * @param {number} videoId The ID of the video.
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSets: async (videoId: number, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('getAllSets', 'videoId', videoId)
            const localVarPath = `/videos/{video_id}/animated_thumbsets`
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/videos/{video_id}/animated_thumbsets',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns the status of a particular set of animated thumbnails associated with the specified video. The status indicates whether the thumbnails are ready to use. The authenticated user must be the owner of the video.
         * @summary Get the status of a set of animated thumbnails
         * @param {string} pictureId The UUID of the set of animated thumbnails.
         * @param {number} videoId The ID of the video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatusOfSet: async (pictureId: string, videoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pictureId' is not null or undefined
            assertParamExists('getStatusOfSet', 'pictureId', pictureId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('getStatusOfSet', 'videoId', videoId)
            const localVarPath = `/videos/{video_id}/animated_thumbsets/{picture_id}/status`
                .replace(`{${"picture_id"}}`, encodeURIComponent(String(pictureId !== undefined ? pictureId : `-picture_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/videos/{video_id}/animated_thumbsets/{picture_id}/status',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns a particular set of animated thumbnails associated with the specified video. The authenticated user must be the owner of the video.
         * @summary Get a specific set of animated thumbnails
         * @param {string} pictureId The UUID of the set of animated thumbnails.
         * @param {number} videoId The ID of the video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        specificSetGet: async (pictureId: string, videoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pictureId' is not null or undefined
            assertParamExists('specificSetGet', 'pictureId', pictureId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('specificSetGet', 'videoId', videoId)
            const localVarPath = `/videos/{video_id}/animated_thumbsets/{picture_id}`
                .replace(`{${"picture_id"}}`, encodeURIComponent(String(pictureId !== undefined ? pictureId : `-picture_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/videos/{video_id}/animated_thumbsets/{picture_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VideosAnimatedThumbnailsApi - functional programming interface
 * @export
 */
export const VideosAnimatedThumbnailsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VideosAnimatedThumbnailsApiAxiosParamCreator(configuration)
    return {
        /**
         * This method creates a set of animated thumbnails for the specified video. Please note that you can\'t create more than four sets of animated thumbnails for the same video.
         * @summary Create a set of animated thumbnails for a video
         * @param {VideosAnimatedThumbnailsApiCreateSetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSet(requestParameters: VideosAnimatedThumbnailsApiCreateSetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnimatedThumbset>> {
            const videosAnimatedThumbnailsCreateSetRequest: VideosAnimatedThumbnailsCreateSetRequest = {
                duration: requestParameters.duration,
                start_time: requestParameters.start_time
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSet(requestParameters.videoId, videosAnimatedThumbnailsCreateSetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method deletes a set of animated thumbnails for the specified video.
         * @summary Delete a set of animated thumbnails for a video
         * @param {VideosAnimatedThumbnailsApiDeleteSetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSet(requestParameters: VideosAnimatedThumbnailsApiDeleteSetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSet(requestParameters.pictureId, requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns all the sets of animated thumbnails associated with the specified video. The authenticated user must be the owner of the video.
         * @summary Get all the animated thumbnails of a video
         * @param {VideosAnimatedThumbnailsApiGetAllSetsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllSets(requestParameters: VideosAnimatedThumbnailsApiGetAllSetsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AnimatedThumbset>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllSets(requestParameters.videoId, requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns the status of a particular set of animated thumbnails associated with the specified video. The status indicates whether the thumbnails are ready to use. The authenticated user must be the owner of the video.
         * @summary Get the status of a set of animated thumbnails
         * @param {VideosAnimatedThumbnailsApiGetStatusOfSetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStatusOfSet(requestParameters: VideosAnimatedThumbnailsApiGetStatusOfSetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnimatedThumbset>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStatusOfSet(requestParameters.pictureId, requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns a particular set of animated thumbnails associated with the specified video. The authenticated user must be the owner of the video.
         * @summary Get a specific set of animated thumbnails
         * @param {VideosAnimatedThumbnailsApiSpecificSetGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async specificSetGet(requestParameters: VideosAnimatedThumbnailsApiSpecificSetGetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnimatedThumbset>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.specificSetGet(requestParameters.pictureId, requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VideosAnimatedThumbnailsApi - factory interface
 * @export
 */
export const VideosAnimatedThumbnailsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VideosAnimatedThumbnailsApiFp(configuration)
    return {
        /**
         * This method creates a set of animated thumbnails for the specified video. Please note that you can\'t create more than four sets of animated thumbnails for the same video.
         * @summary Create a set of animated thumbnails for a video
         * @param {VideosAnimatedThumbnailsApiCreateSetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSet(requestParameters: VideosAnimatedThumbnailsApiCreateSetRequest, options?: AxiosRequestConfig): AxiosPromise<AnimatedThumbset> {
            return localVarFp.createSet(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method deletes a set of animated thumbnails for the specified video.
         * @summary Delete a set of animated thumbnails for a video
         * @param {VideosAnimatedThumbnailsApiDeleteSetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSet(requestParameters: VideosAnimatedThumbnailsApiDeleteSetRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteSet(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns all the sets of animated thumbnails associated with the specified video. The authenticated user must be the owner of the video.
         * @summary Get all the animated thumbnails of a video
         * @param {VideosAnimatedThumbnailsApiGetAllSetsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSets(requestParameters: VideosAnimatedThumbnailsApiGetAllSetsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<AnimatedThumbset>> {
            return localVarFp.getAllSets(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns the status of a particular set of animated thumbnails associated with the specified video. The status indicates whether the thumbnails are ready to use. The authenticated user must be the owner of the video.
         * @summary Get the status of a set of animated thumbnails
         * @param {VideosAnimatedThumbnailsApiGetStatusOfSetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatusOfSet(requestParameters: VideosAnimatedThumbnailsApiGetStatusOfSetRequest, options?: AxiosRequestConfig): AxiosPromise<AnimatedThumbset> {
            return localVarFp.getStatusOfSet(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns a particular set of animated thumbnails associated with the specified video. The authenticated user must be the owner of the video.
         * @summary Get a specific set of animated thumbnails
         * @param {VideosAnimatedThumbnailsApiSpecificSetGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        specificSetGet(requestParameters: VideosAnimatedThumbnailsApiSpecificSetGetRequest, options?: AxiosRequestConfig): AxiosPromise<AnimatedThumbset> {
            return localVarFp.specificSetGet(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createSet operation in VideosAnimatedThumbnailsApi.
 * @export
 * @interface VideosAnimatedThumbnailsApiCreateSetRequest
 */
export type VideosAnimatedThumbnailsApiCreateSetRequest = {
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof VideosAnimatedThumbnailsApiCreateSet
    */
    readonly videoId: number
    
} & VideosAnimatedThumbnailsCreateSetRequest

/**
 * Request parameters for deleteSet operation in VideosAnimatedThumbnailsApi.
 * @export
 * @interface VideosAnimatedThumbnailsApiDeleteSetRequest
 */
export type VideosAnimatedThumbnailsApiDeleteSetRequest = {
    
    /**
    * The UUID of the set of animated thumbnails.
    * @type {string}
    * @memberof VideosAnimatedThumbnailsApiDeleteSet
    */
    readonly pictureId: string
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof VideosAnimatedThumbnailsApiDeleteSet
    */
    readonly videoId: number
    
}

/**
 * Request parameters for getAllSets operation in VideosAnimatedThumbnailsApi.
 * @export
 * @interface VideosAnimatedThumbnailsApiGetAllSetsRequest
 */
export type VideosAnimatedThumbnailsApiGetAllSetsRequest = {
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof VideosAnimatedThumbnailsApiGetAllSets
    */
    readonly videoId: number
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof VideosAnimatedThumbnailsApiGetAllSets
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof VideosAnimatedThumbnailsApiGetAllSets
    */
    readonly perPage?: number
    
}

/**
 * Request parameters for getStatusOfSet operation in VideosAnimatedThumbnailsApi.
 * @export
 * @interface VideosAnimatedThumbnailsApiGetStatusOfSetRequest
 */
export type VideosAnimatedThumbnailsApiGetStatusOfSetRequest = {
    
    /**
    * The UUID of the set of animated thumbnails.
    * @type {string}
    * @memberof VideosAnimatedThumbnailsApiGetStatusOfSet
    */
    readonly pictureId: string
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof VideosAnimatedThumbnailsApiGetStatusOfSet
    */
    readonly videoId: number
    
}

/**
 * Request parameters for specificSetGet operation in VideosAnimatedThumbnailsApi.
 * @export
 * @interface VideosAnimatedThumbnailsApiSpecificSetGetRequest
 */
export type VideosAnimatedThumbnailsApiSpecificSetGetRequest = {
    
    /**
    * The UUID of the set of animated thumbnails.
    * @type {string}
    * @memberof VideosAnimatedThumbnailsApiSpecificSetGet
    */
    readonly pictureId: string
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof VideosAnimatedThumbnailsApiSpecificSetGet
    */
    readonly videoId: number
    
}

/**
 * VideosAnimatedThumbnailsApiGenerated - object-oriented interface
 * @export
 * @class VideosAnimatedThumbnailsApiGenerated
 * @extends {BaseAPI}
 */
export class VideosAnimatedThumbnailsApiGenerated extends BaseAPI {
    /**
     * This method creates a set of animated thumbnails for the specified video. Please note that you can\'t create more than four sets of animated thumbnails for the same video.
     * @summary Create a set of animated thumbnails for a video
     * @param {VideosAnimatedThumbnailsApiCreateSetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosAnimatedThumbnailsApiGenerated
     */
    public createSet(requestParameters: VideosAnimatedThumbnailsApiCreateSetRequest, options?: AxiosRequestConfig) {
        return VideosAnimatedThumbnailsApiFp(this.configuration).createSet(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method deletes a set of animated thumbnails for the specified video.
     * @summary Delete a set of animated thumbnails for a video
     * @param {VideosAnimatedThumbnailsApiDeleteSetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosAnimatedThumbnailsApiGenerated
     */
    public deleteSet(requestParameters: VideosAnimatedThumbnailsApiDeleteSetRequest, options?: AxiosRequestConfig) {
        return VideosAnimatedThumbnailsApiFp(this.configuration).deleteSet(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns all the sets of animated thumbnails associated with the specified video. The authenticated user must be the owner of the video.
     * @summary Get all the animated thumbnails of a video
     * @param {VideosAnimatedThumbnailsApiGetAllSetsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosAnimatedThumbnailsApiGenerated
     */
    public getAllSets(requestParameters: VideosAnimatedThumbnailsApiGetAllSetsRequest, options?: AxiosRequestConfig) {
        return VideosAnimatedThumbnailsApiFp(this.configuration).getAllSets(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns the status of a particular set of animated thumbnails associated with the specified video. The status indicates whether the thumbnails are ready to use. The authenticated user must be the owner of the video.
     * @summary Get the status of a set of animated thumbnails
     * @param {VideosAnimatedThumbnailsApiGetStatusOfSetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosAnimatedThumbnailsApiGenerated
     */
    public getStatusOfSet(requestParameters: VideosAnimatedThumbnailsApiGetStatusOfSetRequest, options?: AxiosRequestConfig) {
        return VideosAnimatedThumbnailsApiFp(this.configuration).getStatusOfSet(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns a particular set of animated thumbnails associated with the specified video. The authenticated user must be the owner of the video.
     * @summary Get a specific set of animated thumbnails
     * @param {VideosAnimatedThumbnailsApiSpecificSetGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosAnimatedThumbnailsApiGenerated
     */
    public specificSetGet(requestParameters: VideosAnimatedThumbnailsApiSpecificSetGetRequest, options?: AxiosRequestConfig) {
        return VideosAnimatedThumbnailsApiFp(this.configuration).specificSetGet(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
