/* tslint:disable */
/* eslint-disable */
/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

The version of the OpenAPI document: 3.4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ChannelsModeratorsRemoveMultipleFromChannelRequest } from '../models';
// @ts-ignore
import { ChannelsModeratorsReplaceModeratorsRequest } from '../models';
// @ts-ignore
import { LegacyError } from '../models';
// @ts-ignore
import { ModelError } from '../models';
// @ts-ignore
import { User } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ChannelsModeratorsApi - axios parameter creator
 * @export
 */
export const ChannelsModeratorsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method adds a single user as a moderator to the specified channel. The authenticated user must be a follower of the requested user to add them as a channel moderator.
         * @summary Add a specific moderator to a channel
         * @param {number} channelId The ID of the channel.
         * @param {number} userId The ID of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addModeratorToChannel: async (channelId: number, userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('addModeratorToChannel', 'channelId', channelId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('addModeratorToChannel', 'userId', userId)
            const localVarPath = `/channels/{channel_id}/moderators/{user_id}`
                .replace(`{${"channel_id"}}`, encodeURIComponent(String(channelId !== undefined ? channelId : `-channel_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/channels/{channel_id}/moderators/{user_id}',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method adds multiple users as moderators to the specified channel. Include the users by their URI as a JSON array in the body of the request using the **user_uri** field, like this: `[{ \"user_uri\": \"/users/1234\" }, { \"user_uri\": \"/users/1235\" }]`. The authenticated user must be a follower of a requested user to add this person as a moderator. For more information on batch requests like this one, see [Using Common Formats and Parameters](https://developer.vimeo.com/api/common-formats#working-with-batch-requests).
         * @summary Add a list of moderators to a channel
         * @param {number} channelId The ID of the channel.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkAddModerators: async (channelId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('bulkAddModerators', 'channelId', channelId)
            const localVarPath = `/channels/{channel_id}/moderators`
                .replace(`{${"channel_id"}}`, encodeURIComponent(String(channelId !== undefined ? channelId : `-channel_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/channels/{channel_id}/moderators',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns a single moderator of the specified channel.
         * @summary Get a specific moderator of a channel
         * @param {number} channelId The ID of the channel.
         * @param {number} userId The ID of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificModerator: async (channelId: number, userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('getSpecificModerator', 'channelId', channelId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getSpecificModerator', 'userId', userId)
            const localVarPath = `/channels/{channel_id}/moderators/{user_id}`
                .replace(`{${"channel_id"}}`, encodeURIComponent(String(channelId !== undefined ? channelId : `-channel_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/channels/{channel_id}/moderators/{user_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every moderator of the specified channel.
         * @summary Get all the moderators of a channel
         * @param {number} channelId The ID of the channel.
         * @param {'asc' | 'desc'} [direction] The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order. 
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {string} [query] The search query to use to filter the results.
         * @param {'alphabetical' | 'date'} [sort] The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date added. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listByChannel: async (channelId: number, direction?: 'asc' | 'desc', page?: number, perPage?: number, query?: string, sort?: 'alphabetical' | 'date', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('listByChannel', 'channelId', channelId)
            const localVarPath = `/channels/{channel_id}/moderators`
                .replace(`{${"channel_id"}}`, encodeURIComponent(String(channelId !== undefined ? channelId : `-channel_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/channels/{channel_id}/moderators',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method removes a single moderator from the specified channel. The authenticated user must be the owner of the channel.
         * @summary Remove a specific moderator from a channel
         * @param {number} channelId The ID of the channel.
         * @param {number} userId The ID of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeModerator: async (channelId: number, userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('removeModerator', 'channelId', channelId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('removeModerator', 'userId', userId)
            const localVarPath = `/channels/{channel_id}/moderators/{user_id}`
                .replace(`{${"channel_id"}}`, encodeURIComponent(String(channelId !== undefined ? channelId : `-channel_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/channels/{channel_id}/moderators/{user_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method removes multiple moderators from the specified channel. The authenticated user must be the owner of the channel.
         * @summary Remove a list of moderators from a channel
         * @param {number} channelId The ID of the channel.
         * @param {ChannelsModeratorsRemoveMultipleFromChannelRequest} channelsModeratorsRemoveMultipleFromChannelRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeMultipleFromChannel: async (channelId: number, channelsModeratorsRemoveMultipleFromChannelRequest: ChannelsModeratorsRemoveMultipleFromChannelRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('removeMultipleFromChannel', 'channelId', channelId)
            // verify required parameter 'channelsModeratorsRemoveMultipleFromChannelRequest' is not null or undefined
            assertParamExists('removeMultipleFromChannel', 'channelsModeratorsRemoveMultipleFromChannelRequest', channelsModeratorsRemoveMultipleFromChannelRequest)
            const localVarPath = `/channels/{channel_id}/moderators`
                .replace(`{${"channel_id"}}`, encodeURIComponent(String(channelId !== undefined ? channelId : `-channel_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.vimeo.user+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: channelsModeratorsRemoveMultipleFromChannelRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/channels/{channel_id}/moderators',
                httpMethod: 'DELETE'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(channelsModeratorsRemoveMultipleFromChannelRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method replaces the current list of channel moderators with a new list. The authenticated user must be the owner of the channel and a follower of each requested user to add them as a channel moderator.
         * @summary Replace the moderators of a channel
         * @param {number} channelId The ID of the channel.
         * @param {ChannelsModeratorsReplaceModeratorsRequest} channelsModeratorsReplaceModeratorsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceModerators: async (channelId: number, channelsModeratorsReplaceModeratorsRequest: ChannelsModeratorsReplaceModeratorsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('replaceModerators', 'channelId', channelId)
            // verify required parameter 'channelsModeratorsReplaceModeratorsRequest' is not null or undefined
            assertParamExists('replaceModerators', 'channelsModeratorsReplaceModeratorsRequest', channelsModeratorsReplaceModeratorsRequest)
            const localVarPath = `/channels/{channel_id}/moderators`
                .replace(`{${"channel_id"}}`, encodeURIComponent(String(channelId !== undefined ? channelId : `-channel_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: channelsModeratorsReplaceModeratorsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/channels/{channel_id}/moderators',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(channelsModeratorsReplaceModeratorsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChannelsModeratorsApi - functional programming interface
 * @export
 */
export const ChannelsModeratorsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ChannelsModeratorsApiAxiosParamCreator(configuration)
    return {
        /**
         * This method adds a single user as a moderator to the specified channel. The authenticated user must be a follower of the requested user to add them as a channel moderator.
         * @summary Add a specific moderator to a channel
         * @param {ChannelsModeratorsApiAddModeratorToChannelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addModeratorToChannel(requestParameters: ChannelsModeratorsApiAddModeratorToChannelRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addModeratorToChannel(requestParameters.channelId, requestParameters.userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method adds multiple users as moderators to the specified channel. Include the users by their URI as a JSON array in the body of the request using the **user_uri** field, like this: `[{ \"user_uri\": \"/users/1234\" }, { \"user_uri\": \"/users/1235\" }]`. The authenticated user must be a follower of a requested user to add this person as a moderator. For more information on batch requests like this one, see [Using Common Formats and Parameters](https://developer.vimeo.com/api/common-formats#working-with-batch-requests).
         * @summary Add a list of moderators to a channel
         * @param {ChannelsModeratorsApiBulkAddModeratorsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulkAddModerators(requestParameters: ChannelsModeratorsApiBulkAddModeratorsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bulkAddModerators(requestParameters.channelId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns a single moderator of the specified channel.
         * @summary Get a specific moderator of a channel
         * @param {ChannelsModeratorsApiGetSpecificModeratorRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpecificModerator(requestParameters: ChannelsModeratorsApiGetSpecificModeratorRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpecificModerator(requestParameters.channelId, requestParameters.userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every moderator of the specified channel.
         * @summary Get all the moderators of a channel
         * @param {ChannelsModeratorsApiListByChannelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listByChannel(requestParameters: ChannelsModeratorsApiListByChannelRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listByChannel(requestParameters.channelId, requestParameters.direction, requestParameters.page, requestParameters.perPage, requestParameters.query, requestParameters.sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method removes a single moderator from the specified channel. The authenticated user must be the owner of the channel.
         * @summary Remove a specific moderator from a channel
         * @param {ChannelsModeratorsApiRemoveModeratorRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeModerator(requestParameters: ChannelsModeratorsApiRemoveModeratorRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeModerator(requestParameters.channelId, requestParameters.userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method removes multiple moderators from the specified channel. The authenticated user must be the owner of the channel.
         * @summary Remove a list of moderators from a channel
         * @param {ChannelsModeratorsApiRemoveMultipleFromChannelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeMultipleFromChannel(requestParameters: ChannelsModeratorsApiRemoveMultipleFromChannelRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const channelsModeratorsRemoveMultipleFromChannelRequest: ChannelsModeratorsRemoveMultipleFromChannelRequest = {
                user_uri: requestParameters.user_uri
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeMultipleFromChannel(requestParameters.channelId, channelsModeratorsRemoveMultipleFromChannelRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method replaces the current list of channel moderators with a new list. The authenticated user must be the owner of the channel and a follower of each requested user to add them as a channel moderator.
         * @summary Replace the moderators of a channel
         * @param {ChannelsModeratorsApiReplaceModeratorsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async replaceModerators(requestParameters: ChannelsModeratorsApiReplaceModeratorsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>> {
            const channelsModeratorsReplaceModeratorsRequest: ChannelsModeratorsReplaceModeratorsRequest = {
                user_uri: requestParameters.user_uri
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.replaceModerators(requestParameters.channelId, channelsModeratorsReplaceModeratorsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ChannelsModeratorsApi - factory interface
 * @export
 */
export const ChannelsModeratorsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ChannelsModeratorsApiFp(configuration)
    return {
        /**
         * This method adds a single user as a moderator to the specified channel. The authenticated user must be a follower of the requested user to add them as a channel moderator.
         * @summary Add a specific moderator to a channel
         * @param {ChannelsModeratorsApiAddModeratorToChannelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addModeratorToChannel(requestParameters: ChannelsModeratorsApiAddModeratorToChannelRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addModeratorToChannel(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method adds multiple users as moderators to the specified channel. Include the users by their URI as a JSON array in the body of the request using the **user_uri** field, like this: `[{ \"user_uri\": \"/users/1234\" }, { \"user_uri\": \"/users/1235\" }]`. The authenticated user must be a follower of a requested user to add this person as a moderator. For more information on batch requests like this one, see [Using Common Formats and Parameters](https://developer.vimeo.com/api/common-formats#working-with-batch-requests).
         * @summary Add a list of moderators to a channel
         * @param {ChannelsModeratorsApiBulkAddModeratorsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkAddModerators(requestParameters: ChannelsModeratorsApiBulkAddModeratorsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.bulkAddModerators(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns a single moderator of the specified channel.
         * @summary Get a specific moderator of a channel
         * @param {ChannelsModeratorsApiGetSpecificModeratorRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificModerator(requestParameters: ChannelsModeratorsApiGetSpecificModeratorRequest, options?: AxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.getSpecificModerator(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every moderator of the specified channel.
         * @summary Get all the moderators of a channel
         * @param {ChannelsModeratorsApiListByChannelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listByChannel(requestParameters: ChannelsModeratorsApiListByChannelRequest, options?: AxiosRequestConfig): AxiosPromise<Array<User>> {
            return localVarFp.listByChannel(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method removes a single moderator from the specified channel. The authenticated user must be the owner of the channel.
         * @summary Remove a specific moderator from a channel
         * @param {ChannelsModeratorsApiRemoveModeratorRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeModerator(requestParameters: ChannelsModeratorsApiRemoveModeratorRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeModerator(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method removes multiple moderators from the specified channel. The authenticated user must be the owner of the channel.
         * @summary Remove a list of moderators from a channel
         * @param {ChannelsModeratorsApiRemoveMultipleFromChannelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeMultipleFromChannel(requestParameters: ChannelsModeratorsApiRemoveMultipleFromChannelRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeMultipleFromChannel(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method replaces the current list of channel moderators with a new list. The authenticated user must be the owner of the channel and a follower of each requested user to add them as a channel moderator.
         * @summary Replace the moderators of a channel
         * @param {ChannelsModeratorsApiReplaceModeratorsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceModerators(requestParameters: ChannelsModeratorsApiReplaceModeratorsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<User>> {
            return localVarFp.replaceModerators(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addModeratorToChannel operation in ChannelsModeratorsApi.
 * @export
 * @interface ChannelsModeratorsApiAddModeratorToChannelRequest
 */
export type ChannelsModeratorsApiAddModeratorToChannelRequest = {
    
    /**
    * The ID of the channel.
    * @type {number}
    * @memberof ChannelsModeratorsApiAddModeratorToChannel
    */
    readonly channelId: number
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof ChannelsModeratorsApiAddModeratorToChannel
    */
    readonly userId: number
    
}

/**
 * Request parameters for bulkAddModerators operation in ChannelsModeratorsApi.
 * @export
 * @interface ChannelsModeratorsApiBulkAddModeratorsRequest
 */
export type ChannelsModeratorsApiBulkAddModeratorsRequest = {
    
    /**
    * The ID of the channel.
    * @type {number}
    * @memberof ChannelsModeratorsApiBulkAddModerators
    */
    readonly channelId: number
    
}

/**
 * Request parameters for getSpecificModerator operation in ChannelsModeratorsApi.
 * @export
 * @interface ChannelsModeratorsApiGetSpecificModeratorRequest
 */
export type ChannelsModeratorsApiGetSpecificModeratorRequest = {
    
    /**
    * The ID of the channel.
    * @type {number}
    * @memberof ChannelsModeratorsApiGetSpecificModerator
    */
    readonly channelId: number
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof ChannelsModeratorsApiGetSpecificModerator
    */
    readonly userId: number
    
}

/**
 * Request parameters for listByChannel operation in ChannelsModeratorsApi.
 * @export
 * @interface ChannelsModeratorsApiListByChannelRequest
 */
export type ChannelsModeratorsApiListByChannelRequest = {
    
    /**
    * The ID of the channel.
    * @type {number}
    * @memberof ChannelsModeratorsApiListByChannel
    */
    readonly channelId: number
    
    /**
    * The sort direction of the results.  Option descriptions:  * `asc` - Sort the results in ascending order.  * `desc` - Sort the results in descending order. 
    * @type {'asc' | 'desc'}
    * @memberof ChannelsModeratorsApiListByChannel
    */
    readonly direction?: 'asc' | 'desc'
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof ChannelsModeratorsApiListByChannel
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof ChannelsModeratorsApiListByChannel
    */
    readonly perPage?: number
    
    /**
    * The search query to use to filter the results.
    * @type {string}
    * @memberof ChannelsModeratorsApiListByChannel
    */
    readonly query?: string
    
    /**
    * The way to sort the results.  Option descriptions:  * `alphabetical` - Sort the results alphabetically.  * `date` - Sort the results by date added. 
    * @type {'alphabetical' | 'date'}
    * @memberof ChannelsModeratorsApiListByChannel
    */
    readonly sort?: 'alphabetical' | 'date'
    
}

/**
 * Request parameters for removeModerator operation in ChannelsModeratorsApi.
 * @export
 * @interface ChannelsModeratorsApiRemoveModeratorRequest
 */
export type ChannelsModeratorsApiRemoveModeratorRequest = {
    
    /**
    * The ID of the channel.
    * @type {number}
    * @memberof ChannelsModeratorsApiRemoveModerator
    */
    readonly channelId: number
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof ChannelsModeratorsApiRemoveModerator
    */
    readonly userId: number
    
}

/**
 * Request parameters for removeMultipleFromChannel operation in ChannelsModeratorsApi.
 * @export
 * @interface ChannelsModeratorsApiRemoveMultipleFromChannelRequest
 */
export type ChannelsModeratorsApiRemoveMultipleFromChannelRequest = {
    
    /**
    * The ID of the channel.
    * @type {number}
    * @memberof ChannelsModeratorsApiRemoveMultipleFromChannel
    */
    readonly channelId: number
    
} & ChannelsModeratorsRemoveMultipleFromChannelRequest

/**
 * Request parameters for replaceModerators operation in ChannelsModeratorsApi.
 * @export
 * @interface ChannelsModeratorsApiReplaceModeratorsRequest
 */
export type ChannelsModeratorsApiReplaceModeratorsRequest = {
    
    /**
    * The ID of the channel.
    * @type {number}
    * @memberof ChannelsModeratorsApiReplaceModerators
    */
    readonly channelId: number
    
} & ChannelsModeratorsReplaceModeratorsRequest

/**
 * ChannelsModeratorsApiGenerated - object-oriented interface
 * @export
 * @class ChannelsModeratorsApiGenerated
 * @extends {BaseAPI}
 */
export class ChannelsModeratorsApiGenerated extends BaseAPI {
    /**
     * This method adds a single user as a moderator to the specified channel. The authenticated user must be a follower of the requested user to add them as a channel moderator.
     * @summary Add a specific moderator to a channel
     * @param {ChannelsModeratorsApiAddModeratorToChannelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelsModeratorsApiGenerated
     */
    public addModeratorToChannel(requestParameters: ChannelsModeratorsApiAddModeratorToChannelRequest, options?: AxiosRequestConfig) {
        return ChannelsModeratorsApiFp(this.configuration).addModeratorToChannel(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method adds multiple users as moderators to the specified channel. Include the users by their URI as a JSON array in the body of the request using the **user_uri** field, like this: `[{ \"user_uri\": \"/users/1234\" }, { \"user_uri\": \"/users/1235\" }]`. The authenticated user must be a follower of a requested user to add this person as a moderator. For more information on batch requests like this one, see [Using Common Formats and Parameters](https://developer.vimeo.com/api/common-formats#working-with-batch-requests).
     * @summary Add a list of moderators to a channel
     * @param {ChannelsModeratorsApiBulkAddModeratorsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelsModeratorsApiGenerated
     */
    public bulkAddModerators(requestParameters: ChannelsModeratorsApiBulkAddModeratorsRequest, options?: AxiosRequestConfig) {
        return ChannelsModeratorsApiFp(this.configuration).bulkAddModerators(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns a single moderator of the specified channel.
     * @summary Get a specific moderator of a channel
     * @param {ChannelsModeratorsApiGetSpecificModeratorRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelsModeratorsApiGenerated
     */
    public getSpecificModerator(requestParameters: ChannelsModeratorsApiGetSpecificModeratorRequest, options?: AxiosRequestConfig) {
        return ChannelsModeratorsApiFp(this.configuration).getSpecificModerator(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every moderator of the specified channel.
     * @summary Get all the moderators of a channel
     * @param {ChannelsModeratorsApiListByChannelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelsModeratorsApiGenerated
     */
    public listByChannel(requestParameters: ChannelsModeratorsApiListByChannelRequest, options?: AxiosRequestConfig) {
        return ChannelsModeratorsApiFp(this.configuration).listByChannel(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method removes a single moderator from the specified channel. The authenticated user must be the owner of the channel.
     * @summary Remove a specific moderator from a channel
     * @param {ChannelsModeratorsApiRemoveModeratorRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelsModeratorsApiGenerated
     */
    public removeModerator(requestParameters: ChannelsModeratorsApiRemoveModeratorRequest, options?: AxiosRequestConfig) {
        return ChannelsModeratorsApiFp(this.configuration).removeModerator(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method removes multiple moderators from the specified channel. The authenticated user must be the owner of the channel.
     * @summary Remove a list of moderators from a channel
     * @param {ChannelsModeratorsApiRemoveMultipleFromChannelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelsModeratorsApiGenerated
     */
    public removeMultipleFromChannel(requestParameters: ChannelsModeratorsApiRemoveMultipleFromChannelRequest, options?: AxiosRequestConfig) {
        return ChannelsModeratorsApiFp(this.configuration).removeMultipleFromChannel(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method replaces the current list of channel moderators with a new list. The authenticated user must be the owner of the channel and a follower of each requested user to add them as a channel moderator.
     * @summary Replace the moderators of a channel
     * @param {ChannelsModeratorsApiReplaceModeratorsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelsModeratorsApiGenerated
     */
    public replaceModerators(requestParameters: ChannelsModeratorsApiReplaceModeratorsRequest, options?: AxiosRequestConfig) {
        return ChannelsModeratorsApiFp(this.configuration).replaceModerators(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
