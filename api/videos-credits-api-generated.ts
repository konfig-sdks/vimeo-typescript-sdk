/* tslint:disable */
/* eslint-disable */
/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

The version of the OpenAPI document: 3.4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Credit } from '../models';
// @ts-ignore
import { LegacyError } from '../models';
// @ts-ignore
import { User } from '../models';
// @ts-ignore
import { VideosCreditsAddUserCreditInVideoRequest } from '../models';
// @ts-ignore
import { VideosCreditsAddUserCreditRequest } from '../models';
// @ts-ignore
import { VideosCreditsEditUserCreditInVideoRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * VideosCreditsApi - axios parameter creator
 * @export
 */
export const VideosCreditsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method adds a user credit to the specified video.
         * @summary Credit a user in a video
         * @param {number} videoId The ID of the video.
         * @param {VideosCreditsAddUserCreditRequest} videosCreditsAddUserCreditRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserCredit: async (videoId: number, videosCreditsAddUserCreditRequest: VideosCreditsAddUserCreditRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('addUserCredit', 'videoId', videoId)
            // verify required parameter 'videosCreditsAddUserCreditRequest' is not null or undefined
            assertParamExists('addUserCredit', 'videosCreditsAddUserCreditRequest', videosCreditsAddUserCreditRequest)
            const localVarPath = `/videos/{video_id}/credits`
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.vimeo.credit+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: videosCreditsAddUserCreditRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/videos/{video_id}/credits',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(videosCreditsAddUserCreditRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method adds a user credit to the specified video.
         * @summary Credit a user in a video
         * @param {number} channelId The ID of the channel.
         * @param {number} videoId The ID of the video.
         * @param {VideosCreditsAddUserCreditInVideoRequest} videosCreditsAddUserCreditInVideoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserCreditInVideo: async (channelId: number, videoId: number, videosCreditsAddUserCreditInVideoRequest: VideosCreditsAddUserCreditInVideoRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('addUserCreditInVideo', 'channelId', channelId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('addUserCreditInVideo', 'videoId', videoId)
            // verify required parameter 'videosCreditsAddUserCreditInVideoRequest' is not null or undefined
            assertParamExists('addUserCreditInVideo', 'videosCreditsAddUserCreditInVideoRequest', videosCreditsAddUserCreditInVideoRequest)
            const localVarPath = `/channels/{channel_id}/videos/{video_id}/credits`
                .replace(`{${"channel_id"}}`, encodeURIComponent(String(channelId !== undefined ? channelId : `-channel_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.vimeo.credit+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: videosCreditsAddUserCreditInVideoRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/channels/{channel_id}/videos/{video_id}/credits',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(videosCreditsAddUserCreditInVideoRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method deletes the specified user credit from a video. The authenticated user must be the creator of the credit or the credited user.
         * @summary Delete the credit for a user in a video
         * @param {number} creditId The ID of the credit.
         * @param {number} videoId The ID of the video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserCredit: async (creditId: number, videoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'creditId' is not null or undefined
            assertParamExists('deleteUserCredit', 'creditId', creditId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('deleteUserCredit', 'videoId', videoId)
            const localVarPath = `/videos/{video_id}/credits/{credit_id}`
                .replace(`{${"credit_id"}}`, encodeURIComponent(String(creditId !== undefined ? creditId : `-credit_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/videos/{video_id}/credits/{credit_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method edits the specified user credit in a video.
         * @summary Edit the credit for a user in a video
         * @param {number} creditId The ID of the credit.
         * @param {number} videoId The ID of the video.
         * @param {VideosCreditsEditUserCreditInVideoRequest} [videosCreditsEditUserCreditInVideoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUserCreditInVideo: async (creditId: number, videoId: number, videosCreditsEditUserCreditInVideoRequest?: VideosCreditsEditUserCreditInVideoRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'creditId' is not null or undefined
            assertParamExists('editUserCreditInVideo', 'creditId', creditId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('editUserCreditInVideo', 'videoId', videoId)
            const localVarPath = `/videos/{video_id}/credits/{credit_id}`
                .replace(`{${"credit_id"}}`, encodeURIComponent(String(creditId !== undefined ? creditId : `-credit_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.vimeo.credit+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: videosCreditsEditUserCreditInVideoRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/videos/{video_id}/credits/{credit_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(videosCreditsEditUserCreditInVideoRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every credited user in a video.
         * @summary Get all the credited users in a video
         * @param {number} channelId The ID of the channel.
         * @param {number} videoId The ID of the video.
         * @param {'asc' | 'desc'} [direction] The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order. 
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {string} [query] The search query to use to filter the results.
         * @param {'alphabetical' | 'date'} [sort] The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCreditedUsersInVideo: async (channelId: number, videoId: number, direction?: 'asc' | 'desc', page?: number, perPage?: number, query?: string, sort?: 'alphabetical' | 'date', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('getAllCreditedUsersInVideo', 'channelId', channelId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('getAllCreditedUsersInVideo', 'videoId', videoId)
            const localVarPath = `/channels/{channel_id}/videos/{video_id}/credits`
                .replace(`{${"channel_id"}}`, encodeURIComponent(String(channelId !== undefined ? channelId : `-channel_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/channels/{channel_id}/videos/{video_id}/credits',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every credited user in a video.
         * @summary Get all the credited users in a video
         * @param {number} videoId The ID of the video.
         * @param {'asc' | 'desc'} [direction] The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order. 
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {string} [query] The search query to use to filter the results.
         * @param {'alphabetical' | 'date'} [sort] The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCreditedUsersInVideo_1: async (videoId: number, direction?: 'asc' | 'desc', page?: number, perPage?: number, query?: string, sort?: 'alphabetical' | 'date', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('getAllCreditedUsersInVideo_1', 'videoId', videoId)
            const localVarPath = `/videos/{video_id}/credits`
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/videos/{video_id}/credits',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns a single credited user in a video.
         * @summary Get a specific credited user in a video
         * @param {number} creditId The ID of the credit.
         * @param {number} videoId The ID of the video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificCreditedUser: async (creditId: number, videoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'creditId' is not null or undefined
            assertParamExists('getSpecificCreditedUser', 'creditId', creditId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('getSpecificCreditedUser', 'videoId', videoId)
            const localVarPath = `/videos/{video_id}/credits/{credit_id}`
                .replace(`{${"credit_id"}}`, encodeURIComponent(String(creditId !== undefined ? creditId : `-credit_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/videos/{video_id}/credits/{credit_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns the users who can be credited on the specified video.
         * @summary Get users who can be credited on a video
         * @param {number} videoId The ID of the video.
         * @param {'asc' | 'desc'} [direction] The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order. 
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {string} [query] The search query to use to filter the results.
         * @param {'alphabetical' | 'date'} [sort] The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date followed. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        users: async (videoId: number, direction?: 'asc' | 'desc', page?: number, perPage?: number, query?: string, sort?: 'alphabetical' | 'date', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('users', 'videoId', videoId)
            const localVarPath = `/videos/{video_id}/credits/available_users`
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/videos/{video_id}/credits/available_users',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VideosCreditsApi - functional programming interface
 * @export
 */
export const VideosCreditsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VideosCreditsApiAxiosParamCreator(configuration)
    return {
        /**
         * This method adds a user credit to the specified video.
         * @summary Credit a user in a video
         * @param {VideosCreditsApiAddUserCreditRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addUserCredit(requestParameters: VideosCreditsApiAddUserCreditRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Credit>> {
            const videosCreditsAddUserCreditRequest: VideosCreditsAddUserCreditRequest = {
                email: requestParameters.email,
                name: requestParameters.name,
                role: requestParameters.role,
                user_uri: requestParameters.user_uri
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addUserCredit(requestParameters.videoId, videosCreditsAddUserCreditRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method adds a user credit to the specified video.
         * @summary Credit a user in a video
         * @param {VideosCreditsApiAddUserCreditInVideoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addUserCreditInVideo(requestParameters: VideosCreditsApiAddUserCreditInVideoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Credit>> {
            const videosCreditsAddUserCreditInVideoRequest: VideosCreditsAddUserCreditInVideoRequest = {
                email: requestParameters.email,
                name: requestParameters.name,
                role: requestParameters.role,
                user_uri: requestParameters.user_uri
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addUserCreditInVideo(requestParameters.channelId, requestParameters.videoId, videosCreditsAddUserCreditInVideoRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method deletes the specified user credit from a video. The authenticated user must be the creator of the credit or the credited user.
         * @summary Delete the credit for a user in a video
         * @param {VideosCreditsApiDeleteUserCreditRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserCredit(requestParameters: VideosCreditsApiDeleteUserCreditRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserCredit(requestParameters.creditId, requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method edits the specified user credit in a video.
         * @summary Edit the credit for a user in a video
         * @param {VideosCreditsApiEditUserCreditInVideoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editUserCreditInVideo(requestParameters: VideosCreditsApiEditUserCreditInVideoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Credit>> {
            const videosCreditsEditUserCreditInVideoRequest: VideosCreditsEditUserCreditInVideoRequest = {
                name: requestParameters.name,
                role: requestParameters.role
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.editUserCreditInVideo(requestParameters.creditId, requestParameters.videoId, videosCreditsEditUserCreditInVideoRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every credited user in a video.
         * @summary Get all the credited users in a video
         * @param {VideosCreditsApiGetAllCreditedUsersInVideoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllCreditedUsersInVideo(requestParameters: VideosCreditsApiGetAllCreditedUsersInVideoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Credit>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllCreditedUsersInVideo(requestParameters.channelId, requestParameters.videoId, requestParameters.direction, requestParameters.page, requestParameters.perPage, requestParameters.query, requestParameters.sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every credited user in a video.
         * @summary Get all the credited users in a video
         * @param {VideosCreditsApiGetAllCreditedUsersInVideo0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllCreditedUsersInVideo_1(requestParameters: VideosCreditsApiGetAllCreditedUsersInVideo0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Credit>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllCreditedUsersInVideo_1(requestParameters.videoId, requestParameters.direction, requestParameters.page, requestParameters.perPage, requestParameters.query, requestParameters.sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns a single credited user in a video.
         * @summary Get a specific credited user in a video
         * @param {VideosCreditsApiGetSpecificCreditedUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpecificCreditedUser(requestParameters: VideosCreditsApiGetSpecificCreditedUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Credit>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpecificCreditedUser(requestParameters.creditId, requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns the users who can be credited on the specified video.
         * @summary Get users who can be credited on a video
         * @param {VideosCreditsApiUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async users(requestParameters: VideosCreditsApiUsersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.users(requestParameters.videoId, requestParameters.direction, requestParameters.page, requestParameters.perPage, requestParameters.query, requestParameters.sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VideosCreditsApi - factory interface
 * @export
 */
export const VideosCreditsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VideosCreditsApiFp(configuration)
    return {
        /**
         * This method adds a user credit to the specified video.
         * @summary Credit a user in a video
         * @param {VideosCreditsApiAddUserCreditRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserCredit(requestParameters: VideosCreditsApiAddUserCreditRequest, options?: AxiosRequestConfig): AxiosPromise<Credit> {
            return localVarFp.addUserCredit(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method adds a user credit to the specified video.
         * @summary Credit a user in a video
         * @param {VideosCreditsApiAddUserCreditInVideoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserCreditInVideo(requestParameters: VideosCreditsApiAddUserCreditInVideoRequest, options?: AxiosRequestConfig): AxiosPromise<Credit> {
            return localVarFp.addUserCreditInVideo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method deletes the specified user credit from a video. The authenticated user must be the creator of the credit or the credited user.
         * @summary Delete the credit for a user in a video
         * @param {VideosCreditsApiDeleteUserCreditRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserCredit(requestParameters: VideosCreditsApiDeleteUserCreditRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteUserCredit(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method edits the specified user credit in a video.
         * @summary Edit the credit for a user in a video
         * @param {VideosCreditsApiEditUserCreditInVideoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUserCreditInVideo(requestParameters: VideosCreditsApiEditUserCreditInVideoRequest, options?: AxiosRequestConfig): AxiosPromise<Credit> {
            return localVarFp.editUserCreditInVideo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every credited user in a video.
         * @summary Get all the credited users in a video
         * @param {VideosCreditsApiGetAllCreditedUsersInVideoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCreditedUsersInVideo(requestParameters: VideosCreditsApiGetAllCreditedUsersInVideoRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Credit>> {
            return localVarFp.getAllCreditedUsersInVideo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every credited user in a video.
         * @summary Get all the credited users in a video
         * @param {VideosCreditsApiGetAllCreditedUsersInVideo0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCreditedUsersInVideo_1(requestParameters: VideosCreditsApiGetAllCreditedUsersInVideo0Request, options?: AxiosRequestConfig): AxiosPromise<Array<Credit>> {
            return localVarFp.getAllCreditedUsersInVideo_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns a single credited user in a video.
         * @summary Get a specific credited user in a video
         * @param {VideosCreditsApiGetSpecificCreditedUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificCreditedUser(requestParameters: VideosCreditsApiGetSpecificCreditedUserRequest, options?: AxiosRequestConfig): AxiosPromise<Credit> {
            return localVarFp.getSpecificCreditedUser(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns the users who can be credited on the specified video.
         * @summary Get users who can be credited on a video
         * @param {VideosCreditsApiUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        users(requestParameters: VideosCreditsApiUsersRequest, options?: AxiosRequestConfig): AxiosPromise<Array<User>> {
            return localVarFp.users(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addUserCredit operation in VideosCreditsApi.
 * @export
 * @interface VideosCreditsApiAddUserCreditRequest
 */
export type VideosCreditsApiAddUserCreditRequest = {
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof VideosCreditsApiAddUserCredit
    */
    readonly videoId: number
    
} & VideosCreditsAddUserCreditRequest

/**
 * Request parameters for addUserCreditInVideo operation in VideosCreditsApi.
 * @export
 * @interface VideosCreditsApiAddUserCreditInVideoRequest
 */
export type VideosCreditsApiAddUserCreditInVideoRequest = {
    
    /**
    * The ID of the channel.
    * @type {number}
    * @memberof VideosCreditsApiAddUserCreditInVideo
    */
    readonly channelId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof VideosCreditsApiAddUserCreditInVideo
    */
    readonly videoId: number
    
} & VideosCreditsAddUserCreditInVideoRequest

/**
 * Request parameters for deleteUserCredit operation in VideosCreditsApi.
 * @export
 * @interface VideosCreditsApiDeleteUserCreditRequest
 */
export type VideosCreditsApiDeleteUserCreditRequest = {
    
    /**
    * The ID of the credit.
    * @type {number}
    * @memberof VideosCreditsApiDeleteUserCredit
    */
    readonly creditId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof VideosCreditsApiDeleteUserCredit
    */
    readonly videoId: number
    
}

/**
 * Request parameters for editUserCreditInVideo operation in VideosCreditsApi.
 * @export
 * @interface VideosCreditsApiEditUserCreditInVideoRequest
 */
export type VideosCreditsApiEditUserCreditInVideoRequest = {
    
    /**
    * The ID of the credit.
    * @type {number}
    * @memberof VideosCreditsApiEditUserCreditInVideo
    */
    readonly creditId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof VideosCreditsApiEditUserCreditInVideo
    */
    readonly videoId: number
    
} & VideosCreditsEditUserCreditInVideoRequest

/**
 * Request parameters for getAllCreditedUsersInVideo operation in VideosCreditsApi.
 * @export
 * @interface VideosCreditsApiGetAllCreditedUsersInVideoRequest
 */
export type VideosCreditsApiGetAllCreditedUsersInVideoRequest = {
    
    /**
    * The ID of the channel.
    * @type {number}
    * @memberof VideosCreditsApiGetAllCreditedUsersInVideo
    */
    readonly channelId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof VideosCreditsApiGetAllCreditedUsersInVideo
    */
    readonly videoId: number
    
    /**
    * The sort direction of the results.  Option descriptions:  * `asc` - Sort the results in ascending order.  * `desc` - Sort the results in descending order. 
    * @type {'asc' | 'desc'}
    * @memberof VideosCreditsApiGetAllCreditedUsersInVideo
    */
    readonly direction?: 'asc' | 'desc'
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof VideosCreditsApiGetAllCreditedUsersInVideo
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof VideosCreditsApiGetAllCreditedUsersInVideo
    */
    readonly perPage?: number
    
    /**
    * The search query to use to filter the results.
    * @type {string}
    * @memberof VideosCreditsApiGetAllCreditedUsersInVideo
    */
    readonly query?: string
    
    /**
    * The way to sort the results.  Option descriptions:  * `alphabetical` - Sort the results alphabetically.  * `date` - Sort the results by date. 
    * @type {'alphabetical' | 'date'}
    * @memberof VideosCreditsApiGetAllCreditedUsersInVideo
    */
    readonly sort?: 'alphabetical' | 'date'
    
}

/**
 * Request parameters for getAllCreditedUsersInVideo_1 operation in VideosCreditsApi.
 * @export
 * @interface VideosCreditsApiGetAllCreditedUsersInVideo0Request
 */
export type VideosCreditsApiGetAllCreditedUsersInVideo0Request = {
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof VideosCreditsApiGetAllCreditedUsersInVideo0
    */
    readonly videoId: number
    
    /**
    * The sort direction of the results.  Option descriptions:  * `asc` - Sort the results in ascending order.  * `desc` - Sort the results in descending order. 
    * @type {'asc' | 'desc'}
    * @memberof VideosCreditsApiGetAllCreditedUsersInVideo0
    */
    readonly direction?: 'asc' | 'desc'
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof VideosCreditsApiGetAllCreditedUsersInVideo0
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof VideosCreditsApiGetAllCreditedUsersInVideo0
    */
    readonly perPage?: number
    
    /**
    * The search query to use to filter the results.
    * @type {string}
    * @memberof VideosCreditsApiGetAllCreditedUsersInVideo0
    */
    readonly query?: string
    
    /**
    * The way to sort the results.  Option descriptions:  * `alphabetical` - Sort the results alphabetically.  * `date` - Sort the results by date. 
    * @type {'alphabetical' | 'date'}
    * @memberof VideosCreditsApiGetAllCreditedUsersInVideo0
    */
    readonly sort?: 'alphabetical' | 'date'
    
}

/**
 * Request parameters for getSpecificCreditedUser operation in VideosCreditsApi.
 * @export
 * @interface VideosCreditsApiGetSpecificCreditedUserRequest
 */
export type VideosCreditsApiGetSpecificCreditedUserRequest = {
    
    /**
    * The ID of the credit.
    * @type {number}
    * @memberof VideosCreditsApiGetSpecificCreditedUser
    */
    readonly creditId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof VideosCreditsApiGetSpecificCreditedUser
    */
    readonly videoId: number
    
}

/**
 * Request parameters for users operation in VideosCreditsApi.
 * @export
 * @interface VideosCreditsApiUsersRequest
 */
export type VideosCreditsApiUsersRequest = {
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof VideosCreditsApiUsers
    */
    readonly videoId: number
    
    /**
    * The sort direction of the results.  Option descriptions:  * `asc` - Sort the results in ascending order.  * `desc` - Sort the results in descending order. 
    * @type {'asc' | 'desc'}
    * @memberof VideosCreditsApiUsers
    */
    readonly direction?: 'asc' | 'desc'
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof VideosCreditsApiUsers
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof VideosCreditsApiUsers
    */
    readonly perPage?: number
    
    /**
    * The search query to use to filter the results.
    * @type {string}
    * @memberof VideosCreditsApiUsers
    */
    readonly query?: string
    
    /**
    * The way to sort the results.  Option descriptions:  * `alphabetical` - Sort the results alphabetically.  * `date` - Sort the results by date followed. 
    * @type {'alphabetical' | 'date'}
    * @memberof VideosCreditsApiUsers
    */
    readonly sort?: 'alphabetical' | 'date'
    
}

/**
 * VideosCreditsApiGenerated - object-oriented interface
 * @export
 * @class VideosCreditsApiGenerated
 * @extends {BaseAPI}
 */
export class VideosCreditsApiGenerated extends BaseAPI {
    /**
     * This method adds a user credit to the specified video.
     * @summary Credit a user in a video
     * @param {VideosCreditsApiAddUserCreditRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosCreditsApiGenerated
     */
    public addUserCredit(requestParameters: VideosCreditsApiAddUserCreditRequest, options?: AxiosRequestConfig) {
        return VideosCreditsApiFp(this.configuration).addUserCredit(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method adds a user credit to the specified video.
     * @summary Credit a user in a video
     * @param {VideosCreditsApiAddUserCreditInVideoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosCreditsApiGenerated
     */
    public addUserCreditInVideo(requestParameters: VideosCreditsApiAddUserCreditInVideoRequest, options?: AxiosRequestConfig) {
        return VideosCreditsApiFp(this.configuration).addUserCreditInVideo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method deletes the specified user credit from a video. The authenticated user must be the creator of the credit or the credited user.
     * @summary Delete the credit for a user in a video
     * @param {VideosCreditsApiDeleteUserCreditRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosCreditsApiGenerated
     */
    public deleteUserCredit(requestParameters: VideosCreditsApiDeleteUserCreditRequest, options?: AxiosRequestConfig) {
        return VideosCreditsApiFp(this.configuration).deleteUserCredit(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method edits the specified user credit in a video.
     * @summary Edit the credit for a user in a video
     * @param {VideosCreditsApiEditUserCreditInVideoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosCreditsApiGenerated
     */
    public editUserCreditInVideo(requestParameters: VideosCreditsApiEditUserCreditInVideoRequest, options?: AxiosRequestConfig) {
        return VideosCreditsApiFp(this.configuration).editUserCreditInVideo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every credited user in a video.
     * @summary Get all the credited users in a video
     * @param {VideosCreditsApiGetAllCreditedUsersInVideoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosCreditsApiGenerated
     */
    public getAllCreditedUsersInVideo(requestParameters: VideosCreditsApiGetAllCreditedUsersInVideoRequest, options?: AxiosRequestConfig) {
        return VideosCreditsApiFp(this.configuration).getAllCreditedUsersInVideo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every credited user in a video.
     * @summary Get all the credited users in a video
     * @param {VideosCreditsApiGetAllCreditedUsersInVideo0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosCreditsApiGenerated
     */
    public getAllCreditedUsersInVideo_1(requestParameters: VideosCreditsApiGetAllCreditedUsersInVideo0Request, options?: AxiosRequestConfig) {
        return VideosCreditsApiFp(this.configuration).getAllCreditedUsersInVideo_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns a single credited user in a video.
     * @summary Get a specific credited user in a video
     * @param {VideosCreditsApiGetSpecificCreditedUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosCreditsApiGenerated
     */
    public getSpecificCreditedUser(requestParameters: VideosCreditsApiGetSpecificCreditedUserRequest, options?: AxiosRequestConfig) {
        return VideosCreditsApiFp(this.configuration).getSpecificCreditedUser(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns the users who can be credited on the specified video.
     * @summary Get users who can be credited on a video
     * @param {VideosCreditsApiUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosCreditsApiGenerated
     */
    public users(requestParameters: VideosCreditsApiUsersRequest, options?: AxiosRequestConfig) {
        return VideosCreditsApiFp(this.configuration).users(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
