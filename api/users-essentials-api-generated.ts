/* tslint:disable */
/* eslint-disable */
/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

The version of the OpenAPI document: 3.4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { EditUserRequest } from '../models';
// @ts-ignore
import { EditUserRequestVideos } from '../models';
// @ts-ignore
import { ModelError } from '../models';
// @ts-ignore
import { User } from '../models';
// @ts-ignore
import { UsersEssentialsEditVimeoAccountRequest } from '../models';
// @ts-ignore
import { UsersEssentialsEditVimeoAccountRequestVideos } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * UsersEssentialsApi - axios parameter creator
 * @export
 */
export const UsersEssentialsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method edits the Vimeo account of the authenticated user.
         * @summary Edit the user
         * @param {UsersEssentialsEditVimeoAccountRequest} [usersEssentialsEditVimeoAccountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editVimeoAccount: async (usersEssentialsEditVimeoAccountRequest?: UsersEssentialsEditVimeoAccountRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.vimeo.user+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: usersEssentialsEditVimeoAccountRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(usersEssentialsEditVimeoAccountRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns the authenticated user.
         * @summary Get the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns the authenticated user.
         * @summary Get the user
         * @param {number} userId The ID of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        user: async (userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('user', 'userId', userId)
            const localVarPath = `/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method edits the Vimeo account of the authenticated user.
         * @summary Edit the user
         * @param {number} userId The ID of the user.
         * @param {EditUserRequest} [editUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        user_1: async (userId: number, editUserRequest?: EditUserRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('user_1', 'userId', userId)
            const localVarPath = `/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.vimeo.user+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: editUserRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(editUserRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersEssentialsApi - functional programming interface
 * @export
 */
export const UsersEssentialsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersEssentialsApiAxiosParamCreator(configuration)
    return {
        /**
         * This method edits the Vimeo account of the authenticated user.
         * @summary Edit the user
         * @param {UsersEssentialsApiEditVimeoAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editVimeoAccount(requestParameters: UsersEssentialsApiEditVimeoAccountRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const usersEssentialsEditVimeoAccountRequest: UsersEssentialsEditVimeoAccountRequest = {
                bio: requestParameters.bio,
                content_filter: requestParameters.content_filter,
                gender: requestParameters.gender,
                link: requestParameters.link,
                location: requestParameters.location,
                name: requestParameters.name,
                password: requestParameters.password,
                videos: requestParameters.videos
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.editVimeoAccount(usersEssentialsEditVimeoAccountRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns the authenticated user.
         * @summary Get the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns the authenticated user.
         * @summary Get the user
         * @param {UsersEssentialsApiUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async user(requestParameters: UsersEssentialsApiUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.user(requestParameters.userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method edits the Vimeo account of the authenticated user.
         * @summary Edit the user
         * @param {UsersEssentialsApiUser0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async user_1(requestParameters: UsersEssentialsApiUser0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const editUserRequest: EditUserRequest = {
                bio: requestParameters.bio,
                content_filter: requestParameters.content_filter,
                gender: requestParameters.gender,
                link: requestParameters.link,
                location: requestParameters.location,
                name: requestParameters.name,
                password: requestParameters.password,
                videos: requestParameters.videos
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.user_1(requestParameters.userId, editUserRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersEssentialsApi - factory interface
 * @export
 */
export const UsersEssentialsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersEssentialsApiFp(configuration)
    return {
        /**
         * This method edits the Vimeo account of the authenticated user.
         * @summary Edit the user
         * @param {UsersEssentialsApiEditVimeoAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editVimeoAccount(requestParameters: UsersEssentialsApiEditVimeoAccountRequest = {}, options?: AxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.editVimeoAccount(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns the authenticated user.
         * @summary Get the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(options?: AxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.getUser(options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns the authenticated user.
         * @summary Get the user
         * @param {UsersEssentialsApiUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        user(requestParameters: UsersEssentialsApiUserRequest, options?: AxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.user(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method edits the Vimeo account of the authenticated user.
         * @summary Edit the user
         * @param {UsersEssentialsApiUser0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        user_1(requestParameters: UsersEssentialsApiUser0Request, options?: AxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.user_1(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for editVimeoAccount operation in UsersEssentialsApi.
 * @export
 * @interface UsersEssentialsApiEditVimeoAccountRequest
 */
export type UsersEssentialsApiEditVimeoAccountRequest = {
    
} & UsersEssentialsEditVimeoAccountRequest

/**
 * Request parameters for user operation in UsersEssentialsApi.
 * @export
 * @interface UsersEssentialsApiUserRequest
 */
export type UsersEssentialsApiUserRequest = {
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof UsersEssentialsApiUser
    */
    readonly userId: number
    
}

/**
 * Request parameters for user_1 operation in UsersEssentialsApi.
 * @export
 * @interface UsersEssentialsApiUser0Request
 */
export type UsersEssentialsApiUser0Request = {
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof UsersEssentialsApiUser0
    */
    readonly userId: number
    
} & EditUserRequest

/**
 * UsersEssentialsApiGenerated - object-oriented interface
 * @export
 * @class UsersEssentialsApiGenerated
 * @extends {BaseAPI}
 */
export class UsersEssentialsApiGenerated extends BaseAPI {
    /**
     * This method edits the Vimeo account of the authenticated user.
     * @summary Edit the user
     * @param {UsersEssentialsApiEditVimeoAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersEssentialsApiGenerated
     */
    public editVimeoAccount(requestParameters: UsersEssentialsApiEditVimeoAccountRequest = {}, options?: AxiosRequestConfig) {
        return UsersEssentialsApiFp(this.configuration).editVimeoAccount(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns the authenticated user.
     * @summary Get the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersEssentialsApiGenerated
     */
    public getUser(options?: AxiosRequestConfig) {
        return UsersEssentialsApiFp(this.configuration).getUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns the authenticated user.
     * @summary Get the user
     * @param {UsersEssentialsApiUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersEssentialsApiGenerated
     */
    public user(requestParameters: UsersEssentialsApiUserRequest, options?: AxiosRequestConfig) {
        return UsersEssentialsApiFp(this.configuration).user(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method edits the Vimeo account of the authenticated user.
     * @summary Edit the user
     * @param {UsersEssentialsApiUser0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersEssentialsApiGenerated
     */
    public user_1(requestParameters: UsersEssentialsApiUser0Request, options?: AxiosRequestConfig) {
        return UsersEssentialsApiFp(this.configuration).user_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
