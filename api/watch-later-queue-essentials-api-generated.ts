/* tslint:disable */
/* eslint-disable */
/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

The version of the OpenAPI document: 3.4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { LegacyError } from '../models';
// @ts-ignore
import { Video } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * WatchLaterQueueEssentialsApi - axios parameter creator
 * @export
 */
export const WatchLaterQueueEssentialsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method adds the specified video to the authenticated user\'s Watch Later queue.
         * @summary Add a video to the user\'s Watch Later queue
         * @param {number} videoId The ID of the video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addVideoToQueue: async (videoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('addVideoToQueue', 'videoId', videoId)
            const localVarPath = `/me/watchlater/{video_id}`
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["interact"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["interact"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/watchlater/{video_id}',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method adds the specified video to the authenticated user\'s Watch Later queue.
         * @summary Add a video to the user\'s Watch Later queue
         * @param {number} userId The ID of the user.
         * @param {number} videoId The ID of the video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addVideoToQueue_1: async (userId: number, videoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('addVideoToQueue_1', 'userId', userId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('addVideoToQueue_1', 'videoId', videoId)
            const localVarPath = `/users/{user_id}/watchlater/{video_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["interact"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["interact"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/watchlater/{video_id}',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method checks the authenticated user\'s Watch Later queue for the specified video.
         * @summary Check if the user has added a video to their Watch Later queue
         * @param {number} videoId The ID of the video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkVideoInQueue: async (videoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('checkVideoInQueue', 'videoId', videoId)
            const localVarPath = `/me/watchlater/{video_id}`
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/watchlater/{video_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method checks the authenticated user\'s Watch Later queue for the specified video.
         * @summary Check if the user has added a video to their Watch Later queue
         * @param {number} userId The ID of the user.
         * @param {number} videoId The ID of the video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkVideoInQueue_2: async (userId: number, videoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('checkVideoInQueue_2', 'userId', userId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('checkVideoInQueue_2', 'videoId', videoId)
            const localVarPath = `/users/{user_id}/watchlater/{video_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/watchlater/{video_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every video from the authenticated user\'s Watch Later queue.
         * @summary Get all the videos in the user\'s Watch Later queue
         * @param {'asc' | 'desc'} [direction] The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order. 
         * @param {'embeddable'} [filter] The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Return embeddable videos. 
         * @param {boolean} [filterEmbeddable] Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;.
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {string} [query] The search query to use to filter the results.
         * @param {'alphabetical' | 'comments' | 'date' | 'duration' | 'likes' | 'plays'} [sort] The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by date added.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;plays&#x60; - Sort the results by number of plays. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVideosInQueue: async (direction?: 'asc' | 'desc', filter?: 'embeddable', filterEmbeddable?: boolean, page?: number, perPage?: number, query?: string, sort?: 'alphabetical' | 'comments' | 'date' | 'duration' | 'likes' | 'plays', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/watchlater`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)
            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (filterEmbeddable !== undefined) {
                localVarQueryParameter['filter_embeddable'] = filterEmbeddable;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/watchlater',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every video from the authenticated user\'s Watch Later queue.
         * @summary Get all the videos in the user\'s Watch Later queue
         * @param {number} userId The ID of the user.
         * @param {'asc' | 'desc'} [direction] The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order. 
         * @param {'embeddable'} [filter] The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Return embeddable videos. 
         * @param {boolean} [filterEmbeddable] Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;.
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {string} [query] The search query to use to filter the results.
         * @param {'alphabetical' | 'comments' | 'date' | 'duration' | 'likes' | 'plays'} [sort] The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by date added.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;plays&#x60; - Sort the results by number of plays. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserQueueVideos: async (userId: number, direction?: 'asc' | 'desc', filter?: 'embeddable', filterEmbeddable?: boolean, page?: number, perPage?: number, query?: string, sort?: 'alphabetical' | 'comments' | 'date' | 'duration' | 'likes' | 'plays', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('listUserQueueVideos', 'userId', userId)
            const localVarPath = `/users/{user_id}/watchlater`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)
            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (filterEmbeddable !== undefined) {
                localVarQueryParameter['filter_embeddable'] = filterEmbeddable;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/watchlater',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method removes the specified video from the authenticated user\'s Watch Later queue.
         * @summary Remove a video from the user\'s Watch Later queue
         * @param {number} videoId The ID of the video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeVideoFromQueue: async (videoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('removeVideoFromQueue', 'videoId', videoId)
            const localVarPath = `/me/watchlater/{video_id}`
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["interact"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["interact"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/watchlater/{video_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method removes the specified video from the authenticated user\'s Watch Later queue.
         * @summary Remove a video from the user\'s Watch Later queue
         * @param {number} userId The ID of the user.
         * @param {number} videoId The ID of the video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeVideoFromQueue_3: async (userId: number, videoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('removeVideoFromQueue_3', 'userId', userId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('removeVideoFromQueue_3', 'videoId', videoId)
            const localVarPath = `/users/{user_id}/watchlater/{video_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["interact"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["interact"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/watchlater/{video_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WatchLaterQueueEssentialsApi - functional programming interface
 * @export
 */
export const WatchLaterQueueEssentialsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WatchLaterQueueEssentialsApiAxiosParamCreator(configuration)
    return {
        /**
         * This method adds the specified video to the authenticated user\'s Watch Later queue.
         * @summary Add a video to the user\'s Watch Later queue
         * @param {WatchLaterQueueEssentialsApiAddVideoToQueueRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addVideoToQueue(requestParameters: WatchLaterQueueEssentialsApiAddVideoToQueueRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addVideoToQueue(requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method adds the specified video to the authenticated user\'s Watch Later queue.
         * @summary Add a video to the user\'s Watch Later queue
         * @param {WatchLaterQueueEssentialsApiAddVideoToQueue0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addVideoToQueue_1(requestParameters: WatchLaterQueueEssentialsApiAddVideoToQueue0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addVideoToQueue_1(requestParameters.userId, requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method checks the authenticated user\'s Watch Later queue for the specified video.
         * @summary Check if the user has added a video to their Watch Later queue
         * @param {WatchLaterQueueEssentialsApiCheckVideoInQueueRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkVideoInQueue(requestParameters: WatchLaterQueueEssentialsApiCheckVideoInQueueRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Video>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkVideoInQueue(requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method checks the authenticated user\'s Watch Later queue for the specified video.
         * @summary Check if the user has added a video to their Watch Later queue
         * @param {WatchLaterQueueEssentialsApiCheckVideoInQueue0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkVideoInQueue_2(requestParameters: WatchLaterQueueEssentialsApiCheckVideoInQueue0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Video>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkVideoInQueue_2(requestParameters.userId, requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every video from the authenticated user\'s Watch Later queue.
         * @summary Get all the videos in the user\'s Watch Later queue
         * @param {WatchLaterQueueEssentialsApiGetVideosInQueueRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVideosInQueue(requestParameters: WatchLaterQueueEssentialsApiGetVideosInQueueRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Video>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVideosInQueue(requestParameters.direction, requestParameters.filter, requestParameters.filterEmbeddable, requestParameters.page, requestParameters.perPage, requestParameters.query, requestParameters.sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every video from the authenticated user\'s Watch Later queue.
         * @summary Get all the videos in the user\'s Watch Later queue
         * @param {WatchLaterQueueEssentialsApiListUserQueueVideosRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserQueueVideos(requestParameters: WatchLaterQueueEssentialsApiListUserQueueVideosRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Video>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUserQueueVideos(requestParameters.userId, requestParameters.direction, requestParameters.filter, requestParameters.filterEmbeddable, requestParameters.page, requestParameters.perPage, requestParameters.query, requestParameters.sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method removes the specified video from the authenticated user\'s Watch Later queue.
         * @summary Remove a video from the user\'s Watch Later queue
         * @param {WatchLaterQueueEssentialsApiRemoveVideoFromQueueRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeVideoFromQueue(requestParameters: WatchLaterQueueEssentialsApiRemoveVideoFromQueueRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeVideoFromQueue(requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method removes the specified video from the authenticated user\'s Watch Later queue.
         * @summary Remove a video from the user\'s Watch Later queue
         * @param {WatchLaterQueueEssentialsApiRemoveVideoFromQueue0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeVideoFromQueue_3(requestParameters: WatchLaterQueueEssentialsApiRemoveVideoFromQueue0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeVideoFromQueue_3(requestParameters.userId, requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WatchLaterQueueEssentialsApi - factory interface
 * @export
 */
export const WatchLaterQueueEssentialsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WatchLaterQueueEssentialsApiFp(configuration)
    return {
        /**
         * This method adds the specified video to the authenticated user\'s Watch Later queue.
         * @summary Add a video to the user\'s Watch Later queue
         * @param {WatchLaterQueueEssentialsApiAddVideoToQueueRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addVideoToQueue(requestParameters: WatchLaterQueueEssentialsApiAddVideoToQueueRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addVideoToQueue(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method adds the specified video to the authenticated user\'s Watch Later queue.
         * @summary Add a video to the user\'s Watch Later queue
         * @param {WatchLaterQueueEssentialsApiAddVideoToQueue0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addVideoToQueue_1(requestParameters: WatchLaterQueueEssentialsApiAddVideoToQueue0Request, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addVideoToQueue_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method checks the authenticated user\'s Watch Later queue for the specified video.
         * @summary Check if the user has added a video to their Watch Later queue
         * @param {WatchLaterQueueEssentialsApiCheckVideoInQueueRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkVideoInQueue(requestParameters: WatchLaterQueueEssentialsApiCheckVideoInQueueRequest, options?: AxiosRequestConfig): AxiosPromise<Video> {
            return localVarFp.checkVideoInQueue(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method checks the authenticated user\'s Watch Later queue for the specified video.
         * @summary Check if the user has added a video to their Watch Later queue
         * @param {WatchLaterQueueEssentialsApiCheckVideoInQueue0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkVideoInQueue_2(requestParameters: WatchLaterQueueEssentialsApiCheckVideoInQueue0Request, options?: AxiosRequestConfig): AxiosPromise<Video> {
            return localVarFp.checkVideoInQueue_2(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every video from the authenticated user\'s Watch Later queue.
         * @summary Get all the videos in the user\'s Watch Later queue
         * @param {WatchLaterQueueEssentialsApiGetVideosInQueueRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVideosInQueue(requestParameters: WatchLaterQueueEssentialsApiGetVideosInQueueRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<Video>> {
            return localVarFp.getVideosInQueue(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every video from the authenticated user\'s Watch Later queue.
         * @summary Get all the videos in the user\'s Watch Later queue
         * @param {WatchLaterQueueEssentialsApiListUserQueueVideosRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserQueueVideos(requestParameters: WatchLaterQueueEssentialsApiListUserQueueVideosRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Video>> {
            return localVarFp.listUserQueueVideos(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method removes the specified video from the authenticated user\'s Watch Later queue.
         * @summary Remove a video from the user\'s Watch Later queue
         * @param {WatchLaterQueueEssentialsApiRemoveVideoFromQueueRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeVideoFromQueue(requestParameters: WatchLaterQueueEssentialsApiRemoveVideoFromQueueRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeVideoFromQueue(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method removes the specified video from the authenticated user\'s Watch Later queue.
         * @summary Remove a video from the user\'s Watch Later queue
         * @param {WatchLaterQueueEssentialsApiRemoveVideoFromQueue0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeVideoFromQueue_3(requestParameters: WatchLaterQueueEssentialsApiRemoveVideoFromQueue0Request, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeVideoFromQueue_3(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addVideoToQueue operation in WatchLaterQueueEssentialsApi.
 * @export
 * @interface WatchLaterQueueEssentialsApiAddVideoToQueueRequest
 */
export type WatchLaterQueueEssentialsApiAddVideoToQueueRequest = {
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof WatchLaterQueueEssentialsApiAddVideoToQueue
    */
    readonly videoId: number
    
}

/**
 * Request parameters for addVideoToQueue_1 operation in WatchLaterQueueEssentialsApi.
 * @export
 * @interface WatchLaterQueueEssentialsApiAddVideoToQueue0Request
 */
export type WatchLaterQueueEssentialsApiAddVideoToQueue0Request = {
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof WatchLaterQueueEssentialsApiAddVideoToQueue0
    */
    readonly userId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof WatchLaterQueueEssentialsApiAddVideoToQueue0
    */
    readonly videoId: number
    
}

/**
 * Request parameters for checkVideoInQueue operation in WatchLaterQueueEssentialsApi.
 * @export
 * @interface WatchLaterQueueEssentialsApiCheckVideoInQueueRequest
 */
export type WatchLaterQueueEssentialsApiCheckVideoInQueueRequest = {
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof WatchLaterQueueEssentialsApiCheckVideoInQueue
    */
    readonly videoId: number
    
}

/**
 * Request parameters for checkVideoInQueue_2 operation in WatchLaterQueueEssentialsApi.
 * @export
 * @interface WatchLaterQueueEssentialsApiCheckVideoInQueue0Request
 */
export type WatchLaterQueueEssentialsApiCheckVideoInQueue0Request = {
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof WatchLaterQueueEssentialsApiCheckVideoInQueue0
    */
    readonly userId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof WatchLaterQueueEssentialsApiCheckVideoInQueue0
    */
    readonly videoId: number
    
}

/**
 * Request parameters for getVideosInQueue operation in WatchLaterQueueEssentialsApi.
 * @export
 * @interface WatchLaterQueueEssentialsApiGetVideosInQueueRequest
 */
export type WatchLaterQueueEssentialsApiGetVideosInQueueRequest = {
    
    /**
    * The sort direction of the results.  Option descriptions:  * `asc` - Sort the results in ascending order.  * `desc` - Sort the results in descending order. 
    * @type {'asc' | 'desc'}
    * @memberof WatchLaterQueueEssentialsApiGetVideosInQueue
    */
    readonly direction?: 'asc' | 'desc'
    
    /**
    * The attribute by which to filter the results.  Option descriptions:  * `embeddable` - Return embeddable videos. 
    * @type {'embeddable'}
    * @memberof WatchLaterQueueEssentialsApiGetVideosInQueue
    */
    readonly filter?: 'embeddable'
    
    /**
    * Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). This parameter is required only when **filter** is `embeddable`.
    * @type {boolean}
    * @memberof WatchLaterQueueEssentialsApiGetVideosInQueue
    */
    readonly filterEmbeddable?: boolean
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof WatchLaterQueueEssentialsApiGetVideosInQueue
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof WatchLaterQueueEssentialsApiGetVideosInQueue
    */
    readonly perPage?: number
    
    /**
    * The search query to use to filter the results.
    * @type {string}
    * @memberof WatchLaterQueueEssentialsApiGetVideosInQueue
    */
    readonly query?: string
    
    /**
    * The way to sort the results.  Option descriptions:  * `alphabetical` - Sort the results alphabetically.  * `comments` - Sort the results by number of comments.  * `date` - Sort the results by date added.  * `duration` - Sort the results by duration.  * `likes` - Sort the results by number of likes.  * `plays` - Sort the results by number of plays. 
    * @type {'alphabetical' | 'comments' | 'date' | 'duration' | 'likes' | 'plays'}
    * @memberof WatchLaterQueueEssentialsApiGetVideosInQueue
    */
    readonly sort?: 'alphabetical' | 'comments' | 'date' | 'duration' | 'likes' | 'plays'
    
}

/**
 * Request parameters for listUserQueueVideos operation in WatchLaterQueueEssentialsApi.
 * @export
 * @interface WatchLaterQueueEssentialsApiListUserQueueVideosRequest
 */
export type WatchLaterQueueEssentialsApiListUserQueueVideosRequest = {
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof WatchLaterQueueEssentialsApiListUserQueueVideos
    */
    readonly userId: number
    
    /**
    * The sort direction of the results.  Option descriptions:  * `asc` - Sort the results in ascending order.  * `desc` - Sort the results in descending order. 
    * @type {'asc' | 'desc'}
    * @memberof WatchLaterQueueEssentialsApiListUserQueueVideos
    */
    readonly direction?: 'asc' | 'desc'
    
    /**
    * The attribute by which to filter the results.  Option descriptions:  * `embeddable` - Return embeddable videos. 
    * @type {'embeddable'}
    * @memberof WatchLaterQueueEssentialsApiListUserQueueVideos
    */
    readonly filter?: 'embeddable'
    
    /**
    * Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). This parameter is required only when **filter** is `embeddable`.
    * @type {boolean}
    * @memberof WatchLaterQueueEssentialsApiListUserQueueVideos
    */
    readonly filterEmbeddable?: boolean
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof WatchLaterQueueEssentialsApiListUserQueueVideos
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof WatchLaterQueueEssentialsApiListUserQueueVideos
    */
    readonly perPage?: number
    
    /**
    * The search query to use to filter the results.
    * @type {string}
    * @memberof WatchLaterQueueEssentialsApiListUserQueueVideos
    */
    readonly query?: string
    
    /**
    * The way to sort the results.  Option descriptions:  * `alphabetical` - Sort the results alphabetically.  * `comments` - Sort the results by number of comments.  * `date` - Sort the results by date added.  * `duration` - Sort the results by duration.  * `likes` - Sort the results by number of likes.  * `plays` - Sort the results by number of plays. 
    * @type {'alphabetical' | 'comments' | 'date' | 'duration' | 'likes' | 'plays'}
    * @memberof WatchLaterQueueEssentialsApiListUserQueueVideos
    */
    readonly sort?: 'alphabetical' | 'comments' | 'date' | 'duration' | 'likes' | 'plays'
    
}

/**
 * Request parameters for removeVideoFromQueue operation in WatchLaterQueueEssentialsApi.
 * @export
 * @interface WatchLaterQueueEssentialsApiRemoveVideoFromQueueRequest
 */
export type WatchLaterQueueEssentialsApiRemoveVideoFromQueueRequest = {
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof WatchLaterQueueEssentialsApiRemoveVideoFromQueue
    */
    readonly videoId: number
    
}

/**
 * Request parameters for removeVideoFromQueue_3 operation in WatchLaterQueueEssentialsApi.
 * @export
 * @interface WatchLaterQueueEssentialsApiRemoveVideoFromQueue0Request
 */
export type WatchLaterQueueEssentialsApiRemoveVideoFromQueue0Request = {
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof WatchLaterQueueEssentialsApiRemoveVideoFromQueue0
    */
    readonly userId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof WatchLaterQueueEssentialsApiRemoveVideoFromQueue0
    */
    readonly videoId: number
    
}

/**
 * WatchLaterQueueEssentialsApiGenerated - object-oriented interface
 * @export
 * @class WatchLaterQueueEssentialsApiGenerated
 * @extends {BaseAPI}
 */
export class WatchLaterQueueEssentialsApiGenerated extends BaseAPI {
    /**
     * This method adds the specified video to the authenticated user\'s Watch Later queue.
     * @summary Add a video to the user\'s Watch Later queue
     * @param {WatchLaterQueueEssentialsApiAddVideoToQueueRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WatchLaterQueueEssentialsApiGenerated
     */
    public addVideoToQueue(requestParameters: WatchLaterQueueEssentialsApiAddVideoToQueueRequest, options?: AxiosRequestConfig) {
        return WatchLaterQueueEssentialsApiFp(this.configuration).addVideoToQueue(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method adds the specified video to the authenticated user\'s Watch Later queue.
     * @summary Add a video to the user\'s Watch Later queue
     * @param {WatchLaterQueueEssentialsApiAddVideoToQueue0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WatchLaterQueueEssentialsApiGenerated
     */
    public addVideoToQueue_1(requestParameters: WatchLaterQueueEssentialsApiAddVideoToQueue0Request, options?: AxiosRequestConfig) {
        return WatchLaterQueueEssentialsApiFp(this.configuration).addVideoToQueue_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method checks the authenticated user\'s Watch Later queue for the specified video.
     * @summary Check if the user has added a video to their Watch Later queue
     * @param {WatchLaterQueueEssentialsApiCheckVideoInQueueRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WatchLaterQueueEssentialsApiGenerated
     */
    public checkVideoInQueue(requestParameters: WatchLaterQueueEssentialsApiCheckVideoInQueueRequest, options?: AxiosRequestConfig) {
        return WatchLaterQueueEssentialsApiFp(this.configuration).checkVideoInQueue(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method checks the authenticated user\'s Watch Later queue for the specified video.
     * @summary Check if the user has added a video to their Watch Later queue
     * @param {WatchLaterQueueEssentialsApiCheckVideoInQueue0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WatchLaterQueueEssentialsApiGenerated
     */
    public checkVideoInQueue_2(requestParameters: WatchLaterQueueEssentialsApiCheckVideoInQueue0Request, options?: AxiosRequestConfig) {
        return WatchLaterQueueEssentialsApiFp(this.configuration).checkVideoInQueue_2(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every video from the authenticated user\'s Watch Later queue.
     * @summary Get all the videos in the user\'s Watch Later queue
     * @param {WatchLaterQueueEssentialsApiGetVideosInQueueRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WatchLaterQueueEssentialsApiGenerated
     */
    public getVideosInQueue(requestParameters: WatchLaterQueueEssentialsApiGetVideosInQueueRequest = {}, options?: AxiosRequestConfig) {
        return WatchLaterQueueEssentialsApiFp(this.configuration).getVideosInQueue(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every video from the authenticated user\'s Watch Later queue.
     * @summary Get all the videos in the user\'s Watch Later queue
     * @param {WatchLaterQueueEssentialsApiListUserQueueVideosRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WatchLaterQueueEssentialsApiGenerated
     */
    public listUserQueueVideos(requestParameters: WatchLaterQueueEssentialsApiListUserQueueVideosRequest, options?: AxiosRequestConfig) {
        return WatchLaterQueueEssentialsApiFp(this.configuration).listUserQueueVideos(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method removes the specified video from the authenticated user\'s Watch Later queue.
     * @summary Remove a video from the user\'s Watch Later queue
     * @param {WatchLaterQueueEssentialsApiRemoveVideoFromQueueRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WatchLaterQueueEssentialsApiGenerated
     */
    public removeVideoFromQueue(requestParameters: WatchLaterQueueEssentialsApiRemoveVideoFromQueueRequest, options?: AxiosRequestConfig) {
        return WatchLaterQueueEssentialsApiFp(this.configuration).removeVideoFromQueue(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method removes the specified video from the authenticated user\'s Watch Later queue.
     * @summary Remove a video from the user\'s Watch Later queue
     * @param {WatchLaterQueueEssentialsApiRemoveVideoFromQueue0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WatchLaterQueueEssentialsApiGenerated
     */
    public removeVideoFromQueue_3(requestParameters: WatchLaterQueueEssentialsApiRemoveVideoFromQueue0Request, options?: AxiosRequestConfig) {
        return WatchLaterQueueEssentialsApiFp(this.configuration).removeVideoFromQueue_3(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
