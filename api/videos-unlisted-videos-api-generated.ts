/* tslint:disable */
/* eslint-disable */
/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

The version of the OpenAPI document: 3.4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { LegacyError } from '../models';
// @ts-ignore
import { User } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * VideosUnlistedVideosApi - axios parameter creator
 * @export
 */
export const VideosUnlistedVideosApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method gives multiple users permission to access the specified unlisted video. The authenticated user must be the owner of the video. The body of the request should follow our [batch request format](https://developer.vimeo.com/api/common-formats#working-with-batch-requests): each object must contain a single **uri** field whose value is the URI of the user who can access the video.
         * @summary Permit a list of users to access an unlisted video
         * @param {number} channelId The ID of the channel.
         * @param {number} videoId The ID of the video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        grantAccessToUsers: async (channelId: number, videoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('grantAccessToUsers', 'channelId', channelId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('grantAccessToUsers', 'videoId', videoId)
            const localVarPath = `/channels/{channel_id}/videos/{video_id}/privacy/users`
                .replace(`{${"channel_id"}}`, encodeURIComponent(String(channelId !== undefined ? channelId : `-channel_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/channels/{channel_id}/videos/{video_id}/privacy/users',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method gives multiple users permission to access the specified unlisted video. The authenticated user must be the owner of the video. The body of the request should follow our [batch request format](https://developer.vimeo.com/api/common-formats#working-with-batch-requests): each object must contain a single **uri** field whose value is the URI of the user who can access the video.
         * @summary Permit a list of users to access an unlisted video
         * @param {number} videoId The ID of the video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        grantAccessToUsers_1: async (videoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('grantAccessToUsers_1', 'videoId', videoId)
            const localVarPath = `/videos/{video_id}/privacy/users`
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/videos/{video_id}/privacy/users',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method gives a single user permission to access the specified unlisted video. The authenticated user must be the owner of the video.
         * @summary Permit a single user to access an unlisted video
         * @param {number} userId The ID of the user.
         * @param {number} videoId The ID of the video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        grantUserAccess: async (userId: number, videoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('grantUserAccess', 'userId', userId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('grantUserAccess', 'videoId', videoId)
            const localVarPath = `/videos/{video_id}/privacy/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/videos/{video_id}/privacy/users/{user_id}',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every user who has access to the specified unlisted video.
         * @summary Get the users who can access an unlisted video
         * @param {number} channelId The ID of the channel.
         * @param {number} videoId The ID of the video.
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAccessibleUsers: async (channelId: number, videoId: number, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('listAccessibleUsers', 'channelId', channelId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('listAccessibleUsers', 'videoId', videoId)
            const localVarPath = `/channels/{channel_id}/videos/{video_id}/privacy/users`
                .replace(`{${"channel_id"}}`, encodeURIComponent(String(channelId !== undefined ? channelId : `-channel_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/channels/{channel_id}/videos/{video_id}/privacy/users',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every user who has access to the specified unlisted video.
         * @summary Get the users who can access an unlisted video
         * @param {number} videoId The ID of the video.
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAccessibleUsers_2: async (videoId: number, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('listAccessibleUsers_2', 'videoId', videoId)
            const localVarPath = `/videos/{video_id}/privacy/users`
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/videos/{video_id}/privacy/users',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method prevents a user from being able to view the specified unlisted video. The authenticated user must be the owner of the video.
         * @summary Restrict a user from viewing an unlisted video
         * @param {number} userId The ID of the user.
         * @param {number} videoId The ID of the video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restrictUserAccess: async (userId: number, videoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('restrictUserAccess', 'userId', userId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('restrictUserAccess', 'videoId', videoId)
            const localVarPath = `/videos/{video_id}/privacy/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/videos/{video_id}/privacy/users/{user_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VideosUnlistedVideosApi - functional programming interface
 * @export
 */
export const VideosUnlistedVideosApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VideosUnlistedVideosApiAxiosParamCreator(configuration)
    return {
        /**
         * This method gives multiple users permission to access the specified unlisted video. The authenticated user must be the owner of the video. The body of the request should follow our [batch request format](https://developer.vimeo.com/api/common-formats#working-with-batch-requests): each object must contain a single **uri** field whose value is the URI of the user who can access the video.
         * @summary Permit a list of users to access an unlisted video
         * @param {VideosUnlistedVideosApiGrantAccessToUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async grantAccessToUsers(requestParameters: VideosUnlistedVideosApiGrantAccessToUsersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.grantAccessToUsers(requestParameters.channelId, requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method gives multiple users permission to access the specified unlisted video. The authenticated user must be the owner of the video. The body of the request should follow our [batch request format](https://developer.vimeo.com/api/common-formats#working-with-batch-requests): each object must contain a single **uri** field whose value is the URI of the user who can access the video.
         * @summary Permit a list of users to access an unlisted video
         * @param {VideosUnlistedVideosApiGrantAccessToUsers0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async grantAccessToUsers_1(requestParameters: VideosUnlistedVideosApiGrantAccessToUsers0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.grantAccessToUsers_1(requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method gives a single user permission to access the specified unlisted video. The authenticated user must be the owner of the video.
         * @summary Permit a single user to access an unlisted video
         * @param {VideosUnlistedVideosApiGrantUserAccessRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async grantUserAccess(requestParameters: VideosUnlistedVideosApiGrantUserAccessRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.grantUserAccess(requestParameters.userId, requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every user who has access to the specified unlisted video.
         * @summary Get the users who can access an unlisted video
         * @param {VideosUnlistedVideosApiListAccessibleUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAccessibleUsers(requestParameters: VideosUnlistedVideosApiListAccessibleUsersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAccessibleUsers(requestParameters.channelId, requestParameters.videoId, requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every user who has access to the specified unlisted video.
         * @summary Get the users who can access an unlisted video
         * @param {VideosUnlistedVideosApiListAccessibleUsers0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAccessibleUsers_2(requestParameters: VideosUnlistedVideosApiListAccessibleUsers0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAccessibleUsers_2(requestParameters.videoId, requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method prevents a user from being able to view the specified unlisted video. The authenticated user must be the owner of the video.
         * @summary Restrict a user from viewing an unlisted video
         * @param {VideosUnlistedVideosApiRestrictUserAccessRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async restrictUserAccess(requestParameters: VideosUnlistedVideosApiRestrictUserAccessRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.restrictUserAccess(requestParameters.userId, requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VideosUnlistedVideosApi - factory interface
 * @export
 */
export const VideosUnlistedVideosApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VideosUnlistedVideosApiFp(configuration)
    return {
        /**
         * This method gives multiple users permission to access the specified unlisted video. The authenticated user must be the owner of the video. The body of the request should follow our [batch request format](https://developer.vimeo.com/api/common-formats#working-with-batch-requests): each object must contain a single **uri** field whose value is the URI of the user who can access the video.
         * @summary Permit a list of users to access an unlisted video
         * @param {VideosUnlistedVideosApiGrantAccessToUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        grantAccessToUsers(requestParameters: VideosUnlistedVideosApiGrantAccessToUsersRequest, options?: AxiosRequestConfig): AxiosPromise<Array<User>> {
            return localVarFp.grantAccessToUsers(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method gives multiple users permission to access the specified unlisted video. The authenticated user must be the owner of the video. The body of the request should follow our [batch request format](https://developer.vimeo.com/api/common-formats#working-with-batch-requests): each object must contain a single **uri** field whose value is the URI of the user who can access the video.
         * @summary Permit a list of users to access an unlisted video
         * @param {VideosUnlistedVideosApiGrantAccessToUsers0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        grantAccessToUsers_1(requestParameters: VideosUnlistedVideosApiGrantAccessToUsers0Request, options?: AxiosRequestConfig): AxiosPromise<Array<User>> {
            return localVarFp.grantAccessToUsers_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method gives a single user permission to access the specified unlisted video. The authenticated user must be the owner of the video.
         * @summary Permit a single user to access an unlisted video
         * @param {VideosUnlistedVideosApiGrantUserAccessRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        grantUserAccess(requestParameters: VideosUnlistedVideosApiGrantUserAccessRequest, options?: AxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.grantUserAccess(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every user who has access to the specified unlisted video.
         * @summary Get the users who can access an unlisted video
         * @param {VideosUnlistedVideosApiListAccessibleUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAccessibleUsers(requestParameters: VideosUnlistedVideosApiListAccessibleUsersRequest, options?: AxiosRequestConfig): AxiosPromise<Array<User>> {
            return localVarFp.listAccessibleUsers(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every user who has access to the specified unlisted video.
         * @summary Get the users who can access an unlisted video
         * @param {VideosUnlistedVideosApiListAccessibleUsers0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAccessibleUsers_2(requestParameters: VideosUnlistedVideosApiListAccessibleUsers0Request, options?: AxiosRequestConfig): AxiosPromise<Array<User>> {
            return localVarFp.listAccessibleUsers_2(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method prevents a user from being able to view the specified unlisted video. The authenticated user must be the owner of the video.
         * @summary Restrict a user from viewing an unlisted video
         * @param {VideosUnlistedVideosApiRestrictUserAccessRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restrictUserAccess(requestParameters: VideosUnlistedVideosApiRestrictUserAccessRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.restrictUserAccess(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for grantAccessToUsers operation in VideosUnlistedVideosApi.
 * @export
 * @interface VideosUnlistedVideosApiGrantAccessToUsersRequest
 */
export type VideosUnlistedVideosApiGrantAccessToUsersRequest = {
    
    /**
    * The ID of the channel.
    * @type {number}
    * @memberof VideosUnlistedVideosApiGrantAccessToUsers
    */
    readonly channelId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof VideosUnlistedVideosApiGrantAccessToUsers
    */
    readonly videoId: number
    
}

/**
 * Request parameters for grantAccessToUsers_1 operation in VideosUnlistedVideosApi.
 * @export
 * @interface VideosUnlistedVideosApiGrantAccessToUsers0Request
 */
export type VideosUnlistedVideosApiGrantAccessToUsers0Request = {
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof VideosUnlistedVideosApiGrantAccessToUsers0
    */
    readonly videoId: number
    
}

/**
 * Request parameters for grantUserAccess operation in VideosUnlistedVideosApi.
 * @export
 * @interface VideosUnlistedVideosApiGrantUserAccessRequest
 */
export type VideosUnlistedVideosApiGrantUserAccessRequest = {
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof VideosUnlistedVideosApiGrantUserAccess
    */
    readonly userId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof VideosUnlistedVideosApiGrantUserAccess
    */
    readonly videoId: number
    
}

/**
 * Request parameters for listAccessibleUsers operation in VideosUnlistedVideosApi.
 * @export
 * @interface VideosUnlistedVideosApiListAccessibleUsersRequest
 */
export type VideosUnlistedVideosApiListAccessibleUsersRequest = {
    
    /**
    * The ID of the channel.
    * @type {number}
    * @memberof VideosUnlistedVideosApiListAccessibleUsers
    */
    readonly channelId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof VideosUnlistedVideosApiListAccessibleUsers
    */
    readonly videoId: number
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof VideosUnlistedVideosApiListAccessibleUsers
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof VideosUnlistedVideosApiListAccessibleUsers
    */
    readonly perPage?: number
    
}

/**
 * Request parameters for listAccessibleUsers_2 operation in VideosUnlistedVideosApi.
 * @export
 * @interface VideosUnlistedVideosApiListAccessibleUsers0Request
 */
export type VideosUnlistedVideosApiListAccessibleUsers0Request = {
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof VideosUnlistedVideosApiListAccessibleUsers0
    */
    readonly videoId: number
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof VideosUnlistedVideosApiListAccessibleUsers0
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof VideosUnlistedVideosApiListAccessibleUsers0
    */
    readonly perPage?: number
    
}

/**
 * Request parameters for restrictUserAccess operation in VideosUnlistedVideosApi.
 * @export
 * @interface VideosUnlistedVideosApiRestrictUserAccessRequest
 */
export type VideosUnlistedVideosApiRestrictUserAccessRequest = {
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof VideosUnlistedVideosApiRestrictUserAccess
    */
    readonly userId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof VideosUnlistedVideosApiRestrictUserAccess
    */
    readonly videoId: number
    
}

/**
 * VideosUnlistedVideosApiGenerated - object-oriented interface
 * @export
 * @class VideosUnlistedVideosApiGenerated
 * @extends {BaseAPI}
 */
export class VideosUnlistedVideosApiGenerated extends BaseAPI {
    /**
     * This method gives multiple users permission to access the specified unlisted video. The authenticated user must be the owner of the video. The body of the request should follow our [batch request format](https://developer.vimeo.com/api/common-formats#working-with-batch-requests): each object must contain a single **uri** field whose value is the URI of the user who can access the video.
     * @summary Permit a list of users to access an unlisted video
     * @param {VideosUnlistedVideosApiGrantAccessToUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosUnlistedVideosApiGenerated
     */
    public grantAccessToUsers(requestParameters: VideosUnlistedVideosApiGrantAccessToUsersRequest, options?: AxiosRequestConfig) {
        return VideosUnlistedVideosApiFp(this.configuration).grantAccessToUsers(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method gives multiple users permission to access the specified unlisted video. The authenticated user must be the owner of the video. The body of the request should follow our [batch request format](https://developer.vimeo.com/api/common-formats#working-with-batch-requests): each object must contain a single **uri** field whose value is the URI of the user who can access the video.
     * @summary Permit a list of users to access an unlisted video
     * @param {VideosUnlistedVideosApiGrantAccessToUsers0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosUnlistedVideosApiGenerated
     */
    public grantAccessToUsers_1(requestParameters: VideosUnlistedVideosApiGrantAccessToUsers0Request, options?: AxiosRequestConfig) {
        return VideosUnlistedVideosApiFp(this.configuration).grantAccessToUsers_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method gives a single user permission to access the specified unlisted video. The authenticated user must be the owner of the video.
     * @summary Permit a single user to access an unlisted video
     * @param {VideosUnlistedVideosApiGrantUserAccessRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosUnlistedVideosApiGenerated
     */
    public grantUserAccess(requestParameters: VideosUnlistedVideosApiGrantUserAccessRequest, options?: AxiosRequestConfig) {
        return VideosUnlistedVideosApiFp(this.configuration).grantUserAccess(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every user who has access to the specified unlisted video.
     * @summary Get the users who can access an unlisted video
     * @param {VideosUnlistedVideosApiListAccessibleUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosUnlistedVideosApiGenerated
     */
    public listAccessibleUsers(requestParameters: VideosUnlistedVideosApiListAccessibleUsersRequest, options?: AxiosRequestConfig) {
        return VideosUnlistedVideosApiFp(this.configuration).listAccessibleUsers(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every user who has access to the specified unlisted video.
     * @summary Get the users who can access an unlisted video
     * @param {VideosUnlistedVideosApiListAccessibleUsers0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosUnlistedVideosApiGenerated
     */
    public listAccessibleUsers_2(requestParameters: VideosUnlistedVideosApiListAccessibleUsers0Request, options?: AxiosRequestConfig) {
        return VideosUnlistedVideosApiFp(this.configuration).listAccessibleUsers_2(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method prevents a user from being able to view the specified unlisted video. The authenticated user must be the owner of the video.
     * @summary Restrict a user from viewing an unlisted video
     * @param {VideosUnlistedVideosApiRestrictUserAccessRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosUnlistedVideosApiGenerated
     */
    public restrictUserAccess(requestParameters: VideosUnlistedVideosApiRestrictUserAccessRequest, options?: AxiosRequestConfig) {
        return VideosUnlistedVideosApiFp(this.configuration).restrictUserAccess(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
