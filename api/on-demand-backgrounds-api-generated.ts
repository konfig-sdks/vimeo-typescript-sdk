/* tslint:disable */
/* eslint-disable */
/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

The version of the OpenAPI document: 3.4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { LegacyError } from '../models';
// @ts-ignore
import { OnDemandBackgroundsEditBackgroundOnPageRequest } from '../models';
// @ts-ignore
import { Picture } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * OnDemandBackgroundsApi - axios parameter creator
 * @export
 */
export const OnDemandBackgroundsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method adds a background image to the specified On Demand page. The authenticated user must be the owner of the page.
         * @summary Add a background to an On Demand page
         * @param {number} ondemandId The ID of the On Demand page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addBackgroundToPage: async (ondemandId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ondemandId' is not null or undefined
            assertParamExists('addBackgroundToPage', 'ondemandId', ondemandId)
            const localVarPath = `/ondemand/pages/{ondemand_id}/backgrounds`
                .replace(`{${"ondemand_id"}}`, encodeURIComponent(String(ondemandId !== undefined ? ondemandId : `-ondemand_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["upload"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["upload"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ondemand/pages/{ondemand_id}/backgrounds',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method deletes the specified background image on an On Demand page. The authenticated user must be the owner of the page.
         * @summary Delete a background on an On Demand page
         * @param {number} backgroundId The ID of the background image.
         * @param {number} ondemandId The ID of the On Demand page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBackgroundFromPage: async (backgroundId: number, ondemandId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'backgroundId' is not null or undefined
            assertParamExists('deleteBackgroundFromPage', 'backgroundId', backgroundId)
            // verify required parameter 'ondemandId' is not null or undefined
            assertParamExists('deleteBackgroundFromPage', 'ondemandId', ondemandId)
            const localVarPath = `/ondemand/pages/{ondemand_id}/backgrounds/{background_id}`
                .replace(`{${"background_id"}}`, encodeURIComponent(String(backgroundId !== undefined ? backgroundId : `-background_id-`)))
                .replace(`{${"ondemand_id"}}`, encodeURIComponent(String(ondemandId !== undefined ? ondemandId : `-ondemand_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ondemand/pages/{ondemand_id}/backgrounds/{background_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method edits the specified background image on an On Demand page. The authenticated user must be the owner of the page.
         * @summary Edit a background on an On Demand page
         * @param {number} backgroundId The ID of the background image.
         * @param {number} ondemandId The ID of the On Demand page.
         * @param {OnDemandBackgroundsEditBackgroundOnPageRequest} [onDemandBackgroundsEditBackgroundOnPageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editBackgroundOnPage: async (backgroundId: number, ondemandId: number, onDemandBackgroundsEditBackgroundOnPageRequest?: OnDemandBackgroundsEditBackgroundOnPageRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'backgroundId' is not null or undefined
            assertParamExists('editBackgroundOnPage', 'backgroundId', backgroundId)
            // verify required parameter 'ondemandId' is not null or undefined
            assertParamExists('editBackgroundOnPage', 'ondemandId', ondemandId)
            const localVarPath = `/ondemand/pages/{ondemand_id}/backgrounds/{background_id}`
                .replace(`{${"background_id"}}`, encodeURIComponent(String(backgroundId !== undefined ? backgroundId : `-background_id-`)))
                .replace(`{${"ondemand_id"}}`, encodeURIComponent(String(ondemandId !== undefined ? ondemandId : `-ondemand_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.vimeo.picture+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: onDemandBackgroundsEditBackgroundOnPageRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ondemand/pages/{ondemand_id}/backgrounds/{background_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(onDemandBackgroundsEditBackgroundOnPageRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every background image on the specified On Demand page. The authenticated user must be the owner of the page.
         * @summary Get all the backgrounds on an On Demand page
         * @param {number} ondemandId The ID of the On Demand page.
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllBackgroundsOnPage: async (ondemandId: number, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ondemandId' is not null or undefined
            assertParamExists('getAllBackgroundsOnPage', 'ondemandId', ondemandId)
            const localVarPath = `/ondemand/pages/{ondemand_id}/backgrounds`
                .replace(`{${"ondemand_id"}}`, encodeURIComponent(String(ondemandId !== undefined ? ondemandId : `-ondemand_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ondemand/pages/{ondemand_id}/backgrounds',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns a single background image on the specified On Demand page. The authenticated user must be the owner of the page.
         * @summary Get a specific background on an On Demand page
         * @param {number} backgroundId The ID of the background image.
         * @param {number} ondemandId The ID of the On Demand page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificBackground: async (backgroundId: number, ondemandId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'backgroundId' is not null or undefined
            assertParamExists('getSpecificBackground', 'backgroundId', backgroundId)
            // verify required parameter 'ondemandId' is not null or undefined
            assertParamExists('getSpecificBackground', 'ondemandId', ondemandId)
            const localVarPath = `/ondemand/pages/{ondemand_id}/backgrounds/{background_id}`
                .replace(`{${"background_id"}}`, encodeURIComponent(String(backgroundId !== undefined ? backgroundId : `-background_id-`)))
                .replace(`{${"ondemand_id"}}`, encodeURIComponent(String(ondemandId !== undefined ? ondemandId : `-ondemand_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ondemand/pages/{ondemand_id}/backgrounds/{background_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OnDemandBackgroundsApi - functional programming interface
 * @export
 */
export const OnDemandBackgroundsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OnDemandBackgroundsApiAxiosParamCreator(configuration)
    return {
        /**
         * This method adds a background image to the specified On Demand page. The authenticated user must be the owner of the page.
         * @summary Add a background to an On Demand page
         * @param {OnDemandBackgroundsApiAddBackgroundToPageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addBackgroundToPage(requestParameters: OnDemandBackgroundsApiAddBackgroundToPageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Picture>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addBackgroundToPage(requestParameters.ondemandId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method deletes the specified background image on an On Demand page. The authenticated user must be the owner of the page.
         * @summary Delete a background on an On Demand page
         * @param {OnDemandBackgroundsApiDeleteBackgroundFromPageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBackgroundFromPage(requestParameters: OnDemandBackgroundsApiDeleteBackgroundFromPageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBackgroundFromPage(requestParameters.backgroundId, requestParameters.ondemandId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method edits the specified background image on an On Demand page. The authenticated user must be the owner of the page.
         * @summary Edit a background on an On Demand page
         * @param {OnDemandBackgroundsApiEditBackgroundOnPageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editBackgroundOnPage(requestParameters: OnDemandBackgroundsApiEditBackgroundOnPageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Picture>> {
            const onDemandBackgroundsEditBackgroundOnPageRequest: OnDemandBackgroundsEditBackgroundOnPageRequest = {
                active: requestParameters.active
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.editBackgroundOnPage(requestParameters.backgroundId, requestParameters.ondemandId, onDemandBackgroundsEditBackgroundOnPageRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every background image on the specified On Demand page. The authenticated user must be the owner of the page.
         * @summary Get all the backgrounds on an On Demand page
         * @param {OnDemandBackgroundsApiGetAllBackgroundsOnPageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllBackgroundsOnPage(requestParameters: OnDemandBackgroundsApiGetAllBackgroundsOnPageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Picture>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllBackgroundsOnPage(requestParameters.ondemandId, requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns a single background image on the specified On Demand page. The authenticated user must be the owner of the page.
         * @summary Get a specific background on an On Demand page
         * @param {OnDemandBackgroundsApiGetSpecificBackgroundRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpecificBackground(requestParameters: OnDemandBackgroundsApiGetSpecificBackgroundRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Picture>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpecificBackground(requestParameters.backgroundId, requestParameters.ondemandId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OnDemandBackgroundsApi - factory interface
 * @export
 */
export const OnDemandBackgroundsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OnDemandBackgroundsApiFp(configuration)
    return {
        /**
         * This method adds a background image to the specified On Demand page. The authenticated user must be the owner of the page.
         * @summary Add a background to an On Demand page
         * @param {OnDemandBackgroundsApiAddBackgroundToPageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addBackgroundToPage(requestParameters: OnDemandBackgroundsApiAddBackgroundToPageRequest, options?: AxiosRequestConfig): AxiosPromise<Picture> {
            return localVarFp.addBackgroundToPage(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method deletes the specified background image on an On Demand page. The authenticated user must be the owner of the page.
         * @summary Delete a background on an On Demand page
         * @param {OnDemandBackgroundsApiDeleteBackgroundFromPageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBackgroundFromPage(requestParameters: OnDemandBackgroundsApiDeleteBackgroundFromPageRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteBackgroundFromPage(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method edits the specified background image on an On Demand page. The authenticated user must be the owner of the page.
         * @summary Edit a background on an On Demand page
         * @param {OnDemandBackgroundsApiEditBackgroundOnPageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editBackgroundOnPage(requestParameters: OnDemandBackgroundsApiEditBackgroundOnPageRequest, options?: AxiosRequestConfig): AxiosPromise<Picture> {
            return localVarFp.editBackgroundOnPage(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every background image on the specified On Demand page. The authenticated user must be the owner of the page.
         * @summary Get all the backgrounds on an On Demand page
         * @param {OnDemandBackgroundsApiGetAllBackgroundsOnPageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllBackgroundsOnPage(requestParameters: OnDemandBackgroundsApiGetAllBackgroundsOnPageRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Picture>> {
            return localVarFp.getAllBackgroundsOnPage(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns a single background image on the specified On Demand page. The authenticated user must be the owner of the page.
         * @summary Get a specific background on an On Demand page
         * @param {OnDemandBackgroundsApiGetSpecificBackgroundRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificBackground(requestParameters: OnDemandBackgroundsApiGetSpecificBackgroundRequest, options?: AxiosRequestConfig): AxiosPromise<Picture> {
            return localVarFp.getSpecificBackground(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addBackgroundToPage operation in OnDemandBackgroundsApi.
 * @export
 * @interface OnDemandBackgroundsApiAddBackgroundToPageRequest
 */
export type OnDemandBackgroundsApiAddBackgroundToPageRequest = {
    
    /**
    * The ID of the On Demand page.
    * @type {number}
    * @memberof OnDemandBackgroundsApiAddBackgroundToPage
    */
    readonly ondemandId: number
    
}

/**
 * Request parameters for deleteBackgroundFromPage operation in OnDemandBackgroundsApi.
 * @export
 * @interface OnDemandBackgroundsApiDeleteBackgroundFromPageRequest
 */
export type OnDemandBackgroundsApiDeleteBackgroundFromPageRequest = {
    
    /**
    * The ID of the background image.
    * @type {number}
    * @memberof OnDemandBackgroundsApiDeleteBackgroundFromPage
    */
    readonly backgroundId: number
    
    /**
    * The ID of the On Demand page.
    * @type {number}
    * @memberof OnDemandBackgroundsApiDeleteBackgroundFromPage
    */
    readonly ondemandId: number
    
}

/**
 * Request parameters for editBackgroundOnPage operation in OnDemandBackgroundsApi.
 * @export
 * @interface OnDemandBackgroundsApiEditBackgroundOnPageRequest
 */
export type OnDemandBackgroundsApiEditBackgroundOnPageRequest = {
    
    /**
    * The ID of the background image.
    * @type {number}
    * @memberof OnDemandBackgroundsApiEditBackgroundOnPage
    */
    readonly backgroundId: number
    
    /**
    * The ID of the On Demand page.
    * @type {number}
    * @memberof OnDemandBackgroundsApiEditBackgroundOnPage
    */
    readonly ondemandId: number
    
} & OnDemandBackgroundsEditBackgroundOnPageRequest

/**
 * Request parameters for getAllBackgroundsOnPage operation in OnDemandBackgroundsApi.
 * @export
 * @interface OnDemandBackgroundsApiGetAllBackgroundsOnPageRequest
 */
export type OnDemandBackgroundsApiGetAllBackgroundsOnPageRequest = {
    
    /**
    * The ID of the On Demand page.
    * @type {number}
    * @memberof OnDemandBackgroundsApiGetAllBackgroundsOnPage
    */
    readonly ondemandId: number
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof OnDemandBackgroundsApiGetAllBackgroundsOnPage
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof OnDemandBackgroundsApiGetAllBackgroundsOnPage
    */
    readonly perPage?: number
    
}

/**
 * Request parameters for getSpecificBackground operation in OnDemandBackgroundsApi.
 * @export
 * @interface OnDemandBackgroundsApiGetSpecificBackgroundRequest
 */
export type OnDemandBackgroundsApiGetSpecificBackgroundRequest = {
    
    /**
    * The ID of the background image.
    * @type {number}
    * @memberof OnDemandBackgroundsApiGetSpecificBackground
    */
    readonly backgroundId: number
    
    /**
    * The ID of the On Demand page.
    * @type {number}
    * @memberof OnDemandBackgroundsApiGetSpecificBackground
    */
    readonly ondemandId: number
    
}

/**
 * OnDemandBackgroundsApiGenerated - object-oriented interface
 * @export
 * @class OnDemandBackgroundsApiGenerated
 * @extends {BaseAPI}
 */
export class OnDemandBackgroundsApiGenerated extends BaseAPI {
    /**
     * This method adds a background image to the specified On Demand page. The authenticated user must be the owner of the page.
     * @summary Add a background to an On Demand page
     * @param {OnDemandBackgroundsApiAddBackgroundToPageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnDemandBackgroundsApiGenerated
     */
    public addBackgroundToPage(requestParameters: OnDemandBackgroundsApiAddBackgroundToPageRequest, options?: AxiosRequestConfig) {
        return OnDemandBackgroundsApiFp(this.configuration).addBackgroundToPage(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method deletes the specified background image on an On Demand page. The authenticated user must be the owner of the page.
     * @summary Delete a background on an On Demand page
     * @param {OnDemandBackgroundsApiDeleteBackgroundFromPageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnDemandBackgroundsApiGenerated
     */
    public deleteBackgroundFromPage(requestParameters: OnDemandBackgroundsApiDeleteBackgroundFromPageRequest, options?: AxiosRequestConfig) {
        return OnDemandBackgroundsApiFp(this.configuration).deleteBackgroundFromPage(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method edits the specified background image on an On Demand page. The authenticated user must be the owner of the page.
     * @summary Edit a background on an On Demand page
     * @param {OnDemandBackgroundsApiEditBackgroundOnPageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnDemandBackgroundsApiGenerated
     */
    public editBackgroundOnPage(requestParameters: OnDemandBackgroundsApiEditBackgroundOnPageRequest, options?: AxiosRequestConfig) {
        return OnDemandBackgroundsApiFp(this.configuration).editBackgroundOnPage(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every background image on the specified On Demand page. The authenticated user must be the owner of the page.
     * @summary Get all the backgrounds on an On Demand page
     * @param {OnDemandBackgroundsApiGetAllBackgroundsOnPageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnDemandBackgroundsApiGenerated
     */
    public getAllBackgroundsOnPage(requestParameters: OnDemandBackgroundsApiGetAllBackgroundsOnPageRequest, options?: AxiosRequestConfig) {
        return OnDemandBackgroundsApiFp(this.configuration).getAllBackgroundsOnPage(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns a single background image on the specified On Demand page. The authenticated user must be the owner of the page.
     * @summary Get a specific background on an On Demand page
     * @param {OnDemandBackgroundsApiGetSpecificBackgroundRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnDemandBackgroundsApiGenerated
     */
    public getSpecificBackground(requestParameters: OnDemandBackgroundsApiGetSpecificBackgroundRequest, options?: AxiosRequestConfig) {
        return OnDemandBackgroundsApiFp(this.configuration).getSpecificBackground(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
