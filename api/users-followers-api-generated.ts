/* tslint:disable */
/* eslint-disable */
/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

The version of the OpenAPI document: 3.4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { FollowUsersRequest } from '../models';
// @ts-ignore
import { LegacyError } from '../models';
// @ts-ignore
import { ModelError } from '../models';
// @ts-ignore
import { User } from '../models';
// @ts-ignore
import { UsersFollowersFollowMultipleUsersRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * UsersFollowersApi - axios parameter creator
 * @export
 */
export const UsersFollowersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method determines whether the authenticated user is a follower of the specified user.
         * @summary Check if the user is following another user
         * @param {number} followUserId The ID of the user to follow.
         * @param {number} userId The ID of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkFollowingStatus: async (followUserId: number, userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'followUserId' is not null or undefined
            assertParamExists('checkFollowingStatus', 'followUserId', followUserId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('checkFollowingStatus', 'userId', userId)
            const localVarPath = `/users/{user_id}/following/{follow_user_id}`
                .replace(`{${"follow_user_id"}}`, encodeURIComponent(String(followUserId !== undefined ? followUserId : `-follow_user_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/following/{follow_user_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method determines whether the authenticated user is a follower of the specified user.
         * @summary Check if the user is following another user
         * @param {number} followUserId The ID of the user to follow.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkFollowingUser: async (followUserId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'followUserId' is not null or undefined
            assertParamExists('checkFollowingUser', 'followUserId', followUserId)
            const localVarPath = `/me/following/{follow_user_id}`
                .replace(`{${"follow_user_id"}}`, encodeURIComponent(String(followUserId !== undefined ? followUserId : `-follow_user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/following/{follow_user_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method causes the authenticated user to become a follower of multiple users. In the body of the request, specify the list of users to follow as an array of URIs, where `user01_id`, `user02_id`, `user03_id`, and so on, are the user IDs of the users in question:  ``` {  [      {\"uri\" : \"/users/{user01_id}\"},      {\"uri\" : \"/users/{user02_id}\"},      {\"uri\" : \"/users/{user03_id}\"}  ] } ```
         * @summary Follow a list of users
         * @param {UsersFollowersFollowMultipleUsersRequest} usersFollowersFollowMultipleUsersRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followMultipleUsers: async (usersFollowersFollowMultipleUsersRequest: UsersFollowersFollowMultipleUsersRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'usersFollowersFollowMultipleUsersRequest' is not null or undefined
            assertParamExists('followMultipleUsers', 'usersFollowersFollowMultipleUsersRequest', usersFollowersFollowMultipleUsersRequest)
            const localVarPath = `/me/following`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["interact"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["interact"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: usersFollowersFollowMultipleUsersRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/following',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(usersFollowersFollowMultipleUsersRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method causes the authenticated user to become the follower of the specified user.
         * @summary Follow a specific user
         * @param {number} followUserId The ID of the user to follow.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followSpecificUser: async (followUserId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'followUserId' is not null or undefined
            assertParamExists('followSpecificUser', 'followUserId', followUserId)
            const localVarPath = `/me/following/{follow_user_id}`
                .replace(`{${"follow_user_id"}}`, encodeURIComponent(String(followUserId !== undefined ? followUserId : `-follow_user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["interact"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["interact"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/following/{follow_user_id}',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every follower of the authenticated user.
         * @summary Get all the followers of the user
         * @param {number} userId The ID of the user.
         * @param {'asc' | 'desc'} [direction] The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order. 
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {string} [query] The search query to use to filter the results.
         * @param {'alphabetical' | 'date'} [sort] The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date followed. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followers: async (userId: number, direction?: 'asc' | 'desc', page?: number, perPage?: number, query?: string, sort?: 'alphabetical' | 'date', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('followers', 'userId', userId)
            const localVarPath = `/users/{user_id}/followers`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/followers',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every follower of the authenticated user.
         * @summary Get all the followers of the user
         * @param {'asc' | 'desc'} [direction] The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order. 
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {string} [query] The search query to use to filter the results.
         * @param {'alphabetical' | 'date'} [sort] The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date followed. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAll: async (direction?: 'asc' | 'desc', page?: number, perPage?: number, query?: string, sort?: 'alphabetical' | 'date', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/followers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/followers',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every user that the authenticated user is following.
         * @summary Get all the users that the user is following
         * @param {number} userId The ID of the user.
         * @param {'asc' | 'desc'} [direction] The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order. 
         * @param {'online'} [filter] The attribute by which to filter the results.  Option descriptions:  * &#x60;online&#x60; - Return users who are currently online. 
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {string} [query] The search query to use to filter the results.
         * @param {'alphabetical' | 'date'} [sort] The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date followed. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOfFollowedUsers: async (userId: number, direction?: 'asc' | 'desc', filter?: 'online', page?: number, perPage?: number, query?: string, sort?: 'alphabetical' | 'date', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('listOfFollowedUsers', 'userId', userId)
            const localVarPath = `/users/{user_id}/following`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/following',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every user that the authenticated user is following.
         * @summary Get all the users that the user is following
         * @param {'asc' | 'desc'} [direction] The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order. 
         * @param {'online'} [filter] The attribute by which to filter the results.  Option descriptions:  * &#x60;online&#x60; - Return users who are currently online. 
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {string} [query] The search query to use to filter the results.
         * @param {'alphabetical' | 'date'} [sort] The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date followed. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOfFollowingUsers: async (direction?: 'asc' | 'desc', filter?: 'online', page?: number, perPage?: number, query?: string, sort?: 'alphabetical' | 'date', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/following`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/following',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method causes the authenticated user to stop following another user.
         * @summary Unfollow a user
         * @param {number} followUserId The ID of the user to unfollow.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopFollowingUser: async (followUserId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'followUserId' is not null or undefined
            assertParamExists('stopFollowingUser', 'followUserId', followUserId)
            const localVarPath = `/me/following/{follow_user_id}`
                .replace(`{${"follow_user_id"}}`, encodeURIComponent(String(followUserId !== undefined ? followUserId : `-follow_user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["interact"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["interact"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/following/{follow_user_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method causes the authenticated user to become the follower of the specified user.
         * @summary Follow a specific user
         * @param {number} followUserId The ID of the user to follow.
         * @param {number} userId The ID of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        user: async (followUserId: number, userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'followUserId' is not null or undefined
            assertParamExists('user', 'followUserId', followUserId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('user', 'userId', userId)
            const localVarPath = `/users/{user_id}/following/{follow_user_id}`
                .replace(`{${"follow_user_id"}}`, encodeURIComponent(String(followUserId !== undefined ? followUserId : `-follow_user_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["interact"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["interact"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/following/{follow_user_id}',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method causes the authenticated user to stop following another user.
         * @summary Unfollow a user
         * @param {number} followUserId The ID of the user to unfollow.
         * @param {number} userId The ID of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        user_1: async (followUserId: number, userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'followUserId' is not null or undefined
            assertParamExists('user_1', 'followUserId', followUserId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('user_1', 'userId', userId)
            const localVarPath = `/users/{user_id}/following/{follow_user_id}`
                .replace(`{${"follow_user_id"}}`, encodeURIComponent(String(followUserId !== undefined ? followUserId : `-follow_user_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["interact"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["interact"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/following/{follow_user_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method causes the authenticated user to become a follower of multiple users. In the body of the request, specify the list of users to follow as an array of URIs, where `user01_id`, `user02_id`, `user03_id`, and so on, are the user IDs of the users in question:  ``` {  [      {\"uri\" : \"/users/{user01_id}\"},      {\"uri\" : \"/users/{user02_id}\"},      {\"uri\" : \"/users/{user03_id}\"}  ] } ```
         * @summary Follow a list of users
         * @param {number} userId The ID of the user.
         * @param {FollowUsersRequest} followUsersRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        users: async (userId: number, followUsersRequest: FollowUsersRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('users', 'userId', userId)
            // verify required parameter 'followUsersRequest' is not null or undefined
            assertParamExists('users', 'followUsersRequest', followUsersRequest)
            const localVarPath = `/users/{user_id}/following`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["interact"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["interact"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: followUsersRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/following',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(followUsersRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersFollowersApi - functional programming interface
 * @export
 */
export const UsersFollowersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersFollowersApiAxiosParamCreator(configuration)
    return {
        /**
         * This method determines whether the authenticated user is a follower of the specified user.
         * @summary Check if the user is following another user
         * @param {UsersFollowersApiCheckFollowingStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkFollowingStatus(requestParameters: UsersFollowersApiCheckFollowingStatusRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkFollowingStatus(requestParameters.followUserId, requestParameters.userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method determines whether the authenticated user is a follower of the specified user.
         * @summary Check if the user is following another user
         * @param {UsersFollowersApiCheckFollowingUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkFollowingUser(requestParameters: UsersFollowersApiCheckFollowingUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkFollowingUser(requestParameters.followUserId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method causes the authenticated user to become a follower of multiple users. In the body of the request, specify the list of users to follow as an array of URIs, where `user01_id`, `user02_id`, `user03_id`, and so on, are the user IDs of the users in question:  ``` {  [      {\"uri\" : \"/users/{user01_id}\"},      {\"uri\" : \"/users/{user02_id}\"},      {\"uri\" : \"/users/{user03_id}\"}  ] } ```
         * @summary Follow a list of users
         * @param {UsersFollowersApiFollowMultipleUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async followMultipleUsers(requestParameters: UsersFollowersApiFollowMultipleUsersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const usersFollowersFollowMultipleUsersRequest: UsersFollowersFollowMultipleUsersRequest = {
                users: requestParameters.users
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.followMultipleUsers(usersFollowersFollowMultipleUsersRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method causes the authenticated user to become the follower of the specified user.
         * @summary Follow a specific user
         * @param {UsersFollowersApiFollowSpecificUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async followSpecificUser(requestParameters: UsersFollowersApiFollowSpecificUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.followSpecificUser(requestParameters.followUserId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every follower of the authenticated user.
         * @summary Get all the followers of the user
         * @param {UsersFollowersApiFollowersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async followers(requestParameters: UsersFollowersApiFollowersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.followers(requestParameters.userId, requestParameters.direction, requestParameters.page, requestParameters.perPage, requestParameters.query, requestParameters.sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every follower of the authenticated user.
         * @summary Get all the followers of the user
         * @param {UsersFollowersApiListAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAll(requestParameters: UsersFollowersApiListAllRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAll(requestParameters.direction, requestParameters.page, requestParameters.perPage, requestParameters.query, requestParameters.sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every user that the authenticated user is following.
         * @summary Get all the users that the user is following
         * @param {UsersFollowersApiListOfFollowedUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listOfFollowedUsers(requestParameters: UsersFollowersApiListOfFollowedUsersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listOfFollowedUsers(requestParameters.userId, requestParameters.direction, requestParameters.filter, requestParameters.page, requestParameters.perPage, requestParameters.query, requestParameters.sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every user that the authenticated user is following.
         * @summary Get all the users that the user is following
         * @param {UsersFollowersApiListOfFollowingUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listOfFollowingUsers(requestParameters: UsersFollowersApiListOfFollowingUsersRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listOfFollowingUsers(requestParameters.direction, requestParameters.filter, requestParameters.page, requestParameters.perPage, requestParameters.query, requestParameters.sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method causes the authenticated user to stop following another user.
         * @summary Unfollow a user
         * @param {UsersFollowersApiStopFollowingUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stopFollowingUser(requestParameters: UsersFollowersApiStopFollowingUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stopFollowingUser(requestParameters.followUserId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method causes the authenticated user to become the follower of the specified user.
         * @summary Follow a specific user
         * @param {UsersFollowersApiUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async user(requestParameters: UsersFollowersApiUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.user(requestParameters.followUserId, requestParameters.userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method causes the authenticated user to stop following another user.
         * @summary Unfollow a user
         * @param {UsersFollowersApiUser0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async user_1(requestParameters: UsersFollowersApiUser0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.user_1(requestParameters.followUserId, requestParameters.userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method causes the authenticated user to become a follower of multiple users. In the body of the request, specify the list of users to follow as an array of URIs, where `user01_id`, `user02_id`, `user03_id`, and so on, are the user IDs of the users in question:  ``` {  [      {\"uri\" : \"/users/{user01_id}\"},      {\"uri\" : \"/users/{user02_id}\"},      {\"uri\" : \"/users/{user03_id}\"}  ] } ```
         * @summary Follow a list of users
         * @param {UsersFollowersApiUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async users(requestParameters: UsersFollowersApiUsersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const followUsersRequest: FollowUsersRequest = {
                users: requestParameters.users
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.users(requestParameters.userId, followUsersRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersFollowersApi - factory interface
 * @export
 */
export const UsersFollowersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersFollowersApiFp(configuration)
    return {
        /**
         * This method determines whether the authenticated user is a follower of the specified user.
         * @summary Check if the user is following another user
         * @param {UsersFollowersApiCheckFollowingStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkFollowingStatus(requestParameters: UsersFollowersApiCheckFollowingStatusRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.checkFollowingStatus(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method determines whether the authenticated user is a follower of the specified user.
         * @summary Check if the user is following another user
         * @param {UsersFollowersApiCheckFollowingUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkFollowingUser(requestParameters: UsersFollowersApiCheckFollowingUserRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.checkFollowingUser(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method causes the authenticated user to become a follower of multiple users. In the body of the request, specify the list of users to follow as an array of URIs, where `user01_id`, `user02_id`, `user03_id`, and so on, are the user IDs of the users in question:  ``` {  [      {\"uri\" : \"/users/{user01_id}\"},      {\"uri\" : \"/users/{user02_id}\"},      {\"uri\" : \"/users/{user03_id}\"}  ] } ```
         * @summary Follow a list of users
         * @param {UsersFollowersApiFollowMultipleUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followMultipleUsers(requestParameters: UsersFollowersApiFollowMultipleUsersRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.followMultipleUsers(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method causes the authenticated user to become the follower of the specified user.
         * @summary Follow a specific user
         * @param {UsersFollowersApiFollowSpecificUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followSpecificUser(requestParameters: UsersFollowersApiFollowSpecificUserRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.followSpecificUser(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every follower of the authenticated user.
         * @summary Get all the followers of the user
         * @param {UsersFollowersApiFollowersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followers(requestParameters: UsersFollowersApiFollowersRequest, options?: AxiosRequestConfig): AxiosPromise<Array<User>> {
            return localVarFp.followers(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every follower of the authenticated user.
         * @summary Get all the followers of the user
         * @param {UsersFollowersApiListAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAll(requestParameters: UsersFollowersApiListAllRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<User>> {
            return localVarFp.listAll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every user that the authenticated user is following.
         * @summary Get all the users that the user is following
         * @param {UsersFollowersApiListOfFollowedUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOfFollowedUsers(requestParameters: UsersFollowersApiListOfFollowedUsersRequest, options?: AxiosRequestConfig): AxiosPromise<Array<User>> {
            return localVarFp.listOfFollowedUsers(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every user that the authenticated user is following.
         * @summary Get all the users that the user is following
         * @param {UsersFollowersApiListOfFollowingUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOfFollowingUsers(requestParameters: UsersFollowersApiListOfFollowingUsersRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<User>> {
            return localVarFp.listOfFollowingUsers(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method causes the authenticated user to stop following another user.
         * @summary Unfollow a user
         * @param {UsersFollowersApiStopFollowingUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopFollowingUser(requestParameters: UsersFollowersApiStopFollowingUserRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.stopFollowingUser(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method causes the authenticated user to become the follower of the specified user.
         * @summary Follow a specific user
         * @param {UsersFollowersApiUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        user(requestParameters: UsersFollowersApiUserRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.user(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method causes the authenticated user to stop following another user.
         * @summary Unfollow a user
         * @param {UsersFollowersApiUser0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        user_1(requestParameters: UsersFollowersApiUser0Request, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.user_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method causes the authenticated user to become a follower of multiple users. In the body of the request, specify the list of users to follow as an array of URIs, where `user01_id`, `user02_id`, `user03_id`, and so on, are the user IDs of the users in question:  ``` {  [      {\"uri\" : \"/users/{user01_id}\"},      {\"uri\" : \"/users/{user02_id}\"},      {\"uri\" : \"/users/{user03_id}\"}  ] } ```
         * @summary Follow a list of users
         * @param {UsersFollowersApiUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        users(requestParameters: UsersFollowersApiUsersRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.users(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for checkFollowingStatus operation in UsersFollowersApi.
 * @export
 * @interface UsersFollowersApiCheckFollowingStatusRequest
 */
export type UsersFollowersApiCheckFollowingStatusRequest = {
    
    /**
    * The ID of the user to follow.
    * @type {number}
    * @memberof UsersFollowersApiCheckFollowingStatus
    */
    readonly followUserId: number
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof UsersFollowersApiCheckFollowingStatus
    */
    readonly userId: number
    
}

/**
 * Request parameters for checkFollowingUser operation in UsersFollowersApi.
 * @export
 * @interface UsersFollowersApiCheckFollowingUserRequest
 */
export type UsersFollowersApiCheckFollowingUserRequest = {
    
    /**
    * The ID of the user to follow.
    * @type {number}
    * @memberof UsersFollowersApiCheckFollowingUser
    */
    readonly followUserId: number
    
}

/**
 * Request parameters for followMultipleUsers operation in UsersFollowersApi.
 * @export
 * @interface UsersFollowersApiFollowMultipleUsersRequest
 */
export type UsersFollowersApiFollowMultipleUsersRequest = {
    
} & UsersFollowersFollowMultipleUsersRequest

/**
 * Request parameters for followSpecificUser operation in UsersFollowersApi.
 * @export
 * @interface UsersFollowersApiFollowSpecificUserRequest
 */
export type UsersFollowersApiFollowSpecificUserRequest = {
    
    /**
    * The ID of the user to follow.
    * @type {number}
    * @memberof UsersFollowersApiFollowSpecificUser
    */
    readonly followUserId: number
    
}

/**
 * Request parameters for followers operation in UsersFollowersApi.
 * @export
 * @interface UsersFollowersApiFollowersRequest
 */
export type UsersFollowersApiFollowersRequest = {
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof UsersFollowersApiFollowers
    */
    readonly userId: number
    
    /**
    * The sort direction of the results.  Option descriptions:  * `asc` - Sort the results in ascending order.  * `desc` - Sort the results in descending order. 
    * @type {'asc' | 'desc'}
    * @memberof UsersFollowersApiFollowers
    */
    readonly direction?: 'asc' | 'desc'
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof UsersFollowersApiFollowers
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof UsersFollowersApiFollowers
    */
    readonly perPage?: number
    
    /**
    * The search query to use to filter the results.
    * @type {string}
    * @memberof UsersFollowersApiFollowers
    */
    readonly query?: string
    
    /**
    * The way to sort the results.  Option descriptions:  * `alphabetical` - Sort the results alphabetically.  * `date` - Sort the results by date followed. 
    * @type {'alphabetical' | 'date'}
    * @memberof UsersFollowersApiFollowers
    */
    readonly sort?: 'alphabetical' | 'date'
    
}

/**
 * Request parameters for listAll operation in UsersFollowersApi.
 * @export
 * @interface UsersFollowersApiListAllRequest
 */
export type UsersFollowersApiListAllRequest = {
    
    /**
    * The sort direction of the results.  Option descriptions:  * `asc` - Sort the results in ascending order.  * `desc` - Sort the results in descending order. 
    * @type {'asc' | 'desc'}
    * @memberof UsersFollowersApiListAll
    */
    readonly direction?: 'asc' | 'desc'
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof UsersFollowersApiListAll
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof UsersFollowersApiListAll
    */
    readonly perPage?: number
    
    /**
    * The search query to use to filter the results.
    * @type {string}
    * @memberof UsersFollowersApiListAll
    */
    readonly query?: string
    
    /**
    * The way to sort the results.  Option descriptions:  * `alphabetical` - Sort the results alphabetically.  * `date` - Sort the results by date followed. 
    * @type {'alphabetical' | 'date'}
    * @memberof UsersFollowersApiListAll
    */
    readonly sort?: 'alphabetical' | 'date'
    
}

/**
 * Request parameters for listOfFollowedUsers operation in UsersFollowersApi.
 * @export
 * @interface UsersFollowersApiListOfFollowedUsersRequest
 */
export type UsersFollowersApiListOfFollowedUsersRequest = {
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof UsersFollowersApiListOfFollowedUsers
    */
    readonly userId: number
    
    /**
    * The sort direction of the results.  Option descriptions:  * `asc` - Sort the results in ascending order.  * `desc` - Sort the results in descending order. 
    * @type {'asc' | 'desc'}
    * @memberof UsersFollowersApiListOfFollowedUsers
    */
    readonly direction?: 'asc' | 'desc'
    
    /**
    * The attribute by which to filter the results.  Option descriptions:  * `online` - Return users who are currently online. 
    * @type {'online'}
    * @memberof UsersFollowersApiListOfFollowedUsers
    */
    readonly filter?: 'online'
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof UsersFollowersApiListOfFollowedUsers
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof UsersFollowersApiListOfFollowedUsers
    */
    readonly perPage?: number
    
    /**
    * The search query to use to filter the results.
    * @type {string}
    * @memberof UsersFollowersApiListOfFollowedUsers
    */
    readonly query?: string
    
    /**
    * The way to sort the results.  Option descriptions:  * `alphabetical` - Sort the results alphabetically.  * `date` - Sort the results by date followed. 
    * @type {'alphabetical' | 'date'}
    * @memberof UsersFollowersApiListOfFollowedUsers
    */
    readonly sort?: 'alphabetical' | 'date'
    
}

/**
 * Request parameters for listOfFollowingUsers operation in UsersFollowersApi.
 * @export
 * @interface UsersFollowersApiListOfFollowingUsersRequest
 */
export type UsersFollowersApiListOfFollowingUsersRequest = {
    
    /**
    * The sort direction of the results.  Option descriptions:  * `asc` - Sort the results in ascending order.  * `desc` - Sort the results in descending order. 
    * @type {'asc' | 'desc'}
    * @memberof UsersFollowersApiListOfFollowingUsers
    */
    readonly direction?: 'asc' | 'desc'
    
    /**
    * The attribute by which to filter the results.  Option descriptions:  * `online` - Return users who are currently online. 
    * @type {'online'}
    * @memberof UsersFollowersApiListOfFollowingUsers
    */
    readonly filter?: 'online'
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof UsersFollowersApiListOfFollowingUsers
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof UsersFollowersApiListOfFollowingUsers
    */
    readonly perPage?: number
    
    /**
    * The search query to use to filter the results.
    * @type {string}
    * @memberof UsersFollowersApiListOfFollowingUsers
    */
    readonly query?: string
    
    /**
    * The way to sort the results.  Option descriptions:  * `alphabetical` - Sort the results alphabetically.  * `date` - Sort the results by date followed. 
    * @type {'alphabetical' | 'date'}
    * @memberof UsersFollowersApiListOfFollowingUsers
    */
    readonly sort?: 'alphabetical' | 'date'
    
}

/**
 * Request parameters for stopFollowingUser operation in UsersFollowersApi.
 * @export
 * @interface UsersFollowersApiStopFollowingUserRequest
 */
export type UsersFollowersApiStopFollowingUserRequest = {
    
    /**
    * The ID of the user to unfollow.
    * @type {number}
    * @memberof UsersFollowersApiStopFollowingUser
    */
    readonly followUserId: number
    
}

/**
 * Request parameters for user operation in UsersFollowersApi.
 * @export
 * @interface UsersFollowersApiUserRequest
 */
export type UsersFollowersApiUserRequest = {
    
    /**
    * The ID of the user to follow.
    * @type {number}
    * @memberof UsersFollowersApiUser
    */
    readonly followUserId: number
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof UsersFollowersApiUser
    */
    readonly userId: number
    
}

/**
 * Request parameters for user_1 operation in UsersFollowersApi.
 * @export
 * @interface UsersFollowersApiUser0Request
 */
export type UsersFollowersApiUser0Request = {
    
    /**
    * The ID of the user to unfollow.
    * @type {number}
    * @memberof UsersFollowersApiUser0
    */
    readonly followUserId: number
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof UsersFollowersApiUser0
    */
    readonly userId: number
    
}

/**
 * Request parameters for users operation in UsersFollowersApi.
 * @export
 * @interface UsersFollowersApiUsersRequest
 */
export type UsersFollowersApiUsersRequest = {
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof UsersFollowersApiUsers
    */
    readonly userId: number
    
} & FollowUsersRequest

/**
 * UsersFollowersApiGenerated - object-oriented interface
 * @export
 * @class UsersFollowersApiGenerated
 * @extends {BaseAPI}
 */
export class UsersFollowersApiGenerated extends BaseAPI {
    /**
     * This method determines whether the authenticated user is a follower of the specified user.
     * @summary Check if the user is following another user
     * @param {UsersFollowersApiCheckFollowingStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersFollowersApiGenerated
     */
    public checkFollowingStatus(requestParameters: UsersFollowersApiCheckFollowingStatusRequest, options?: AxiosRequestConfig) {
        return UsersFollowersApiFp(this.configuration).checkFollowingStatus(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method determines whether the authenticated user is a follower of the specified user.
     * @summary Check if the user is following another user
     * @param {UsersFollowersApiCheckFollowingUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersFollowersApiGenerated
     */
    public checkFollowingUser(requestParameters: UsersFollowersApiCheckFollowingUserRequest, options?: AxiosRequestConfig) {
        return UsersFollowersApiFp(this.configuration).checkFollowingUser(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method causes the authenticated user to become a follower of multiple users. In the body of the request, specify the list of users to follow as an array of URIs, where `user01_id`, `user02_id`, `user03_id`, and so on, are the user IDs of the users in question:  ``` {  [      {\"uri\" : \"/users/{user01_id}\"},      {\"uri\" : \"/users/{user02_id}\"},      {\"uri\" : \"/users/{user03_id}\"}  ] } ```
     * @summary Follow a list of users
     * @param {UsersFollowersApiFollowMultipleUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersFollowersApiGenerated
     */
    public followMultipleUsers(requestParameters: UsersFollowersApiFollowMultipleUsersRequest, options?: AxiosRequestConfig) {
        return UsersFollowersApiFp(this.configuration).followMultipleUsers(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method causes the authenticated user to become the follower of the specified user.
     * @summary Follow a specific user
     * @param {UsersFollowersApiFollowSpecificUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersFollowersApiGenerated
     */
    public followSpecificUser(requestParameters: UsersFollowersApiFollowSpecificUserRequest, options?: AxiosRequestConfig) {
        return UsersFollowersApiFp(this.configuration).followSpecificUser(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every follower of the authenticated user.
     * @summary Get all the followers of the user
     * @param {UsersFollowersApiFollowersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersFollowersApiGenerated
     */
    public followers(requestParameters: UsersFollowersApiFollowersRequest, options?: AxiosRequestConfig) {
        return UsersFollowersApiFp(this.configuration).followers(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every follower of the authenticated user.
     * @summary Get all the followers of the user
     * @param {UsersFollowersApiListAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersFollowersApiGenerated
     */
    public listAll(requestParameters: UsersFollowersApiListAllRequest = {}, options?: AxiosRequestConfig) {
        return UsersFollowersApiFp(this.configuration).listAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every user that the authenticated user is following.
     * @summary Get all the users that the user is following
     * @param {UsersFollowersApiListOfFollowedUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersFollowersApiGenerated
     */
    public listOfFollowedUsers(requestParameters: UsersFollowersApiListOfFollowedUsersRequest, options?: AxiosRequestConfig) {
        return UsersFollowersApiFp(this.configuration).listOfFollowedUsers(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every user that the authenticated user is following.
     * @summary Get all the users that the user is following
     * @param {UsersFollowersApiListOfFollowingUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersFollowersApiGenerated
     */
    public listOfFollowingUsers(requestParameters: UsersFollowersApiListOfFollowingUsersRequest = {}, options?: AxiosRequestConfig) {
        return UsersFollowersApiFp(this.configuration).listOfFollowingUsers(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method causes the authenticated user to stop following another user.
     * @summary Unfollow a user
     * @param {UsersFollowersApiStopFollowingUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersFollowersApiGenerated
     */
    public stopFollowingUser(requestParameters: UsersFollowersApiStopFollowingUserRequest, options?: AxiosRequestConfig) {
        return UsersFollowersApiFp(this.configuration).stopFollowingUser(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method causes the authenticated user to become the follower of the specified user.
     * @summary Follow a specific user
     * @param {UsersFollowersApiUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersFollowersApiGenerated
     */
    public user(requestParameters: UsersFollowersApiUserRequest, options?: AxiosRequestConfig) {
        return UsersFollowersApiFp(this.configuration).user(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method causes the authenticated user to stop following another user.
     * @summary Unfollow a user
     * @param {UsersFollowersApiUser0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersFollowersApiGenerated
     */
    public user_1(requestParameters: UsersFollowersApiUser0Request, options?: AxiosRequestConfig) {
        return UsersFollowersApiFp(this.configuration).user_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method causes the authenticated user to become a follower of multiple users. In the body of the request, specify the list of users to follow as an array of URIs, where `user01_id`, `user02_id`, `user03_id`, and so on, are the user IDs of the users in question:  ``` {  [      {\"uri\" : \"/users/{user01_id}\"},      {\"uri\" : \"/users/{user02_id}\"},      {\"uri\" : \"/users/{user03_id}\"}  ] } ```
     * @summary Follow a list of users
     * @param {UsersFollowersApiUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersFollowersApiGenerated
     */
    public users(requestParameters: UsersFollowersApiUsersRequest, options?: AxiosRequestConfig) {
        return UsersFollowersApiFp(this.configuration).users(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
