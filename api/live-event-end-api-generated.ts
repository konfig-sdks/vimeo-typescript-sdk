/* tslint:disable */
/* eslint-disable */
/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

The version of the OpenAPI document: 3.4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ModelError } from '../models';
// @ts-ignore
import { Video } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * LiveEventEndApi - axios parameter creator
 * @export
 */
export const LiveEventEndApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method ends the specified event. The authenticated user must be the owner of the event.
         * @summary End a live event
         * @param {number} liveEventId The ID of the event.
         * @param {number} [clipId] The ID of the streamable video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventTermination: async (liveEventId: number, clipId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveEventId' is not null or undefined
            assertParamExists('eventTermination', 'liveEventId', liveEventId)
            const localVarPath = `/live_events/{live_event_id}/end`
                .replace(`{${"live_event_id"}}`, encodeURIComponent(String(liveEventId !== undefined ? liveEventId : `-live_event_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "private"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "private"], configuration)
            if (clipId !== undefined) {
                localVarQueryParameter['clip_id'] = clipId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/live_events/{live_event_id}/end',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method ends the specified event. The authenticated user must be the owner of the event.
         * @summary End a live event
         * @param {number} liveEventId The ID of the event.
         * @param {number} [clipId] The ID of the streamable video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventTerminationAlt1: async (liveEventId: number, clipId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveEventId' is not null or undefined
            assertParamExists('eventTerminationAlt1', 'liveEventId', liveEventId)
            const localVarPath = `/me/live_events/{live_event_id}/end`
                .replace(`{${"live_event_id"}}`, encodeURIComponent(String(liveEventId !== undefined ? liveEventId : `-live_event_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "private"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "private"], configuration)
            if (clipId !== undefined) {
                localVarQueryParameter['clip_id'] = clipId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/live_events/{live_event_id}/end',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method ends the specified event. The authenticated user must be the owner of the event.
         * @summary End a live event
         * @param {number} liveEventId The ID of the event.
         * @param {number} [clipId] The ID of the streamable video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventTerminationAlt2: async (liveEventId: number, clipId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveEventId' is not null or undefined
            assertParamExists('eventTerminationAlt2', 'liveEventId', liveEventId)
            const localVarPath = `/users/{user_id}/live_events/{live_event_id}/end`
                .replace(`{${"live_event_id"}}`, encodeURIComponent(String(liveEventId !== undefined ? liveEventId : `-live_event_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "private"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "private"], configuration)
            if (clipId !== undefined) {
                localVarQueryParameter['clip_id'] = clipId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/live_events/{live_event_id}/end',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LiveEventEndApi - functional programming interface
 * @export
 */
export const LiveEventEndApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LiveEventEndApiAxiosParamCreator(configuration)
    return {
        /**
         * This method ends the specified event. The authenticated user must be the owner of the event.
         * @summary End a live event
         * @param {LiveEventEndApiEventTerminationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventTermination(requestParameters: LiveEventEndApiEventTerminationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Video>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventTermination(requestParameters.liveEventId, requestParameters.clipId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method ends the specified event. The authenticated user must be the owner of the event.
         * @summary End a live event
         * @param {LiveEventEndApiEventTerminationAlt1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventTerminationAlt1(requestParameters: LiveEventEndApiEventTerminationAlt1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Video>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventTerminationAlt1(requestParameters.liveEventId, requestParameters.clipId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method ends the specified event. The authenticated user must be the owner of the event.
         * @summary End a live event
         * @param {LiveEventEndApiEventTerminationAlt2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventTerminationAlt2(requestParameters: LiveEventEndApiEventTerminationAlt2Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Video>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventTerminationAlt2(requestParameters.liveEventId, requestParameters.clipId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LiveEventEndApi - factory interface
 * @export
 */
export const LiveEventEndApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LiveEventEndApiFp(configuration)
    return {
        /**
         * This method ends the specified event. The authenticated user must be the owner of the event.
         * @summary End a live event
         * @param {LiveEventEndApiEventTerminationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventTermination(requestParameters: LiveEventEndApiEventTerminationRequest, options?: AxiosRequestConfig): AxiosPromise<Video> {
            return localVarFp.eventTermination(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method ends the specified event. The authenticated user must be the owner of the event.
         * @summary End a live event
         * @param {LiveEventEndApiEventTerminationAlt1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventTerminationAlt1(requestParameters: LiveEventEndApiEventTerminationAlt1Request, options?: AxiosRequestConfig): AxiosPromise<Video> {
            return localVarFp.eventTerminationAlt1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method ends the specified event. The authenticated user must be the owner of the event.
         * @summary End a live event
         * @param {LiveEventEndApiEventTerminationAlt2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventTerminationAlt2(requestParameters: LiveEventEndApiEventTerminationAlt2Request, options?: AxiosRequestConfig): AxiosPromise<Video> {
            return localVarFp.eventTerminationAlt2(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for eventTermination operation in LiveEventEndApi.
 * @export
 * @interface LiveEventEndApiEventTerminationRequest
 */
export type LiveEventEndApiEventTerminationRequest = {
    
    /**
    * The ID of the event.
    * @type {number}
    * @memberof LiveEventEndApiEventTermination
    */
    readonly liveEventId: number
    
    /**
    * The ID of the streamable video.
    * @type {number}
    * @memberof LiveEventEndApiEventTermination
    */
    readonly clipId?: number
    
}

/**
 * Request parameters for eventTerminationAlt1 operation in LiveEventEndApi.
 * @export
 * @interface LiveEventEndApiEventTerminationAlt1Request
 */
export type LiveEventEndApiEventTerminationAlt1Request = {
    
    /**
    * The ID of the event.
    * @type {number}
    * @memberof LiveEventEndApiEventTerminationAlt1
    */
    readonly liveEventId: number
    
    /**
    * The ID of the streamable video.
    * @type {number}
    * @memberof LiveEventEndApiEventTerminationAlt1
    */
    readonly clipId?: number
    
}

/**
 * Request parameters for eventTerminationAlt2 operation in LiveEventEndApi.
 * @export
 * @interface LiveEventEndApiEventTerminationAlt2Request
 */
export type LiveEventEndApiEventTerminationAlt2Request = {
    
    /**
    * The ID of the event.
    * @type {number}
    * @memberof LiveEventEndApiEventTerminationAlt2
    */
    readonly liveEventId: number
    
    /**
    * The ID of the streamable video.
    * @type {number}
    * @memberof LiveEventEndApiEventTerminationAlt2
    */
    readonly clipId?: number
    
}

/**
 * LiveEventEndApiGenerated - object-oriented interface
 * @export
 * @class LiveEventEndApiGenerated
 * @extends {BaseAPI}
 */
export class LiveEventEndApiGenerated extends BaseAPI {
    /**
     * This method ends the specified event. The authenticated user must be the owner of the event.
     * @summary End a live event
     * @param {LiveEventEndApiEventTerminationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEventEndApiGenerated
     */
    public eventTermination(requestParameters: LiveEventEndApiEventTerminationRequest, options?: AxiosRequestConfig) {
        return LiveEventEndApiFp(this.configuration).eventTermination(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method ends the specified event. The authenticated user must be the owner of the event.
     * @summary End a live event
     * @param {LiveEventEndApiEventTerminationAlt1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEventEndApiGenerated
     */
    public eventTerminationAlt1(requestParameters: LiveEventEndApiEventTerminationAlt1Request, options?: AxiosRequestConfig) {
        return LiveEventEndApiFp(this.configuration).eventTerminationAlt1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method ends the specified event. The authenticated user must be the owner of the event.
     * @summary End a live event
     * @param {LiveEventEndApiEventTerminationAlt2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEventEndApiGenerated
     */
    public eventTerminationAlt2(requestParameters: LiveEventEndApiEventTerminationAlt2Request, options?: AxiosRequestConfig) {
        return LiveEventEndApiFp(this.configuration).eventTerminationAlt2(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
