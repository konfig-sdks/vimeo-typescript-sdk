/* tslint:disable */
/* eslint-disable */
/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

The version of the OpenAPI document: 3.4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { LegacyError } from '../models';
// @ts-ignore
import { User } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ChannelsSubscriptionsAndSubscribersApi - axios parameter creator
 * @export
 */
export const ChannelsSubscriptionsAndSubscribersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method determines whether the specified user is a follower of a particular channel.
         * @summary Check if a user follows a channel
         * @param {number} channelId The ID of the channel.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkIfUserFollowsChannel: async (channelId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('checkIfUserFollowsChannel', 'channelId', channelId)
            const localVarPath = `/me/channels/{channel_id}`
                .replace(`{${"channel_id"}}`, encodeURIComponent(String(channelId !== undefined ? channelId : `-channel_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/channels/{channel_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method determines whether the specified user is a follower of a particular channel.
         * @summary Check if a user follows a channel
         * @param {number} channelId The ID of the channel.
         * @param {number} userId The ID of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkUserFollowsChannel: async (channelId: number, userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('checkUserFollowsChannel', 'channelId', channelId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('checkUserFollowsChannel', 'userId', userId)
            const localVarPath = `/users/{user_id}/channels/{channel_id}`
                .replace(`{${"channel_id"}}`, encodeURIComponent(String(channelId !== undefined ? channelId : `-channel_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/channels/{channel_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every follower of the specified channel.
         * @summary Get all the followers of a channel
         * @param {number} channelId The ID of the channel.
         * @param {'moderators'} filter The attribute by which to filter the results.  Option descriptions:  * &#x60;moderators&#x60; - Return moderators. 
         * @param {'asc' | 'desc'} [direction] The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order. 
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {string} [query] The search query to use to filter the results.
         * @param {'alphabetical' | 'date'} [sort] The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by follow date. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listChannelFollowers: async (channelId: number, filter: 'moderators', direction?: 'asc' | 'desc', page?: number, perPage?: number, query?: string, sort?: 'alphabetical' | 'date', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('listChannelFollowers', 'channelId', channelId)
            // verify required parameter 'filter' is not null or undefined
            assertParamExists('listChannelFollowers', 'filter', filter)
            const localVarPath = `/channels/{channel_id}/users`
                .replace(`{${"channel_id"}}`, encodeURIComponent(String(channelId !== undefined ? channelId : `-channel_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/channels/{channel_id}/users',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method subscribes the authenticated user to the specified channel.
         * @summary Subscribe the user to a specific channel
         * @param {number} channelId The ID of the channel.
         * @param {number} userId The ID of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscribeToChannel: async (channelId: number, userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('subscribeToChannel', 'channelId', channelId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('subscribeToChannel', 'userId', userId)
            const localVarPath = `/users/{user_id}/channels/{channel_id}`
                .replace(`{${"channel_id"}}`, encodeURIComponent(String(channelId !== undefined ? channelId : `-channel_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["interact"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["interact"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/channels/{channel_id}',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method subscribes the authenticated user to the specified channel.
         * @summary Subscribe the user to a specific channel
         * @param {number} channelId The ID of the channel.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscribeUserToChannel: async (channelId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('subscribeUserToChannel', 'channelId', channelId)
            const localVarPath = `/me/channels/{channel_id}`
                .replace(`{${"channel_id"}}`, encodeURIComponent(String(channelId !== undefined ? channelId : `-channel_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["interact"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["interact"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/channels/{channel_id}',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method unsubscribes the authenticated user from the specified channel.
         * @summary Unsubscribe the user from a specific channel
         * @param {number} channelId The ID of the channel.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unsubscribeUserFromChannel: async (channelId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('unsubscribeUserFromChannel', 'channelId', channelId)
            const localVarPath = `/me/channels/{channel_id}`
                .replace(`{${"channel_id"}}`, encodeURIComponent(String(channelId !== undefined ? channelId : `-channel_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["interact"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["interact"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/channels/{channel_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method unsubscribes the authenticated user from the specified channel.
         * @summary Unsubscribe the user from a specific channel
         * @param {number} channelId The ID of the channel.
         * @param {number} userId The ID of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unsubscribeUserFromChannel_1: async (channelId: number, userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('unsubscribeUserFromChannel_1', 'channelId', channelId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('unsubscribeUserFromChannel_1', 'userId', userId)
            const localVarPath = `/users/{user_id}/channels/{channel_id}`
                .replace(`{${"channel_id"}}`, encodeURIComponent(String(channelId !== undefined ? channelId : `-channel_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["interact"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["interact"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/channels/{channel_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChannelsSubscriptionsAndSubscribersApi - functional programming interface
 * @export
 */
export const ChannelsSubscriptionsAndSubscribersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ChannelsSubscriptionsAndSubscribersApiAxiosParamCreator(configuration)
    return {
        /**
         * This method determines whether the specified user is a follower of a particular channel.
         * @summary Check if a user follows a channel
         * @param {ChannelsSubscriptionsAndSubscribersApiCheckIfUserFollowsChannelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkIfUserFollowsChannel(requestParameters: ChannelsSubscriptionsAndSubscribersApiCheckIfUserFollowsChannelRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkIfUserFollowsChannel(requestParameters.channelId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method determines whether the specified user is a follower of a particular channel.
         * @summary Check if a user follows a channel
         * @param {ChannelsSubscriptionsAndSubscribersApiCheckUserFollowsChannelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkUserFollowsChannel(requestParameters: ChannelsSubscriptionsAndSubscribersApiCheckUserFollowsChannelRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkUserFollowsChannel(requestParameters.channelId, requestParameters.userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every follower of the specified channel.
         * @summary Get all the followers of a channel
         * @param {ChannelsSubscriptionsAndSubscribersApiListChannelFollowersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listChannelFollowers(requestParameters: ChannelsSubscriptionsAndSubscribersApiListChannelFollowersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listChannelFollowers(requestParameters.channelId, requestParameters.filter, requestParameters.direction, requestParameters.page, requestParameters.perPage, requestParameters.query, requestParameters.sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method subscribes the authenticated user to the specified channel.
         * @summary Subscribe the user to a specific channel
         * @param {ChannelsSubscriptionsAndSubscribersApiSubscribeToChannelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subscribeToChannel(requestParameters: ChannelsSubscriptionsAndSubscribersApiSubscribeToChannelRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subscribeToChannel(requestParameters.channelId, requestParameters.userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method subscribes the authenticated user to the specified channel.
         * @summary Subscribe the user to a specific channel
         * @param {ChannelsSubscriptionsAndSubscribersApiSubscribeUserToChannelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subscribeUserToChannel(requestParameters: ChannelsSubscriptionsAndSubscribersApiSubscribeUserToChannelRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subscribeUserToChannel(requestParameters.channelId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method unsubscribes the authenticated user from the specified channel.
         * @summary Unsubscribe the user from a specific channel
         * @param {ChannelsSubscriptionsAndSubscribersApiUnsubscribeUserFromChannelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unsubscribeUserFromChannel(requestParameters: ChannelsSubscriptionsAndSubscribersApiUnsubscribeUserFromChannelRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unsubscribeUserFromChannel(requestParameters.channelId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method unsubscribes the authenticated user from the specified channel.
         * @summary Unsubscribe the user from a specific channel
         * @param {ChannelsSubscriptionsAndSubscribersApiUnsubscribeUserFromChannel0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unsubscribeUserFromChannel_1(requestParameters: ChannelsSubscriptionsAndSubscribersApiUnsubscribeUserFromChannel0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unsubscribeUserFromChannel_1(requestParameters.channelId, requestParameters.userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ChannelsSubscriptionsAndSubscribersApi - factory interface
 * @export
 */
export const ChannelsSubscriptionsAndSubscribersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ChannelsSubscriptionsAndSubscribersApiFp(configuration)
    return {
        /**
         * This method determines whether the specified user is a follower of a particular channel.
         * @summary Check if a user follows a channel
         * @param {ChannelsSubscriptionsAndSubscribersApiCheckIfUserFollowsChannelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkIfUserFollowsChannel(requestParameters: ChannelsSubscriptionsAndSubscribersApiCheckIfUserFollowsChannelRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.checkIfUserFollowsChannel(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method determines whether the specified user is a follower of a particular channel.
         * @summary Check if a user follows a channel
         * @param {ChannelsSubscriptionsAndSubscribersApiCheckUserFollowsChannelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkUserFollowsChannel(requestParameters: ChannelsSubscriptionsAndSubscribersApiCheckUserFollowsChannelRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.checkUserFollowsChannel(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every follower of the specified channel.
         * @summary Get all the followers of a channel
         * @param {ChannelsSubscriptionsAndSubscribersApiListChannelFollowersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listChannelFollowers(requestParameters: ChannelsSubscriptionsAndSubscribersApiListChannelFollowersRequest, options?: AxiosRequestConfig): AxiosPromise<Array<User>> {
            return localVarFp.listChannelFollowers(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method subscribes the authenticated user to the specified channel.
         * @summary Subscribe the user to a specific channel
         * @param {ChannelsSubscriptionsAndSubscribersApiSubscribeToChannelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscribeToChannel(requestParameters: ChannelsSubscriptionsAndSubscribersApiSubscribeToChannelRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.subscribeToChannel(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method subscribes the authenticated user to the specified channel.
         * @summary Subscribe the user to a specific channel
         * @param {ChannelsSubscriptionsAndSubscribersApiSubscribeUserToChannelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscribeUserToChannel(requestParameters: ChannelsSubscriptionsAndSubscribersApiSubscribeUserToChannelRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.subscribeUserToChannel(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method unsubscribes the authenticated user from the specified channel.
         * @summary Unsubscribe the user from a specific channel
         * @param {ChannelsSubscriptionsAndSubscribersApiUnsubscribeUserFromChannelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unsubscribeUserFromChannel(requestParameters: ChannelsSubscriptionsAndSubscribersApiUnsubscribeUserFromChannelRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.unsubscribeUserFromChannel(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method unsubscribes the authenticated user from the specified channel.
         * @summary Unsubscribe the user from a specific channel
         * @param {ChannelsSubscriptionsAndSubscribersApiUnsubscribeUserFromChannel0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unsubscribeUserFromChannel_1(requestParameters: ChannelsSubscriptionsAndSubscribersApiUnsubscribeUserFromChannel0Request, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.unsubscribeUserFromChannel_1(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for checkIfUserFollowsChannel operation in ChannelsSubscriptionsAndSubscribersApi.
 * @export
 * @interface ChannelsSubscriptionsAndSubscribersApiCheckIfUserFollowsChannelRequest
 */
export type ChannelsSubscriptionsAndSubscribersApiCheckIfUserFollowsChannelRequest = {
    
    /**
    * The ID of the channel.
    * @type {number}
    * @memberof ChannelsSubscriptionsAndSubscribersApiCheckIfUserFollowsChannel
    */
    readonly channelId: number
    
}

/**
 * Request parameters for checkUserFollowsChannel operation in ChannelsSubscriptionsAndSubscribersApi.
 * @export
 * @interface ChannelsSubscriptionsAndSubscribersApiCheckUserFollowsChannelRequest
 */
export type ChannelsSubscriptionsAndSubscribersApiCheckUserFollowsChannelRequest = {
    
    /**
    * The ID of the channel.
    * @type {number}
    * @memberof ChannelsSubscriptionsAndSubscribersApiCheckUserFollowsChannel
    */
    readonly channelId: number
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof ChannelsSubscriptionsAndSubscribersApiCheckUserFollowsChannel
    */
    readonly userId: number
    
}

/**
 * Request parameters for listChannelFollowers operation in ChannelsSubscriptionsAndSubscribersApi.
 * @export
 * @interface ChannelsSubscriptionsAndSubscribersApiListChannelFollowersRequest
 */
export type ChannelsSubscriptionsAndSubscribersApiListChannelFollowersRequest = {
    
    /**
    * The ID of the channel.
    * @type {number}
    * @memberof ChannelsSubscriptionsAndSubscribersApiListChannelFollowers
    */
    readonly channelId: number
    
    /**
    * The attribute by which to filter the results.  Option descriptions:  * `moderators` - Return moderators. 
    * @type {'moderators'}
    * @memberof ChannelsSubscriptionsAndSubscribersApiListChannelFollowers
    */
    readonly filter: 'moderators'
    
    /**
    * The sort direction of the results.  Option descriptions:  * `asc` - Sort the results in ascending order.  * `desc` - Sort the results in descending order. 
    * @type {'asc' | 'desc'}
    * @memberof ChannelsSubscriptionsAndSubscribersApiListChannelFollowers
    */
    readonly direction?: 'asc' | 'desc'
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof ChannelsSubscriptionsAndSubscribersApiListChannelFollowers
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof ChannelsSubscriptionsAndSubscribersApiListChannelFollowers
    */
    readonly perPage?: number
    
    /**
    * The search query to use to filter the results.
    * @type {string}
    * @memberof ChannelsSubscriptionsAndSubscribersApiListChannelFollowers
    */
    readonly query?: string
    
    /**
    * The way to sort the results.  Option descriptions:  * `alphabetical` - Sort the results alphabetically.  * `date` - Sort the results by follow date. 
    * @type {'alphabetical' | 'date'}
    * @memberof ChannelsSubscriptionsAndSubscribersApiListChannelFollowers
    */
    readonly sort?: 'alphabetical' | 'date'
    
}

/**
 * Request parameters for subscribeToChannel operation in ChannelsSubscriptionsAndSubscribersApi.
 * @export
 * @interface ChannelsSubscriptionsAndSubscribersApiSubscribeToChannelRequest
 */
export type ChannelsSubscriptionsAndSubscribersApiSubscribeToChannelRequest = {
    
    /**
    * The ID of the channel.
    * @type {number}
    * @memberof ChannelsSubscriptionsAndSubscribersApiSubscribeToChannel
    */
    readonly channelId: number
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof ChannelsSubscriptionsAndSubscribersApiSubscribeToChannel
    */
    readonly userId: number
    
}

/**
 * Request parameters for subscribeUserToChannel operation in ChannelsSubscriptionsAndSubscribersApi.
 * @export
 * @interface ChannelsSubscriptionsAndSubscribersApiSubscribeUserToChannelRequest
 */
export type ChannelsSubscriptionsAndSubscribersApiSubscribeUserToChannelRequest = {
    
    /**
    * The ID of the channel.
    * @type {number}
    * @memberof ChannelsSubscriptionsAndSubscribersApiSubscribeUserToChannel
    */
    readonly channelId: number
    
}

/**
 * Request parameters for unsubscribeUserFromChannel operation in ChannelsSubscriptionsAndSubscribersApi.
 * @export
 * @interface ChannelsSubscriptionsAndSubscribersApiUnsubscribeUserFromChannelRequest
 */
export type ChannelsSubscriptionsAndSubscribersApiUnsubscribeUserFromChannelRequest = {
    
    /**
    * The ID of the channel.
    * @type {number}
    * @memberof ChannelsSubscriptionsAndSubscribersApiUnsubscribeUserFromChannel
    */
    readonly channelId: number
    
}

/**
 * Request parameters for unsubscribeUserFromChannel_1 operation in ChannelsSubscriptionsAndSubscribersApi.
 * @export
 * @interface ChannelsSubscriptionsAndSubscribersApiUnsubscribeUserFromChannel0Request
 */
export type ChannelsSubscriptionsAndSubscribersApiUnsubscribeUserFromChannel0Request = {
    
    /**
    * The ID of the channel.
    * @type {number}
    * @memberof ChannelsSubscriptionsAndSubscribersApiUnsubscribeUserFromChannel0
    */
    readonly channelId: number
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof ChannelsSubscriptionsAndSubscribersApiUnsubscribeUserFromChannel0
    */
    readonly userId: number
    
}

/**
 * ChannelsSubscriptionsAndSubscribersApiGenerated - object-oriented interface
 * @export
 * @class ChannelsSubscriptionsAndSubscribersApiGenerated
 * @extends {BaseAPI}
 */
export class ChannelsSubscriptionsAndSubscribersApiGenerated extends BaseAPI {
    /**
     * This method determines whether the specified user is a follower of a particular channel.
     * @summary Check if a user follows a channel
     * @param {ChannelsSubscriptionsAndSubscribersApiCheckIfUserFollowsChannelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelsSubscriptionsAndSubscribersApiGenerated
     */
    public checkIfUserFollowsChannel(requestParameters: ChannelsSubscriptionsAndSubscribersApiCheckIfUserFollowsChannelRequest, options?: AxiosRequestConfig) {
        return ChannelsSubscriptionsAndSubscribersApiFp(this.configuration).checkIfUserFollowsChannel(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method determines whether the specified user is a follower of a particular channel.
     * @summary Check if a user follows a channel
     * @param {ChannelsSubscriptionsAndSubscribersApiCheckUserFollowsChannelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelsSubscriptionsAndSubscribersApiGenerated
     */
    public checkUserFollowsChannel(requestParameters: ChannelsSubscriptionsAndSubscribersApiCheckUserFollowsChannelRequest, options?: AxiosRequestConfig) {
        return ChannelsSubscriptionsAndSubscribersApiFp(this.configuration).checkUserFollowsChannel(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every follower of the specified channel.
     * @summary Get all the followers of a channel
     * @param {ChannelsSubscriptionsAndSubscribersApiListChannelFollowersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelsSubscriptionsAndSubscribersApiGenerated
     */
    public listChannelFollowers(requestParameters: ChannelsSubscriptionsAndSubscribersApiListChannelFollowersRequest, options?: AxiosRequestConfig) {
        return ChannelsSubscriptionsAndSubscribersApiFp(this.configuration).listChannelFollowers(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method subscribes the authenticated user to the specified channel.
     * @summary Subscribe the user to a specific channel
     * @param {ChannelsSubscriptionsAndSubscribersApiSubscribeToChannelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelsSubscriptionsAndSubscribersApiGenerated
     */
    public subscribeToChannel(requestParameters: ChannelsSubscriptionsAndSubscribersApiSubscribeToChannelRequest, options?: AxiosRequestConfig) {
        return ChannelsSubscriptionsAndSubscribersApiFp(this.configuration).subscribeToChannel(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method subscribes the authenticated user to the specified channel.
     * @summary Subscribe the user to a specific channel
     * @param {ChannelsSubscriptionsAndSubscribersApiSubscribeUserToChannelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelsSubscriptionsAndSubscribersApiGenerated
     */
    public subscribeUserToChannel(requestParameters: ChannelsSubscriptionsAndSubscribersApiSubscribeUserToChannelRequest, options?: AxiosRequestConfig) {
        return ChannelsSubscriptionsAndSubscribersApiFp(this.configuration).subscribeUserToChannel(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method unsubscribes the authenticated user from the specified channel.
     * @summary Unsubscribe the user from a specific channel
     * @param {ChannelsSubscriptionsAndSubscribersApiUnsubscribeUserFromChannelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelsSubscriptionsAndSubscribersApiGenerated
     */
    public unsubscribeUserFromChannel(requestParameters: ChannelsSubscriptionsAndSubscribersApiUnsubscribeUserFromChannelRequest, options?: AxiosRequestConfig) {
        return ChannelsSubscriptionsAndSubscribersApiFp(this.configuration).unsubscribeUserFromChannel(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method unsubscribes the authenticated user from the specified channel.
     * @summary Unsubscribe the user from a specific channel
     * @param {ChannelsSubscriptionsAndSubscribersApiUnsubscribeUserFromChannel0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelsSubscriptionsAndSubscribersApiGenerated
     */
    public unsubscribeUserFromChannel_1(requestParameters: ChannelsSubscriptionsAndSubscribersApiUnsubscribeUserFromChannel0Request, options?: AxiosRequestConfig) {
        return ChannelsSubscriptionsAndSubscribersApiFp(this.configuration).unsubscribeUserFromChannel_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
