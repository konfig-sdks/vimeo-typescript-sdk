/* tslint:disable */
/* eslint-disable */
/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

The version of the OpenAPI document: 3.4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateProjectRequest } from '../models';
// @ts-ignore
import { EditProjectRequest } from '../models';
// @ts-ignore
import { FoldersEssentialsCreateFolderRequest } from '../models';
// @ts-ignore
import { FoldersEssentialsEditFolderRequest } from '../models';
// @ts-ignore
import { ModelError } from '../models';
// @ts-ignore
import { Project } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * FoldersEssentialsApi - axios parameter creator
 * @export
 */
export const FoldersEssentialsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method creates a new folder for the authenticated user. By default, this method creates a top-level folder. To create a subfolder — that is, to place the new folder inside an existing folder — specify the parent folder by URI with the **parent_folder_uri** parameter in the body of the request.
         * @summary Create a folder
         * @param {FoldersEssentialsCreateFolderRequest} foldersEssentialsCreateFolderRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFolder: async (foldersEssentialsCreateFolderRequest: FoldersEssentialsCreateFolderRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'foldersEssentialsCreateFolderRequest' is not null or undefined
            assertParamExists('createFolder', 'foldersEssentialsCreateFolderRequest', foldersEssentialsCreateFolderRequest)
            const localVarPath = `/me/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: foldersEssentialsCreateFolderRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/projects',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(foldersEssentialsCreateFolderRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method deletes the specified folder and optionally also the videos that it contains. The authenticated user must be the owner of the folder.
         * @summary Delete a folder
         * @param {number} projectId The ID of the folder.
         * @param {boolean} [shouldDeleteClips] Whether to delete all the videos in the folder along with the folder itself.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFolder: async (projectId: number, shouldDeleteClips?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('deleteFolder', 'projectId', projectId)
            const localVarPath = `/me/projects/{project_id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-project_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["delete"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["delete"], configuration)
            if (shouldDeleteClips !== undefined) {
                localVarQueryParameter['should_delete_clips'] = shouldDeleteClips;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/projects/{project_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method edits the specified folder. The authenticated user must be the owner of the folder.
         * @summary Edit a folder
         * @param {number} projectId The ID of the folder.
         * @param {FoldersEssentialsEditFolderRequest} foldersEssentialsEditFolderRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editFolder: async (projectId: number, foldersEssentialsEditFolderRequest: FoldersEssentialsEditFolderRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('editFolder', 'projectId', projectId)
            // verify required parameter 'foldersEssentialsEditFolderRequest' is not null or undefined
            assertParamExists('editFolder', 'foldersEssentialsEditFolderRequest', foldersEssentialsEditFolderRequest)
            const localVarPath = `/me/projects/{project_id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-project_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: foldersEssentialsEditFolderRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/projects/{project_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(foldersEssentialsEditFolderRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns all the folders belonging to the authenticated user.
         * @summary Get all the folders that belong to the user
         * @param {'asc' | 'desc'} [direction] The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order. 
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {string} [query] The search query to use to filter the results.
         * @param {'date' | 'default' | 'modified_time' | 'name' | 'pinned_on'} [sort] The way to sort the results.  Option descriptions:  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Use the default sort order.  * &#x60;modified_time&#x60; - Sort the results by last modification.  * &#x60;name&#x60; - Sort the results by name.  * &#x60;pinned_on&#x60; - Sort the results by pinned timestamp. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUserFolders: async (direction?: 'asc' | 'desc', page?: number, perPage?: number, query?: string, sort?: 'date' | 'default' | 'modified_time' | 'name' | 'pinned_on', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)
            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/projects',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns a single folder belonging to the authenticated user.
         * @summary Get a specific folder
         * @param {number} projectId The ID of the folder.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificFolder: async (projectId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getSpecificFolder', 'projectId', projectId)
            const localVarPath = `/me/projects/{project_id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-project_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/projects/{project_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns the specified private-to-me folder.
         * @summary Get a user\'s private-to-me folder
         * @param {number} ownerId The ID of the owner.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserPrivateToMeFolder: async (ownerId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ownerId' is not null or undefined
            assertParamExists('getUserPrivateToMeFolder', 'ownerId', ownerId)
            const localVarPath = `/users/{owner_id}/folders/private_to_me`
                .replace(`{${"owner_id"}}`, encodeURIComponent(String(ownerId !== undefined ? ownerId : `-owner_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{owner_id}/folders/private_to_me',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method creates a new folder for the authenticated user. By default, this method creates a top-level folder. To create a subfolder — that is, to place the new folder inside an existing folder — specify the parent folder by URI with the **parent_folder_uri** parameter in the body of the request.
         * @summary Create a folder
         * @param {number} userId The ID of the user.
         * @param {CreateProjectRequest} createProjectRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        project: async (userId: number, createProjectRequest: CreateProjectRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('project', 'userId', userId)
            // verify required parameter 'createProjectRequest' is not null or undefined
            assertParamExists('project', 'createProjectRequest', createProjectRequest)
            const localVarPath = `/users/{user_id}/projects`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createProjectRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/projects',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createProjectRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns a single folder belonging to the authenticated user.
         * @summary Get a specific folder
         * @param {number} projectId The ID of the folder.
         * @param {number} userId The ID of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        project_1: async (projectId: number, userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('project_1', 'projectId', projectId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('project_1', 'userId', userId)
            const localVarPath = `/users/{user_id}/projects/{project_id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-project_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/projects/{project_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method deletes the specified folder and optionally also the videos that it contains. The authenticated user must be the owner of the folder.
         * @summary Delete a folder
         * @param {number} projectId The ID of the folder.
         * @param {number} userId The ID of the user.
         * @param {boolean} [shouldDeleteClips] Whether to delete all the videos in the folder along with the folder itself.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        project_2: async (projectId: number, userId: number, shouldDeleteClips?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('project_2', 'projectId', projectId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('project_2', 'userId', userId)
            const localVarPath = `/users/{user_id}/projects/{project_id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-project_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["delete"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["delete"], configuration)
            if (shouldDeleteClips !== undefined) {
                localVarQueryParameter['should_delete_clips'] = shouldDeleteClips;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/projects/{project_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method edits the specified folder. The authenticated user must be the owner of the folder.
         * @summary Edit a folder
         * @param {number} projectId The ID of the folder.
         * @param {number} userId The ID of the user.
         * @param {EditProjectRequest} editProjectRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        project_3: async (projectId: number, userId: number, editProjectRequest: EditProjectRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('project_3', 'projectId', projectId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('project_3', 'userId', userId)
            // verify required parameter 'editProjectRequest' is not null or undefined
            assertParamExists('project_3', 'editProjectRequest', editProjectRequest)
            const localVarPath = `/users/{user_id}/projects/{project_id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-project_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: editProjectRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/projects/{project_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(editProjectRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns all the folders belonging to the authenticated user.
         * @summary Get all the folders that belong to the user
         * @param {number} userId The ID of the user.
         * @param {'asc' | 'desc'} [direction] The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order. 
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {string} [query] The search query to use to filter the results.
         * @param {'date' | 'default' | 'modified_time' | 'name' | 'pinned_on'} [sort] The way to sort the results.  Option descriptions:  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Use the default sort order.  * &#x60;modified_time&#x60; - Sort the results by last modification.  * &#x60;name&#x60; - Sort the results by name.  * &#x60;pinned_on&#x60; - Sort the results by pinned timestamp. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projects: async (userId: number, direction?: 'asc' | 'desc', page?: number, perPage?: number, query?: string, sort?: 'date' | 'default' | 'modified_time' | 'name' | 'pinned_on', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('projects', 'userId', userId)
            const localVarPath = `/users/{user_id}/projects`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)
            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/projects',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FoldersEssentialsApi - functional programming interface
 * @export
 */
export const FoldersEssentialsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FoldersEssentialsApiAxiosParamCreator(configuration)
    return {
        /**
         * This method creates a new folder for the authenticated user. By default, this method creates a top-level folder. To create a subfolder — that is, to place the new folder inside an existing folder — specify the parent folder by URI with the **parent_folder_uri** parameter in the body of the request.
         * @summary Create a folder
         * @param {FoldersEssentialsApiCreateFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFolder(requestParameters: FoldersEssentialsApiCreateFolderRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>> {
            const foldersEssentialsCreateFolderRequest: FoldersEssentialsCreateFolderRequest = {
                name: requestParameters.name,
                parent_folder_uri: requestParameters.parent_folder_uri
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createFolder(foldersEssentialsCreateFolderRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method deletes the specified folder and optionally also the videos that it contains. The authenticated user must be the owner of the folder.
         * @summary Delete a folder
         * @param {FoldersEssentialsApiDeleteFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFolder(requestParameters: FoldersEssentialsApiDeleteFolderRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFolder(requestParameters.projectId, requestParameters.shouldDeleteClips, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method edits the specified folder. The authenticated user must be the owner of the folder.
         * @summary Edit a folder
         * @param {FoldersEssentialsApiEditFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editFolder(requestParameters: FoldersEssentialsApiEditFolderRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>> {
            const foldersEssentialsEditFolderRequest: FoldersEssentialsEditFolderRequest = {
                name: requestParameters.name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.editFolder(requestParameters.projectId, foldersEssentialsEditFolderRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns all the folders belonging to the authenticated user.
         * @summary Get all the folders that belong to the user
         * @param {FoldersEssentialsApiGetAllUserFoldersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllUserFolders(requestParameters: FoldersEssentialsApiGetAllUserFoldersRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Project>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllUserFolders(requestParameters.direction, requestParameters.page, requestParameters.perPage, requestParameters.query, requestParameters.sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns a single folder belonging to the authenticated user.
         * @summary Get a specific folder
         * @param {FoldersEssentialsApiGetSpecificFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpecificFolder(requestParameters: FoldersEssentialsApiGetSpecificFolderRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpecificFolder(requestParameters.projectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns the specified private-to-me folder.
         * @summary Get a user\'s private-to-me folder
         * @param {FoldersEssentialsApiGetUserPrivateToMeFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserPrivateToMeFolder(requestParameters: FoldersEssentialsApiGetUserPrivateToMeFolderRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserPrivateToMeFolder(requestParameters.ownerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method creates a new folder for the authenticated user. By default, this method creates a top-level folder. To create a subfolder — that is, to place the new folder inside an existing folder — specify the parent folder by URI with the **parent_folder_uri** parameter in the body of the request.
         * @summary Create a folder
         * @param {FoldersEssentialsApiProjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async project(requestParameters: FoldersEssentialsApiProjectRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>> {
            const createProjectRequest: CreateProjectRequest = {
                name: requestParameters.name,
                parent_folder_uri: requestParameters.parent_folder_uri
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.project(requestParameters.userId, createProjectRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns a single folder belonging to the authenticated user.
         * @summary Get a specific folder
         * @param {FoldersEssentialsApiProject0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async project_1(requestParameters: FoldersEssentialsApiProject0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.project_1(requestParameters.projectId, requestParameters.userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method deletes the specified folder and optionally also the videos that it contains. The authenticated user must be the owner of the folder.
         * @summary Delete a folder
         * @param {FoldersEssentialsApiProject1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async project_2(requestParameters: FoldersEssentialsApiProject1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.project_2(requestParameters.projectId, requestParameters.userId, requestParameters.shouldDeleteClips, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method edits the specified folder. The authenticated user must be the owner of the folder.
         * @summary Edit a folder
         * @param {FoldersEssentialsApiProject2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async project_3(requestParameters: FoldersEssentialsApiProject2Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>> {
            const editProjectRequest: EditProjectRequest = {
                name: requestParameters.name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.project_3(requestParameters.projectId, requestParameters.userId, editProjectRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns all the folders belonging to the authenticated user.
         * @summary Get all the folders that belong to the user
         * @param {FoldersEssentialsApiProjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projects(requestParameters: FoldersEssentialsApiProjectsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Project>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projects(requestParameters.userId, requestParameters.direction, requestParameters.page, requestParameters.perPage, requestParameters.query, requestParameters.sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FoldersEssentialsApi - factory interface
 * @export
 */
export const FoldersEssentialsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FoldersEssentialsApiFp(configuration)
    return {
        /**
         * This method creates a new folder for the authenticated user. By default, this method creates a top-level folder. To create a subfolder — that is, to place the new folder inside an existing folder — specify the parent folder by URI with the **parent_folder_uri** parameter in the body of the request.
         * @summary Create a folder
         * @param {FoldersEssentialsApiCreateFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFolder(requestParameters: FoldersEssentialsApiCreateFolderRequest, options?: AxiosRequestConfig): AxiosPromise<Project> {
            return localVarFp.createFolder(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method deletes the specified folder and optionally also the videos that it contains. The authenticated user must be the owner of the folder.
         * @summary Delete a folder
         * @param {FoldersEssentialsApiDeleteFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFolder(requestParameters: FoldersEssentialsApiDeleteFolderRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteFolder(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method edits the specified folder. The authenticated user must be the owner of the folder.
         * @summary Edit a folder
         * @param {FoldersEssentialsApiEditFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editFolder(requestParameters: FoldersEssentialsApiEditFolderRequest, options?: AxiosRequestConfig): AxiosPromise<Project> {
            return localVarFp.editFolder(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns all the folders belonging to the authenticated user.
         * @summary Get all the folders that belong to the user
         * @param {FoldersEssentialsApiGetAllUserFoldersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUserFolders(requestParameters: FoldersEssentialsApiGetAllUserFoldersRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<Project>> {
            return localVarFp.getAllUserFolders(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns a single folder belonging to the authenticated user.
         * @summary Get a specific folder
         * @param {FoldersEssentialsApiGetSpecificFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificFolder(requestParameters: FoldersEssentialsApiGetSpecificFolderRequest, options?: AxiosRequestConfig): AxiosPromise<Project> {
            return localVarFp.getSpecificFolder(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns the specified private-to-me folder.
         * @summary Get a user\'s private-to-me folder
         * @param {FoldersEssentialsApiGetUserPrivateToMeFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserPrivateToMeFolder(requestParameters: FoldersEssentialsApiGetUserPrivateToMeFolderRequest, options?: AxiosRequestConfig): AxiosPromise<Project> {
            return localVarFp.getUserPrivateToMeFolder(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method creates a new folder for the authenticated user. By default, this method creates a top-level folder. To create a subfolder — that is, to place the new folder inside an existing folder — specify the parent folder by URI with the **parent_folder_uri** parameter in the body of the request.
         * @summary Create a folder
         * @param {FoldersEssentialsApiProjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        project(requestParameters: FoldersEssentialsApiProjectRequest, options?: AxiosRequestConfig): AxiosPromise<Project> {
            return localVarFp.project(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns a single folder belonging to the authenticated user.
         * @summary Get a specific folder
         * @param {FoldersEssentialsApiProject0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        project_1(requestParameters: FoldersEssentialsApiProject0Request, options?: AxiosRequestConfig): AxiosPromise<Project> {
            return localVarFp.project_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method deletes the specified folder and optionally also the videos that it contains. The authenticated user must be the owner of the folder.
         * @summary Delete a folder
         * @param {FoldersEssentialsApiProject1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        project_2(requestParameters: FoldersEssentialsApiProject1Request, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.project_2(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method edits the specified folder. The authenticated user must be the owner of the folder.
         * @summary Edit a folder
         * @param {FoldersEssentialsApiProject2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        project_3(requestParameters: FoldersEssentialsApiProject2Request, options?: AxiosRequestConfig): AxiosPromise<Project> {
            return localVarFp.project_3(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns all the folders belonging to the authenticated user.
         * @summary Get all the folders that belong to the user
         * @param {FoldersEssentialsApiProjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projects(requestParameters: FoldersEssentialsApiProjectsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Project>> {
            return localVarFp.projects(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createFolder operation in FoldersEssentialsApi.
 * @export
 * @interface FoldersEssentialsApiCreateFolderRequest
 */
export type FoldersEssentialsApiCreateFolderRequest = {
    
} & FoldersEssentialsCreateFolderRequest

/**
 * Request parameters for deleteFolder operation in FoldersEssentialsApi.
 * @export
 * @interface FoldersEssentialsApiDeleteFolderRequest
 */
export type FoldersEssentialsApiDeleteFolderRequest = {
    
    /**
    * The ID of the folder.
    * @type {number}
    * @memberof FoldersEssentialsApiDeleteFolder
    */
    readonly projectId: number
    
    /**
    * Whether to delete all the videos in the folder along with the folder itself.
    * @type {boolean}
    * @memberof FoldersEssentialsApiDeleteFolder
    */
    readonly shouldDeleteClips?: boolean
    
}

/**
 * Request parameters for editFolder operation in FoldersEssentialsApi.
 * @export
 * @interface FoldersEssentialsApiEditFolderRequest
 */
export type FoldersEssentialsApiEditFolderRequest = {
    
    /**
    * The ID of the folder.
    * @type {number}
    * @memberof FoldersEssentialsApiEditFolder
    */
    readonly projectId: number
    
} & FoldersEssentialsEditFolderRequest

/**
 * Request parameters for getAllUserFolders operation in FoldersEssentialsApi.
 * @export
 * @interface FoldersEssentialsApiGetAllUserFoldersRequest
 */
export type FoldersEssentialsApiGetAllUserFoldersRequest = {
    
    /**
    * The sort direction of the results.  Option descriptions:  * `asc` - Sort the results in ascending order.  * `desc` - Sort the results in descending order. 
    * @type {'asc' | 'desc'}
    * @memberof FoldersEssentialsApiGetAllUserFolders
    */
    readonly direction?: 'asc' | 'desc'
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof FoldersEssentialsApiGetAllUserFolders
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof FoldersEssentialsApiGetAllUserFolders
    */
    readonly perPage?: number
    
    /**
    * The search query to use to filter the results.
    * @type {string}
    * @memberof FoldersEssentialsApiGetAllUserFolders
    */
    readonly query?: string
    
    /**
    * The way to sort the results.  Option descriptions:  * `date` - Sort the results by date.  * `default` - Use the default sort order.  * `modified_time` - Sort the results by last modification.  * `name` - Sort the results by name.  * `pinned_on` - Sort the results by pinned timestamp. 
    * @type {'date' | 'default' | 'modified_time' | 'name' | 'pinned_on'}
    * @memberof FoldersEssentialsApiGetAllUserFolders
    */
    readonly sort?: 'date' | 'default' | 'modified_time' | 'name' | 'pinned_on'
    
}

/**
 * Request parameters for getSpecificFolder operation in FoldersEssentialsApi.
 * @export
 * @interface FoldersEssentialsApiGetSpecificFolderRequest
 */
export type FoldersEssentialsApiGetSpecificFolderRequest = {
    
    /**
    * The ID of the folder.
    * @type {number}
    * @memberof FoldersEssentialsApiGetSpecificFolder
    */
    readonly projectId: number
    
}

/**
 * Request parameters for getUserPrivateToMeFolder operation in FoldersEssentialsApi.
 * @export
 * @interface FoldersEssentialsApiGetUserPrivateToMeFolderRequest
 */
export type FoldersEssentialsApiGetUserPrivateToMeFolderRequest = {
    
    /**
    * The ID of the owner.
    * @type {number}
    * @memberof FoldersEssentialsApiGetUserPrivateToMeFolder
    */
    readonly ownerId: number
    
}

/**
 * Request parameters for project operation in FoldersEssentialsApi.
 * @export
 * @interface FoldersEssentialsApiProjectRequest
 */
export type FoldersEssentialsApiProjectRequest = {
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof FoldersEssentialsApiProject
    */
    readonly userId: number
    
} & CreateProjectRequest

/**
 * Request parameters for project_1 operation in FoldersEssentialsApi.
 * @export
 * @interface FoldersEssentialsApiProject0Request
 */
export type FoldersEssentialsApiProject0Request = {
    
    /**
    * The ID of the folder.
    * @type {number}
    * @memberof FoldersEssentialsApiProject0
    */
    readonly projectId: number
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof FoldersEssentialsApiProject0
    */
    readonly userId: number
    
}

/**
 * Request parameters for project_2 operation in FoldersEssentialsApi.
 * @export
 * @interface FoldersEssentialsApiProject1Request
 */
export type FoldersEssentialsApiProject1Request = {
    
    /**
    * The ID of the folder.
    * @type {number}
    * @memberof FoldersEssentialsApiProject1
    */
    readonly projectId: number
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof FoldersEssentialsApiProject1
    */
    readonly userId: number
    
    /**
    * Whether to delete all the videos in the folder along with the folder itself.
    * @type {boolean}
    * @memberof FoldersEssentialsApiProject1
    */
    readonly shouldDeleteClips?: boolean
    
}

/**
 * Request parameters for project_3 operation in FoldersEssentialsApi.
 * @export
 * @interface FoldersEssentialsApiProject2Request
 */
export type FoldersEssentialsApiProject2Request = {
    
    /**
    * The ID of the folder.
    * @type {number}
    * @memberof FoldersEssentialsApiProject2
    */
    readonly projectId: number
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof FoldersEssentialsApiProject2
    */
    readonly userId: number
    
} & EditProjectRequest

/**
 * Request parameters for projects operation in FoldersEssentialsApi.
 * @export
 * @interface FoldersEssentialsApiProjectsRequest
 */
export type FoldersEssentialsApiProjectsRequest = {
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof FoldersEssentialsApiProjects
    */
    readonly userId: number
    
    /**
    * The sort direction of the results.  Option descriptions:  * `asc` - Sort the results in ascending order.  * `desc` - Sort the results in descending order. 
    * @type {'asc' | 'desc'}
    * @memberof FoldersEssentialsApiProjects
    */
    readonly direction?: 'asc' | 'desc'
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof FoldersEssentialsApiProjects
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof FoldersEssentialsApiProjects
    */
    readonly perPage?: number
    
    /**
    * The search query to use to filter the results.
    * @type {string}
    * @memberof FoldersEssentialsApiProjects
    */
    readonly query?: string
    
    /**
    * The way to sort the results.  Option descriptions:  * `date` - Sort the results by date.  * `default` - Use the default sort order.  * `modified_time` - Sort the results by last modification.  * `name` - Sort the results by name.  * `pinned_on` - Sort the results by pinned timestamp. 
    * @type {'date' | 'default' | 'modified_time' | 'name' | 'pinned_on'}
    * @memberof FoldersEssentialsApiProjects
    */
    readonly sort?: 'date' | 'default' | 'modified_time' | 'name' | 'pinned_on'
    
}

/**
 * FoldersEssentialsApiGenerated - object-oriented interface
 * @export
 * @class FoldersEssentialsApiGenerated
 * @extends {BaseAPI}
 */
export class FoldersEssentialsApiGenerated extends BaseAPI {
    /**
     * This method creates a new folder for the authenticated user. By default, this method creates a top-level folder. To create a subfolder — that is, to place the new folder inside an existing folder — specify the parent folder by URI with the **parent_folder_uri** parameter in the body of the request.
     * @summary Create a folder
     * @param {FoldersEssentialsApiCreateFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersEssentialsApiGenerated
     */
    public createFolder(requestParameters: FoldersEssentialsApiCreateFolderRequest, options?: AxiosRequestConfig) {
        return FoldersEssentialsApiFp(this.configuration).createFolder(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method deletes the specified folder and optionally also the videos that it contains. The authenticated user must be the owner of the folder.
     * @summary Delete a folder
     * @param {FoldersEssentialsApiDeleteFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersEssentialsApiGenerated
     */
    public deleteFolder(requestParameters: FoldersEssentialsApiDeleteFolderRequest, options?: AxiosRequestConfig) {
        return FoldersEssentialsApiFp(this.configuration).deleteFolder(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method edits the specified folder. The authenticated user must be the owner of the folder.
     * @summary Edit a folder
     * @param {FoldersEssentialsApiEditFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersEssentialsApiGenerated
     */
    public editFolder(requestParameters: FoldersEssentialsApiEditFolderRequest, options?: AxiosRequestConfig) {
        return FoldersEssentialsApiFp(this.configuration).editFolder(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns all the folders belonging to the authenticated user.
     * @summary Get all the folders that belong to the user
     * @param {FoldersEssentialsApiGetAllUserFoldersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersEssentialsApiGenerated
     */
    public getAllUserFolders(requestParameters: FoldersEssentialsApiGetAllUserFoldersRequest = {}, options?: AxiosRequestConfig) {
        return FoldersEssentialsApiFp(this.configuration).getAllUserFolders(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns a single folder belonging to the authenticated user.
     * @summary Get a specific folder
     * @param {FoldersEssentialsApiGetSpecificFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersEssentialsApiGenerated
     */
    public getSpecificFolder(requestParameters: FoldersEssentialsApiGetSpecificFolderRequest, options?: AxiosRequestConfig) {
        return FoldersEssentialsApiFp(this.configuration).getSpecificFolder(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns the specified private-to-me folder.
     * @summary Get a user\'s private-to-me folder
     * @param {FoldersEssentialsApiGetUserPrivateToMeFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersEssentialsApiGenerated
     */
    public getUserPrivateToMeFolder(requestParameters: FoldersEssentialsApiGetUserPrivateToMeFolderRequest, options?: AxiosRequestConfig) {
        return FoldersEssentialsApiFp(this.configuration).getUserPrivateToMeFolder(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method creates a new folder for the authenticated user. By default, this method creates a top-level folder. To create a subfolder — that is, to place the new folder inside an existing folder — specify the parent folder by URI with the **parent_folder_uri** parameter in the body of the request.
     * @summary Create a folder
     * @param {FoldersEssentialsApiProjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersEssentialsApiGenerated
     */
    public project(requestParameters: FoldersEssentialsApiProjectRequest, options?: AxiosRequestConfig) {
        return FoldersEssentialsApiFp(this.configuration).project(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns a single folder belonging to the authenticated user.
     * @summary Get a specific folder
     * @param {FoldersEssentialsApiProject0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersEssentialsApiGenerated
     */
    public project_1(requestParameters: FoldersEssentialsApiProject0Request, options?: AxiosRequestConfig) {
        return FoldersEssentialsApiFp(this.configuration).project_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method deletes the specified folder and optionally also the videos that it contains. The authenticated user must be the owner of the folder.
     * @summary Delete a folder
     * @param {FoldersEssentialsApiProject1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersEssentialsApiGenerated
     */
    public project_2(requestParameters: FoldersEssentialsApiProject1Request, options?: AxiosRequestConfig) {
        return FoldersEssentialsApiFp(this.configuration).project_2(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method edits the specified folder. The authenticated user must be the owner of the folder.
     * @summary Edit a folder
     * @param {FoldersEssentialsApiProject2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersEssentialsApiGenerated
     */
    public project_3(requestParameters: FoldersEssentialsApiProject2Request, options?: AxiosRequestConfig) {
        return FoldersEssentialsApiFp(this.configuration).project_3(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns all the folders belonging to the authenticated user.
     * @summary Get all the folders that belong to the user
     * @param {FoldersEssentialsApiProjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersEssentialsApiGenerated
     */
    public projects(requestParameters: FoldersEssentialsApiProjectsRequest, options?: AxiosRequestConfig) {
        return FoldersEssentialsApiFp(this.configuration).projects(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
