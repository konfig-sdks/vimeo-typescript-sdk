/* tslint:disable */
/* eslint-disable */
/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

The version of the OpenAPI document: 3.4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Album } from '../models';
// @ts-ignore
import { LegacyError } from '../models';
// @ts-ignore
import { ModelError } from '../models';
// @ts-ignore
import { ShowcasesShowcaseVideosCreateShowcaseThumbnailRequest } from '../models';
// @ts-ignore
import { ShowcasesShowcaseVideosCreateShowcaseThumbnailRequest1 } from '../models';
// @ts-ignore
import { ShowcasesShowcaseVideosReplaceShowcaseVideosRequest } from '../models';
// @ts-ignore
import { ShowcasesShowcaseVideosReplaceVideosRequest } from '../models';
// @ts-ignore
import { Video } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ShowcasesShowcaseVideosApi - axios parameter creator
 * @export
 */
export const ShowcasesShowcaseVideosApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method adds a single video to the specified showcase. The authenticated user must be the owner of the showcase.
         * @summary Add a specific video to a showcase
         * @param {number} albumId The ID of the showcase.
         * @param {number} videoId The ID of the video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToShowcase: async (albumId: number, videoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'albumId' is not null or undefined
            assertParamExists('addToShowcase', 'albumId', albumId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('addToShowcase', 'videoId', videoId)
            const localVarPath = `/me/albums/{album_id}/videos/{video_id}`
                .replace(`{${"album_id"}}`, encodeURIComponent(String(albumId !== undefined ? albumId : `-album_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/albums/{album_id}/videos/{video_id}',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method adds a single video to the specified showcase. The authenticated user must be the owner of the showcase.
         * @summary Add a specific video to a showcase
         * @param {number} albumId The ID of the showcase.
         * @param {number} userId The ID of the user.
         * @param {number} videoId The ID of the video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToShowcase_1: async (albumId: number, userId: number, videoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'albumId' is not null or undefined
            assertParamExists('addToShowcase_1', 'albumId', albumId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('addToShowcase_1', 'userId', userId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('addToShowcase_1', 'videoId', videoId)
            const localVarPath = `/users/{user_id}/albums/{album_id}/videos/{video_id}`
                .replace(`{${"album_id"}}`, encodeURIComponent(String(albumId !== undefined ? albumId : `-album_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/albums/{album_id}/videos/{video_id}',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method creates a thumbnail image for a showcase from the specified frame of a showcase video. The authenticated user must be the owner of the showcase.
         * @summary Create a thumbnail for a showcase from a showcase video
         * @param {number} albumId The ID of the showcase.
         * @param {number} videoId The ID of the video.
         * @param {ShowcasesShowcaseVideosCreateShowcaseThumbnailRequest} [showcasesShowcaseVideosCreateShowcaseThumbnailRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createShowcaseThumbnail: async (albumId: number, videoId: number, showcasesShowcaseVideosCreateShowcaseThumbnailRequest?: ShowcasesShowcaseVideosCreateShowcaseThumbnailRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'albumId' is not null or undefined
            assertParamExists('createShowcaseThumbnail', 'albumId', albumId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('createShowcaseThumbnail', 'videoId', videoId)
            const localVarPath = `/me/albums/{album_id}/videos/{video_id}/set_album_thumbnail`
                .replace(`{${"album_id"}}`, encodeURIComponent(String(albumId !== undefined ? albumId : `-album_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: showcasesShowcaseVideosCreateShowcaseThumbnailRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/albums/{album_id}/videos/{video_id}/set_album_thumbnail',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(showcasesShowcaseVideosCreateShowcaseThumbnailRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method creates a thumbnail image for a showcase from the specified frame of a showcase video. The authenticated user must be the owner of the showcase.
         * @summary Create a thumbnail for a showcase from a showcase video
         * @param {number} albumId The ID of the showcase.
         * @param {number} userId The ID of the user.
         * @param {number} videoId The ID of the video.
         * @param {ShowcasesShowcaseVideosCreateShowcaseThumbnailRequest1} [showcasesShowcaseVideosCreateShowcaseThumbnailRequest1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createShowcaseThumbnail_2: async (albumId: number, userId: number, videoId: number, showcasesShowcaseVideosCreateShowcaseThumbnailRequest1?: ShowcasesShowcaseVideosCreateShowcaseThumbnailRequest1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'albumId' is not null or undefined
            assertParamExists('createShowcaseThumbnail_2', 'albumId', albumId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('createShowcaseThumbnail_2', 'userId', userId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('createShowcaseThumbnail_2', 'videoId', videoId)
            const localVarPath = `/users/{user_id}/albums/{album_id}/videos/{video_id}/set_album_thumbnail`
                .replace(`{${"album_id"}}`, encodeURIComponent(String(albumId !== undefined ? albumId : `-album_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: showcasesShowcaseVideosCreateShowcaseThumbnailRequest1,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/albums/{album_id}/videos/{video_id}/set_album_thumbnail',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(showcasesShowcaseVideosCreateShowcaseThumbnailRequest1, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every video in the specified showcase. The authenticated user must be the owner of the showcase.
         * @summary Get all the videos in a showcase
         * @param {number} albumId The ID of the showcase.
         * @param {number} userId The ID of the user.
         * @param {string} [containingUri] The page containing the video URI.
         * @param {'asc' | 'desc'} [direction] The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order. 
         * @param {'embeddable'} [filter] The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Filter the results by the **embeddable** attribute. 
         * @param {boolean} [filterEmbeddable] Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;.
         * @param {number} [page] The page number of the results to show.
         * @param {string} [password] The password of the showcase.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {string} [query] The search query to use to filter the results.
         * @param {'alphabetical' | 'comments' | 'date' | 'default' | 'duration' | 'likes' | 'manual' | 'modified_time' | 'plays'} [sort] The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Sort the results by the default method.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;manual&#x60; - Sort the results by their manual order.  * &#x60;modified_time&#x60; - Sort the results by last modification.  * &#x60;plays&#x60; - Sort the results by number of plays. 
         * @param {boolean} [weakSearch] Whether to include private videos in the search. Please note that a separate search service provides this functionality. The service performs a partial text search on the video\&#39;s name.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShowcaseVideos: async (albumId: number, userId: number, containingUri?: string, direction?: 'asc' | 'desc', filter?: 'embeddable', filterEmbeddable?: boolean, page?: number, password?: string, perPage?: number, query?: string, sort?: 'alphabetical' | 'comments' | 'date' | 'default' | 'duration' | 'likes' | 'manual' | 'modified_time' | 'plays', weakSearch?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'albumId' is not null or undefined
            assertParamExists('getShowcaseVideos', 'albumId', albumId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getShowcaseVideos', 'userId', userId)
            const localVarPath = `/users/{user_id}/albums/{album_id}/videos`
                .replace(`{${"album_id"}}`, encodeURIComponent(String(albumId !== undefined ? albumId : `-album_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            if (containingUri !== undefined) {
                localVarQueryParameter['containing_uri'] = containingUri;
            }

            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (filterEmbeddable !== undefined) {
                localVarQueryParameter['filter_embeddable'] = filterEmbeddable;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (weakSearch !== undefined) {
                localVarQueryParameter['weak_search'] = weakSearch;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/albums/{album_id}/videos',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns a single video belonging to the specified showcase. The authenticated user must be the owner of the showcase.
         * @summary Get a specific video in a showcase
         * @param {number} albumId The ID of the showcase.
         * @param {number} videoId The ID of the video.
         * @param {string} [password] The password of the showcase.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificVideoInShowcase: async (albumId: number, videoId: number, password?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'albumId' is not null or undefined
            assertParamExists('getSpecificVideoInShowcase', 'albumId', albumId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('getSpecificVideoInShowcase', 'videoId', videoId)
            const localVarPath = `/me/albums/{album_id}/videos/{video_id}`
                .replace(`{${"album_id"}}`, encodeURIComponent(String(albumId !== undefined ? albumId : `-album_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/albums/{album_id}/videos/{video_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns a single video belonging to the specified showcase. The authenticated user must be the owner of the showcase.
         * @summary Get a specific video in a showcase
         * @param {number} albumId The ID of the showcase.
         * @param {number} userId The ID of the user.
         * @param {number} videoId The ID of the video.
         * @param {string} [password] The password of the showcase.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificVideoInShowcase_3: async (albumId: number, userId: number, videoId: number, password?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'albumId' is not null or undefined
            assertParamExists('getSpecificVideoInShowcase_3', 'albumId', albumId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getSpecificVideoInShowcase_3', 'userId', userId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('getSpecificVideoInShowcase_3', 'videoId', videoId)
            const localVarPath = `/users/{user_id}/albums/{album_id}/videos/{video_id}`
                .replace(`{${"album_id"}}`, encodeURIComponent(String(albumId !== undefined ? albumId : `-album_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/albums/{album_id}/videos/{video_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns every showcase to which the authenticated user can add or remove the specified video. The user must be the owner of the showcase.
         * @summary Get all the showcases to which the user can add or remove a specific video
         * @param {number} videoId The ID of the video.
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAvailableShowcases: async (videoId: number, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('listAvailableShowcases', 'videoId', videoId)
            const localVarPath = `/videos/{video_id}/available_albums`
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/videos/{video_id}/available_albums',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns every video belonging to the authenticated user that can be added to or removed from the specified showcase. The user must be the owner of the showcase.
         * @summary Get all the user\'s videos that can be added to or removed from a showcase
         * @param {number} albumId The ID of the showcase.
         * @param {'asc' | 'desc'} [direction] The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order. 
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {'alphabetical' | 'comments' | 'date' | 'default' | 'duration' | 'last_user_action_event_date' | 'likes' | 'modified_time' | 'plays'} [sort] The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Sort the results by the default method.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;last_user_action_event_date&#x60; - Sort the results by most recent user interaction.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;modified_time&#x60; - Sort the results by last modification.  * &#x60;plays&#x60; - Sort the results by number of plays. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInShowcase: async (albumId: number, direction?: 'asc' | 'desc', page?: number, perPage?: number, sort?: 'alphabetical' | 'comments' | 'date' | 'default' | 'duration' | 'last_user_action_event_date' | 'likes' | 'modified_time' | 'plays', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'albumId' is not null or undefined
            assertParamExists('listInShowcase', 'albumId', albumId)
            const localVarPath = `/albums/{album_id}/available_videos`
                .replace(`{${"album_id"}}`, encodeURIComponent(String(albumId !== undefined ? albumId : `-album_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/albums/{album_id}/available_videos',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every video in the specified showcase. The authenticated user must be the owner of the showcase.
         * @summary Get all the videos in a showcase
         * @param {number} albumId The ID of the showcase.
         * @param {string} [containingUri] The page containing the video URI.
         * @param {'asc' | 'desc'} [direction] The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order. 
         * @param {'embeddable'} [filter] The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Filter the results by the **embeddable** attribute. 
         * @param {boolean} [filterEmbeddable] Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;.
         * @param {number} [page] The page number of the results to show.
         * @param {string} [password] The password of the showcase.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {string} [query] The search query to use to filter the results.
         * @param {'alphabetical' | 'comments' | 'date' | 'default' | 'duration' | 'likes' | 'manual' | 'modified_time' | 'plays'} [sort] The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Sort the results by the default method.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;manual&#x60; - Sort the results by their manual order.  * &#x60;modified_time&#x60; - Sort the results by last modification.  * &#x60;plays&#x60; - Sort the results by number of plays. 
         * @param {boolean} [weakSearch] Whether to include private videos in the search. Please note that a separate search service provides this functionality. The service performs a partial text search on the video\&#39;s name.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInShowcase_4: async (albumId: number, containingUri?: string, direction?: 'asc' | 'desc', filter?: 'embeddable', filterEmbeddable?: boolean, page?: number, password?: string, perPage?: number, query?: string, sort?: 'alphabetical' | 'comments' | 'date' | 'default' | 'duration' | 'likes' | 'manual' | 'modified_time' | 'plays', weakSearch?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'albumId' is not null or undefined
            assertParamExists('listInShowcase_4', 'albumId', albumId)
            const localVarPath = `/me/albums/{album_id}/videos`
                .replace(`{${"album_id"}}`, encodeURIComponent(String(albumId !== undefined ? albumId : `-album_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            if (containingUri !== undefined) {
                localVarQueryParameter['containing_uri'] = containingUri;
            }

            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (filterEmbeddable !== undefined) {
                localVarQueryParameter['filter_embeddable'] = filterEmbeddable;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (weakSearch !== undefined) {
                localVarQueryParameter['weak_search'] = weakSearch;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/albums/{album_id}/videos',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method removes the specified video from its showcase. The authenticated user must be the owner of the showcase.
         * @summary Remove a video from a showcase
         * @param {number} albumId The ID of the showcase.
         * @param {number} videoId The ID of the video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFromShowcase: async (albumId: number, videoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'albumId' is not null or undefined
            assertParamExists('removeFromShowcase', 'albumId', albumId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('removeFromShowcase', 'videoId', videoId)
            const localVarPath = `/me/albums/{album_id}/videos/{video_id}`
                .replace(`{${"album_id"}}`, encodeURIComponent(String(albumId !== undefined ? albumId : `-album_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/albums/{album_id}/videos/{video_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method removes the specified video from its showcase. The authenticated user must be the owner of the showcase.
         * @summary Remove a video from a showcase
         * @param {number} albumId The ID of the showcase.
         * @param {number} userId The ID of the user.
         * @param {number} videoId The ID of the video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeVideoFromShowcase: async (albumId: number, userId: number, videoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'albumId' is not null or undefined
            assertParamExists('removeVideoFromShowcase', 'albumId', albumId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('removeVideoFromShowcase', 'userId', userId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('removeVideoFromShowcase', 'videoId', videoId)
            const localVarPath = `/users/{user_id}/albums/{album_id}/videos/{video_id}`
                .replace(`{${"album_id"}}`, encodeURIComponent(String(albumId !== undefined ? albumId : `-album_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/albums/{album_id}/videos/{video_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method replaces all the videos in the specified showcase with a new set of one or more videos. The authenticated user must be the owner of the showcase.
         * @summary Replace all the videos in a showcase
         * @param {number} albumId The ID of the showcase.
         * @param {number} userId The ID of the user.
         * @param {ShowcasesShowcaseVideosReplaceShowcaseVideosRequest} showcasesShowcaseVideosReplaceShowcaseVideosRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceShowcaseVideos: async (albumId: number, userId: number, showcasesShowcaseVideosReplaceShowcaseVideosRequest: ShowcasesShowcaseVideosReplaceShowcaseVideosRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'albumId' is not null or undefined
            assertParamExists('replaceShowcaseVideos', 'albumId', albumId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('replaceShowcaseVideos', 'userId', userId)
            // verify required parameter 'showcasesShowcaseVideosReplaceShowcaseVideosRequest' is not null or undefined
            assertParamExists('replaceShowcaseVideos', 'showcasesShowcaseVideosReplaceShowcaseVideosRequest', showcasesShowcaseVideosReplaceShowcaseVideosRequest)
            const localVarPath = `/users/{user_id}/albums/{album_id}/videos`
                .replace(`{${"album_id"}}`, encodeURIComponent(String(albumId !== undefined ? albumId : `-album_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: showcasesShowcaseVideosReplaceShowcaseVideosRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/albums/{album_id}/videos',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(showcasesShowcaseVideosReplaceShowcaseVideosRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method replaces all the videos in the specified showcase with a new set of one or more videos. The authenticated user must be the owner of the showcase.
         * @summary Replace all the videos in a showcase
         * @param {number} albumId The ID of the showcase.
         * @param {ShowcasesShowcaseVideosReplaceVideosRequest} showcasesShowcaseVideosReplaceVideosRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceVideos: async (albumId: number, showcasesShowcaseVideosReplaceVideosRequest: ShowcasesShowcaseVideosReplaceVideosRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'albumId' is not null or undefined
            assertParamExists('replaceVideos', 'albumId', albumId)
            // verify required parameter 'showcasesShowcaseVideosReplaceVideosRequest' is not null or undefined
            assertParamExists('replaceVideos', 'showcasesShowcaseVideosReplaceVideosRequest', showcasesShowcaseVideosReplaceVideosRequest)
            const localVarPath = `/me/albums/{album_id}/videos`
                .replace(`{${"album_id"}}`, encodeURIComponent(String(albumId !== undefined ? albumId : `-album_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: showcasesShowcaseVideosReplaceVideosRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/albums/{album_id}/videos',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(showcasesShowcaseVideosReplaceVideosRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method sets the featured video of the specified showcase. The authenticated user must be the owner of the showcase, and the featured video must belong to it.
         * @summary Set the featured video of a showcase
         * @param {number} albumId The ID of the showcase.
         * @param {number} videoId The ID of the video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setFeaturedVideo: async (albumId: number, videoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'albumId' is not null or undefined
            assertParamExists('setFeaturedVideo', 'albumId', albumId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('setFeaturedVideo', 'videoId', videoId)
            const localVarPath = `/me/albums/{album_id}/videos/{video_id}/set_featured_video`
                .replace(`{${"album_id"}}`, encodeURIComponent(String(albumId !== undefined ? albumId : `-album_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/albums/{album_id}/videos/{video_id}/set_featured_video',
                httpMethod: 'PATCH'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method sets the featured video of the specified showcase. The authenticated user must be the owner of the showcase, and the featured video must belong to it.
         * @summary Set the featured video of a showcase
         * @param {number} albumId The ID of the showcase.
         * @param {number} userId The ID of the user.
         * @param {number} videoId The ID of the video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setFeaturedVideo_5: async (albumId: number, userId: number, videoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'albumId' is not null or undefined
            assertParamExists('setFeaturedVideo_5', 'albumId', albumId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('setFeaturedVideo_5', 'userId', userId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('setFeaturedVideo_5', 'videoId', videoId)
            const localVarPath = `/users/{user_id}/albums/{album_id}/videos/{video_id}/set_featured_video`
                .replace(`{${"album_id"}}`, encodeURIComponent(String(albumId !== undefined ? albumId : `-album_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/albums/{album_id}/videos/{video_id}/set_featured_video',
                httpMethod: 'PATCH'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShowcasesShowcaseVideosApi - functional programming interface
 * @export
 */
export const ShowcasesShowcaseVideosApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShowcasesShowcaseVideosApiAxiosParamCreator(configuration)
    return {
        /**
         * This method adds a single video to the specified showcase. The authenticated user must be the owner of the showcase.
         * @summary Add a specific video to a showcase
         * @param {ShowcasesShowcaseVideosApiAddToShowcaseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addToShowcase(requestParameters: ShowcasesShowcaseVideosApiAddToShowcaseRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addToShowcase(requestParameters.albumId, requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method adds a single video to the specified showcase. The authenticated user must be the owner of the showcase.
         * @summary Add a specific video to a showcase
         * @param {ShowcasesShowcaseVideosApiAddToShowcase0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addToShowcase_1(requestParameters: ShowcasesShowcaseVideosApiAddToShowcase0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addToShowcase_1(requestParameters.albumId, requestParameters.userId, requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method creates a thumbnail image for a showcase from the specified frame of a showcase video. The authenticated user must be the owner of the showcase.
         * @summary Create a thumbnail for a showcase from a showcase video
         * @param {ShowcasesShowcaseVideosApiCreateShowcaseThumbnailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createShowcaseThumbnail(requestParameters: ShowcasesShowcaseVideosApiCreateShowcaseThumbnailRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Album>> {
            const showcasesShowcaseVideosCreateShowcaseThumbnailRequest: ShowcasesShowcaseVideosCreateShowcaseThumbnailRequest = {
                time_code: requestParameters.time_code
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createShowcaseThumbnail(requestParameters.albumId, requestParameters.videoId, showcasesShowcaseVideosCreateShowcaseThumbnailRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method creates a thumbnail image for a showcase from the specified frame of a showcase video. The authenticated user must be the owner of the showcase.
         * @summary Create a thumbnail for a showcase from a showcase video
         * @param {ShowcasesShowcaseVideosApiCreateShowcaseThumbnail0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createShowcaseThumbnail_2(requestParameters: ShowcasesShowcaseVideosApiCreateShowcaseThumbnail0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Album>> {
            const showcasesShowcaseVideosCreateShowcaseThumbnailRequest1: ShowcasesShowcaseVideosCreateShowcaseThumbnailRequest1 = {
                time_code: requestParameters.time_code
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createShowcaseThumbnail_2(requestParameters.albumId, requestParameters.userId, requestParameters.videoId, showcasesShowcaseVideosCreateShowcaseThumbnailRequest1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every video in the specified showcase. The authenticated user must be the owner of the showcase.
         * @summary Get all the videos in a showcase
         * @param {ShowcasesShowcaseVideosApiGetShowcaseVideosRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getShowcaseVideos(requestParameters: ShowcasesShowcaseVideosApiGetShowcaseVideosRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Video>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getShowcaseVideos(requestParameters.albumId, requestParameters.userId, requestParameters.containingUri, requestParameters.direction, requestParameters.filter, requestParameters.filterEmbeddable, requestParameters.page, requestParameters.password, requestParameters.perPage, requestParameters.query, requestParameters.sort, requestParameters.weakSearch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns a single video belonging to the specified showcase. The authenticated user must be the owner of the showcase.
         * @summary Get a specific video in a showcase
         * @param {ShowcasesShowcaseVideosApiGetSpecificVideoInShowcaseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpecificVideoInShowcase(requestParameters: ShowcasesShowcaseVideosApiGetSpecificVideoInShowcaseRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Video>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpecificVideoInShowcase(requestParameters.albumId, requestParameters.videoId, requestParameters.password, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns a single video belonging to the specified showcase. The authenticated user must be the owner of the showcase.
         * @summary Get a specific video in a showcase
         * @param {ShowcasesShowcaseVideosApiGetSpecificVideoInShowcase0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpecificVideoInShowcase_3(requestParameters: ShowcasesShowcaseVideosApiGetSpecificVideoInShowcase0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Video>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpecificVideoInShowcase_3(requestParameters.albumId, requestParameters.userId, requestParameters.videoId, requestParameters.password, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint returns every showcase to which the authenticated user can add or remove the specified video. The user must be the owner of the showcase.
         * @summary Get all the showcases to which the user can add or remove a specific video
         * @param {ShowcasesShowcaseVideosApiListAvailableShowcasesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAvailableShowcases(requestParameters: ShowcasesShowcaseVideosApiListAvailableShowcasesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Album>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAvailableShowcases(requestParameters.videoId, requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint returns every video belonging to the authenticated user that can be added to or removed from the specified showcase. The user must be the owner of the showcase.
         * @summary Get all the user\'s videos that can be added to or removed from a showcase
         * @param {ShowcasesShowcaseVideosApiListInShowcaseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listInShowcase(requestParameters: ShowcasesShowcaseVideosApiListInShowcaseRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Video>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listInShowcase(requestParameters.albumId, requestParameters.direction, requestParameters.page, requestParameters.perPage, requestParameters.sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every video in the specified showcase. The authenticated user must be the owner of the showcase.
         * @summary Get all the videos in a showcase
         * @param {ShowcasesShowcaseVideosApiListInShowcase0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listInShowcase_4(requestParameters: ShowcasesShowcaseVideosApiListInShowcase0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Video>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listInShowcase_4(requestParameters.albumId, requestParameters.containingUri, requestParameters.direction, requestParameters.filter, requestParameters.filterEmbeddable, requestParameters.page, requestParameters.password, requestParameters.perPage, requestParameters.query, requestParameters.sort, requestParameters.weakSearch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method removes the specified video from its showcase. The authenticated user must be the owner of the showcase.
         * @summary Remove a video from a showcase
         * @param {ShowcasesShowcaseVideosApiRemoveFromShowcaseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeFromShowcase(requestParameters: ShowcasesShowcaseVideosApiRemoveFromShowcaseRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeFromShowcase(requestParameters.albumId, requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method removes the specified video from its showcase. The authenticated user must be the owner of the showcase.
         * @summary Remove a video from a showcase
         * @param {ShowcasesShowcaseVideosApiRemoveVideoFromShowcaseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeVideoFromShowcase(requestParameters: ShowcasesShowcaseVideosApiRemoveVideoFromShowcaseRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeVideoFromShowcase(requestParameters.albumId, requestParameters.userId, requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method replaces all the videos in the specified showcase with a new set of one or more videos. The authenticated user must be the owner of the showcase.
         * @summary Replace all the videos in a showcase
         * @param {ShowcasesShowcaseVideosApiReplaceShowcaseVideosRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async replaceShowcaseVideos(requestParameters: ShowcasesShowcaseVideosApiReplaceShowcaseVideosRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const showcasesShowcaseVideosReplaceShowcaseVideosRequest: ShowcasesShowcaseVideosReplaceShowcaseVideosRequest = {
                videos: requestParameters.videos
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.replaceShowcaseVideos(requestParameters.albumId, requestParameters.userId, showcasesShowcaseVideosReplaceShowcaseVideosRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method replaces all the videos in the specified showcase with a new set of one or more videos. The authenticated user must be the owner of the showcase.
         * @summary Replace all the videos in a showcase
         * @param {ShowcasesShowcaseVideosApiReplaceVideosRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async replaceVideos(requestParameters: ShowcasesShowcaseVideosApiReplaceVideosRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const showcasesShowcaseVideosReplaceVideosRequest: ShowcasesShowcaseVideosReplaceVideosRequest = {
                videos: requestParameters.videos
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.replaceVideos(requestParameters.albumId, showcasesShowcaseVideosReplaceVideosRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method sets the featured video of the specified showcase. The authenticated user must be the owner of the showcase, and the featured video must belong to it.
         * @summary Set the featured video of a showcase
         * @param {ShowcasesShowcaseVideosApiSetFeaturedVideoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setFeaturedVideo(requestParameters: ShowcasesShowcaseVideosApiSetFeaturedVideoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Album>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setFeaturedVideo(requestParameters.albumId, requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method sets the featured video of the specified showcase. The authenticated user must be the owner of the showcase, and the featured video must belong to it.
         * @summary Set the featured video of a showcase
         * @param {ShowcasesShowcaseVideosApiSetFeaturedVideo0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setFeaturedVideo_5(requestParameters: ShowcasesShowcaseVideosApiSetFeaturedVideo0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Album>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setFeaturedVideo_5(requestParameters.albumId, requestParameters.userId, requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShowcasesShowcaseVideosApi - factory interface
 * @export
 */
export const ShowcasesShowcaseVideosApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShowcasesShowcaseVideosApiFp(configuration)
    return {
        /**
         * This method adds a single video to the specified showcase. The authenticated user must be the owner of the showcase.
         * @summary Add a specific video to a showcase
         * @param {ShowcasesShowcaseVideosApiAddToShowcaseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToShowcase(requestParameters: ShowcasesShowcaseVideosApiAddToShowcaseRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addToShowcase(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method adds a single video to the specified showcase. The authenticated user must be the owner of the showcase.
         * @summary Add a specific video to a showcase
         * @param {ShowcasesShowcaseVideosApiAddToShowcase0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToShowcase_1(requestParameters: ShowcasesShowcaseVideosApiAddToShowcase0Request, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addToShowcase_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method creates a thumbnail image for a showcase from the specified frame of a showcase video. The authenticated user must be the owner of the showcase.
         * @summary Create a thumbnail for a showcase from a showcase video
         * @param {ShowcasesShowcaseVideosApiCreateShowcaseThumbnailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createShowcaseThumbnail(requestParameters: ShowcasesShowcaseVideosApiCreateShowcaseThumbnailRequest, options?: AxiosRequestConfig): AxiosPromise<Album> {
            return localVarFp.createShowcaseThumbnail(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method creates a thumbnail image for a showcase from the specified frame of a showcase video. The authenticated user must be the owner of the showcase.
         * @summary Create a thumbnail for a showcase from a showcase video
         * @param {ShowcasesShowcaseVideosApiCreateShowcaseThumbnail0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createShowcaseThumbnail_2(requestParameters: ShowcasesShowcaseVideosApiCreateShowcaseThumbnail0Request, options?: AxiosRequestConfig): AxiosPromise<Album> {
            return localVarFp.createShowcaseThumbnail_2(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every video in the specified showcase. The authenticated user must be the owner of the showcase.
         * @summary Get all the videos in a showcase
         * @param {ShowcasesShowcaseVideosApiGetShowcaseVideosRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShowcaseVideos(requestParameters: ShowcasesShowcaseVideosApiGetShowcaseVideosRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Video>> {
            return localVarFp.getShowcaseVideos(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns a single video belonging to the specified showcase. The authenticated user must be the owner of the showcase.
         * @summary Get a specific video in a showcase
         * @param {ShowcasesShowcaseVideosApiGetSpecificVideoInShowcaseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificVideoInShowcase(requestParameters: ShowcasesShowcaseVideosApiGetSpecificVideoInShowcaseRequest, options?: AxiosRequestConfig): AxiosPromise<Video> {
            return localVarFp.getSpecificVideoInShowcase(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns a single video belonging to the specified showcase. The authenticated user must be the owner of the showcase.
         * @summary Get a specific video in a showcase
         * @param {ShowcasesShowcaseVideosApiGetSpecificVideoInShowcase0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificVideoInShowcase_3(requestParameters: ShowcasesShowcaseVideosApiGetSpecificVideoInShowcase0Request, options?: AxiosRequestConfig): AxiosPromise<Video> {
            return localVarFp.getSpecificVideoInShowcase_3(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns every showcase to which the authenticated user can add or remove the specified video. The user must be the owner of the showcase.
         * @summary Get all the showcases to which the user can add or remove a specific video
         * @param {ShowcasesShowcaseVideosApiListAvailableShowcasesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAvailableShowcases(requestParameters: ShowcasesShowcaseVideosApiListAvailableShowcasesRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Album>> {
            return localVarFp.listAvailableShowcases(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns every video belonging to the authenticated user that can be added to or removed from the specified showcase. The user must be the owner of the showcase.
         * @summary Get all the user\'s videos that can be added to or removed from a showcase
         * @param {ShowcasesShowcaseVideosApiListInShowcaseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInShowcase(requestParameters: ShowcasesShowcaseVideosApiListInShowcaseRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Video>> {
            return localVarFp.listInShowcase(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every video in the specified showcase. The authenticated user must be the owner of the showcase.
         * @summary Get all the videos in a showcase
         * @param {ShowcasesShowcaseVideosApiListInShowcase0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInShowcase_4(requestParameters: ShowcasesShowcaseVideosApiListInShowcase0Request, options?: AxiosRequestConfig): AxiosPromise<Array<Video>> {
            return localVarFp.listInShowcase_4(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method removes the specified video from its showcase. The authenticated user must be the owner of the showcase.
         * @summary Remove a video from a showcase
         * @param {ShowcasesShowcaseVideosApiRemoveFromShowcaseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFromShowcase(requestParameters: ShowcasesShowcaseVideosApiRemoveFromShowcaseRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeFromShowcase(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method removes the specified video from its showcase. The authenticated user must be the owner of the showcase.
         * @summary Remove a video from a showcase
         * @param {ShowcasesShowcaseVideosApiRemoveVideoFromShowcaseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeVideoFromShowcase(requestParameters: ShowcasesShowcaseVideosApiRemoveVideoFromShowcaseRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeVideoFromShowcase(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method replaces all the videos in the specified showcase with a new set of one or more videos. The authenticated user must be the owner of the showcase.
         * @summary Replace all the videos in a showcase
         * @param {ShowcasesShowcaseVideosApiReplaceShowcaseVideosRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceShowcaseVideos(requestParameters: ShowcasesShowcaseVideosApiReplaceShowcaseVideosRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.replaceShowcaseVideos(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method replaces all the videos in the specified showcase with a new set of one or more videos. The authenticated user must be the owner of the showcase.
         * @summary Replace all the videos in a showcase
         * @param {ShowcasesShowcaseVideosApiReplaceVideosRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceVideos(requestParameters: ShowcasesShowcaseVideosApiReplaceVideosRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.replaceVideos(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method sets the featured video of the specified showcase. The authenticated user must be the owner of the showcase, and the featured video must belong to it.
         * @summary Set the featured video of a showcase
         * @param {ShowcasesShowcaseVideosApiSetFeaturedVideoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setFeaturedVideo(requestParameters: ShowcasesShowcaseVideosApiSetFeaturedVideoRequest, options?: AxiosRequestConfig): AxiosPromise<Album> {
            return localVarFp.setFeaturedVideo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method sets the featured video of the specified showcase. The authenticated user must be the owner of the showcase, and the featured video must belong to it.
         * @summary Set the featured video of a showcase
         * @param {ShowcasesShowcaseVideosApiSetFeaturedVideo0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setFeaturedVideo_5(requestParameters: ShowcasesShowcaseVideosApiSetFeaturedVideo0Request, options?: AxiosRequestConfig): AxiosPromise<Album> {
            return localVarFp.setFeaturedVideo_5(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addToShowcase operation in ShowcasesShowcaseVideosApi.
 * @export
 * @interface ShowcasesShowcaseVideosApiAddToShowcaseRequest
 */
export type ShowcasesShowcaseVideosApiAddToShowcaseRequest = {
    
    /**
    * The ID of the showcase.
    * @type {number}
    * @memberof ShowcasesShowcaseVideosApiAddToShowcase
    */
    readonly albumId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof ShowcasesShowcaseVideosApiAddToShowcase
    */
    readonly videoId: number
    
}

/**
 * Request parameters for addToShowcase_1 operation in ShowcasesShowcaseVideosApi.
 * @export
 * @interface ShowcasesShowcaseVideosApiAddToShowcase0Request
 */
export type ShowcasesShowcaseVideosApiAddToShowcase0Request = {
    
    /**
    * The ID of the showcase.
    * @type {number}
    * @memberof ShowcasesShowcaseVideosApiAddToShowcase0
    */
    readonly albumId: number
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof ShowcasesShowcaseVideosApiAddToShowcase0
    */
    readonly userId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof ShowcasesShowcaseVideosApiAddToShowcase0
    */
    readonly videoId: number
    
}

/**
 * Request parameters for createShowcaseThumbnail operation in ShowcasesShowcaseVideosApi.
 * @export
 * @interface ShowcasesShowcaseVideosApiCreateShowcaseThumbnailRequest
 */
export type ShowcasesShowcaseVideosApiCreateShowcaseThumbnailRequest = {
    
    /**
    * The ID of the showcase.
    * @type {number}
    * @memberof ShowcasesShowcaseVideosApiCreateShowcaseThumbnail
    */
    readonly albumId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof ShowcasesShowcaseVideosApiCreateShowcaseThumbnail
    */
    readonly videoId: number
    
} & ShowcasesShowcaseVideosCreateShowcaseThumbnailRequest

/**
 * Request parameters for createShowcaseThumbnail_2 operation in ShowcasesShowcaseVideosApi.
 * @export
 * @interface ShowcasesShowcaseVideosApiCreateShowcaseThumbnail0Request
 */
export type ShowcasesShowcaseVideosApiCreateShowcaseThumbnail0Request = {
    
    /**
    * The ID of the showcase.
    * @type {number}
    * @memberof ShowcasesShowcaseVideosApiCreateShowcaseThumbnail0
    */
    readonly albumId: number
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof ShowcasesShowcaseVideosApiCreateShowcaseThumbnail0
    */
    readonly userId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof ShowcasesShowcaseVideosApiCreateShowcaseThumbnail0
    */
    readonly videoId: number
    
} & ShowcasesShowcaseVideosCreateShowcaseThumbnailRequest1

/**
 * Request parameters for getShowcaseVideos operation in ShowcasesShowcaseVideosApi.
 * @export
 * @interface ShowcasesShowcaseVideosApiGetShowcaseVideosRequest
 */
export type ShowcasesShowcaseVideosApiGetShowcaseVideosRequest = {
    
    /**
    * The ID of the showcase.
    * @type {number}
    * @memberof ShowcasesShowcaseVideosApiGetShowcaseVideos
    */
    readonly albumId: number
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof ShowcasesShowcaseVideosApiGetShowcaseVideos
    */
    readonly userId: number
    
    /**
    * The page containing the video URI.
    * @type {string}
    * @memberof ShowcasesShowcaseVideosApiGetShowcaseVideos
    */
    readonly containingUri?: string
    
    /**
    * The sort direction of the results.  Option descriptions:  * `asc` - Sort the results in ascending order.  * `desc` - Sort the results in descending order. 
    * @type {'asc' | 'desc'}
    * @memberof ShowcasesShowcaseVideosApiGetShowcaseVideos
    */
    readonly direction?: 'asc' | 'desc'
    
    /**
    * The attribute by which to filter the results.  Option descriptions:  * `embeddable` - Filter the results by the **embeddable** attribute. 
    * @type {'embeddable'}
    * @memberof ShowcasesShowcaseVideosApiGetShowcaseVideos
    */
    readonly filter?: 'embeddable'
    
    /**
    * Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). This parameter is required only when **filter** is `embeddable`.
    * @type {boolean}
    * @memberof ShowcasesShowcaseVideosApiGetShowcaseVideos
    */
    readonly filterEmbeddable?: boolean
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof ShowcasesShowcaseVideosApiGetShowcaseVideos
    */
    readonly page?: number
    
    /**
    * The password of the showcase.
    * @type {string}
    * @memberof ShowcasesShowcaseVideosApiGetShowcaseVideos
    */
    readonly password?: string
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof ShowcasesShowcaseVideosApiGetShowcaseVideos
    */
    readonly perPage?: number
    
    /**
    * The search query to use to filter the results.
    * @type {string}
    * @memberof ShowcasesShowcaseVideosApiGetShowcaseVideos
    */
    readonly query?: string
    
    /**
    * The way to sort the results.  Option descriptions:  * `alphabetical` - Sort the results alphabetically.  * `comments` - Sort the results by number of comments.  * `date` - Sort the results by date.  * `default` - Sort the results by the default method.  * `duration` - Sort the results by duration.  * `likes` - Sort the results by number of likes.  * `manual` - Sort the results by their manual order.  * `modified_time` - Sort the results by last modification.  * `plays` - Sort the results by number of plays. 
    * @type {'alphabetical' | 'comments' | 'date' | 'default' | 'duration' | 'likes' | 'manual' | 'modified_time' | 'plays'}
    * @memberof ShowcasesShowcaseVideosApiGetShowcaseVideos
    */
    readonly sort?: 'alphabetical' | 'comments' | 'date' | 'default' | 'duration' | 'likes' | 'manual' | 'modified_time' | 'plays'
    
    /**
    * Whether to include private videos in the search. Please note that a separate search service provides this functionality. The service performs a partial text search on the video\'s name.
    * @type {boolean}
    * @memberof ShowcasesShowcaseVideosApiGetShowcaseVideos
    */
    readonly weakSearch?: boolean
    
}

/**
 * Request parameters for getSpecificVideoInShowcase operation in ShowcasesShowcaseVideosApi.
 * @export
 * @interface ShowcasesShowcaseVideosApiGetSpecificVideoInShowcaseRequest
 */
export type ShowcasesShowcaseVideosApiGetSpecificVideoInShowcaseRequest = {
    
    /**
    * The ID of the showcase.
    * @type {number}
    * @memberof ShowcasesShowcaseVideosApiGetSpecificVideoInShowcase
    */
    readonly albumId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof ShowcasesShowcaseVideosApiGetSpecificVideoInShowcase
    */
    readonly videoId: number
    
    /**
    * The password of the showcase.
    * @type {string}
    * @memberof ShowcasesShowcaseVideosApiGetSpecificVideoInShowcase
    */
    readonly password?: string
    
}

/**
 * Request parameters for getSpecificVideoInShowcase_3 operation in ShowcasesShowcaseVideosApi.
 * @export
 * @interface ShowcasesShowcaseVideosApiGetSpecificVideoInShowcase0Request
 */
export type ShowcasesShowcaseVideosApiGetSpecificVideoInShowcase0Request = {
    
    /**
    * The ID of the showcase.
    * @type {number}
    * @memberof ShowcasesShowcaseVideosApiGetSpecificVideoInShowcase0
    */
    readonly albumId: number
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof ShowcasesShowcaseVideosApiGetSpecificVideoInShowcase0
    */
    readonly userId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof ShowcasesShowcaseVideosApiGetSpecificVideoInShowcase0
    */
    readonly videoId: number
    
    /**
    * The password of the showcase.
    * @type {string}
    * @memberof ShowcasesShowcaseVideosApiGetSpecificVideoInShowcase0
    */
    readonly password?: string
    
}

/**
 * Request parameters for listAvailableShowcases operation in ShowcasesShowcaseVideosApi.
 * @export
 * @interface ShowcasesShowcaseVideosApiListAvailableShowcasesRequest
 */
export type ShowcasesShowcaseVideosApiListAvailableShowcasesRequest = {
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof ShowcasesShowcaseVideosApiListAvailableShowcases
    */
    readonly videoId: number
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof ShowcasesShowcaseVideosApiListAvailableShowcases
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof ShowcasesShowcaseVideosApiListAvailableShowcases
    */
    readonly perPage?: number
    
}

/**
 * Request parameters for listInShowcase operation in ShowcasesShowcaseVideosApi.
 * @export
 * @interface ShowcasesShowcaseVideosApiListInShowcaseRequest
 */
export type ShowcasesShowcaseVideosApiListInShowcaseRequest = {
    
    /**
    * The ID of the showcase.
    * @type {number}
    * @memberof ShowcasesShowcaseVideosApiListInShowcase
    */
    readonly albumId: number
    
    /**
    * The sort direction of the results.  Option descriptions:  * `asc` - Sort the results in ascending order.  * `desc` - Sort the results in descending order. 
    * @type {'asc' | 'desc'}
    * @memberof ShowcasesShowcaseVideosApiListInShowcase
    */
    readonly direction?: 'asc' | 'desc'
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof ShowcasesShowcaseVideosApiListInShowcase
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof ShowcasesShowcaseVideosApiListInShowcase
    */
    readonly perPage?: number
    
    /**
    * The way to sort the results.  Option descriptions:  * `alphabetical` - Sort the results alphabetically.  * `comments` - Sort the results by number of comments.  * `date` - Sort the results by date.  * `default` - Sort the results by the default method.  * `duration` - Sort the results by duration.  * `last_user_action_event_date` - Sort the results by most recent user interaction.  * `likes` - Sort the results by number of likes.  * `modified_time` - Sort the results by last modification.  * `plays` - Sort the results by number of plays. 
    * @type {'alphabetical' | 'comments' | 'date' | 'default' | 'duration' | 'last_user_action_event_date' | 'likes' | 'modified_time' | 'plays'}
    * @memberof ShowcasesShowcaseVideosApiListInShowcase
    */
    readonly sort?: 'alphabetical' | 'comments' | 'date' | 'default' | 'duration' | 'last_user_action_event_date' | 'likes' | 'modified_time' | 'plays'
    
}

/**
 * Request parameters for listInShowcase_4 operation in ShowcasesShowcaseVideosApi.
 * @export
 * @interface ShowcasesShowcaseVideosApiListInShowcase0Request
 */
export type ShowcasesShowcaseVideosApiListInShowcase0Request = {
    
    /**
    * The ID of the showcase.
    * @type {number}
    * @memberof ShowcasesShowcaseVideosApiListInShowcase0
    */
    readonly albumId: number
    
    /**
    * The page containing the video URI.
    * @type {string}
    * @memberof ShowcasesShowcaseVideosApiListInShowcase0
    */
    readonly containingUri?: string
    
    /**
    * The sort direction of the results.  Option descriptions:  * `asc` - Sort the results in ascending order.  * `desc` - Sort the results in descending order. 
    * @type {'asc' | 'desc'}
    * @memberof ShowcasesShowcaseVideosApiListInShowcase0
    */
    readonly direction?: 'asc' | 'desc'
    
    /**
    * The attribute by which to filter the results.  Option descriptions:  * `embeddable` - Filter the results by the **embeddable** attribute. 
    * @type {'embeddable'}
    * @memberof ShowcasesShowcaseVideosApiListInShowcase0
    */
    readonly filter?: 'embeddable'
    
    /**
    * Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). This parameter is required only when **filter** is `embeddable`.
    * @type {boolean}
    * @memberof ShowcasesShowcaseVideosApiListInShowcase0
    */
    readonly filterEmbeddable?: boolean
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof ShowcasesShowcaseVideosApiListInShowcase0
    */
    readonly page?: number
    
    /**
    * The password of the showcase.
    * @type {string}
    * @memberof ShowcasesShowcaseVideosApiListInShowcase0
    */
    readonly password?: string
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof ShowcasesShowcaseVideosApiListInShowcase0
    */
    readonly perPage?: number
    
    /**
    * The search query to use to filter the results.
    * @type {string}
    * @memberof ShowcasesShowcaseVideosApiListInShowcase0
    */
    readonly query?: string
    
    /**
    * The way to sort the results.  Option descriptions:  * `alphabetical` - Sort the results alphabetically.  * `comments` - Sort the results by number of comments.  * `date` - Sort the results by date.  * `default` - Sort the results by the default method.  * `duration` - Sort the results by duration.  * `likes` - Sort the results by number of likes.  * `manual` - Sort the results by their manual order.  * `modified_time` - Sort the results by last modification.  * `plays` - Sort the results by number of plays. 
    * @type {'alphabetical' | 'comments' | 'date' | 'default' | 'duration' | 'likes' | 'manual' | 'modified_time' | 'plays'}
    * @memberof ShowcasesShowcaseVideosApiListInShowcase0
    */
    readonly sort?: 'alphabetical' | 'comments' | 'date' | 'default' | 'duration' | 'likes' | 'manual' | 'modified_time' | 'plays'
    
    /**
    * Whether to include private videos in the search. Please note that a separate search service provides this functionality. The service performs a partial text search on the video\'s name.
    * @type {boolean}
    * @memberof ShowcasesShowcaseVideosApiListInShowcase0
    */
    readonly weakSearch?: boolean
    
}

/**
 * Request parameters for removeFromShowcase operation in ShowcasesShowcaseVideosApi.
 * @export
 * @interface ShowcasesShowcaseVideosApiRemoveFromShowcaseRequest
 */
export type ShowcasesShowcaseVideosApiRemoveFromShowcaseRequest = {
    
    /**
    * The ID of the showcase.
    * @type {number}
    * @memberof ShowcasesShowcaseVideosApiRemoveFromShowcase
    */
    readonly albumId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof ShowcasesShowcaseVideosApiRemoveFromShowcase
    */
    readonly videoId: number
    
}

/**
 * Request parameters for removeVideoFromShowcase operation in ShowcasesShowcaseVideosApi.
 * @export
 * @interface ShowcasesShowcaseVideosApiRemoveVideoFromShowcaseRequest
 */
export type ShowcasesShowcaseVideosApiRemoveVideoFromShowcaseRequest = {
    
    /**
    * The ID of the showcase.
    * @type {number}
    * @memberof ShowcasesShowcaseVideosApiRemoveVideoFromShowcase
    */
    readonly albumId: number
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof ShowcasesShowcaseVideosApiRemoveVideoFromShowcase
    */
    readonly userId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof ShowcasesShowcaseVideosApiRemoveVideoFromShowcase
    */
    readonly videoId: number
    
}

/**
 * Request parameters for replaceShowcaseVideos operation in ShowcasesShowcaseVideosApi.
 * @export
 * @interface ShowcasesShowcaseVideosApiReplaceShowcaseVideosRequest
 */
export type ShowcasesShowcaseVideosApiReplaceShowcaseVideosRequest = {
    
    /**
    * The ID of the showcase.
    * @type {number}
    * @memberof ShowcasesShowcaseVideosApiReplaceShowcaseVideos
    */
    readonly albumId: number
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof ShowcasesShowcaseVideosApiReplaceShowcaseVideos
    */
    readonly userId: number
    
} & ShowcasesShowcaseVideosReplaceShowcaseVideosRequest

/**
 * Request parameters for replaceVideos operation in ShowcasesShowcaseVideosApi.
 * @export
 * @interface ShowcasesShowcaseVideosApiReplaceVideosRequest
 */
export type ShowcasesShowcaseVideosApiReplaceVideosRequest = {
    
    /**
    * The ID of the showcase.
    * @type {number}
    * @memberof ShowcasesShowcaseVideosApiReplaceVideos
    */
    readonly albumId: number
    
} & ShowcasesShowcaseVideosReplaceVideosRequest

/**
 * Request parameters for setFeaturedVideo operation in ShowcasesShowcaseVideosApi.
 * @export
 * @interface ShowcasesShowcaseVideosApiSetFeaturedVideoRequest
 */
export type ShowcasesShowcaseVideosApiSetFeaturedVideoRequest = {
    
    /**
    * The ID of the showcase.
    * @type {number}
    * @memberof ShowcasesShowcaseVideosApiSetFeaturedVideo
    */
    readonly albumId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof ShowcasesShowcaseVideosApiSetFeaturedVideo
    */
    readonly videoId: number
    
}

/**
 * Request parameters for setFeaturedVideo_5 operation in ShowcasesShowcaseVideosApi.
 * @export
 * @interface ShowcasesShowcaseVideosApiSetFeaturedVideo0Request
 */
export type ShowcasesShowcaseVideosApiSetFeaturedVideo0Request = {
    
    /**
    * The ID of the showcase.
    * @type {number}
    * @memberof ShowcasesShowcaseVideosApiSetFeaturedVideo0
    */
    readonly albumId: number
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof ShowcasesShowcaseVideosApiSetFeaturedVideo0
    */
    readonly userId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof ShowcasesShowcaseVideosApiSetFeaturedVideo0
    */
    readonly videoId: number
    
}

/**
 * ShowcasesShowcaseVideosApiGenerated - object-oriented interface
 * @export
 * @class ShowcasesShowcaseVideosApiGenerated
 * @extends {BaseAPI}
 */
export class ShowcasesShowcaseVideosApiGenerated extends BaseAPI {
    /**
     * This method adds a single video to the specified showcase. The authenticated user must be the owner of the showcase.
     * @summary Add a specific video to a showcase
     * @param {ShowcasesShowcaseVideosApiAddToShowcaseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowcasesShowcaseVideosApiGenerated
     */
    public addToShowcase(requestParameters: ShowcasesShowcaseVideosApiAddToShowcaseRequest, options?: AxiosRequestConfig) {
        return ShowcasesShowcaseVideosApiFp(this.configuration).addToShowcase(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method adds a single video to the specified showcase. The authenticated user must be the owner of the showcase.
     * @summary Add a specific video to a showcase
     * @param {ShowcasesShowcaseVideosApiAddToShowcase0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowcasesShowcaseVideosApiGenerated
     */
    public addToShowcase_1(requestParameters: ShowcasesShowcaseVideosApiAddToShowcase0Request, options?: AxiosRequestConfig) {
        return ShowcasesShowcaseVideosApiFp(this.configuration).addToShowcase_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method creates a thumbnail image for a showcase from the specified frame of a showcase video. The authenticated user must be the owner of the showcase.
     * @summary Create a thumbnail for a showcase from a showcase video
     * @param {ShowcasesShowcaseVideosApiCreateShowcaseThumbnailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowcasesShowcaseVideosApiGenerated
     */
    public createShowcaseThumbnail(requestParameters: ShowcasesShowcaseVideosApiCreateShowcaseThumbnailRequest, options?: AxiosRequestConfig) {
        return ShowcasesShowcaseVideosApiFp(this.configuration).createShowcaseThumbnail(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method creates a thumbnail image for a showcase from the specified frame of a showcase video. The authenticated user must be the owner of the showcase.
     * @summary Create a thumbnail for a showcase from a showcase video
     * @param {ShowcasesShowcaseVideosApiCreateShowcaseThumbnail0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowcasesShowcaseVideosApiGenerated
     */
    public createShowcaseThumbnail_2(requestParameters: ShowcasesShowcaseVideosApiCreateShowcaseThumbnail0Request, options?: AxiosRequestConfig) {
        return ShowcasesShowcaseVideosApiFp(this.configuration).createShowcaseThumbnail_2(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every video in the specified showcase. The authenticated user must be the owner of the showcase.
     * @summary Get all the videos in a showcase
     * @param {ShowcasesShowcaseVideosApiGetShowcaseVideosRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowcasesShowcaseVideosApiGenerated
     */
    public getShowcaseVideos(requestParameters: ShowcasesShowcaseVideosApiGetShowcaseVideosRequest, options?: AxiosRequestConfig) {
        return ShowcasesShowcaseVideosApiFp(this.configuration).getShowcaseVideos(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns a single video belonging to the specified showcase. The authenticated user must be the owner of the showcase.
     * @summary Get a specific video in a showcase
     * @param {ShowcasesShowcaseVideosApiGetSpecificVideoInShowcaseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowcasesShowcaseVideosApiGenerated
     */
    public getSpecificVideoInShowcase(requestParameters: ShowcasesShowcaseVideosApiGetSpecificVideoInShowcaseRequest, options?: AxiosRequestConfig) {
        return ShowcasesShowcaseVideosApiFp(this.configuration).getSpecificVideoInShowcase(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns a single video belonging to the specified showcase. The authenticated user must be the owner of the showcase.
     * @summary Get a specific video in a showcase
     * @param {ShowcasesShowcaseVideosApiGetSpecificVideoInShowcase0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowcasesShowcaseVideosApiGenerated
     */
    public getSpecificVideoInShowcase_3(requestParameters: ShowcasesShowcaseVideosApiGetSpecificVideoInShowcase0Request, options?: AxiosRequestConfig) {
        return ShowcasesShowcaseVideosApiFp(this.configuration).getSpecificVideoInShowcase_3(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint returns every showcase to which the authenticated user can add or remove the specified video. The user must be the owner of the showcase.
     * @summary Get all the showcases to which the user can add or remove a specific video
     * @param {ShowcasesShowcaseVideosApiListAvailableShowcasesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowcasesShowcaseVideosApiGenerated
     */
    public listAvailableShowcases(requestParameters: ShowcasesShowcaseVideosApiListAvailableShowcasesRequest, options?: AxiosRequestConfig) {
        return ShowcasesShowcaseVideosApiFp(this.configuration).listAvailableShowcases(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint returns every video belonging to the authenticated user that can be added to or removed from the specified showcase. The user must be the owner of the showcase.
     * @summary Get all the user\'s videos that can be added to or removed from a showcase
     * @param {ShowcasesShowcaseVideosApiListInShowcaseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowcasesShowcaseVideosApiGenerated
     */
    public listInShowcase(requestParameters: ShowcasesShowcaseVideosApiListInShowcaseRequest, options?: AxiosRequestConfig) {
        return ShowcasesShowcaseVideosApiFp(this.configuration).listInShowcase(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every video in the specified showcase. The authenticated user must be the owner of the showcase.
     * @summary Get all the videos in a showcase
     * @param {ShowcasesShowcaseVideosApiListInShowcase0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowcasesShowcaseVideosApiGenerated
     */
    public listInShowcase_4(requestParameters: ShowcasesShowcaseVideosApiListInShowcase0Request, options?: AxiosRequestConfig) {
        return ShowcasesShowcaseVideosApiFp(this.configuration).listInShowcase_4(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method removes the specified video from its showcase. The authenticated user must be the owner of the showcase.
     * @summary Remove a video from a showcase
     * @param {ShowcasesShowcaseVideosApiRemoveFromShowcaseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowcasesShowcaseVideosApiGenerated
     */
    public removeFromShowcase(requestParameters: ShowcasesShowcaseVideosApiRemoveFromShowcaseRequest, options?: AxiosRequestConfig) {
        return ShowcasesShowcaseVideosApiFp(this.configuration).removeFromShowcase(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method removes the specified video from its showcase. The authenticated user must be the owner of the showcase.
     * @summary Remove a video from a showcase
     * @param {ShowcasesShowcaseVideosApiRemoveVideoFromShowcaseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowcasesShowcaseVideosApiGenerated
     */
    public removeVideoFromShowcase(requestParameters: ShowcasesShowcaseVideosApiRemoveVideoFromShowcaseRequest, options?: AxiosRequestConfig) {
        return ShowcasesShowcaseVideosApiFp(this.configuration).removeVideoFromShowcase(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method replaces all the videos in the specified showcase with a new set of one or more videos. The authenticated user must be the owner of the showcase.
     * @summary Replace all the videos in a showcase
     * @param {ShowcasesShowcaseVideosApiReplaceShowcaseVideosRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowcasesShowcaseVideosApiGenerated
     */
    public replaceShowcaseVideos(requestParameters: ShowcasesShowcaseVideosApiReplaceShowcaseVideosRequest, options?: AxiosRequestConfig) {
        return ShowcasesShowcaseVideosApiFp(this.configuration).replaceShowcaseVideos(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method replaces all the videos in the specified showcase with a new set of one or more videos. The authenticated user must be the owner of the showcase.
     * @summary Replace all the videos in a showcase
     * @param {ShowcasesShowcaseVideosApiReplaceVideosRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowcasesShowcaseVideosApiGenerated
     */
    public replaceVideos(requestParameters: ShowcasesShowcaseVideosApiReplaceVideosRequest, options?: AxiosRequestConfig) {
        return ShowcasesShowcaseVideosApiFp(this.configuration).replaceVideos(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method sets the featured video of the specified showcase. The authenticated user must be the owner of the showcase, and the featured video must belong to it.
     * @summary Set the featured video of a showcase
     * @param {ShowcasesShowcaseVideosApiSetFeaturedVideoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowcasesShowcaseVideosApiGenerated
     */
    public setFeaturedVideo(requestParameters: ShowcasesShowcaseVideosApiSetFeaturedVideoRequest, options?: AxiosRequestConfig) {
        return ShowcasesShowcaseVideosApiFp(this.configuration).setFeaturedVideo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method sets the featured video of the specified showcase. The authenticated user must be the owner of the showcase, and the featured video must belong to it.
     * @summary Set the featured video of a showcase
     * @param {ShowcasesShowcaseVideosApiSetFeaturedVideo0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowcasesShowcaseVideosApiGenerated
     */
    public setFeaturedVideo_5(requestParameters: ShowcasesShowcaseVideosApiSetFeaturedVideo0Request, options?: AxiosRequestConfig) {
        return ShowcasesShowcaseVideosApiFp(this.configuration).setFeaturedVideo_5(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
