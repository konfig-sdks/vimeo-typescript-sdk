/* tslint:disable */
/* eslint-disable */
/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

The version of the OpenAPI document: 3.4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { LegacyError } from '../models';
// @ts-ignore
import { Video } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * VideosRecommendationsApi - axios parameter creator
 * @export
 */
export const VideosRecommendationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method returns every related video of the specified video.
         * @summary Get all the related videos of a video
         * @param {number} videoId The ID of the video.
         * @param {'related'} [filter] The attribute by which to filter the results.  Option descriptions:  * &#x60;related&#x60; - Return related videos. 
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelatedVideos: async (videoId: number, filter?: 'related', page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('getRelatedVideos', 'videoId', videoId)
            const localVarPath = `/videos/{video_id}/videos`
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/videos/{video_id}/videos',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VideosRecommendationsApi - functional programming interface
 * @export
 */
export const VideosRecommendationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VideosRecommendationsApiAxiosParamCreator(configuration)
    return {
        /**
         * This method returns every related video of the specified video.
         * @summary Get all the related videos of a video
         * @param {VideosRecommendationsApiGetRelatedVideosRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRelatedVideos(requestParameters: VideosRecommendationsApiGetRelatedVideosRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Video>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRelatedVideos(requestParameters.videoId, requestParameters.filter, requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VideosRecommendationsApi - factory interface
 * @export
 */
export const VideosRecommendationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VideosRecommendationsApiFp(configuration)
    return {
        /**
         * This method returns every related video of the specified video.
         * @summary Get all the related videos of a video
         * @param {VideosRecommendationsApiGetRelatedVideosRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelatedVideos(requestParameters: VideosRecommendationsApiGetRelatedVideosRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Video>> {
            return localVarFp.getRelatedVideos(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getRelatedVideos operation in VideosRecommendationsApi.
 * @export
 * @interface VideosRecommendationsApiGetRelatedVideosRequest
 */
export type VideosRecommendationsApiGetRelatedVideosRequest = {
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof VideosRecommendationsApiGetRelatedVideos
    */
    readonly videoId: number
    
    /**
    * The attribute by which to filter the results.  Option descriptions:  * `related` - Return related videos. 
    * @type {'related'}
    * @memberof VideosRecommendationsApiGetRelatedVideos
    */
    readonly filter?: 'related'
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof VideosRecommendationsApiGetRelatedVideos
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof VideosRecommendationsApiGetRelatedVideos
    */
    readonly perPage?: number
    
}

/**
 * VideosRecommendationsApiGenerated - object-oriented interface
 * @export
 * @class VideosRecommendationsApiGenerated
 * @extends {BaseAPI}
 */
export class VideosRecommendationsApiGenerated extends BaseAPI {
    /**
     * This method returns every related video of the specified video.
     * @summary Get all the related videos of a video
     * @param {VideosRecommendationsApiGetRelatedVideosRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosRecommendationsApiGenerated
     */
    public getRelatedVideos(requestParameters: VideosRecommendationsApiGetRelatedVideosRequest, options?: AxiosRequestConfig) {
        return VideosRecommendationsApiFp(this.configuration).getRelatedVideos(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
