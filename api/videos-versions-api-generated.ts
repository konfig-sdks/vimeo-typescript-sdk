/* tslint:disable */
/* eslint-disable */
/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

The version of the OpenAPI document: 3.4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { LegacyError } from '../models';
// @ts-ignore
import { ModelError } from '../models';
// @ts-ignore
import { VideoVersion } from '../models';
// @ts-ignore
import { VideosVersionsAddVideoVersionRequest } from '../models';
// @ts-ignore
import { VideosVersionsAddVideoVersionRequestUpload } from '../models';
// @ts-ignore
import { VideosVersionsEditVideoVersionRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * VideosVersionsApi - axios parameter creator
 * @export
 */
export const VideosVersionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method adds a version to the specified video. The authenticated user must be the owner of the video.
         * @summary Add a version to a video
         * @param {number} videoId The ID of the video.
         * @param {VideosVersionsAddVideoVersionRequest} videosVersionsAddVideoVersionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addVideoVersion: async (videoId: number, videosVersionsAddVideoVersionRequest: VideosVersionsAddVideoVersionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('addVideoVersion', 'videoId', videoId)
            // verify required parameter 'videosVersionsAddVideoVersionRequest' is not null or undefined
            assertParamExists('addVideoVersion', 'videosVersionsAddVideoVersionRequest', videosVersionsAddVideoVersionRequest)
            const localVarPath = `/videos/{video_id}/versions`
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.vimeo.video.version+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: videosVersionsAddVideoVersionRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/videos/{video_id}/versions',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(videosVersionsAddVideoVersionRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method deletes the specified version from a video. The authenticated user must be the owner of the video.
         * @summary Delete a video version
         * @param {number} versionId The ID of the video version.
         * @param {number} videoId The ID of the video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVideoVersion: async (versionId: number, videoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'versionId' is not null or undefined
            assertParamExists('deleteVideoVersion', 'versionId', versionId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('deleteVideoVersion', 'videoId', videoId)
            const localVarPath = `/videos/{video_id}/versions/{version_id}`
                .replace(`{${"version_id"}}`, encodeURIComponent(String(versionId !== undefined ? versionId : `-version_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/videos/{video_id}/versions/{version_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method edits the specified version of a video. The authenticated user must be the owner of the video.
         * @summary Edit a video version
         * @param {number} versionId The ID of the video version.
         * @param {number} videoId The ID of the video.
         * @param {VideosVersionsEditVideoVersionRequest} [videosVersionsEditVideoVersionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editVideoVersion: async (versionId: number, videoId: number, videosVersionsEditVideoVersionRequest?: VideosVersionsEditVideoVersionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'versionId' is not null or undefined
            assertParamExists('editVideoVersion', 'versionId', versionId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('editVideoVersion', 'videoId', videoId)
            const localVarPath = `/videos/{video_id}/versions/{version_id}`
                .replace(`{${"version_id"}}`, encodeURIComponent(String(versionId !== undefined ? versionId : `-version_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.vimeo.video.version+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: videosVersionsEditVideoVersionRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/videos/{video_id}/versions/{version_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(videosVersionsEditVideoVersionRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every version of the specified video. The authenticated user must be the owner of the video.
         * @summary Get all the versions of a video
         * @param {number} channelId The ID of the channel.
         * @param {number} videoId The ID of the video.
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllVideoVersions: async (channelId: number, videoId: number, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('getAllVideoVersions', 'channelId', channelId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('getAllVideoVersions', 'videoId', videoId)
            const localVarPath = `/channels/{channel_id}/videos/{video_id}/versions`
                .replace(`{${"channel_id"}}`, encodeURIComponent(String(channelId !== undefined ? channelId : `-channel_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/channels/{channel_id}/videos/{video_id}/versions',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every version of the specified video. The authenticated user must be the owner of the video.
         * @summary Get all the versions of a video
         * @param {number} videoId The ID of the video.
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllVideoVersions_1: async (videoId: number, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('getAllVideoVersions_1', 'videoId', videoId)
            const localVarPath = `/videos/{video_id}/versions`
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/videos/{video_id}/versions',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns a single version of the specified video. The authenticated user must be the owner of the video.
         * @summary Get a specific video version
         * @param {number} versionId The ID of the video version.
         * @param {number} videoId The ID of the video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificVersion: async (versionId: number, videoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'versionId' is not null or undefined
            assertParamExists('getSpecificVersion', 'versionId', versionId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('getSpecificVersion', 'videoId', videoId)
            const localVarPath = `/videos/{video_id}/versions/{version_id}`
                .replace(`{${"version_id"}}`, encodeURIComponent(String(versionId !== undefined ? versionId : `-version_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/videos/{video_id}/versions/{version_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VideosVersionsApi - functional programming interface
 * @export
 */
export const VideosVersionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VideosVersionsApiAxiosParamCreator(configuration)
    return {
        /**
         * This method adds a version to the specified video. The authenticated user must be the owner of the video.
         * @summary Add a version to a video
         * @param {VideosVersionsApiAddVideoVersionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addVideoVersion(requestParameters: VideosVersionsApiAddVideoVersionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VideoVersion>> {
            const videosVersionsAddVideoVersionRequest: VideosVersionsAddVideoVersionRequest = {
                file_name: requestParameters.file_name,
                upload: requestParameters.upload
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addVideoVersion(requestParameters.videoId, videosVersionsAddVideoVersionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method deletes the specified version from a video. The authenticated user must be the owner of the video.
         * @summary Delete a video version
         * @param {VideosVersionsApiDeleteVideoVersionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteVideoVersion(requestParameters: VideosVersionsApiDeleteVideoVersionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteVideoVersion(requestParameters.versionId, requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method edits the specified version of a video. The authenticated user must be the owner of the video.
         * @summary Edit a video version
         * @param {VideosVersionsApiEditVideoVersionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editVideoVersion(requestParameters: VideosVersionsApiEditVideoVersionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VideoVersion>> {
            const videosVersionsEditVideoVersionRequest: VideosVersionsEditVideoVersionRequest = {
                description: requestParameters.description,
                is_current: requestParameters.is_current
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.editVideoVersion(requestParameters.versionId, requestParameters.videoId, videosVersionsEditVideoVersionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every version of the specified video. The authenticated user must be the owner of the video.
         * @summary Get all the versions of a video
         * @param {VideosVersionsApiGetAllVideoVersionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllVideoVersions(requestParameters: VideosVersionsApiGetAllVideoVersionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<VideoVersion>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllVideoVersions(requestParameters.channelId, requestParameters.videoId, requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every version of the specified video. The authenticated user must be the owner of the video.
         * @summary Get all the versions of a video
         * @param {VideosVersionsApiGetAllVideoVersions0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllVideoVersions_1(requestParameters: VideosVersionsApiGetAllVideoVersions0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<VideoVersion>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllVideoVersions_1(requestParameters.videoId, requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns a single version of the specified video. The authenticated user must be the owner of the video.
         * @summary Get a specific video version
         * @param {VideosVersionsApiGetSpecificVersionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpecificVersion(requestParameters: VideosVersionsApiGetSpecificVersionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VideoVersion>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpecificVersion(requestParameters.versionId, requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VideosVersionsApi - factory interface
 * @export
 */
export const VideosVersionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VideosVersionsApiFp(configuration)
    return {
        /**
         * This method adds a version to the specified video. The authenticated user must be the owner of the video.
         * @summary Add a version to a video
         * @param {VideosVersionsApiAddVideoVersionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addVideoVersion(requestParameters: VideosVersionsApiAddVideoVersionRequest, options?: AxiosRequestConfig): AxiosPromise<VideoVersion> {
            return localVarFp.addVideoVersion(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method deletes the specified version from a video. The authenticated user must be the owner of the video.
         * @summary Delete a video version
         * @param {VideosVersionsApiDeleteVideoVersionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVideoVersion(requestParameters: VideosVersionsApiDeleteVideoVersionRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteVideoVersion(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method edits the specified version of a video. The authenticated user must be the owner of the video.
         * @summary Edit a video version
         * @param {VideosVersionsApiEditVideoVersionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editVideoVersion(requestParameters: VideosVersionsApiEditVideoVersionRequest, options?: AxiosRequestConfig): AxiosPromise<VideoVersion> {
            return localVarFp.editVideoVersion(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every version of the specified video. The authenticated user must be the owner of the video.
         * @summary Get all the versions of a video
         * @param {VideosVersionsApiGetAllVideoVersionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllVideoVersions(requestParameters: VideosVersionsApiGetAllVideoVersionsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<VideoVersion>> {
            return localVarFp.getAllVideoVersions(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every version of the specified video. The authenticated user must be the owner of the video.
         * @summary Get all the versions of a video
         * @param {VideosVersionsApiGetAllVideoVersions0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllVideoVersions_1(requestParameters: VideosVersionsApiGetAllVideoVersions0Request, options?: AxiosRequestConfig): AxiosPromise<Array<VideoVersion>> {
            return localVarFp.getAllVideoVersions_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns a single version of the specified video. The authenticated user must be the owner of the video.
         * @summary Get a specific video version
         * @param {VideosVersionsApiGetSpecificVersionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificVersion(requestParameters: VideosVersionsApiGetSpecificVersionRequest, options?: AxiosRequestConfig): AxiosPromise<VideoVersion> {
            return localVarFp.getSpecificVersion(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addVideoVersion operation in VideosVersionsApi.
 * @export
 * @interface VideosVersionsApiAddVideoVersionRequest
 */
export type VideosVersionsApiAddVideoVersionRequest = {
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof VideosVersionsApiAddVideoVersion
    */
    readonly videoId: number
    
} & VideosVersionsAddVideoVersionRequest

/**
 * Request parameters for deleteVideoVersion operation in VideosVersionsApi.
 * @export
 * @interface VideosVersionsApiDeleteVideoVersionRequest
 */
export type VideosVersionsApiDeleteVideoVersionRequest = {
    
    /**
    * The ID of the video version.
    * @type {number}
    * @memberof VideosVersionsApiDeleteVideoVersion
    */
    readonly versionId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof VideosVersionsApiDeleteVideoVersion
    */
    readonly videoId: number
    
}

/**
 * Request parameters for editVideoVersion operation in VideosVersionsApi.
 * @export
 * @interface VideosVersionsApiEditVideoVersionRequest
 */
export type VideosVersionsApiEditVideoVersionRequest = {
    
    /**
    * The ID of the video version.
    * @type {number}
    * @memberof VideosVersionsApiEditVideoVersion
    */
    readonly versionId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof VideosVersionsApiEditVideoVersion
    */
    readonly videoId: number
    
} & VideosVersionsEditVideoVersionRequest

/**
 * Request parameters for getAllVideoVersions operation in VideosVersionsApi.
 * @export
 * @interface VideosVersionsApiGetAllVideoVersionsRequest
 */
export type VideosVersionsApiGetAllVideoVersionsRequest = {
    
    /**
    * The ID of the channel.
    * @type {number}
    * @memberof VideosVersionsApiGetAllVideoVersions
    */
    readonly channelId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof VideosVersionsApiGetAllVideoVersions
    */
    readonly videoId: number
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof VideosVersionsApiGetAllVideoVersions
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof VideosVersionsApiGetAllVideoVersions
    */
    readonly perPage?: number
    
}

/**
 * Request parameters for getAllVideoVersions_1 operation in VideosVersionsApi.
 * @export
 * @interface VideosVersionsApiGetAllVideoVersions0Request
 */
export type VideosVersionsApiGetAllVideoVersions0Request = {
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof VideosVersionsApiGetAllVideoVersions0
    */
    readonly videoId: number
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof VideosVersionsApiGetAllVideoVersions0
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof VideosVersionsApiGetAllVideoVersions0
    */
    readonly perPage?: number
    
}

/**
 * Request parameters for getSpecificVersion operation in VideosVersionsApi.
 * @export
 * @interface VideosVersionsApiGetSpecificVersionRequest
 */
export type VideosVersionsApiGetSpecificVersionRequest = {
    
    /**
    * The ID of the video version.
    * @type {number}
    * @memberof VideosVersionsApiGetSpecificVersion
    */
    readonly versionId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof VideosVersionsApiGetSpecificVersion
    */
    readonly videoId: number
    
}

/**
 * VideosVersionsApiGenerated - object-oriented interface
 * @export
 * @class VideosVersionsApiGenerated
 * @extends {BaseAPI}
 */
export class VideosVersionsApiGenerated extends BaseAPI {
    /**
     * This method adds a version to the specified video. The authenticated user must be the owner of the video.
     * @summary Add a version to a video
     * @param {VideosVersionsApiAddVideoVersionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosVersionsApiGenerated
     */
    public addVideoVersion(requestParameters: VideosVersionsApiAddVideoVersionRequest, options?: AxiosRequestConfig) {
        return VideosVersionsApiFp(this.configuration).addVideoVersion(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method deletes the specified version from a video. The authenticated user must be the owner of the video.
     * @summary Delete a video version
     * @param {VideosVersionsApiDeleteVideoVersionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosVersionsApiGenerated
     */
    public deleteVideoVersion(requestParameters: VideosVersionsApiDeleteVideoVersionRequest, options?: AxiosRequestConfig) {
        return VideosVersionsApiFp(this.configuration).deleteVideoVersion(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method edits the specified version of a video. The authenticated user must be the owner of the video.
     * @summary Edit a video version
     * @param {VideosVersionsApiEditVideoVersionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosVersionsApiGenerated
     */
    public editVideoVersion(requestParameters: VideosVersionsApiEditVideoVersionRequest, options?: AxiosRequestConfig) {
        return VideosVersionsApiFp(this.configuration).editVideoVersion(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every version of the specified video. The authenticated user must be the owner of the video.
     * @summary Get all the versions of a video
     * @param {VideosVersionsApiGetAllVideoVersionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosVersionsApiGenerated
     */
    public getAllVideoVersions(requestParameters: VideosVersionsApiGetAllVideoVersionsRequest, options?: AxiosRequestConfig) {
        return VideosVersionsApiFp(this.configuration).getAllVideoVersions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every version of the specified video. The authenticated user must be the owner of the video.
     * @summary Get all the versions of a video
     * @param {VideosVersionsApiGetAllVideoVersions0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosVersionsApiGenerated
     */
    public getAllVideoVersions_1(requestParameters: VideosVersionsApiGetAllVideoVersions0Request, options?: AxiosRequestConfig) {
        return VideosVersionsApiFp(this.configuration).getAllVideoVersions_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns a single version of the specified video. The authenticated user must be the owner of the video.
     * @summary Get a specific video version
     * @param {VideosVersionsApiGetSpecificVersionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosVersionsApiGenerated
     */
    public getSpecificVersion(requestParameters: VideosVersionsApiGetSpecificVersionRequest, options?: AxiosRequestConfig) {
        return VideosVersionsApiFp(this.configuration).getSpecificVersion(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
