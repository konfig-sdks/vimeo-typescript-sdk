/* tslint:disable */
/* eslint-disable */
/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

The version of the OpenAPI document: 3.4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Auth } from '../models';
// @ts-ignore
import { AuthError } from '../models';
// @ts-ignore
import { AuthenticationExtrasConvertOAuth1ToOAuth2Request } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AuthenticationExtrasConvertApi - axios parameter creator
 * @export
 */
export const AuthenticationExtrasConvertApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method exchanges a legacy Advanced API OAuth 1 token for an API v3 OAuth 2 token.
         * @summary Convert an OAuth 1 access token to an OAuth 2 access token
         * @param {AuthenticationExtrasConvertOAuth1ToOAuth2Request} authenticationExtrasConvertOAuth1ToOAuth2Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oAuth1ToOAuth2: async (authenticationExtrasConvertOAuth1ToOAuth2Request: AuthenticationExtrasConvertOAuth1ToOAuth2Request, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authenticationExtrasConvertOAuth1ToOAuth2Request' is not null or undefined
            assertParamExists('oAuth1ToOAuth2', 'authenticationExtrasConvertOAuth1ToOAuth2Request', authenticationExtrasConvertOAuth1ToOAuth2Request)
            const localVarPath = `/oauth/authorize/vimeo_oauth1`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.vimeo.auth+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: authenticationExtrasConvertOAuth1ToOAuth2Request,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/oauth/authorize/vimeo_oauth1',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(authenticationExtrasConvertOAuth1ToOAuth2Request, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationExtrasConvertApi - functional programming interface
 * @export
 */
export const AuthenticationExtrasConvertApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthenticationExtrasConvertApiAxiosParamCreator(configuration)
    return {
        /**
         * This method exchanges a legacy Advanced API OAuth 1 token for an API v3 OAuth 2 token.
         * @summary Convert an OAuth 1 access token to an OAuth 2 access token
         * @param {AuthenticationExtrasConvertApiOAuth1ToOAuth2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oAuth1ToOAuth2(requestParameters: AuthenticationExtrasConvertApiOAuth1ToOAuth2Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Auth>> {
            const authenticationExtrasConvertOAuth1ToOAuth2Request: AuthenticationExtrasConvertOAuth1ToOAuth2Request = {
                grant_type: requestParameters.grant_type,
                token: requestParameters.token,
                token_secret: requestParameters.token_secret
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.oAuth1ToOAuth2(authenticationExtrasConvertOAuth1ToOAuth2Request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthenticationExtrasConvertApi - factory interface
 * @export
 */
export const AuthenticationExtrasConvertApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthenticationExtrasConvertApiFp(configuration)
    return {
        /**
         * This method exchanges a legacy Advanced API OAuth 1 token for an API v3 OAuth 2 token.
         * @summary Convert an OAuth 1 access token to an OAuth 2 access token
         * @param {AuthenticationExtrasConvertApiOAuth1ToOAuth2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oAuth1ToOAuth2(requestParameters: AuthenticationExtrasConvertApiOAuth1ToOAuth2Request, options?: AxiosRequestConfig): AxiosPromise<Auth> {
            return localVarFp.oAuth1ToOAuth2(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for oAuth1ToOAuth2 operation in AuthenticationExtrasConvertApi.
 * @export
 * @interface AuthenticationExtrasConvertApiOAuth1ToOAuth2Request
 */
export type AuthenticationExtrasConvertApiOAuth1ToOAuth2Request = {
    
} & AuthenticationExtrasConvertOAuth1ToOAuth2Request

/**
 * AuthenticationExtrasConvertApiGenerated - object-oriented interface
 * @export
 * @class AuthenticationExtrasConvertApiGenerated
 * @extends {BaseAPI}
 */
export class AuthenticationExtrasConvertApiGenerated extends BaseAPI {
    /**
     * This method exchanges a legacy Advanced API OAuth 1 token for an API v3 OAuth 2 token.
     * @summary Convert an OAuth 1 access token to an OAuth 2 access token
     * @param {AuthenticationExtrasConvertApiOAuth1ToOAuth2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationExtrasConvertApiGenerated
     */
    public oAuth1ToOAuth2(requestParameters: AuthenticationExtrasConvertApiOAuth1ToOAuth2Request, options?: AxiosRequestConfig) {
        return AuthenticationExtrasConvertApiFp(this.configuration).oAuth1ToOAuth2(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
