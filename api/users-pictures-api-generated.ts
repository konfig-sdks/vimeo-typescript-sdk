/* tslint:disable */
/* eslint-disable */
/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

The version of the OpenAPI document: 3.4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { EditPictureRequest } from '../models';
// @ts-ignore
import { Picture } from '../models';
// @ts-ignore
import { UsersPicturesEditPortraitImageRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * UsersPicturesApi - axios parameter creator
 * @export
 */
export const UsersPicturesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method adds a portrait image to the authenticated user\'s Vimeo account. Send the binary data of the image file to the location that you receive from the **link** field in the response. For step-by-step instructions, see [Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails#uploading-a-thumbnail-step-3).
         * @summary Add a picture to the user\'s account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPortraitImage: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/pictures`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["upload"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["upload"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/pictures',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method edits the specified portrait image belonging to the authenticated user.
         * @summary Edit a picture in the user\'s account
         * @param {number} portraitsetId The ID of the picture.
         * @param {UsersPicturesEditPortraitImageRequest} [usersPicturesEditPortraitImageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editPortraitImage: async (portraitsetId: number, usersPicturesEditPortraitImageRequest?: UsersPicturesEditPortraitImageRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'portraitsetId' is not null or undefined
            assertParamExists('editPortraitImage', 'portraitsetId', portraitsetId)
            const localVarPath = `/me/pictures/{portraitset_id}`
                .replace(`{${"portraitset_id"}}`, encodeURIComponent(String(portraitsetId !== undefined ? portraitsetId : `-portraitset_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.vimeo.picture+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: usersPicturesEditPortraitImageRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/pictures/{portraitset_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(usersPicturesEditPortraitImageRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns a single portrait image belonging to the authenticated user.
         * @summary Get a specific picture that belongs to the user
         * @param {number} portraitsetId The ID of the picture.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificPictureBelongingToUser: async (portraitsetId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'portraitsetId' is not null or undefined
            assertParamExists('getSpecificPictureBelongingToUser', 'portraitsetId', portraitsetId)
            const localVarPath = `/me/pictures/{portraitset_id}`
                .replace(`{${"portraitset_id"}}`, encodeURIComponent(String(portraitsetId !== undefined ? portraitsetId : `-portraitset_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/pictures/{portraitset_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every portrait image belonging to the authenticated user.
         * @summary Get all the pictures that belong to the user
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/pictures`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/pictures',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method adds a portrait image to the authenticated user\'s Vimeo account. Send the binary data of the image file to the location that you receive from the **link** field in the response. For step-by-step instructions, see [Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails#uploading-a-thumbnail-step-3).
         * @summary Add a picture to the user\'s account
         * @param {number} userId The ID of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        picture: async (userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('picture', 'userId', userId)
            const localVarPath = `/users/{user_id}/pictures`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["upload"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["upload"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/pictures',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns a single portrait image belonging to the authenticated user.
         * @summary Get a specific picture that belongs to the user
         * @param {number} portraitsetId The ID of the picture.
         * @param {number} userId The ID of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        picture_1: async (portraitsetId: number, userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'portraitsetId' is not null or undefined
            assertParamExists('picture_1', 'portraitsetId', portraitsetId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('picture_1', 'userId', userId)
            const localVarPath = `/users/{user_id}/pictures/{portraitset_id}`
                .replace(`{${"portraitset_id"}}`, encodeURIComponent(String(portraitsetId !== undefined ? portraitsetId : `-portraitset_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/pictures/{portraitset_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method removes the specified portrait image from the authenticated user\'s Vimeo account.
         * @summary Delete a picture from the user\'s account
         * @param {number} portraitsetId The ID of the picture.
         * @param {number} userId The ID of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        picture_2: async (portraitsetId: number, userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'portraitsetId' is not null or undefined
            assertParamExists('picture_2', 'portraitsetId', portraitsetId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('picture_2', 'userId', userId)
            const localVarPath = `/users/{user_id}/pictures/{portraitset_id}`
                .replace(`{${"portraitset_id"}}`, encodeURIComponent(String(portraitsetId !== undefined ? portraitsetId : `-portraitset_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["delete"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["delete"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/pictures/{portraitset_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method edits the specified portrait image belonging to the authenticated user.
         * @summary Edit a picture in the user\'s account
         * @param {number} portraitsetId The ID of the picture.
         * @param {number} userId The ID of the user.
         * @param {EditPictureRequest} [editPictureRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        picture_3: async (portraitsetId: number, userId: number, editPictureRequest?: EditPictureRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'portraitsetId' is not null or undefined
            assertParamExists('picture_3', 'portraitsetId', portraitsetId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('picture_3', 'userId', userId)
            const localVarPath = `/users/{user_id}/pictures/{portraitset_id}`
                .replace(`{${"portraitset_id"}}`, encodeURIComponent(String(portraitsetId !== undefined ? portraitsetId : `-portraitset_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.vimeo.picture+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: editPictureRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/pictures/{portraitset_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(editPictureRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every portrait image belonging to the authenticated user.
         * @summary Get all the pictures that belong to the user
         * @param {number} userId The ID of the user.
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pictures: async (userId: number, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('pictures', 'userId', userId)
            const localVarPath = `/users/{user_id}/pictures`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/pictures',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method removes the specified portrait image from the authenticated user\'s Vimeo account.
         * @summary Delete a picture from the user\'s account
         * @param {number} portraitsetId The ID of the picture.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePortraitImage: async (portraitsetId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'portraitsetId' is not null or undefined
            assertParamExists('removePortraitImage', 'portraitsetId', portraitsetId)
            const localVarPath = `/me/pictures/{portraitset_id}`
                .replace(`{${"portraitset_id"}}`, encodeURIComponent(String(portraitsetId !== undefined ? portraitsetId : `-portraitset_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["delete"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["delete"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/pictures/{portraitset_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersPicturesApi - functional programming interface
 * @export
 */
export const UsersPicturesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersPicturesApiAxiosParamCreator(configuration)
    return {
        /**
         * This method adds a portrait image to the authenticated user\'s Vimeo account. Send the binary data of the image file to the location that you receive from the **link** field in the response. For step-by-step instructions, see [Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails#uploading-a-thumbnail-step-3).
         * @summary Add a picture to the user\'s account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addPortraitImage(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Picture>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addPortraitImage(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method edits the specified portrait image belonging to the authenticated user.
         * @summary Edit a picture in the user\'s account
         * @param {UsersPicturesApiEditPortraitImageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editPortraitImage(requestParameters: UsersPicturesApiEditPortraitImageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Picture>> {
            const usersPicturesEditPortraitImageRequest: UsersPicturesEditPortraitImageRequest = {
                active: requestParameters.active
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.editPortraitImage(requestParameters.portraitsetId, usersPicturesEditPortraitImageRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns a single portrait image belonging to the authenticated user.
         * @summary Get a specific picture that belongs to the user
         * @param {UsersPicturesApiGetSpecificPictureBelongingToUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpecificPictureBelongingToUser(requestParameters: UsersPicturesApiGetSpecificPictureBelongingToUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Picture>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpecificPictureBelongingToUser(requestParameters.portraitsetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every portrait image belonging to the authenticated user.
         * @summary Get all the pictures that belong to the user
         * @param {UsersPicturesApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(requestParameters: UsersPicturesApiListRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Picture>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method adds a portrait image to the authenticated user\'s Vimeo account. Send the binary data of the image file to the location that you receive from the **link** field in the response. For step-by-step instructions, see [Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails#uploading-a-thumbnail-step-3).
         * @summary Add a picture to the user\'s account
         * @param {UsersPicturesApiPictureRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async picture(requestParameters: UsersPicturesApiPictureRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Picture>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.picture(requestParameters.userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns a single portrait image belonging to the authenticated user.
         * @summary Get a specific picture that belongs to the user
         * @param {UsersPicturesApiPicture0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async picture_1(requestParameters: UsersPicturesApiPicture0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Picture>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.picture_1(requestParameters.portraitsetId, requestParameters.userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method removes the specified portrait image from the authenticated user\'s Vimeo account.
         * @summary Delete a picture from the user\'s account
         * @param {UsersPicturesApiPicture1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async picture_2(requestParameters: UsersPicturesApiPicture1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.picture_2(requestParameters.portraitsetId, requestParameters.userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method edits the specified portrait image belonging to the authenticated user.
         * @summary Edit a picture in the user\'s account
         * @param {UsersPicturesApiPicture2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async picture_3(requestParameters: UsersPicturesApiPicture2Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Picture>> {
            const editPictureRequest: EditPictureRequest = {
                active: requestParameters.active
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.picture_3(requestParameters.portraitsetId, requestParameters.userId, editPictureRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every portrait image belonging to the authenticated user.
         * @summary Get all the pictures that belong to the user
         * @param {UsersPicturesApiPicturesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pictures(requestParameters: UsersPicturesApiPicturesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Picture>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pictures(requestParameters.userId, requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method removes the specified portrait image from the authenticated user\'s Vimeo account.
         * @summary Delete a picture from the user\'s account
         * @param {UsersPicturesApiRemovePortraitImageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removePortraitImage(requestParameters: UsersPicturesApiRemovePortraitImageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removePortraitImage(requestParameters.portraitsetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersPicturesApi - factory interface
 * @export
 */
export const UsersPicturesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersPicturesApiFp(configuration)
    return {
        /**
         * This method adds a portrait image to the authenticated user\'s Vimeo account. Send the binary data of the image file to the location that you receive from the **link** field in the response. For step-by-step instructions, see [Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails#uploading-a-thumbnail-step-3).
         * @summary Add a picture to the user\'s account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPortraitImage(options?: AxiosRequestConfig): AxiosPromise<Picture> {
            return localVarFp.addPortraitImage(options).then((request) => request(axios, basePath));
        },
        /**
         * This method edits the specified portrait image belonging to the authenticated user.
         * @summary Edit a picture in the user\'s account
         * @param {UsersPicturesApiEditPortraitImageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editPortraitImage(requestParameters: UsersPicturesApiEditPortraitImageRequest, options?: AxiosRequestConfig): AxiosPromise<Picture> {
            return localVarFp.editPortraitImage(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns a single portrait image belonging to the authenticated user.
         * @summary Get a specific picture that belongs to the user
         * @param {UsersPicturesApiGetSpecificPictureBelongingToUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificPictureBelongingToUser(requestParameters: UsersPicturesApiGetSpecificPictureBelongingToUserRequest, options?: AxiosRequestConfig): AxiosPromise<Picture> {
            return localVarFp.getSpecificPictureBelongingToUser(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every portrait image belonging to the authenticated user.
         * @summary Get all the pictures that belong to the user
         * @param {UsersPicturesApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(requestParameters: UsersPicturesApiListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<Picture>> {
            return localVarFp.list(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method adds a portrait image to the authenticated user\'s Vimeo account. Send the binary data of the image file to the location that you receive from the **link** field in the response. For step-by-step instructions, see [Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails#uploading-a-thumbnail-step-3).
         * @summary Add a picture to the user\'s account
         * @param {UsersPicturesApiPictureRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        picture(requestParameters: UsersPicturesApiPictureRequest, options?: AxiosRequestConfig): AxiosPromise<Picture> {
            return localVarFp.picture(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns a single portrait image belonging to the authenticated user.
         * @summary Get a specific picture that belongs to the user
         * @param {UsersPicturesApiPicture0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        picture_1(requestParameters: UsersPicturesApiPicture0Request, options?: AxiosRequestConfig): AxiosPromise<Picture> {
            return localVarFp.picture_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method removes the specified portrait image from the authenticated user\'s Vimeo account.
         * @summary Delete a picture from the user\'s account
         * @param {UsersPicturesApiPicture1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        picture_2(requestParameters: UsersPicturesApiPicture1Request, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.picture_2(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method edits the specified portrait image belonging to the authenticated user.
         * @summary Edit a picture in the user\'s account
         * @param {UsersPicturesApiPicture2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        picture_3(requestParameters: UsersPicturesApiPicture2Request, options?: AxiosRequestConfig): AxiosPromise<Picture> {
            return localVarFp.picture_3(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every portrait image belonging to the authenticated user.
         * @summary Get all the pictures that belong to the user
         * @param {UsersPicturesApiPicturesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pictures(requestParameters: UsersPicturesApiPicturesRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Picture>> {
            return localVarFp.pictures(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method removes the specified portrait image from the authenticated user\'s Vimeo account.
         * @summary Delete a picture from the user\'s account
         * @param {UsersPicturesApiRemovePortraitImageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePortraitImage(requestParameters: UsersPicturesApiRemovePortraitImageRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removePortraitImage(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for editPortraitImage operation in UsersPicturesApi.
 * @export
 * @interface UsersPicturesApiEditPortraitImageRequest
 */
export type UsersPicturesApiEditPortraitImageRequest = {
    
    /**
    * The ID of the picture.
    * @type {number}
    * @memberof UsersPicturesApiEditPortraitImage
    */
    readonly portraitsetId: number
    
} & UsersPicturesEditPortraitImageRequest

/**
 * Request parameters for getSpecificPictureBelongingToUser operation in UsersPicturesApi.
 * @export
 * @interface UsersPicturesApiGetSpecificPictureBelongingToUserRequest
 */
export type UsersPicturesApiGetSpecificPictureBelongingToUserRequest = {
    
    /**
    * The ID of the picture.
    * @type {number}
    * @memberof UsersPicturesApiGetSpecificPictureBelongingToUser
    */
    readonly portraitsetId: number
    
}

/**
 * Request parameters for list operation in UsersPicturesApi.
 * @export
 * @interface UsersPicturesApiListRequest
 */
export type UsersPicturesApiListRequest = {
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof UsersPicturesApiList
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof UsersPicturesApiList
    */
    readonly perPage?: number
    
}

/**
 * Request parameters for picture operation in UsersPicturesApi.
 * @export
 * @interface UsersPicturesApiPictureRequest
 */
export type UsersPicturesApiPictureRequest = {
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof UsersPicturesApiPicture
    */
    readonly userId: number
    
}

/**
 * Request parameters for picture_1 operation in UsersPicturesApi.
 * @export
 * @interface UsersPicturesApiPicture0Request
 */
export type UsersPicturesApiPicture0Request = {
    
    /**
    * The ID of the picture.
    * @type {number}
    * @memberof UsersPicturesApiPicture0
    */
    readonly portraitsetId: number
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof UsersPicturesApiPicture0
    */
    readonly userId: number
    
}

/**
 * Request parameters for picture_2 operation in UsersPicturesApi.
 * @export
 * @interface UsersPicturesApiPicture1Request
 */
export type UsersPicturesApiPicture1Request = {
    
    /**
    * The ID of the picture.
    * @type {number}
    * @memberof UsersPicturesApiPicture1
    */
    readonly portraitsetId: number
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof UsersPicturesApiPicture1
    */
    readonly userId: number
    
}

/**
 * Request parameters for picture_3 operation in UsersPicturesApi.
 * @export
 * @interface UsersPicturesApiPicture2Request
 */
export type UsersPicturesApiPicture2Request = {
    
    /**
    * The ID of the picture.
    * @type {number}
    * @memberof UsersPicturesApiPicture2
    */
    readonly portraitsetId: number
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof UsersPicturesApiPicture2
    */
    readonly userId: number
    
} & EditPictureRequest

/**
 * Request parameters for pictures operation in UsersPicturesApi.
 * @export
 * @interface UsersPicturesApiPicturesRequest
 */
export type UsersPicturesApiPicturesRequest = {
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof UsersPicturesApiPictures
    */
    readonly userId: number
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof UsersPicturesApiPictures
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof UsersPicturesApiPictures
    */
    readonly perPage?: number
    
}

/**
 * Request parameters for removePortraitImage operation in UsersPicturesApi.
 * @export
 * @interface UsersPicturesApiRemovePortraitImageRequest
 */
export type UsersPicturesApiRemovePortraitImageRequest = {
    
    /**
    * The ID of the picture.
    * @type {number}
    * @memberof UsersPicturesApiRemovePortraitImage
    */
    readonly portraitsetId: number
    
}

/**
 * UsersPicturesApiGenerated - object-oriented interface
 * @export
 * @class UsersPicturesApiGenerated
 * @extends {BaseAPI}
 */
export class UsersPicturesApiGenerated extends BaseAPI {
    /**
     * This method adds a portrait image to the authenticated user\'s Vimeo account. Send the binary data of the image file to the location that you receive from the **link** field in the response. For step-by-step instructions, see [Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails#uploading-a-thumbnail-step-3).
     * @summary Add a picture to the user\'s account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPicturesApiGenerated
     */
    public addPortraitImage(options?: AxiosRequestConfig) {
        return UsersPicturesApiFp(this.configuration).addPortraitImage(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method edits the specified portrait image belonging to the authenticated user.
     * @summary Edit a picture in the user\'s account
     * @param {UsersPicturesApiEditPortraitImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPicturesApiGenerated
     */
    public editPortraitImage(requestParameters: UsersPicturesApiEditPortraitImageRequest, options?: AxiosRequestConfig) {
        return UsersPicturesApiFp(this.configuration).editPortraitImage(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns a single portrait image belonging to the authenticated user.
     * @summary Get a specific picture that belongs to the user
     * @param {UsersPicturesApiGetSpecificPictureBelongingToUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPicturesApiGenerated
     */
    public getSpecificPictureBelongingToUser(requestParameters: UsersPicturesApiGetSpecificPictureBelongingToUserRequest, options?: AxiosRequestConfig) {
        return UsersPicturesApiFp(this.configuration).getSpecificPictureBelongingToUser(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every portrait image belonging to the authenticated user.
     * @summary Get all the pictures that belong to the user
     * @param {UsersPicturesApiListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPicturesApiGenerated
     */
    public list(requestParameters: UsersPicturesApiListRequest = {}, options?: AxiosRequestConfig) {
        return UsersPicturesApiFp(this.configuration).list(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method adds a portrait image to the authenticated user\'s Vimeo account. Send the binary data of the image file to the location that you receive from the **link** field in the response. For step-by-step instructions, see [Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails#uploading-a-thumbnail-step-3).
     * @summary Add a picture to the user\'s account
     * @param {UsersPicturesApiPictureRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPicturesApiGenerated
     */
    public picture(requestParameters: UsersPicturesApiPictureRequest, options?: AxiosRequestConfig) {
        return UsersPicturesApiFp(this.configuration).picture(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns a single portrait image belonging to the authenticated user.
     * @summary Get a specific picture that belongs to the user
     * @param {UsersPicturesApiPicture0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPicturesApiGenerated
     */
    public picture_1(requestParameters: UsersPicturesApiPicture0Request, options?: AxiosRequestConfig) {
        return UsersPicturesApiFp(this.configuration).picture_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method removes the specified portrait image from the authenticated user\'s Vimeo account.
     * @summary Delete a picture from the user\'s account
     * @param {UsersPicturesApiPicture1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPicturesApiGenerated
     */
    public picture_2(requestParameters: UsersPicturesApiPicture1Request, options?: AxiosRequestConfig) {
        return UsersPicturesApiFp(this.configuration).picture_2(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method edits the specified portrait image belonging to the authenticated user.
     * @summary Edit a picture in the user\'s account
     * @param {UsersPicturesApiPicture2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPicturesApiGenerated
     */
    public picture_3(requestParameters: UsersPicturesApiPicture2Request, options?: AxiosRequestConfig) {
        return UsersPicturesApiFp(this.configuration).picture_3(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every portrait image belonging to the authenticated user.
     * @summary Get all the pictures that belong to the user
     * @param {UsersPicturesApiPicturesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPicturesApiGenerated
     */
    public pictures(requestParameters: UsersPicturesApiPicturesRequest, options?: AxiosRequestConfig) {
        return UsersPicturesApiFp(this.configuration).pictures(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method removes the specified portrait image from the authenticated user\'s Vimeo account.
     * @summary Delete a picture from the user\'s account
     * @param {UsersPicturesApiRemovePortraitImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPicturesApiGenerated
     */
    public removePortraitImage(requestParameters: UsersPicturesApiRemovePortraitImageRequest, options?: AxiosRequestConfig) {
        return UsersPicturesApiFp(this.configuration).removePortraitImage(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
