/* tslint:disable */
/* eslint-disable */
/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

The version of the OpenAPI document: 3.4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { LiveEventAutomatedClosedCaptions } from '../models';
// @ts-ignore
import { LiveEventAutomatedClosedCaptionsEditPreferenceForEventRequest } from '../models';
// @ts-ignore
import { LiveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1 } from '../models';
// @ts-ignore
import { LiveEventAutomatedClosedCaptionsEditPreferenceRequest } from '../models';
// @ts-ignore
import { ModelError } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * LiveEventAutomatedClosedCaptionsApi - axios parameter creator
 * @export
 */
export const LiveEventAutomatedClosedCaptionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method edits the automated closed captions preference for the specified event.
         * @summary Edit the automated closed captions preference of a live event
         * @param {number} liveEventId The ID of the event.
         * @param {LiveEventAutomatedClosedCaptionsEditPreferenceRequest} liveEventAutomatedClosedCaptionsEditPreferenceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editPreference: async (liveEventId: number, liveEventAutomatedClosedCaptionsEditPreferenceRequest: LiveEventAutomatedClosedCaptionsEditPreferenceRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveEventId' is not null or undefined
            assertParamExists('editPreference', 'liveEventId', liveEventId)
            // verify required parameter 'liveEventAutomatedClosedCaptionsEditPreferenceRequest' is not null or undefined
            assertParamExists('editPreference', 'liveEventAutomatedClosedCaptionsEditPreferenceRequest', liveEventAutomatedClosedCaptionsEditPreferenceRequest)
            const localVarPath = `/live_events/{live_event_id}/auto_cc`
                .replace(`{${"live_event_id"}}`, encodeURIComponent(String(liveEventId !== undefined ? liveEventId : `-live_event_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/application/vnd.vimeo.live.auto_cc+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: liveEventAutomatedClosedCaptionsEditPreferenceRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/live_events/{live_event_id}/auto_cc',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(liveEventAutomatedClosedCaptionsEditPreferenceRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method edits the automated closed captions preference for the specified event.
         * @summary Edit the automated closed captions preference of a live event
         * @param {number} liveEventId The ID of the event.
         * @param {LiveEventAutomatedClosedCaptionsEditPreferenceForEventRequest} liveEventAutomatedClosedCaptionsEditPreferenceForEventRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editPreferenceForEvent: async (liveEventId: number, liveEventAutomatedClosedCaptionsEditPreferenceForEventRequest: LiveEventAutomatedClosedCaptionsEditPreferenceForEventRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveEventId' is not null or undefined
            assertParamExists('editPreferenceForEvent', 'liveEventId', liveEventId)
            // verify required parameter 'liveEventAutomatedClosedCaptionsEditPreferenceForEventRequest' is not null or undefined
            assertParamExists('editPreferenceForEvent', 'liveEventAutomatedClosedCaptionsEditPreferenceForEventRequest', liveEventAutomatedClosedCaptionsEditPreferenceForEventRequest)
            const localVarPath = `/me/live_events/{live_event_id}/auto_cc`
                .replace(`{${"live_event_id"}}`, encodeURIComponent(String(liveEventId !== undefined ? liveEventId : `-live_event_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/application/vnd.vimeo.live.auto_cc+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: liveEventAutomatedClosedCaptionsEditPreferenceForEventRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/live_events/{live_event_id}/auto_cc',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(liveEventAutomatedClosedCaptionsEditPreferenceForEventRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method edits the automated closed captions preference for the specified event.
         * @summary Edit the automated closed captions preference of a live event
         * @param {number} liveEventId The ID of the event.
         * @param {number} userId The ID of the user.
         * @param {LiveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1} liveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editPreferenceForEvent_1: async (liveEventId: number, userId: number, liveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1: LiveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveEventId' is not null or undefined
            assertParamExists('editPreferenceForEvent_1', 'liveEventId', liveEventId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('editPreferenceForEvent_1', 'userId', userId)
            // verify required parameter 'liveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1' is not null or undefined
            assertParamExists('editPreferenceForEvent_1', 'liveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1', liveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1)
            const localVarPath = `/users/{user_id}/live_events/{live_event_id}/auto_cc`
                .replace(`{${"live_event_id"}}`, encodeURIComponent(String(liveEventId !== undefined ? liveEventId : `-live_event_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/application/vnd.vimeo.live.auto_cc+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: liveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/live_events/{live_event_id}/auto_cc',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(liveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LiveEventAutomatedClosedCaptionsApi - functional programming interface
 * @export
 */
export const LiveEventAutomatedClosedCaptionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LiveEventAutomatedClosedCaptionsApiAxiosParamCreator(configuration)
    return {
        /**
         * This method edits the automated closed captions preference for the specified event.
         * @summary Edit the automated closed captions preference of a live event
         * @param {LiveEventAutomatedClosedCaptionsApiEditPreferenceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editPreference(requestParameters: LiveEventAutomatedClosedCaptionsApiEditPreferenceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LiveEventAutomatedClosedCaptions>> {
            const liveEventAutomatedClosedCaptionsEditPreferenceRequest: LiveEventAutomatedClosedCaptionsEditPreferenceRequest = {
                auto_cc_enabled: requestParameters.auto_cc_enabled,
                auto_cc_keywords: requestParameters.auto_cc_keywords,
                auto_cc_lang: requestParameters.auto_cc_lang
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.editPreference(requestParameters.liveEventId, liveEventAutomatedClosedCaptionsEditPreferenceRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method edits the automated closed captions preference for the specified event.
         * @summary Edit the automated closed captions preference of a live event
         * @param {LiveEventAutomatedClosedCaptionsApiEditPreferenceForEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editPreferenceForEvent(requestParameters: LiveEventAutomatedClosedCaptionsApiEditPreferenceForEventRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LiveEventAutomatedClosedCaptions>> {
            const liveEventAutomatedClosedCaptionsEditPreferenceForEventRequest: LiveEventAutomatedClosedCaptionsEditPreferenceForEventRequest = {
                auto_cc_enabled: requestParameters.auto_cc_enabled,
                auto_cc_keywords: requestParameters.auto_cc_keywords,
                auto_cc_lang: requestParameters.auto_cc_lang
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.editPreferenceForEvent(requestParameters.liveEventId, liveEventAutomatedClosedCaptionsEditPreferenceForEventRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method edits the automated closed captions preference for the specified event.
         * @summary Edit the automated closed captions preference of a live event
         * @param {LiveEventAutomatedClosedCaptionsApiEditPreferenceForEvent0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editPreferenceForEvent_1(requestParameters: LiveEventAutomatedClosedCaptionsApiEditPreferenceForEvent0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LiveEventAutomatedClosedCaptions>> {
            const liveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1: LiveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1 = {
                auto_cc_enabled: requestParameters.auto_cc_enabled,
                auto_cc_keywords: requestParameters.auto_cc_keywords,
                auto_cc_lang: requestParameters.auto_cc_lang
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.editPreferenceForEvent_1(requestParameters.liveEventId, requestParameters.userId, liveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LiveEventAutomatedClosedCaptionsApi - factory interface
 * @export
 */
export const LiveEventAutomatedClosedCaptionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LiveEventAutomatedClosedCaptionsApiFp(configuration)
    return {
        /**
         * This method edits the automated closed captions preference for the specified event.
         * @summary Edit the automated closed captions preference of a live event
         * @param {LiveEventAutomatedClosedCaptionsApiEditPreferenceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editPreference(requestParameters: LiveEventAutomatedClosedCaptionsApiEditPreferenceRequest, options?: AxiosRequestConfig): AxiosPromise<LiveEventAutomatedClosedCaptions> {
            return localVarFp.editPreference(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method edits the automated closed captions preference for the specified event.
         * @summary Edit the automated closed captions preference of a live event
         * @param {LiveEventAutomatedClosedCaptionsApiEditPreferenceForEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editPreferenceForEvent(requestParameters: LiveEventAutomatedClosedCaptionsApiEditPreferenceForEventRequest, options?: AxiosRequestConfig): AxiosPromise<LiveEventAutomatedClosedCaptions> {
            return localVarFp.editPreferenceForEvent(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method edits the automated closed captions preference for the specified event.
         * @summary Edit the automated closed captions preference of a live event
         * @param {LiveEventAutomatedClosedCaptionsApiEditPreferenceForEvent0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editPreferenceForEvent_1(requestParameters: LiveEventAutomatedClosedCaptionsApiEditPreferenceForEvent0Request, options?: AxiosRequestConfig): AxiosPromise<LiveEventAutomatedClosedCaptions> {
            return localVarFp.editPreferenceForEvent_1(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for editPreference operation in LiveEventAutomatedClosedCaptionsApi.
 * @export
 * @interface LiveEventAutomatedClosedCaptionsApiEditPreferenceRequest
 */
export type LiveEventAutomatedClosedCaptionsApiEditPreferenceRequest = {
    
    /**
    * The ID of the event.
    * @type {number}
    * @memberof LiveEventAutomatedClosedCaptionsApiEditPreference
    */
    readonly liveEventId: number
    
} & LiveEventAutomatedClosedCaptionsEditPreferenceRequest

/**
 * Request parameters for editPreferenceForEvent operation in LiveEventAutomatedClosedCaptionsApi.
 * @export
 * @interface LiveEventAutomatedClosedCaptionsApiEditPreferenceForEventRequest
 */
export type LiveEventAutomatedClosedCaptionsApiEditPreferenceForEventRequest = {
    
    /**
    * The ID of the event.
    * @type {number}
    * @memberof LiveEventAutomatedClosedCaptionsApiEditPreferenceForEvent
    */
    readonly liveEventId: number
    
} & LiveEventAutomatedClosedCaptionsEditPreferenceForEventRequest

/**
 * Request parameters for editPreferenceForEvent_1 operation in LiveEventAutomatedClosedCaptionsApi.
 * @export
 * @interface LiveEventAutomatedClosedCaptionsApiEditPreferenceForEvent0Request
 */
export type LiveEventAutomatedClosedCaptionsApiEditPreferenceForEvent0Request = {
    
    /**
    * The ID of the event.
    * @type {number}
    * @memberof LiveEventAutomatedClosedCaptionsApiEditPreferenceForEvent0
    */
    readonly liveEventId: number
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof LiveEventAutomatedClosedCaptionsApiEditPreferenceForEvent0
    */
    readonly userId: number
    
} & LiveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1

/**
 * LiveEventAutomatedClosedCaptionsApiGenerated - object-oriented interface
 * @export
 * @class LiveEventAutomatedClosedCaptionsApiGenerated
 * @extends {BaseAPI}
 */
export class LiveEventAutomatedClosedCaptionsApiGenerated extends BaseAPI {
    /**
     * This method edits the automated closed captions preference for the specified event.
     * @summary Edit the automated closed captions preference of a live event
     * @param {LiveEventAutomatedClosedCaptionsApiEditPreferenceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEventAutomatedClosedCaptionsApiGenerated
     */
    public editPreference(requestParameters: LiveEventAutomatedClosedCaptionsApiEditPreferenceRequest, options?: AxiosRequestConfig) {
        return LiveEventAutomatedClosedCaptionsApiFp(this.configuration).editPreference(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method edits the automated closed captions preference for the specified event.
     * @summary Edit the automated closed captions preference of a live event
     * @param {LiveEventAutomatedClosedCaptionsApiEditPreferenceForEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEventAutomatedClosedCaptionsApiGenerated
     */
    public editPreferenceForEvent(requestParameters: LiveEventAutomatedClosedCaptionsApiEditPreferenceForEventRequest, options?: AxiosRequestConfig) {
        return LiveEventAutomatedClosedCaptionsApiFp(this.configuration).editPreferenceForEvent(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method edits the automated closed captions preference for the specified event.
     * @summary Edit the automated closed captions preference of a live event
     * @param {LiveEventAutomatedClosedCaptionsApiEditPreferenceForEvent0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEventAutomatedClosedCaptionsApiGenerated
     */
    public editPreferenceForEvent_1(requestParameters: LiveEventAutomatedClosedCaptionsApiEditPreferenceForEvent0Request, options?: AxiosRequestConfig) {
        return LiveEventAutomatedClosedCaptionsApiFp(this.configuration).editPreferenceForEvent_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
