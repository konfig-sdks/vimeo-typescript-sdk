/* tslint:disable */
/* eslint-disable */
/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

The version of the OpenAPI document: 3.4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Analytics } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * UsersAnalyticsApi - axios parameter creator
 * @export
 */
export const UsersAnalyticsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method returns analytic metrics for the authenticated user.
         * @summary Get analytics for the user
         * @param {number} userId The ID of the user.
         * @param {'country' | 'device_type' | 'embed_domain' | 'total' | 'video'} dimension The data dimension by which to group the results.  Option descriptions:  * &#x60;country&#x60; - Group the results by country.  * &#x60;device_type&#x60; - Group the results by device type.  * &#x60;embed_domain&#x60; - Group the results by embed domain.  * &#x60;total&#x60; - Group the results by the time range provided.  * &#x60;video&#x60; - Group the results by video. 
         * @param {string} from The start date of the range of results in ISO 8601 format.
         * @param {string} to The end date of the range of results in ISO 8601 format.
         * @param {'asc' | 'desc'} [direction] The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order. 
         * @param {string} [filterContent] A comma-separated list of video, folder, or event URIs to filter.
         * @param {Array<string>} [filterCountries] A comma-separated list of country codes in ISO-3166 format to filter on.
         * @param {Array<string>} [filterDeviceTypes] A comma-separated list of device types to filter on.
         * @param {Array<string>} [filterEmbedDomains] A comma-separated list of domain names to filter on.
         * @param {Array<string>} [filterStreamingTypes] A comma-separated list of streaming types to filter on.
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The maximum number of items returned from the request, up to a limit of 1000 items. The default value is &#x60;50&#x60;.
         * @param {'average_percent_watched' | 'average_time_watched' | 'comments' | 'country' | 'default' | 'device_type' | 'downloads' | 'embed_domain' | 'finishes' | 'impressions' | 'like' | 'time' | 'total_time_watched' | 'unique_impressions' | 'unique_viewers' | 'video' | 'views'} [sort] The way to sort the results.  Option descriptions:  * &#x60;average_percent_watched&#x60; - Sort the results by mean seconds played.  * &#x60;average_time_watched&#x60; - Sort the results by mean percentage played.  * &#x60;comments&#x60; - Sort the results by the number of comments.  * &#x60;country&#x60; - Sort the results by country.  * &#x60;default&#x60; - Sort the results by the values of both the **dimension** and **time_interval** fields.  * &#x60;device_type&#x60; - Sort the results by device type.  * &#x60;downloads&#x60; - Sort the results by the number of downloads.  * &#x60;embed_domain&#x60; - Sort the results by embed domain.  * &#x60;finishes&#x60; - Sort the results by the number of complete plays.  * &#x60;impressions&#x60; - Sort the results by the number of impressions.  * &#x60;like&#x60; - Sort the results by the number of likes.  * &#x60;time&#x60; - Sort the results by the value of the **start_date** field. This option is available only when the value of **time_interval** isn\&#39;t &#x60;none&#x60;.  * &#x60;total_time_watched&#x60; - Sort the results by total seconds played.  * &#x60;unique_impressions&#x60; - Sort the results by unique impressions.  * &#x60;unique_viewers&#x60; - Sort the results by unique viewers.  * &#x60;video&#x60; - Sort the results by video ID.  * &#x60;views&#x60; - Sort the results by the number of views. 
         * @param {'day' | 'month' | 'none' | 'week' | 'year'} [timeInterval] The interval by which to aggregate the data according to the specified data dimension. The default value is &#x60;none&#x60;.  Option descriptions:  * &#x60;day&#x60; - Aggregate the results by day according to the specified data dimension.  * &#x60;month&#x60; - Aggregate the results by month according to the specified data dimension.  * &#x60;none&#x60; - The results are not aggregated by time interval.  * &#x60;week&#x60; - Aggregate the results by week according to the specified data dimension.  * &#x60;year&#x60; - Aggregate the results by year according to the specified data dimension. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetrics: async (userId: number, dimension: 'country' | 'device_type' | 'embed_domain' | 'total' | 'video', from: string, to: string, direction?: 'asc' | 'desc', filterContent?: string, filterCountries?: Array<string>, filterDeviceTypes?: Array<string>, filterEmbedDomains?: Array<string>, filterStreamingTypes?: Array<string>, page?: number, perPage?: number, sort?: 'average_percent_watched' | 'average_time_watched' | 'comments' | 'country' | 'default' | 'device_type' | 'downloads' | 'embed_domain' | 'finishes' | 'impressions' | 'like' | 'time' | 'total_time_watched' | 'unique_impressions' | 'unique_viewers' | 'video' | 'views', timeInterval?: 'day' | 'month' | 'none' | 'week' | 'year', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getMetrics', 'userId', userId)
            // verify required parameter 'dimension' is not null or undefined
            assertParamExists('getMetrics', 'dimension', dimension)
            // verify required parameter 'from' is not null or undefined
            assertParamExists('getMetrics', 'from', from)
            // verify required parameter 'to' is not null or undefined
            assertParamExists('getMetrics', 'to', to)
            const localVarPath = `/users/{user_id}/analytics`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["stats"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["stats"], configuration)
            if (dimension !== undefined) {
                localVarQueryParameter['dimension'] = dimension;
            }

            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (filterContent !== undefined) {
                localVarQueryParameter['filter_content'] = filterContent;
            }

            if (filterCountries) {
                localVarQueryParameter['filter_countries'] = filterCountries;
            }

            if (filterDeviceTypes) {
                localVarQueryParameter['filter_device_types'] = filterDeviceTypes;
            }

            if (filterEmbedDomains) {
                localVarQueryParameter['filter_embed_domains'] = filterEmbedDomains;
            }

            if (filterStreamingTypes) {
                localVarQueryParameter['filter_streaming_types'] = filterStreamingTypes;
            }

            if (from !== undefined) {
                localVarQueryParameter['from'] = from;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (timeInterval !== undefined) {
                localVarQueryParameter['time_interval'] = timeInterval;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = to;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/analytics',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns analytic metrics for the authenticated user.
         * @summary Get analytics for the user
         * @param {'country' | 'device_type' | 'embed_domain' | 'total' | 'video'} dimension The data dimension by which to group the results.  Option descriptions:  * &#x60;country&#x60; - Group the results by country.  * &#x60;device_type&#x60; - Group the results by device type.  * &#x60;embed_domain&#x60; - Group the results by embed domain.  * &#x60;total&#x60; - Group the results by the time range provided.  * &#x60;video&#x60; - Group the results by video. 
         * @param {string} from The start date of the range of results in ISO 8601 format.
         * @param {string} to The end date of the range of results in ISO 8601 format.
         * @param {'asc' | 'desc'} [direction] The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order. 
         * @param {string} [filterContent] A comma-separated list of video, folder, or event URIs to filter.
         * @param {Array<string>} [filterCountries] A comma-separated list of country codes in ISO-3166 format to filter on.
         * @param {Array<string>} [filterDeviceTypes] A comma-separated list of device types to filter on.
         * @param {Array<string>} [filterEmbedDomains] A comma-separated list of domain names to filter on.
         * @param {Array<string>} [filterStreamingTypes] A comma-separated list of streaming types to filter on.
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The maximum number of items returned from the request, up to a limit of 1000 items. The default value is &#x60;50&#x60;.
         * @param {'average_percent_watched' | 'average_time_watched' | 'comments' | 'country' | 'default' | 'device_type' | 'downloads' | 'embed_domain' | 'finishes' | 'impressions' | 'like' | 'time' | 'total_time_watched' | 'unique_impressions' | 'unique_viewers' | 'video' | 'views'} [sort] The way to sort the results.  Option descriptions:  * &#x60;average_percent_watched&#x60; - Sort the results by mean seconds played.  * &#x60;average_time_watched&#x60; - Sort the results by mean percentage played.  * &#x60;comments&#x60; - Sort the results by the number of comments.  * &#x60;country&#x60; - Sort the results by country.  * &#x60;default&#x60; - Sort the results by the values of both the **dimension** and **time_interval** fields.  * &#x60;device_type&#x60; - Sort the results by device type.  * &#x60;downloads&#x60; - Sort the results by the number of downloads.  * &#x60;embed_domain&#x60; - Sort the results by embed domain.  * &#x60;finishes&#x60; - Sort the results by the number of complete plays.  * &#x60;impressions&#x60; - Sort the results by the number of impressions.  * &#x60;like&#x60; - Sort the results by the number of likes.  * &#x60;time&#x60; - Sort the results by the value of the **start_date** field. This option is available only when the value of **time_interval** isn\&#39;t &#x60;none&#x60;.  * &#x60;total_time_watched&#x60; - Sort the results by total seconds played.  * &#x60;unique_impressions&#x60; - Sort the results by unique impressions.  * &#x60;unique_viewers&#x60; - Sort the results by unique viewers.  * &#x60;video&#x60; - Sort the results by video ID.  * &#x60;views&#x60; - Sort the results by the number of views. 
         * @param {'day' | 'month' | 'none' | 'week' | 'year'} [timeInterval] The interval by which to aggregate the data according to the specified data dimension. The default value is &#x60;none&#x60;.  Option descriptions:  * &#x60;day&#x60; - Aggregate the results by day according to the specified data dimension.  * &#x60;month&#x60; - Aggregate the results by month according to the specified data dimension.  * &#x60;none&#x60; - The results are not aggregated by time interval.  * &#x60;week&#x60; - Aggregate the results by week according to the specified data dimension.  * &#x60;year&#x60; - Aggregate the results by year according to the specified data dimension. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserMetrics: async (dimension: 'country' | 'device_type' | 'embed_domain' | 'total' | 'video', from: string, to: string, direction?: 'asc' | 'desc', filterContent?: string, filterCountries?: Array<string>, filterDeviceTypes?: Array<string>, filterEmbedDomains?: Array<string>, filterStreamingTypes?: Array<string>, page?: number, perPage?: number, sort?: 'average_percent_watched' | 'average_time_watched' | 'comments' | 'country' | 'default' | 'device_type' | 'downloads' | 'embed_domain' | 'finishes' | 'impressions' | 'like' | 'time' | 'total_time_watched' | 'unique_impressions' | 'unique_viewers' | 'video' | 'views', timeInterval?: 'day' | 'month' | 'none' | 'week' | 'year', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dimension' is not null or undefined
            assertParamExists('getUserMetrics', 'dimension', dimension)
            // verify required parameter 'from' is not null or undefined
            assertParamExists('getUserMetrics', 'from', from)
            // verify required parameter 'to' is not null or undefined
            assertParamExists('getUserMetrics', 'to', to)
            const localVarPath = `/me/analytics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["stats"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["stats"], configuration)
            if (dimension !== undefined) {
                localVarQueryParameter['dimension'] = dimension;
            }

            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (filterContent !== undefined) {
                localVarQueryParameter['filter_content'] = filterContent;
            }

            if (filterCountries) {
                localVarQueryParameter['filter_countries'] = filterCountries;
            }

            if (filterDeviceTypes) {
                localVarQueryParameter['filter_device_types'] = filterDeviceTypes;
            }

            if (filterEmbedDomains) {
                localVarQueryParameter['filter_embed_domains'] = filterEmbedDomains;
            }

            if (filterStreamingTypes) {
                localVarQueryParameter['filter_streaming_types'] = filterStreamingTypes;
            }

            if (from !== undefined) {
                localVarQueryParameter['from'] = from;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (timeInterval !== undefined) {
                localVarQueryParameter['time_interval'] = timeInterval;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = to;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/analytics',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersAnalyticsApi - functional programming interface
 * @export
 */
export const UsersAnalyticsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersAnalyticsApiAxiosParamCreator(configuration)
    return {
        /**
         * This method returns analytic metrics for the authenticated user.
         * @summary Get analytics for the user
         * @param {UsersAnalyticsApiGetMetricsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMetrics(requestParameters: UsersAnalyticsApiGetMetricsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Analytics>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMetrics(requestParameters.userId, requestParameters.dimension, requestParameters.from, requestParameters.to, requestParameters.direction, requestParameters.filterContent, requestParameters.filterCountries, requestParameters.filterDeviceTypes, requestParameters.filterEmbedDomains, requestParameters.filterStreamingTypes, requestParameters.page, requestParameters.perPage, requestParameters.sort, requestParameters.timeInterval, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns analytic metrics for the authenticated user.
         * @summary Get analytics for the user
         * @param {UsersAnalyticsApiGetUserMetricsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserMetrics(requestParameters: UsersAnalyticsApiGetUserMetricsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Analytics>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserMetrics(requestParameters.dimension, requestParameters.from, requestParameters.to, requestParameters.direction, requestParameters.filterContent, requestParameters.filterCountries, requestParameters.filterDeviceTypes, requestParameters.filterEmbedDomains, requestParameters.filterStreamingTypes, requestParameters.page, requestParameters.perPage, requestParameters.sort, requestParameters.timeInterval, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersAnalyticsApi - factory interface
 * @export
 */
export const UsersAnalyticsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersAnalyticsApiFp(configuration)
    return {
        /**
         * This method returns analytic metrics for the authenticated user.
         * @summary Get analytics for the user
         * @param {UsersAnalyticsApiGetMetricsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetrics(requestParameters: UsersAnalyticsApiGetMetricsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Analytics>> {
            return localVarFp.getMetrics(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns analytic metrics for the authenticated user.
         * @summary Get analytics for the user
         * @param {UsersAnalyticsApiGetUserMetricsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserMetrics(requestParameters: UsersAnalyticsApiGetUserMetricsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Analytics>> {
            return localVarFp.getUserMetrics(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getMetrics operation in UsersAnalyticsApi.
 * @export
 * @interface UsersAnalyticsApiGetMetricsRequest
 */
export type UsersAnalyticsApiGetMetricsRequest = {
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof UsersAnalyticsApiGetMetrics
    */
    readonly userId: number
    
    /**
    * The data dimension by which to group the results.  Option descriptions:  * `country` - Group the results by country.  * `device_type` - Group the results by device type.  * `embed_domain` - Group the results by embed domain.  * `total` - Group the results by the time range provided.  * `video` - Group the results by video. 
    * @type {'country' | 'device_type' | 'embed_domain' | 'total' | 'video'}
    * @memberof UsersAnalyticsApiGetMetrics
    */
    readonly dimension: 'country' | 'device_type' | 'embed_domain' | 'total' | 'video'
    
    /**
    * The start date of the range of results in ISO 8601 format.
    * @type {string}
    * @memberof UsersAnalyticsApiGetMetrics
    */
    readonly from: string
    
    /**
    * The end date of the range of results in ISO 8601 format.
    * @type {string}
    * @memberof UsersAnalyticsApiGetMetrics
    */
    readonly to: string
    
    /**
    * The sort direction of the results.  Option descriptions:  * `asc` - Sort the results in ascending order.  * `desc` - Sort the results in descending order. 
    * @type {'asc' | 'desc'}
    * @memberof UsersAnalyticsApiGetMetrics
    */
    readonly direction?: 'asc' | 'desc'
    
    /**
    * A comma-separated list of video, folder, or event URIs to filter.
    * @type {string}
    * @memberof UsersAnalyticsApiGetMetrics
    */
    readonly filterContent?: string
    
    /**
    * A comma-separated list of country codes in ISO-3166 format to filter on.
    * @type {Array<string>}
    * @memberof UsersAnalyticsApiGetMetrics
    */
    readonly filterCountries?: Array<string>
    
    /**
    * A comma-separated list of device types to filter on.
    * @type {Array<string>}
    * @memberof UsersAnalyticsApiGetMetrics
    */
    readonly filterDeviceTypes?: Array<string>
    
    /**
    * A comma-separated list of domain names to filter on.
    * @type {Array<string>}
    * @memberof UsersAnalyticsApiGetMetrics
    */
    readonly filterEmbedDomains?: Array<string>
    
    /**
    * A comma-separated list of streaming types to filter on.
    * @type {Array<string>}
    * @memberof UsersAnalyticsApiGetMetrics
    */
    readonly filterStreamingTypes?: Array<string>
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof UsersAnalyticsApiGetMetrics
    */
    readonly page?: number
    
    /**
    * The maximum number of items returned from the request, up to a limit of 1000 items. The default value is `50`.
    * @type {number}
    * @memberof UsersAnalyticsApiGetMetrics
    */
    readonly perPage?: number
    
    /**
    * The way to sort the results.  Option descriptions:  * `average_percent_watched` - Sort the results by mean seconds played.  * `average_time_watched` - Sort the results by mean percentage played.  * `comments` - Sort the results by the number of comments.  * `country` - Sort the results by country.  * `default` - Sort the results by the values of both the **dimension** and **time_interval** fields.  * `device_type` - Sort the results by device type.  * `downloads` - Sort the results by the number of downloads.  * `embed_domain` - Sort the results by embed domain.  * `finishes` - Sort the results by the number of complete plays.  * `impressions` - Sort the results by the number of impressions.  * `like` - Sort the results by the number of likes.  * `time` - Sort the results by the value of the **start_date** field. This option is available only when the value of **time_interval** isn\'t `none`.  * `total_time_watched` - Sort the results by total seconds played.  * `unique_impressions` - Sort the results by unique impressions.  * `unique_viewers` - Sort the results by unique viewers.  * `video` - Sort the results by video ID.  * `views` - Sort the results by the number of views. 
    * @type {'average_percent_watched' | 'average_time_watched' | 'comments' | 'country' | 'default' | 'device_type' | 'downloads' | 'embed_domain' | 'finishes' | 'impressions' | 'like' | 'time' | 'total_time_watched' | 'unique_impressions' | 'unique_viewers' | 'video' | 'views'}
    * @memberof UsersAnalyticsApiGetMetrics
    */
    readonly sort?: 'average_percent_watched' | 'average_time_watched' | 'comments' | 'country' | 'default' | 'device_type' | 'downloads' | 'embed_domain' | 'finishes' | 'impressions' | 'like' | 'time' | 'total_time_watched' | 'unique_impressions' | 'unique_viewers' | 'video' | 'views'
    
    /**
    * The interval by which to aggregate the data according to the specified data dimension. The default value is `none`.  Option descriptions:  * `day` - Aggregate the results by day according to the specified data dimension.  * `month` - Aggregate the results by month according to the specified data dimension.  * `none` - The results are not aggregated by time interval.  * `week` - Aggregate the results by week according to the specified data dimension.  * `year` - Aggregate the results by year according to the specified data dimension. 
    * @type {'day' | 'month' | 'none' | 'week' | 'year'}
    * @memberof UsersAnalyticsApiGetMetrics
    */
    readonly timeInterval?: 'day' | 'month' | 'none' | 'week' | 'year'
    
}

/**
 * Request parameters for getUserMetrics operation in UsersAnalyticsApi.
 * @export
 * @interface UsersAnalyticsApiGetUserMetricsRequest
 */
export type UsersAnalyticsApiGetUserMetricsRequest = {
    
    /**
    * The data dimension by which to group the results.  Option descriptions:  * `country` - Group the results by country.  * `device_type` - Group the results by device type.  * `embed_domain` - Group the results by embed domain.  * `total` - Group the results by the time range provided.  * `video` - Group the results by video. 
    * @type {'country' | 'device_type' | 'embed_domain' | 'total' | 'video'}
    * @memberof UsersAnalyticsApiGetUserMetrics
    */
    readonly dimension: 'country' | 'device_type' | 'embed_domain' | 'total' | 'video'
    
    /**
    * The start date of the range of results in ISO 8601 format.
    * @type {string}
    * @memberof UsersAnalyticsApiGetUserMetrics
    */
    readonly from: string
    
    /**
    * The end date of the range of results in ISO 8601 format.
    * @type {string}
    * @memberof UsersAnalyticsApiGetUserMetrics
    */
    readonly to: string
    
    /**
    * The sort direction of the results.  Option descriptions:  * `asc` - Sort the results in ascending order.  * `desc` - Sort the results in descending order. 
    * @type {'asc' | 'desc'}
    * @memberof UsersAnalyticsApiGetUserMetrics
    */
    readonly direction?: 'asc' | 'desc'
    
    /**
    * A comma-separated list of video, folder, or event URIs to filter.
    * @type {string}
    * @memberof UsersAnalyticsApiGetUserMetrics
    */
    readonly filterContent?: string
    
    /**
    * A comma-separated list of country codes in ISO-3166 format to filter on.
    * @type {Array<string>}
    * @memberof UsersAnalyticsApiGetUserMetrics
    */
    readonly filterCountries?: Array<string>
    
    /**
    * A comma-separated list of device types to filter on.
    * @type {Array<string>}
    * @memberof UsersAnalyticsApiGetUserMetrics
    */
    readonly filterDeviceTypes?: Array<string>
    
    /**
    * A comma-separated list of domain names to filter on.
    * @type {Array<string>}
    * @memberof UsersAnalyticsApiGetUserMetrics
    */
    readonly filterEmbedDomains?: Array<string>
    
    /**
    * A comma-separated list of streaming types to filter on.
    * @type {Array<string>}
    * @memberof UsersAnalyticsApiGetUserMetrics
    */
    readonly filterStreamingTypes?: Array<string>
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof UsersAnalyticsApiGetUserMetrics
    */
    readonly page?: number
    
    /**
    * The maximum number of items returned from the request, up to a limit of 1000 items. The default value is `50`.
    * @type {number}
    * @memberof UsersAnalyticsApiGetUserMetrics
    */
    readonly perPage?: number
    
    /**
    * The way to sort the results.  Option descriptions:  * `average_percent_watched` - Sort the results by mean seconds played.  * `average_time_watched` - Sort the results by mean percentage played.  * `comments` - Sort the results by the number of comments.  * `country` - Sort the results by country.  * `default` - Sort the results by the values of both the **dimension** and **time_interval** fields.  * `device_type` - Sort the results by device type.  * `downloads` - Sort the results by the number of downloads.  * `embed_domain` - Sort the results by embed domain.  * `finishes` - Sort the results by the number of complete plays.  * `impressions` - Sort the results by the number of impressions.  * `like` - Sort the results by the number of likes.  * `time` - Sort the results by the value of the **start_date** field. This option is available only when the value of **time_interval** isn\'t `none`.  * `total_time_watched` - Sort the results by total seconds played.  * `unique_impressions` - Sort the results by unique impressions.  * `unique_viewers` - Sort the results by unique viewers.  * `video` - Sort the results by video ID.  * `views` - Sort the results by the number of views. 
    * @type {'average_percent_watched' | 'average_time_watched' | 'comments' | 'country' | 'default' | 'device_type' | 'downloads' | 'embed_domain' | 'finishes' | 'impressions' | 'like' | 'time' | 'total_time_watched' | 'unique_impressions' | 'unique_viewers' | 'video' | 'views'}
    * @memberof UsersAnalyticsApiGetUserMetrics
    */
    readonly sort?: 'average_percent_watched' | 'average_time_watched' | 'comments' | 'country' | 'default' | 'device_type' | 'downloads' | 'embed_domain' | 'finishes' | 'impressions' | 'like' | 'time' | 'total_time_watched' | 'unique_impressions' | 'unique_viewers' | 'video' | 'views'
    
    /**
    * The interval by which to aggregate the data according to the specified data dimension. The default value is `none`.  Option descriptions:  * `day` - Aggregate the results by day according to the specified data dimension.  * `month` - Aggregate the results by month according to the specified data dimension.  * `none` - The results are not aggregated by time interval.  * `week` - Aggregate the results by week according to the specified data dimension.  * `year` - Aggregate the results by year according to the specified data dimension. 
    * @type {'day' | 'month' | 'none' | 'week' | 'year'}
    * @memberof UsersAnalyticsApiGetUserMetrics
    */
    readonly timeInterval?: 'day' | 'month' | 'none' | 'week' | 'year'
    
}

/**
 * UsersAnalyticsApiGenerated - object-oriented interface
 * @export
 * @class UsersAnalyticsApiGenerated
 * @extends {BaseAPI}
 */
export class UsersAnalyticsApiGenerated extends BaseAPI {
    /**
     * This method returns analytic metrics for the authenticated user.
     * @summary Get analytics for the user
     * @param {UsersAnalyticsApiGetMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersAnalyticsApiGenerated
     */
    public getMetrics(requestParameters: UsersAnalyticsApiGetMetricsRequest, options?: AxiosRequestConfig) {
        return UsersAnalyticsApiFp(this.configuration).getMetrics(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns analytic metrics for the authenticated user.
     * @summary Get analytics for the user
     * @param {UsersAnalyticsApiGetUserMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersAnalyticsApiGenerated
     */
    public getUserMetrics(requestParameters: UsersAnalyticsApiGetUserMetricsRequest, options?: AxiosRequestConfig) {
        return UsersAnalyticsApiFp(this.configuration).getUserMetrics(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
