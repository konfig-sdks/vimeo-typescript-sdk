/* tslint:disable */
/* eslint-disable */
/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

The version of the OpenAPI document: 3.4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Channel } from '../models';
// @ts-ignore
import { CreateChannelRequest } from '../models';
// @ts-ignore
import { EditChannelRequest } from '../models';
// @ts-ignore
import { LegacyError } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ChannelsEssentialsApi - axios parameter creator
 * @export
 */
export const ChannelsEssentialsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method creates a new channel.
         * @summary Create a channel
         * @param {CreateChannelRequest} createChannelRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channel: async (createChannelRequest: CreateChannelRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createChannelRequest' is not null or undefined
            assertParamExists('channel', 'createChannelRequest', createChannelRequest)
            const localVarPath = `/channels`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.vimeo.channel+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createChannelRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/channels',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createChannelRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns a single channel.
         * @summary Get a specific channel
         * @param {number} channelId The ID of the channel.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channel_1: async (channelId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('channel_1', 'channelId', channelId)
            const localVarPath = `/channels/{channel_id}`
                .replace(`{${"channel_id"}}`, encodeURIComponent(String(channelId !== undefined ? channelId : `-channel_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/channels/{channel_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method deletes the specified channel.
         * @summary Delete a channel
         * @param {number} channelId The ID of the channel.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channel_2: async (channelId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('channel_2', 'channelId', channelId)
            const localVarPath = `/channels/{channel_id}`
                .replace(`{${"channel_id"}}`, encodeURIComponent(String(channelId !== undefined ? channelId : `-channel_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["delete"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["delete"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/channels/{channel_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method edits the specified channel.
         * @summary Edit a channel
         * @param {number} channelId The ID of the channel.
         * @param {EditChannelRequest} [editChannelRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channel_3: async (channelId: number, editChannelRequest?: EditChannelRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('channel_3', 'channelId', channelId)
            const localVarPath = `/channels/{channel_id}`
                .replace(`{${"channel_id"}}`, encodeURIComponent(String(channelId !== undefined ? channelId : `-channel_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.vimeo.channel+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: editChannelRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/channels/{channel_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(editChannelRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns all available channels.
         * @summary Get all channels
         * @param {'asc' | 'desc'} [direction] The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order. 
         * @param {'featured'} [filter] The attribute by which to filter the results.  Option descriptions:  * &#x60;featured&#x60; - Return featured channels. 
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {string} [query] The search query to use to filter the results.
         * @param {'alphabetical' | 'date' | 'default' | 'followers' | 'relevant' | 'videos'} [sort] The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by creation date.  * &#x60;default&#x60; - Sort the results by creation date.  * &#x60;followers&#x60; - Sort the results by number of followers.  * &#x60;relevant&#x60; - Sort the results by relevance. This option is available for search queries only.  * &#x60;videos&#x60; - Sort the results by number of videos. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channels: async (direction?: 'asc' | 'desc', filter?: 'featured', page?: number, perPage?: number, query?: string, sort?: 'alphabetical' | 'date' | 'default' | 'followers' | 'relevant' | 'videos', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/channels`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/channels',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns all the channels to which the specified user subscribes.
         * @summary Get all the channels to which a user subscribes
         * @param {'asc' | 'desc'} [direction] The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order. 
         * @param {'moderated'} [filter] The attribute by which to filter the results.  Option descriptions:  * &#x60;moderated&#x60; - Return moderated channels. 
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {string} [query] The search query to use to filter the results.
         * @param {'alphabetical' | 'date' | 'followers' | 'videos'} [sort] The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by creation date.  * &#x60;followers&#x60; - Sort the results by number of followers.  * &#x60;videos&#x60; - Sort the results by number of videos. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserSubscriptions: async (direction?: 'asc' | 'desc', filter?: 'moderated', page?: number, perPage?: number, query?: string, sort?: 'alphabetical' | 'date' | 'followers' | 'videos', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/channels`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/channels',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns all the channels to which the specified user subscribes.
         * @summary Get all the channels to which a user subscribes
         * @param {number} userId The ID of the user.
         * @param {'asc' | 'desc'} [direction] The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order. 
         * @param {'moderated'} [filter] The attribute by which to filter the results.  Option descriptions:  * &#x60;moderated&#x60; - Return moderated channels. 
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {string} [query] The search query to use to filter the results.
         * @param {'alphabetical' | 'date' | 'followers' | 'videos'} [sort] The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by creation date.  * &#x60;followers&#x60; - Sort the results by number of followers.  * &#x60;videos&#x60; - Sort the results by number of videos. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserSubscriptions_4: async (userId: number, direction?: 'asc' | 'desc', filter?: 'moderated', page?: number, perPage?: number, query?: string, sort?: 'alphabetical' | 'date' | 'followers' | 'videos', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUserSubscriptions_4', 'userId', userId)
            const localVarPath = `/users/{user_id}/channels`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/channels',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChannelsEssentialsApi - functional programming interface
 * @export
 */
export const ChannelsEssentialsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ChannelsEssentialsApiAxiosParamCreator(configuration)
    return {
        /**
         * This method creates a new channel.
         * @summary Create a channel
         * @param {ChannelsEssentialsApiChannelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async channel(requestParameters: ChannelsEssentialsApiChannelRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Channel>> {
            const createChannelRequest: CreateChannelRequest = {
                description: requestParameters.description,
                link: requestParameters.link,
                name: requestParameters.name,
                privacy: requestParameters.privacy
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.channel(createChannelRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns a single channel.
         * @summary Get a specific channel
         * @param {ChannelsEssentialsApiChannel0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async channel_1(requestParameters: ChannelsEssentialsApiChannel0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Channel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.channel_1(requestParameters.channelId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method deletes the specified channel.
         * @summary Delete a channel
         * @param {ChannelsEssentialsApiChannel1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async channel_2(requestParameters: ChannelsEssentialsApiChannel1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.channel_2(requestParameters.channelId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method edits the specified channel.
         * @summary Edit a channel
         * @param {ChannelsEssentialsApiChannel2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async channel_3(requestParameters: ChannelsEssentialsApiChannel2Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Channel>> {
            const editChannelRequest: EditChannelRequest = {
                description: requestParameters.description,
                link: requestParameters.link,
                name: requestParameters.name,
                privacy: requestParameters.privacy
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.channel_3(requestParameters.channelId, editChannelRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns all available channels.
         * @summary Get all channels
         * @param {ChannelsEssentialsApiChannelsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async channels(requestParameters: ChannelsEssentialsApiChannelsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Channel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.channels(requestParameters.direction, requestParameters.filter, requestParameters.page, requestParameters.perPage, requestParameters.query, requestParameters.sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns all the channels to which the specified user subscribes.
         * @summary Get all the channels to which a user subscribes
         * @param {ChannelsEssentialsApiGetUserSubscriptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserSubscriptions(requestParameters: ChannelsEssentialsApiGetUserSubscriptionsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Channel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserSubscriptions(requestParameters.direction, requestParameters.filter, requestParameters.page, requestParameters.perPage, requestParameters.query, requestParameters.sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns all the channels to which the specified user subscribes.
         * @summary Get all the channels to which a user subscribes
         * @param {ChannelsEssentialsApiGetUserSubscriptions0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserSubscriptions_4(requestParameters: ChannelsEssentialsApiGetUserSubscriptions0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Channel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserSubscriptions_4(requestParameters.userId, requestParameters.direction, requestParameters.filter, requestParameters.page, requestParameters.perPage, requestParameters.query, requestParameters.sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ChannelsEssentialsApi - factory interface
 * @export
 */
export const ChannelsEssentialsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ChannelsEssentialsApiFp(configuration)
    return {
        /**
         * This method creates a new channel.
         * @summary Create a channel
         * @param {ChannelsEssentialsApiChannelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channel(requestParameters: ChannelsEssentialsApiChannelRequest, options?: AxiosRequestConfig): AxiosPromise<Channel> {
            return localVarFp.channel(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns a single channel.
         * @summary Get a specific channel
         * @param {ChannelsEssentialsApiChannel0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channel_1(requestParameters: ChannelsEssentialsApiChannel0Request, options?: AxiosRequestConfig): AxiosPromise<Channel> {
            return localVarFp.channel_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method deletes the specified channel.
         * @summary Delete a channel
         * @param {ChannelsEssentialsApiChannel1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channel_2(requestParameters: ChannelsEssentialsApiChannel1Request, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.channel_2(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method edits the specified channel.
         * @summary Edit a channel
         * @param {ChannelsEssentialsApiChannel2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channel_3(requestParameters: ChannelsEssentialsApiChannel2Request, options?: AxiosRequestConfig): AxiosPromise<Channel> {
            return localVarFp.channel_3(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns all available channels.
         * @summary Get all channels
         * @param {ChannelsEssentialsApiChannelsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channels(requestParameters: ChannelsEssentialsApiChannelsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<Channel>> {
            return localVarFp.channels(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns all the channels to which the specified user subscribes.
         * @summary Get all the channels to which a user subscribes
         * @param {ChannelsEssentialsApiGetUserSubscriptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserSubscriptions(requestParameters: ChannelsEssentialsApiGetUserSubscriptionsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<Channel>> {
            return localVarFp.getUserSubscriptions(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns all the channels to which the specified user subscribes.
         * @summary Get all the channels to which a user subscribes
         * @param {ChannelsEssentialsApiGetUserSubscriptions0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserSubscriptions_4(requestParameters: ChannelsEssentialsApiGetUserSubscriptions0Request, options?: AxiosRequestConfig): AxiosPromise<Array<Channel>> {
            return localVarFp.getUserSubscriptions_4(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for channel operation in ChannelsEssentialsApi.
 * @export
 * @interface ChannelsEssentialsApiChannelRequest
 */
export type ChannelsEssentialsApiChannelRequest = {
    
} & CreateChannelRequest

/**
 * Request parameters for channel_1 operation in ChannelsEssentialsApi.
 * @export
 * @interface ChannelsEssentialsApiChannel0Request
 */
export type ChannelsEssentialsApiChannel0Request = {
    
    /**
    * The ID of the channel.
    * @type {number}
    * @memberof ChannelsEssentialsApiChannel0
    */
    readonly channelId: number
    
}

/**
 * Request parameters for channel_2 operation in ChannelsEssentialsApi.
 * @export
 * @interface ChannelsEssentialsApiChannel1Request
 */
export type ChannelsEssentialsApiChannel1Request = {
    
    /**
    * The ID of the channel.
    * @type {number}
    * @memberof ChannelsEssentialsApiChannel1
    */
    readonly channelId: number
    
}

/**
 * Request parameters for channel_3 operation in ChannelsEssentialsApi.
 * @export
 * @interface ChannelsEssentialsApiChannel2Request
 */
export type ChannelsEssentialsApiChannel2Request = {
    
    /**
    * The ID of the channel.
    * @type {number}
    * @memberof ChannelsEssentialsApiChannel2
    */
    readonly channelId: number
    
} & EditChannelRequest

/**
 * Request parameters for channels operation in ChannelsEssentialsApi.
 * @export
 * @interface ChannelsEssentialsApiChannelsRequest
 */
export type ChannelsEssentialsApiChannelsRequest = {
    
    /**
    * The sort direction of the results.  Option descriptions:  * `asc` - Sort the results in ascending order.  * `desc` - Sort the results in descending order. 
    * @type {'asc' | 'desc'}
    * @memberof ChannelsEssentialsApiChannels
    */
    readonly direction?: 'asc' | 'desc'
    
    /**
    * The attribute by which to filter the results.  Option descriptions:  * `featured` - Return featured channels. 
    * @type {'featured'}
    * @memberof ChannelsEssentialsApiChannels
    */
    readonly filter?: 'featured'
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof ChannelsEssentialsApiChannels
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof ChannelsEssentialsApiChannels
    */
    readonly perPage?: number
    
    /**
    * The search query to use to filter the results.
    * @type {string}
    * @memberof ChannelsEssentialsApiChannels
    */
    readonly query?: string
    
    /**
    * The way to sort the results.  Option descriptions:  * `alphabetical` - Sort the results alphabetically.  * `date` - Sort the results by creation date.  * `default` - Sort the results by creation date.  * `followers` - Sort the results by number of followers.  * `relevant` - Sort the results by relevance. This option is available for search queries only.  * `videos` - Sort the results by number of videos. 
    * @type {'alphabetical' | 'date' | 'default' | 'followers' | 'relevant' | 'videos'}
    * @memberof ChannelsEssentialsApiChannels
    */
    readonly sort?: 'alphabetical' | 'date' | 'default' | 'followers' | 'relevant' | 'videos'
    
}

/**
 * Request parameters for getUserSubscriptions operation in ChannelsEssentialsApi.
 * @export
 * @interface ChannelsEssentialsApiGetUserSubscriptionsRequest
 */
export type ChannelsEssentialsApiGetUserSubscriptionsRequest = {
    
    /**
    * The sort direction of the results.  Option descriptions:  * `asc` - Sort the results in ascending order.  * `desc` - Sort the results in descending order. 
    * @type {'asc' | 'desc'}
    * @memberof ChannelsEssentialsApiGetUserSubscriptions
    */
    readonly direction?: 'asc' | 'desc'
    
    /**
    * The attribute by which to filter the results.  Option descriptions:  * `moderated` - Return moderated channels. 
    * @type {'moderated'}
    * @memberof ChannelsEssentialsApiGetUserSubscriptions
    */
    readonly filter?: 'moderated'
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof ChannelsEssentialsApiGetUserSubscriptions
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof ChannelsEssentialsApiGetUserSubscriptions
    */
    readonly perPage?: number
    
    /**
    * The search query to use to filter the results.
    * @type {string}
    * @memberof ChannelsEssentialsApiGetUserSubscriptions
    */
    readonly query?: string
    
    /**
    * The way to sort the results.  Option descriptions:  * `alphabetical` - Sort the results alphabetically.  * `date` - Sort the results by creation date.  * `followers` - Sort the results by number of followers.  * `videos` - Sort the results by number of videos. 
    * @type {'alphabetical' | 'date' | 'followers' | 'videos'}
    * @memberof ChannelsEssentialsApiGetUserSubscriptions
    */
    readonly sort?: 'alphabetical' | 'date' | 'followers' | 'videos'
    
}

/**
 * Request parameters for getUserSubscriptions_4 operation in ChannelsEssentialsApi.
 * @export
 * @interface ChannelsEssentialsApiGetUserSubscriptions0Request
 */
export type ChannelsEssentialsApiGetUserSubscriptions0Request = {
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof ChannelsEssentialsApiGetUserSubscriptions0
    */
    readonly userId: number
    
    /**
    * The sort direction of the results.  Option descriptions:  * `asc` - Sort the results in ascending order.  * `desc` - Sort the results in descending order. 
    * @type {'asc' | 'desc'}
    * @memberof ChannelsEssentialsApiGetUserSubscriptions0
    */
    readonly direction?: 'asc' | 'desc'
    
    /**
    * The attribute by which to filter the results.  Option descriptions:  * `moderated` - Return moderated channels. 
    * @type {'moderated'}
    * @memberof ChannelsEssentialsApiGetUserSubscriptions0
    */
    readonly filter?: 'moderated'
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof ChannelsEssentialsApiGetUserSubscriptions0
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof ChannelsEssentialsApiGetUserSubscriptions0
    */
    readonly perPage?: number
    
    /**
    * The search query to use to filter the results.
    * @type {string}
    * @memberof ChannelsEssentialsApiGetUserSubscriptions0
    */
    readonly query?: string
    
    /**
    * The way to sort the results.  Option descriptions:  * `alphabetical` - Sort the results alphabetically.  * `date` - Sort the results by creation date.  * `followers` - Sort the results by number of followers.  * `videos` - Sort the results by number of videos. 
    * @type {'alphabetical' | 'date' | 'followers' | 'videos'}
    * @memberof ChannelsEssentialsApiGetUserSubscriptions0
    */
    readonly sort?: 'alphabetical' | 'date' | 'followers' | 'videos'
    
}

/**
 * ChannelsEssentialsApiGenerated - object-oriented interface
 * @export
 * @class ChannelsEssentialsApiGenerated
 * @extends {BaseAPI}
 */
export class ChannelsEssentialsApiGenerated extends BaseAPI {
    /**
     * This method creates a new channel.
     * @summary Create a channel
     * @param {ChannelsEssentialsApiChannelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelsEssentialsApiGenerated
     */
    public channel(requestParameters: ChannelsEssentialsApiChannelRequest, options?: AxiosRequestConfig) {
        return ChannelsEssentialsApiFp(this.configuration).channel(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns a single channel.
     * @summary Get a specific channel
     * @param {ChannelsEssentialsApiChannel0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelsEssentialsApiGenerated
     */
    public channel_1(requestParameters: ChannelsEssentialsApiChannel0Request, options?: AxiosRequestConfig) {
        return ChannelsEssentialsApiFp(this.configuration).channel_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method deletes the specified channel.
     * @summary Delete a channel
     * @param {ChannelsEssentialsApiChannel1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelsEssentialsApiGenerated
     */
    public channel_2(requestParameters: ChannelsEssentialsApiChannel1Request, options?: AxiosRequestConfig) {
        return ChannelsEssentialsApiFp(this.configuration).channel_2(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method edits the specified channel.
     * @summary Edit a channel
     * @param {ChannelsEssentialsApiChannel2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelsEssentialsApiGenerated
     */
    public channel_3(requestParameters: ChannelsEssentialsApiChannel2Request, options?: AxiosRequestConfig) {
        return ChannelsEssentialsApiFp(this.configuration).channel_3(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns all available channels.
     * @summary Get all channels
     * @param {ChannelsEssentialsApiChannelsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelsEssentialsApiGenerated
     */
    public channels(requestParameters: ChannelsEssentialsApiChannelsRequest = {}, options?: AxiosRequestConfig) {
        return ChannelsEssentialsApiFp(this.configuration).channels(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns all the channels to which the specified user subscribes.
     * @summary Get all the channels to which a user subscribes
     * @param {ChannelsEssentialsApiGetUserSubscriptionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelsEssentialsApiGenerated
     */
    public getUserSubscriptions(requestParameters: ChannelsEssentialsApiGetUserSubscriptionsRequest = {}, options?: AxiosRequestConfig) {
        return ChannelsEssentialsApiFp(this.configuration).getUserSubscriptions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns all the channels to which the specified user subscribes.
     * @summary Get all the channels to which a user subscribes
     * @param {ChannelsEssentialsApiGetUserSubscriptions0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelsEssentialsApiGenerated
     */
    public getUserSubscriptions_4(requestParameters: ChannelsEssentialsApiGetUserSubscriptions0Request, options?: AxiosRequestConfig) {
        return ChannelsEssentialsApiFp(this.configuration).getUserSubscriptions_4(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
