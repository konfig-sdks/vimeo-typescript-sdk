/* tslint:disable */
/* eslint-disable */
/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

The version of the OpenAPI document: 3.4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { LiveEssentialsCreateEventForUserRequest } from '../models';
// @ts-ignore
import { LiveEssentialsCreateEventForUserRequestEmbed } from '../models';
// @ts-ignore
import { LiveEssentialsCreateEventForUserRequestInteractionToolsSettings } from '../models';
// @ts-ignore
import { LiveEssentialsCreateEventForUserRequestSchedule } from '../models';
// @ts-ignore
import { LiveEssentialsCreateEventForUserRequestStreamEmbed } from '../models';
// @ts-ignore
import { LiveEssentialsCreateEventForUserRequestStreamPrivacy } from '../models';
// @ts-ignore
import { LiveEssentialsCreateEventRequest } from '../models';
// @ts-ignore
import { LiveEssentialsCreateEventRequestEmbed } from '../models';
// @ts-ignore
import { LiveEssentialsCreateEventRequestInteractionToolsSettings } from '../models';
// @ts-ignore
import { LiveEssentialsCreateEventRequestSchedule } from '../models';
// @ts-ignore
import { LiveEssentialsCreateEventRequestStreamEmbed } from '../models';
// @ts-ignore
import { LiveEssentialsCreateEventRequestStreamPrivacy } from '../models';
// @ts-ignore
import { LiveEssentialsCreateLiveEventRequest } from '../models';
// @ts-ignore
import { LiveEssentialsCreateLiveEventRequestEmbed } from '../models';
// @ts-ignore
import { LiveEssentialsCreateLiveEventRequestInteractionToolsSettings } from '../models';
// @ts-ignore
import { LiveEssentialsCreateLiveEventRequestSchedule } from '../models';
// @ts-ignore
import { LiveEssentialsCreateLiveEventRequestStreamEmbed } from '../models';
// @ts-ignore
import { LiveEssentialsCreateLiveEventRequestStreamPrivacy } from '../models';
// @ts-ignore
import { LiveEssentialsDeleteMultipleEventsRequest } from '../models';
// @ts-ignore
import { LiveEssentialsDeleteMultipleEventsRequest1 } from '../models';
// @ts-ignore
import { LiveEssentialsDeleteMultipleEventsRequest2 } from '../models';
// @ts-ignore
import { LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest } from '../models';
// @ts-ignore
import { LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest1 } from '../models';
// @ts-ignore
import { LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest1Embed } from '../models';
// @ts-ignore
import { LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest1InteractionToolsSettings } from '../models';
// @ts-ignore
import { LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest1Schedule } from '../models';
// @ts-ignore
import { LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest1StreamEmbed } from '../models';
// @ts-ignore
import { LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest1StreamPrivacy } from '../models';
// @ts-ignore
import { LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2 } from '../models';
// @ts-ignore
import { LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2Embed } from '../models';
// @ts-ignore
import { LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2InteractionToolsSettings } from '../models';
// @ts-ignore
import { LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2Schedule } from '../models';
// @ts-ignore
import { LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2StreamEmbed } from '../models';
// @ts-ignore
import { LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2StreamPrivacy } from '../models';
// @ts-ignore
import { LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequestEmbed } from '../models';
// @ts-ignore
import { LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequestInteractionToolsSettings } from '../models';
// @ts-ignore
import { LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequestSchedule } from '../models';
// @ts-ignore
import { LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequestStreamEmbed } from '../models';
// @ts-ignore
import { LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequestStreamPrivacy } from '../models';
// @ts-ignore
import { LiveEvent } from '../models';
// @ts-ignore
import { LiveEventRecurring } from '../models';
// @ts-ignore
import { ModelError } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * LiveEssentialsApi - axios parameter creator
 * @export
 */
export const LiveEssentialsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method creates a new event for the authenticated user.
         * @summary Create a live event
         * @param {LiveEssentialsCreateEventRequest} liveEssentialsCreateEventRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEvent: async (liveEssentialsCreateEventRequest: LiveEssentialsCreateEventRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveEssentialsCreateEventRequest' is not null or undefined
            assertParamExists('createEvent', 'liveEssentialsCreateEventRequest', liveEssentialsCreateEventRequest)
            const localVarPath = `/live_events`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.vimeo.live.event.recurring+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: liveEssentialsCreateEventRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/live_events',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(liveEssentialsCreateEventRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method creates a new event for the authenticated user.
         * @summary Create a live event
         * @param {number} userId The ID of the user.
         * @param {LiveEssentialsCreateEventForUserRequest} liveEssentialsCreateEventForUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEventForUser: async (userId: number, liveEssentialsCreateEventForUserRequest: LiveEssentialsCreateEventForUserRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('createEventForUser', 'userId', userId)
            // verify required parameter 'liveEssentialsCreateEventForUserRequest' is not null or undefined
            assertParamExists('createEventForUser', 'liveEssentialsCreateEventForUserRequest', liveEssentialsCreateEventForUserRequest)
            const localVarPath = `/users/{user_id}/live_events`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.vimeo.live.event.recurring+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: liveEssentialsCreateEventForUserRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/live_events',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(liveEssentialsCreateEventForUserRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method creates a new event for the authenticated user.
         * @summary Create a live event
         * @param {LiveEssentialsCreateLiveEventRequest} liveEssentialsCreateLiveEventRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLiveEvent: async (liveEssentialsCreateLiveEventRequest: LiveEssentialsCreateLiveEventRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveEssentialsCreateLiveEventRequest' is not null or undefined
            assertParamExists('createLiveEvent', 'liveEssentialsCreateLiveEventRequest', liveEssentialsCreateLiveEventRequest)
            const localVarPath = `/me/live_events`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.vimeo.live.event.recurring+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: liveEssentialsCreateLiveEventRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/live_events',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(liveEssentialsCreateLiveEventRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method deletes multiple events belonging to the authenticated user.
         * @summary Delete a list of live events
         * @param {LiveEssentialsDeleteMultipleEventsRequest} liveEssentialsDeleteMultipleEventsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMultipleEvents: async (liveEssentialsDeleteMultipleEventsRequest: LiveEssentialsDeleteMultipleEventsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveEssentialsDeleteMultipleEventsRequest' is not null or undefined
            assertParamExists('deleteMultipleEvents', 'liveEssentialsDeleteMultipleEventsRequest', liveEssentialsDeleteMultipleEventsRequest)
            const localVarPath = `/live_events`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["delete"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["delete"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.vimeo.live.event.recurring+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: liveEssentialsDeleteMultipleEventsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/live_events',
                httpMethod: 'DELETE'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(liveEssentialsDeleteMultipleEventsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method deletes multiple events belonging to the authenticated user.
         * @summary Delete a list of live events
         * @param {LiveEssentialsDeleteMultipleEventsRequest1} liveEssentialsDeleteMultipleEventsRequest1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMultipleEvents_1: async (liveEssentialsDeleteMultipleEventsRequest1: LiveEssentialsDeleteMultipleEventsRequest1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveEssentialsDeleteMultipleEventsRequest1' is not null or undefined
            assertParamExists('deleteMultipleEvents_1', 'liveEssentialsDeleteMultipleEventsRequest1', liveEssentialsDeleteMultipleEventsRequest1)
            const localVarPath = `/me/live_events`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["delete"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["delete"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.vimeo.live.event.recurring+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: liveEssentialsDeleteMultipleEventsRequest1,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/live_events',
                httpMethod: 'DELETE'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(liveEssentialsDeleteMultipleEventsRequest1, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method deletes multiple events belonging to the authenticated user.
         * @summary Delete a list of live events
         * @param {number} userId The ID of the user.
         * @param {LiveEssentialsDeleteMultipleEventsRequest2} liveEssentialsDeleteMultipleEventsRequest2 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMultipleEvents_2: async (userId: number, liveEssentialsDeleteMultipleEventsRequest2: LiveEssentialsDeleteMultipleEventsRequest2, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('deleteMultipleEvents_2', 'userId', userId)
            // verify required parameter 'liveEssentialsDeleteMultipleEventsRequest2' is not null or undefined
            assertParamExists('deleteMultipleEvents_2', 'liveEssentialsDeleteMultipleEventsRequest2', liveEssentialsDeleteMultipleEventsRequest2)
            const localVarPath = `/users/{user_id}/live_events`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["delete"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["delete"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.vimeo.live.event.recurring+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: liveEssentialsDeleteMultipleEventsRequest2,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/live_events',
                httpMethod: 'DELETE'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(liveEssentialsDeleteMultipleEventsRequest2, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method deletes a single event belonging to the authenticated user.
         * @summary Delete a specific live event
         * @param {number} liveEventId The ID of the event.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSingleEvent: async (liveEventId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveEventId' is not null or undefined
            assertParamExists('deleteSingleEvent', 'liveEventId', liveEventId)
            const localVarPath = `/me/live_events/{live_event_id}`
                .replace(`{${"live_event_id"}}`, encodeURIComponent(String(liveEventId !== undefined ? liveEventId : `-live_event_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["delete", "private"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["delete", "private"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/live_events/{live_event_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method deletes a single event belonging to the authenticated user.
         * @summary Delete a specific live event
         * @param {number} liveEventId The ID of the event.
         * @param {number} userId The ID of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSpecificEvent: async (liveEventId: number, userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveEventId' is not null or undefined
            assertParamExists('deleteSpecificEvent', 'liveEventId', liveEventId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('deleteSpecificEvent', 'userId', userId)
            const localVarPath = `/users/{user_id}/live_events/{live_event_id}`
                .replace(`{${"live_event_id"}}`, encodeURIComponent(String(liveEventId !== undefined ? liveEventId : `-live_event_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["delete", "private"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["delete", "private"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/live_events/{live_event_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method deletes a single event belonging to the authenticated user.
         * @summary Delete a specific live event
         * @param {number} liveEventId The ID of the event.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSpecificLiveEvent: async (liveEventId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveEventId' is not null or undefined
            assertParamExists('deleteSpecificLiveEvent', 'liveEventId', liveEventId)
            const localVarPath = `/live_events/{live_event_id}`
                .replace(`{${"live_event_id"}}`, encodeURIComponent(String(liveEventId !== undefined ? liveEventId : `-live_event_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["delete", "private"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["delete", "private"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/live_events/{live_event_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The method returns every event belonging to the authenticated user.
         * @summary Get all the live events that belong to the user
         * @param {'asc' | 'desc'} [direction] The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order. 
         * @param {'not_in_folder' | 'not_in_showcase' | 'not_in_webinar'} [filter] The attribute by which to filter the results.  Option descriptions:  * &#x60;not_in_folder&#x60; - Show only events that aren\&#39;t in a folder.  * &#x60;not_in_showcase&#x60; - Show only events that aren\&#39;t in a showcase.  * &#x60;not_in_webinar&#x60; - Show only events that aren\&#39;t in a webinar. 
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {string} [query] The search query to use to filter the results.
         * @param {'alphabetical' | 'date'} [sort] The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by creation date. 
         * @param {'all' | 'one_time' | 'recurring'} [type] The type of event to return.  Option descriptions:  * &#x60;all&#x60; - Return all events.  * &#x60;one_time&#x60; - Return one-time events only.  * &#x60;recurring&#x60; - Return recurring events only. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUserLiveEvents: async (direction?: 'asc' | 'desc', filter?: 'not_in_folder' | 'not_in_showcase' | 'not_in_webinar', page?: number, perPage?: number, query?: string, sort?: 'alphabetical' | 'date', type?: 'all' | 'one_time' | 'recurring', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/live_events`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/live_events',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns a single event belonging to the authenticated user.
         * @summary Get a specific live event
         * @param {number} liveEventId The ID of the event.
         * @param {string} [password] The password of the event when the privacy is set to &#x60;password&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventById: async (liveEventId: number, password?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveEventId' is not null or undefined
            assertParamExists('getEventById', 'liveEventId', liveEventId)
            const localVarPath = `/live_events/{live_event_id}`
                .replace(`{${"live_event_id"}}`, encodeURIComponent(String(liveEventId !== undefined ? liveEventId : `-live_event_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)
            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/live_events/{live_event_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns a single event belonging to the authenticated user.
         * @summary Get a specific live event
         * @param {number} liveEventId The ID of the event.
         * @param {number} userId The ID of the user.
         * @param {string} [password] The password of the event when the privacy is set to &#x60;password&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventById_3: async (liveEventId: number, userId: number, password?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveEventId' is not null or undefined
            assertParamExists('getEventById_3', 'liveEventId', liveEventId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getEventById_3', 'userId', userId)
            const localVarPath = `/users/{user_id}/live_events/{live_event_id}`
                .replace(`{${"live_event_id"}}`, encodeURIComponent(String(liveEventId !== undefined ? liveEventId : `-live_event_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)
            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/live_events/{live_event_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns a single event belonging to the authenticated user.
         * @summary Get a specific live event
         * @param {number} liveEventId The ID of the event.
         * @param {string} [password] The password of the event when the privacy is set to &#x60;password&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificLiveEvent: async (liveEventId: number, password?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveEventId' is not null or undefined
            assertParamExists('getSpecificLiveEvent', 'liveEventId', liveEventId)
            const localVarPath = `/me/live_events/{live_event_id}`
                .replace(`{${"live_event_id"}}`, encodeURIComponent(String(liveEventId !== undefined ? liveEventId : `-live_event_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)
            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/live_events/{live_event_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The method returns every event belonging to the authenticated user.
         * @summary Get all the live events that belong to the user
         * @param {'asc' | 'desc'} [direction] The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order. 
         * @param {'not_in_folder' | 'not_in_showcase' | 'not_in_webinar'} [filter] The attribute by which to filter the results.  Option descriptions:  * &#x60;not_in_folder&#x60; - Show only events that aren\&#39;t in a folder.  * &#x60;not_in_showcase&#x60; - Show only events that aren\&#39;t in a showcase.  * &#x60;not_in_webinar&#x60; - Show only events that aren\&#39;t in a webinar. 
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {string} [query] The search query to use to filter the results.
         * @param {'alphabetical' | 'date'} [sort] The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by creation date. 
         * @param {'all' | 'one_time' | 'recurring'} [type] The type of event to return.  Option descriptions:  * &#x60;all&#x60; - Return all events.  * &#x60;one_time&#x60; - Return one-time events only.  * &#x60;recurring&#x60; - Return recurring events only. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserLiveEvents: async (direction?: 'asc' | 'desc', filter?: 'not_in_folder' | 'not_in_showcase' | 'not_in_webinar', page?: number, perPage?: number, query?: string, sort?: 'alphabetical' | 'date', type?: 'all' | 'one_time' | 'recurring', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/live_events`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/live_events',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The method returns every event belonging to the authenticated user.
         * @summary Get all the live events that belong to the user
         * @param {number} userId The ID of the user.
         * @param {'asc' | 'desc'} [direction] The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order. 
         * @param {'not_in_folder' | 'not_in_showcase' | 'not_in_webinar'} [filter] The attribute by which to filter the results.  Option descriptions:  * &#x60;not_in_folder&#x60; - Show only events that aren\&#39;t in a folder.  * &#x60;not_in_showcase&#x60; - Show only events that aren\&#39;t in a showcase.  * &#x60;not_in_webinar&#x60; - Show only events that aren\&#39;t in a webinar. 
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {string} [query] The search query to use to filter the results.
         * @param {'alphabetical' | 'date'} [sort] The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by creation date. 
         * @param {'all' | 'one_time' | 'recurring'} [type] The type of event to return.  Option descriptions:  * &#x60;all&#x60; - Return all events.  * &#x60;one_time&#x60; - Return one-time events only.  * &#x60;recurring&#x60; - Return recurring events only. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserLiveEvents_4: async (userId: number, direction?: 'asc' | 'desc', filter?: 'not_in_folder' | 'not_in_showcase' | 'not_in_webinar', page?: number, perPage?: number, query?: string, sort?: 'alphabetical' | 'date', type?: 'all' | 'one_time' | 'recurring', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUserLiveEvents_4', 'userId', userId)
            const localVarPath = `/users/{user_id}/live_events`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/live_events',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method updates an event belonging to the authenticated user.
         * @summary Update a live event
         * @param {number} liveEventId The ID of the event.
         * @param {LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest} [liveEssentialsUpdateEventBelongingToAuthenticatedUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEventBelongingToAuthenticatedUser: async (liveEventId: number, liveEssentialsUpdateEventBelongingToAuthenticatedUserRequest?: LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveEventId' is not null or undefined
            assertParamExists('updateEventBelongingToAuthenticatedUser', 'liveEventId', liveEventId)
            const localVarPath = `/live_events/{live_event_id}`
                .replace(`{${"live_event_id"}}`, encodeURIComponent(String(liveEventId !== undefined ? liveEventId : `-live_event_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit", "private"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit", "private"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.vimeo.live.event.recurring+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: liveEssentialsUpdateEventBelongingToAuthenticatedUserRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/live_events/{live_event_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(liveEssentialsUpdateEventBelongingToAuthenticatedUserRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method updates an event belonging to the authenticated user.
         * @summary Update a live event
         * @param {number} liveEventId The ID of the event.
         * @param {LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest1} [liveEssentialsUpdateEventBelongingToAuthenticatedUserRequest1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEventBelongingToAuthenticatedUser_5: async (liveEventId: number, liveEssentialsUpdateEventBelongingToAuthenticatedUserRequest1?: LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveEventId' is not null or undefined
            assertParamExists('updateEventBelongingToAuthenticatedUser_5', 'liveEventId', liveEventId)
            const localVarPath = `/me/live_events/{live_event_id}`
                .replace(`{${"live_event_id"}}`, encodeURIComponent(String(liveEventId !== undefined ? liveEventId : `-live_event_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit", "private"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit", "private"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.vimeo.live.event.recurring+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: liveEssentialsUpdateEventBelongingToAuthenticatedUserRequest1,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/live_events/{live_event_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(liveEssentialsUpdateEventBelongingToAuthenticatedUserRequest1, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method updates an event belonging to the authenticated user.
         * @summary Update a live event
         * @param {number} liveEventId The ID of the event.
         * @param {number} userId The ID of the user.
         * @param {LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2} [liveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEventBelongingToAuthenticatedUser_6: async (liveEventId: number, userId: number, liveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2?: LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveEventId' is not null or undefined
            assertParamExists('updateEventBelongingToAuthenticatedUser_6', 'liveEventId', liveEventId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('updateEventBelongingToAuthenticatedUser_6', 'userId', userId)
            const localVarPath = `/users/{user_id}/live_events/{live_event_id}`
                .replace(`{${"live_event_id"}}`, encodeURIComponent(String(liveEventId !== undefined ? liveEventId : `-live_event_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit", "private"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit", "private"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.vimeo.live.event.recurring+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: liveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/live_events/{live_event_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(liveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LiveEssentialsApi - functional programming interface
 * @export
 */
export const LiveEssentialsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LiveEssentialsApiAxiosParamCreator(configuration)
    return {
        /**
         * This method creates a new event for the authenticated user.
         * @summary Create a live event
         * @param {LiveEssentialsApiCreateEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEvent(requestParameters: LiveEssentialsApiCreateEventRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LiveEventRecurring>> {
            const liveEssentialsCreateEventRequest: LiveEssentialsCreateEventRequest = {
                title: requestParameters.title,
                allow_share_link: requestParameters.allow_share_link,
                auto_cc_enabled: requestParameters.auto_cc_enabled,
                auto_cc_keywords: requestParameters.auto_cc_keywords,
                auto_cc_lang: requestParameters.auto_cc_lang,
                automatically_title_stream: requestParameters.automatically_title_stream,
                chat_enabled: requestParameters.chat_enabled,
                content_rating: requestParameters.content_rating,
                dvr: requestParameters.dvr,
                embed: requestParameters.embed,
                folder_uri: requestParameters.folder_uri,
                interaction_tools_settings: requestParameters.interaction_tools_settings,
                low_latency: requestParameters.low_latency,
                playlist_sort: requestParameters.playlist_sort,
                rtmp_preview: requestParameters.rtmp_preview,
                schedule: requestParameters.schedule,
                scheduled_playback: requestParameters.scheduled_playback,
                stream_description: requestParameters.stream_description,
                stream_embed: requestParameters.stream_embed,
                stream_password: requestParameters.stream_password,
                stream_privacy: requestParameters.stream_privacy,
                stream_title: requestParameters.stream_title,
                time_zone: requestParameters.time_zone
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEvent(liveEssentialsCreateEventRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method creates a new event for the authenticated user.
         * @summary Create a live event
         * @param {LiveEssentialsApiCreateEventForUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEventForUser(requestParameters: LiveEssentialsApiCreateEventForUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LiveEventRecurring>> {
            const liveEssentialsCreateEventForUserRequest: LiveEssentialsCreateEventForUserRequest = {
                title: requestParameters.title,
                allow_share_link: requestParameters.allow_share_link,
                auto_cc_enabled: requestParameters.auto_cc_enabled,
                auto_cc_keywords: requestParameters.auto_cc_keywords,
                auto_cc_lang: requestParameters.auto_cc_lang,
                automatically_title_stream: requestParameters.automatically_title_stream,
                chat_enabled: requestParameters.chat_enabled,
                content_rating: requestParameters.content_rating,
                dvr: requestParameters.dvr,
                embed: requestParameters.embed,
                folder_uri: requestParameters.folder_uri,
                interaction_tools_settings: requestParameters.interaction_tools_settings,
                low_latency: requestParameters.low_latency,
                playlist_sort: requestParameters.playlist_sort,
                rtmp_preview: requestParameters.rtmp_preview,
                schedule: requestParameters.schedule,
                scheduled_playback: requestParameters.scheduled_playback,
                stream_description: requestParameters.stream_description,
                stream_embed: requestParameters.stream_embed,
                stream_password: requestParameters.stream_password,
                stream_privacy: requestParameters.stream_privacy,
                stream_title: requestParameters.stream_title,
                time_zone: requestParameters.time_zone
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEventForUser(requestParameters.userId, liveEssentialsCreateEventForUserRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method creates a new event for the authenticated user.
         * @summary Create a live event
         * @param {LiveEssentialsApiCreateLiveEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createLiveEvent(requestParameters: LiveEssentialsApiCreateLiveEventRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LiveEventRecurring>> {
            const liveEssentialsCreateLiveEventRequest: LiveEssentialsCreateLiveEventRequest = {
                title: requestParameters.title,
                allow_share_link: requestParameters.allow_share_link,
                auto_cc_enabled: requestParameters.auto_cc_enabled,
                auto_cc_keywords: requestParameters.auto_cc_keywords,
                auto_cc_lang: requestParameters.auto_cc_lang,
                automatically_title_stream: requestParameters.automatically_title_stream,
                chat_enabled: requestParameters.chat_enabled,
                content_rating: requestParameters.content_rating,
                dvr: requestParameters.dvr,
                embed: requestParameters.embed,
                folder_uri: requestParameters.folder_uri,
                interaction_tools_settings: requestParameters.interaction_tools_settings,
                low_latency: requestParameters.low_latency,
                playlist_sort: requestParameters.playlist_sort,
                rtmp_preview: requestParameters.rtmp_preview,
                schedule: requestParameters.schedule,
                scheduled_playback: requestParameters.scheduled_playback,
                stream_description: requestParameters.stream_description,
                stream_embed: requestParameters.stream_embed,
                stream_password: requestParameters.stream_password,
                stream_privacy: requestParameters.stream_privacy,
                stream_title: requestParameters.stream_title,
                time_zone: requestParameters.time_zone
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createLiveEvent(liveEssentialsCreateLiveEventRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method deletes multiple events belonging to the authenticated user.
         * @summary Delete a list of live events
         * @param {LiveEssentialsApiDeleteMultipleEventsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMultipleEvents(requestParameters: LiveEssentialsApiDeleteMultipleEventsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const liveEssentialsDeleteMultipleEventsRequest: LiveEssentialsDeleteMultipleEventsRequest = {
                password: requestParameters.password
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMultipleEvents(liveEssentialsDeleteMultipleEventsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method deletes multiple events belonging to the authenticated user.
         * @summary Delete a list of live events
         * @param {LiveEssentialsApiDeleteMultipleEvents0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMultipleEvents_1(requestParameters: LiveEssentialsApiDeleteMultipleEvents0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const liveEssentialsDeleteMultipleEventsRequest1: LiveEssentialsDeleteMultipleEventsRequest1 = {
                password: requestParameters.password
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMultipleEvents_1(liveEssentialsDeleteMultipleEventsRequest1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method deletes multiple events belonging to the authenticated user.
         * @summary Delete a list of live events
         * @param {LiveEssentialsApiDeleteMultipleEvents1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMultipleEvents_2(requestParameters: LiveEssentialsApiDeleteMultipleEvents1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const liveEssentialsDeleteMultipleEventsRequest2: LiveEssentialsDeleteMultipleEventsRequest2 = {
                password: requestParameters.password
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMultipleEvents_2(requestParameters.userId, liveEssentialsDeleteMultipleEventsRequest2, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method deletes a single event belonging to the authenticated user.
         * @summary Delete a specific live event
         * @param {LiveEssentialsApiDeleteSingleEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSingleEvent(requestParameters: LiveEssentialsApiDeleteSingleEventRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSingleEvent(requestParameters.liveEventId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method deletes a single event belonging to the authenticated user.
         * @summary Delete a specific live event
         * @param {LiveEssentialsApiDeleteSpecificEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSpecificEvent(requestParameters: LiveEssentialsApiDeleteSpecificEventRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSpecificEvent(requestParameters.liveEventId, requestParameters.userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method deletes a single event belonging to the authenticated user.
         * @summary Delete a specific live event
         * @param {LiveEssentialsApiDeleteSpecificLiveEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSpecificLiveEvent(requestParameters: LiveEssentialsApiDeleteSpecificLiveEventRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSpecificLiveEvent(requestParameters.liveEventId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The method returns every event belonging to the authenticated user.
         * @summary Get all the live events that belong to the user
         * @param {LiveEssentialsApiGetAllUserLiveEventsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllUserLiveEvents(requestParameters: LiveEssentialsApiGetAllUserLiveEventsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LiveEvent>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllUserLiveEvents(requestParameters.direction, requestParameters.filter, requestParameters.page, requestParameters.perPage, requestParameters.query, requestParameters.sort, requestParameters.type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns a single event belonging to the authenticated user.
         * @summary Get a specific live event
         * @param {LiveEssentialsApiGetEventByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEventById(requestParameters: LiveEssentialsApiGetEventByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LiveEventRecurring>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEventById(requestParameters.liveEventId, requestParameters.password, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns a single event belonging to the authenticated user.
         * @summary Get a specific live event
         * @param {LiveEssentialsApiGetEventById0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEventById_3(requestParameters: LiveEssentialsApiGetEventById0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LiveEventRecurring>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEventById_3(requestParameters.liveEventId, requestParameters.userId, requestParameters.password, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns a single event belonging to the authenticated user.
         * @summary Get a specific live event
         * @param {LiveEssentialsApiGetSpecificLiveEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpecificLiveEvent(requestParameters: LiveEssentialsApiGetSpecificLiveEventRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LiveEventRecurring>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpecificLiveEvent(requestParameters.liveEventId, requestParameters.password, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The method returns every event belonging to the authenticated user.
         * @summary Get all the live events that belong to the user
         * @param {LiveEssentialsApiGetUserLiveEventsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserLiveEvents(requestParameters: LiveEssentialsApiGetUserLiveEventsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LiveEvent>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserLiveEvents(requestParameters.direction, requestParameters.filter, requestParameters.page, requestParameters.perPage, requestParameters.query, requestParameters.sort, requestParameters.type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The method returns every event belonging to the authenticated user.
         * @summary Get all the live events that belong to the user
         * @param {LiveEssentialsApiGetUserLiveEvents0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserLiveEvents_4(requestParameters: LiveEssentialsApiGetUserLiveEvents0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LiveEvent>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserLiveEvents_4(requestParameters.userId, requestParameters.direction, requestParameters.filter, requestParameters.page, requestParameters.perPage, requestParameters.query, requestParameters.sort, requestParameters.type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method updates an event belonging to the authenticated user.
         * @summary Update a live event
         * @param {LiveEssentialsApiUpdateEventBelongingToAuthenticatedUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEventBelongingToAuthenticatedUser(requestParameters: LiveEssentialsApiUpdateEventBelongingToAuthenticatedUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LiveEventRecurring>> {
            const liveEssentialsUpdateEventBelongingToAuthenticatedUserRequest: LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest = {
                title: requestParameters.title,
                auto_cc_enabled: requestParameters.auto_cc_enabled,
                auto_cc_keywords: requestParameters.auto_cc_keywords,
                auto_cc_language: requestParameters.auto_cc_language,
                automatically_title_stream: requestParameters.automatically_title_stream,
                chat_enabled: requestParameters.chat_enabled,
                content_rating: requestParameters.content_rating,
                dvr: requestParameters.dvr,
                embed: requestParameters.embed,
                interaction_tools_settings: requestParameters.interaction_tools_settings,
                playlist_sort: requestParameters.playlist_sort,
                schedule: requestParameters.schedule,
                scheduled_playback: requestParameters.scheduled_playback,
                stream_description: requestParameters.stream_description,
                stream_embed: requestParameters.stream_embed,
                stream_mode: requestParameters.stream_mode,
                stream_password: requestParameters.stream_password,
                stream_privacy: requestParameters.stream_privacy,
                stream_title: requestParameters.stream_title,
                time_zone: requestParameters.time_zone
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEventBelongingToAuthenticatedUser(requestParameters.liveEventId, liveEssentialsUpdateEventBelongingToAuthenticatedUserRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method updates an event belonging to the authenticated user.
         * @summary Update a live event
         * @param {LiveEssentialsApiUpdateEventBelongingToAuthenticatedUser0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEventBelongingToAuthenticatedUser_5(requestParameters: LiveEssentialsApiUpdateEventBelongingToAuthenticatedUser0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LiveEventRecurring>> {
            const liveEssentialsUpdateEventBelongingToAuthenticatedUserRequest1: LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest1 = {
                title: requestParameters.title,
                auto_cc_enabled: requestParameters.auto_cc_enabled,
                auto_cc_keywords: requestParameters.auto_cc_keywords,
                auto_cc_language: requestParameters.auto_cc_language,
                automatically_title_stream: requestParameters.automatically_title_stream,
                chat_enabled: requestParameters.chat_enabled,
                content_rating: requestParameters.content_rating,
                dvr: requestParameters.dvr,
                embed: requestParameters.embed,
                interaction_tools_settings: requestParameters.interaction_tools_settings,
                playlist_sort: requestParameters.playlist_sort,
                schedule: requestParameters.schedule,
                scheduled_playback: requestParameters.scheduled_playback,
                stream_description: requestParameters.stream_description,
                stream_embed: requestParameters.stream_embed,
                stream_mode: requestParameters.stream_mode,
                stream_password: requestParameters.stream_password,
                stream_privacy: requestParameters.stream_privacy,
                stream_title: requestParameters.stream_title,
                time_zone: requestParameters.time_zone
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEventBelongingToAuthenticatedUser_5(requestParameters.liveEventId, liveEssentialsUpdateEventBelongingToAuthenticatedUserRequest1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method updates an event belonging to the authenticated user.
         * @summary Update a live event
         * @param {LiveEssentialsApiUpdateEventBelongingToAuthenticatedUser1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEventBelongingToAuthenticatedUser_6(requestParameters: LiveEssentialsApiUpdateEventBelongingToAuthenticatedUser1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LiveEventRecurring>> {
            const liveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2: LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2 = {
                title: requestParameters.title,
                auto_cc_enabled: requestParameters.auto_cc_enabled,
                auto_cc_keywords: requestParameters.auto_cc_keywords,
                auto_cc_language: requestParameters.auto_cc_language,
                automatically_title_stream: requestParameters.automatically_title_stream,
                chat_enabled: requestParameters.chat_enabled,
                content_rating: requestParameters.content_rating,
                dvr: requestParameters.dvr,
                embed: requestParameters.embed,
                interaction_tools_settings: requestParameters.interaction_tools_settings,
                playlist_sort: requestParameters.playlist_sort,
                schedule: requestParameters.schedule,
                scheduled_playback: requestParameters.scheduled_playback,
                stream_description: requestParameters.stream_description,
                stream_embed: requestParameters.stream_embed,
                stream_mode: requestParameters.stream_mode,
                stream_password: requestParameters.stream_password,
                stream_privacy: requestParameters.stream_privacy,
                stream_title: requestParameters.stream_title,
                time_zone: requestParameters.time_zone
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEventBelongingToAuthenticatedUser_6(requestParameters.liveEventId, requestParameters.userId, liveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LiveEssentialsApi - factory interface
 * @export
 */
export const LiveEssentialsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LiveEssentialsApiFp(configuration)
    return {
        /**
         * This method creates a new event for the authenticated user.
         * @summary Create a live event
         * @param {LiveEssentialsApiCreateEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEvent(requestParameters: LiveEssentialsApiCreateEventRequest, options?: AxiosRequestConfig): AxiosPromise<LiveEventRecurring> {
            return localVarFp.createEvent(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method creates a new event for the authenticated user.
         * @summary Create a live event
         * @param {LiveEssentialsApiCreateEventForUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEventForUser(requestParameters: LiveEssentialsApiCreateEventForUserRequest, options?: AxiosRequestConfig): AxiosPromise<LiveEventRecurring> {
            return localVarFp.createEventForUser(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method creates a new event for the authenticated user.
         * @summary Create a live event
         * @param {LiveEssentialsApiCreateLiveEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLiveEvent(requestParameters: LiveEssentialsApiCreateLiveEventRequest, options?: AxiosRequestConfig): AxiosPromise<LiveEventRecurring> {
            return localVarFp.createLiveEvent(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method deletes multiple events belonging to the authenticated user.
         * @summary Delete a list of live events
         * @param {LiveEssentialsApiDeleteMultipleEventsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMultipleEvents(requestParameters: LiveEssentialsApiDeleteMultipleEventsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteMultipleEvents(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method deletes multiple events belonging to the authenticated user.
         * @summary Delete a list of live events
         * @param {LiveEssentialsApiDeleteMultipleEvents0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMultipleEvents_1(requestParameters: LiveEssentialsApiDeleteMultipleEvents0Request, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteMultipleEvents_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method deletes multiple events belonging to the authenticated user.
         * @summary Delete a list of live events
         * @param {LiveEssentialsApiDeleteMultipleEvents1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMultipleEvents_2(requestParameters: LiveEssentialsApiDeleteMultipleEvents1Request, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteMultipleEvents_2(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method deletes a single event belonging to the authenticated user.
         * @summary Delete a specific live event
         * @param {LiveEssentialsApiDeleteSingleEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSingleEvent(requestParameters: LiveEssentialsApiDeleteSingleEventRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteSingleEvent(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method deletes a single event belonging to the authenticated user.
         * @summary Delete a specific live event
         * @param {LiveEssentialsApiDeleteSpecificEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSpecificEvent(requestParameters: LiveEssentialsApiDeleteSpecificEventRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteSpecificEvent(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method deletes a single event belonging to the authenticated user.
         * @summary Delete a specific live event
         * @param {LiveEssentialsApiDeleteSpecificLiveEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSpecificLiveEvent(requestParameters: LiveEssentialsApiDeleteSpecificLiveEventRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteSpecificLiveEvent(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * The method returns every event belonging to the authenticated user.
         * @summary Get all the live events that belong to the user
         * @param {LiveEssentialsApiGetAllUserLiveEventsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUserLiveEvents(requestParameters: LiveEssentialsApiGetAllUserLiveEventsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<LiveEvent>> {
            return localVarFp.getAllUserLiveEvents(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns a single event belonging to the authenticated user.
         * @summary Get a specific live event
         * @param {LiveEssentialsApiGetEventByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventById(requestParameters: LiveEssentialsApiGetEventByIdRequest, options?: AxiosRequestConfig): AxiosPromise<LiveEventRecurring> {
            return localVarFp.getEventById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns a single event belonging to the authenticated user.
         * @summary Get a specific live event
         * @param {LiveEssentialsApiGetEventById0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventById_3(requestParameters: LiveEssentialsApiGetEventById0Request, options?: AxiosRequestConfig): AxiosPromise<LiveEventRecurring> {
            return localVarFp.getEventById_3(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns a single event belonging to the authenticated user.
         * @summary Get a specific live event
         * @param {LiveEssentialsApiGetSpecificLiveEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificLiveEvent(requestParameters: LiveEssentialsApiGetSpecificLiveEventRequest, options?: AxiosRequestConfig): AxiosPromise<LiveEventRecurring> {
            return localVarFp.getSpecificLiveEvent(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * The method returns every event belonging to the authenticated user.
         * @summary Get all the live events that belong to the user
         * @param {LiveEssentialsApiGetUserLiveEventsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserLiveEvents(requestParameters: LiveEssentialsApiGetUserLiveEventsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<LiveEvent>> {
            return localVarFp.getUserLiveEvents(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * The method returns every event belonging to the authenticated user.
         * @summary Get all the live events that belong to the user
         * @param {LiveEssentialsApiGetUserLiveEvents0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserLiveEvents_4(requestParameters: LiveEssentialsApiGetUserLiveEvents0Request, options?: AxiosRequestConfig): AxiosPromise<Array<LiveEvent>> {
            return localVarFp.getUserLiveEvents_4(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method updates an event belonging to the authenticated user.
         * @summary Update a live event
         * @param {LiveEssentialsApiUpdateEventBelongingToAuthenticatedUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEventBelongingToAuthenticatedUser(requestParameters: LiveEssentialsApiUpdateEventBelongingToAuthenticatedUserRequest, options?: AxiosRequestConfig): AxiosPromise<LiveEventRecurring> {
            return localVarFp.updateEventBelongingToAuthenticatedUser(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method updates an event belonging to the authenticated user.
         * @summary Update a live event
         * @param {LiveEssentialsApiUpdateEventBelongingToAuthenticatedUser0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEventBelongingToAuthenticatedUser_5(requestParameters: LiveEssentialsApiUpdateEventBelongingToAuthenticatedUser0Request, options?: AxiosRequestConfig): AxiosPromise<LiveEventRecurring> {
            return localVarFp.updateEventBelongingToAuthenticatedUser_5(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method updates an event belonging to the authenticated user.
         * @summary Update a live event
         * @param {LiveEssentialsApiUpdateEventBelongingToAuthenticatedUser1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEventBelongingToAuthenticatedUser_6(requestParameters: LiveEssentialsApiUpdateEventBelongingToAuthenticatedUser1Request, options?: AxiosRequestConfig): AxiosPromise<LiveEventRecurring> {
            return localVarFp.updateEventBelongingToAuthenticatedUser_6(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createEvent operation in LiveEssentialsApi.
 * @export
 * @interface LiveEssentialsApiCreateEventRequest
 */
export type LiveEssentialsApiCreateEventRequest = {
    
} & LiveEssentialsCreateEventRequest

/**
 * Request parameters for createEventForUser operation in LiveEssentialsApi.
 * @export
 * @interface LiveEssentialsApiCreateEventForUserRequest
 */
export type LiveEssentialsApiCreateEventForUserRequest = {
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof LiveEssentialsApiCreateEventForUser
    */
    readonly userId: number
    
} & LiveEssentialsCreateEventForUserRequest

/**
 * Request parameters for createLiveEvent operation in LiveEssentialsApi.
 * @export
 * @interface LiveEssentialsApiCreateLiveEventRequest
 */
export type LiveEssentialsApiCreateLiveEventRequest = {
    
} & LiveEssentialsCreateLiveEventRequest

/**
 * Request parameters for deleteMultipleEvents operation in LiveEssentialsApi.
 * @export
 * @interface LiveEssentialsApiDeleteMultipleEventsRequest
 */
export type LiveEssentialsApiDeleteMultipleEventsRequest = {
    
} & LiveEssentialsDeleteMultipleEventsRequest

/**
 * Request parameters for deleteMultipleEvents_1 operation in LiveEssentialsApi.
 * @export
 * @interface LiveEssentialsApiDeleteMultipleEvents0Request
 */
export type LiveEssentialsApiDeleteMultipleEvents0Request = {
    
} & LiveEssentialsDeleteMultipleEventsRequest1

/**
 * Request parameters for deleteMultipleEvents_2 operation in LiveEssentialsApi.
 * @export
 * @interface LiveEssentialsApiDeleteMultipleEvents1Request
 */
export type LiveEssentialsApiDeleteMultipleEvents1Request = {
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof LiveEssentialsApiDeleteMultipleEvents1
    */
    readonly userId: number
    
} & LiveEssentialsDeleteMultipleEventsRequest2

/**
 * Request parameters for deleteSingleEvent operation in LiveEssentialsApi.
 * @export
 * @interface LiveEssentialsApiDeleteSingleEventRequest
 */
export type LiveEssentialsApiDeleteSingleEventRequest = {
    
    /**
    * The ID of the event.
    * @type {number}
    * @memberof LiveEssentialsApiDeleteSingleEvent
    */
    readonly liveEventId: number
    
}

/**
 * Request parameters for deleteSpecificEvent operation in LiveEssentialsApi.
 * @export
 * @interface LiveEssentialsApiDeleteSpecificEventRequest
 */
export type LiveEssentialsApiDeleteSpecificEventRequest = {
    
    /**
    * The ID of the event.
    * @type {number}
    * @memberof LiveEssentialsApiDeleteSpecificEvent
    */
    readonly liveEventId: number
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof LiveEssentialsApiDeleteSpecificEvent
    */
    readonly userId: number
    
}

/**
 * Request parameters for deleteSpecificLiveEvent operation in LiveEssentialsApi.
 * @export
 * @interface LiveEssentialsApiDeleteSpecificLiveEventRequest
 */
export type LiveEssentialsApiDeleteSpecificLiveEventRequest = {
    
    /**
    * The ID of the event.
    * @type {number}
    * @memberof LiveEssentialsApiDeleteSpecificLiveEvent
    */
    readonly liveEventId: number
    
}

/**
 * Request parameters for getAllUserLiveEvents operation in LiveEssentialsApi.
 * @export
 * @interface LiveEssentialsApiGetAllUserLiveEventsRequest
 */
export type LiveEssentialsApiGetAllUserLiveEventsRequest = {
    
    /**
    * The sort direction of the results.  Option descriptions:  * `asc` - Sort the results in ascending order.  * `desc` - Sort the results in descending order. 
    * @type {'asc' | 'desc'}
    * @memberof LiveEssentialsApiGetAllUserLiveEvents
    */
    readonly direction?: 'asc' | 'desc'
    
    /**
    * The attribute by which to filter the results.  Option descriptions:  * `not_in_folder` - Show only events that aren\'t in a folder.  * `not_in_showcase` - Show only events that aren\'t in a showcase.  * `not_in_webinar` - Show only events that aren\'t in a webinar. 
    * @type {'not_in_folder' | 'not_in_showcase' | 'not_in_webinar'}
    * @memberof LiveEssentialsApiGetAllUserLiveEvents
    */
    readonly filter?: 'not_in_folder' | 'not_in_showcase' | 'not_in_webinar'
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof LiveEssentialsApiGetAllUserLiveEvents
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof LiveEssentialsApiGetAllUserLiveEvents
    */
    readonly perPage?: number
    
    /**
    * The search query to use to filter the results.
    * @type {string}
    * @memberof LiveEssentialsApiGetAllUserLiveEvents
    */
    readonly query?: string
    
    /**
    * The way to sort the results.  Option descriptions:  * `alphabetical` - Sort the results alphabetically.  * `date` - Sort the results by creation date. 
    * @type {'alphabetical' | 'date'}
    * @memberof LiveEssentialsApiGetAllUserLiveEvents
    */
    readonly sort?: 'alphabetical' | 'date'
    
    /**
    * The type of event to return.  Option descriptions:  * `all` - Return all events.  * `one_time` - Return one-time events only.  * `recurring` - Return recurring events only. 
    * @type {'all' | 'one_time' | 'recurring'}
    * @memberof LiveEssentialsApiGetAllUserLiveEvents
    */
    readonly type?: 'all' | 'one_time' | 'recurring'
    
}

/**
 * Request parameters for getEventById operation in LiveEssentialsApi.
 * @export
 * @interface LiveEssentialsApiGetEventByIdRequest
 */
export type LiveEssentialsApiGetEventByIdRequest = {
    
    /**
    * The ID of the event.
    * @type {number}
    * @memberof LiveEssentialsApiGetEventById
    */
    readonly liveEventId: number
    
    /**
    * The password of the event when the privacy is set to `password`.
    * @type {string}
    * @memberof LiveEssentialsApiGetEventById
    */
    readonly password?: string
    
}

/**
 * Request parameters for getEventById_3 operation in LiveEssentialsApi.
 * @export
 * @interface LiveEssentialsApiGetEventById0Request
 */
export type LiveEssentialsApiGetEventById0Request = {
    
    /**
    * The ID of the event.
    * @type {number}
    * @memberof LiveEssentialsApiGetEventById0
    */
    readonly liveEventId: number
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof LiveEssentialsApiGetEventById0
    */
    readonly userId: number
    
    /**
    * The password of the event when the privacy is set to `password`.
    * @type {string}
    * @memberof LiveEssentialsApiGetEventById0
    */
    readonly password?: string
    
}

/**
 * Request parameters for getSpecificLiveEvent operation in LiveEssentialsApi.
 * @export
 * @interface LiveEssentialsApiGetSpecificLiveEventRequest
 */
export type LiveEssentialsApiGetSpecificLiveEventRequest = {
    
    /**
    * The ID of the event.
    * @type {number}
    * @memberof LiveEssentialsApiGetSpecificLiveEvent
    */
    readonly liveEventId: number
    
    /**
    * The password of the event when the privacy is set to `password`.
    * @type {string}
    * @memberof LiveEssentialsApiGetSpecificLiveEvent
    */
    readonly password?: string
    
}

/**
 * Request parameters for getUserLiveEvents operation in LiveEssentialsApi.
 * @export
 * @interface LiveEssentialsApiGetUserLiveEventsRequest
 */
export type LiveEssentialsApiGetUserLiveEventsRequest = {
    
    /**
    * The sort direction of the results.  Option descriptions:  * `asc` - Sort the results in ascending order.  * `desc` - Sort the results in descending order. 
    * @type {'asc' | 'desc'}
    * @memberof LiveEssentialsApiGetUserLiveEvents
    */
    readonly direction?: 'asc' | 'desc'
    
    /**
    * The attribute by which to filter the results.  Option descriptions:  * `not_in_folder` - Show only events that aren\'t in a folder.  * `not_in_showcase` - Show only events that aren\'t in a showcase.  * `not_in_webinar` - Show only events that aren\'t in a webinar. 
    * @type {'not_in_folder' | 'not_in_showcase' | 'not_in_webinar'}
    * @memberof LiveEssentialsApiGetUserLiveEvents
    */
    readonly filter?: 'not_in_folder' | 'not_in_showcase' | 'not_in_webinar'
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof LiveEssentialsApiGetUserLiveEvents
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof LiveEssentialsApiGetUserLiveEvents
    */
    readonly perPage?: number
    
    /**
    * The search query to use to filter the results.
    * @type {string}
    * @memberof LiveEssentialsApiGetUserLiveEvents
    */
    readonly query?: string
    
    /**
    * The way to sort the results.  Option descriptions:  * `alphabetical` - Sort the results alphabetically.  * `date` - Sort the results by creation date. 
    * @type {'alphabetical' | 'date'}
    * @memberof LiveEssentialsApiGetUserLiveEvents
    */
    readonly sort?: 'alphabetical' | 'date'
    
    /**
    * The type of event to return.  Option descriptions:  * `all` - Return all events.  * `one_time` - Return one-time events only.  * `recurring` - Return recurring events only. 
    * @type {'all' | 'one_time' | 'recurring'}
    * @memberof LiveEssentialsApiGetUserLiveEvents
    */
    readonly type?: 'all' | 'one_time' | 'recurring'
    
}

/**
 * Request parameters for getUserLiveEvents_4 operation in LiveEssentialsApi.
 * @export
 * @interface LiveEssentialsApiGetUserLiveEvents0Request
 */
export type LiveEssentialsApiGetUserLiveEvents0Request = {
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof LiveEssentialsApiGetUserLiveEvents0
    */
    readonly userId: number
    
    /**
    * The sort direction of the results.  Option descriptions:  * `asc` - Sort the results in ascending order.  * `desc` - Sort the results in descending order. 
    * @type {'asc' | 'desc'}
    * @memberof LiveEssentialsApiGetUserLiveEvents0
    */
    readonly direction?: 'asc' | 'desc'
    
    /**
    * The attribute by which to filter the results.  Option descriptions:  * `not_in_folder` - Show only events that aren\'t in a folder.  * `not_in_showcase` - Show only events that aren\'t in a showcase.  * `not_in_webinar` - Show only events that aren\'t in a webinar. 
    * @type {'not_in_folder' | 'not_in_showcase' | 'not_in_webinar'}
    * @memberof LiveEssentialsApiGetUserLiveEvents0
    */
    readonly filter?: 'not_in_folder' | 'not_in_showcase' | 'not_in_webinar'
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof LiveEssentialsApiGetUserLiveEvents0
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof LiveEssentialsApiGetUserLiveEvents0
    */
    readonly perPage?: number
    
    /**
    * The search query to use to filter the results.
    * @type {string}
    * @memberof LiveEssentialsApiGetUserLiveEvents0
    */
    readonly query?: string
    
    /**
    * The way to sort the results.  Option descriptions:  * `alphabetical` - Sort the results alphabetically.  * `date` - Sort the results by creation date. 
    * @type {'alphabetical' | 'date'}
    * @memberof LiveEssentialsApiGetUserLiveEvents0
    */
    readonly sort?: 'alphabetical' | 'date'
    
    /**
    * The type of event to return.  Option descriptions:  * `all` - Return all events.  * `one_time` - Return one-time events only.  * `recurring` - Return recurring events only. 
    * @type {'all' | 'one_time' | 'recurring'}
    * @memberof LiveEssentialsApiGetUserLiveEvents0
    */
    readonly type?: 'all' | 'one_time' | 'recurring'
    
}

/**
 * Request parameters for updateEventBelongingToAuthenticatedUser operation in LiveEssentialsApi.
 * @export
 * @interface LiveEssentialsApiUpdateEventBelongingToAuthenticatedUserRequest
 */
export type LiveEssentialsApiUpdateEventBelongingToAuthenticatedUserRequest = {
    
    /**
    * The ID of the event.
    * @type {number}
    * @memberof LiveEssentialsApiUpdateEventBelongingToAuthenticatedUser
    */
    readonly liveEventId: number
    
} & LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest

/**
 * Request parameters for updateEventBelongingToAuthenticatedUser_5 operation in LiveEssentialsApi.
 * @export
 * @interface LiveEssentialsApiUpdateEventBelongingToAuthenticatedUser0Request
 */
export type LiveEssentialsApiUpdateEventBelongingToAuthenticatedUser0Request = {
    
    /**
    * The ID of the event.
    * @type {number}
    * @memberof LiveEssentialsApiUpdateEventBelongingToAuthenticatedUser0
    */
    readonly liveEventId: number
    
} & LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest1

/**
 * Request parameters for updateEventBelongingToAuthenticatedUser_6 operation in LiveEssentialsApi.
 * @export
 * @interface LiveEssentialsApiUpdateEventBelongingToAuthenticatedUser1Request
 */
export type LiveEssentialsApiUpdateEventBelongingToAuthenticatedUser1Request = {
    
    /**
    * The ID of the event.
    * @type {number}
    * @memberof LiveEssentialsApiUpdateEventBelongingToAuthenticatedUser1
    */
    readonly liveEventId: number
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof LiveEssentialsApiUpdateEventBelongingToAuthenticatedUser1
    */
    readonly userId: number
    
} & LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2

/**
 * LiveEssentialsApiGenerated - object-oriented interface
 * @export
 * @class LiveEssentialsApiGenerated
 * @extends {BaseAPI}
 */
export class LiveEssentialsApiGenerated extends BaseAPI {
    /**
     * This method creates a new event for the authenticated user.
     * @summary Create a live event
     * @param {LiveEssentialsApiCreateEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEssentialsApiGenerated
     */
    public createEvent(requestParameters: LiveEssentialsApiCreateEventRequest, options?: AxiosRequestConfig) {
        return LiveEssentialsApiFp(this.configuration).createEvent(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method creates a new event for the authenticated user.
     * @summary Create a live event
     * @param {LiveEssentialsApiCreateEventForUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEssentialsApiGenerated
     */
    public createEventForUser(requestParameters: LiveEssentialsApiCreateEventForUserRequest, options?: AxiosRequestConfig) {
        return LiveEssentialsApiFp(this.configuration).createEventForUser(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method creates a new event for the authenticated user.
     * @summary Create a live event
     * @param {LiveEssentialsApiCreateLiveEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEssentialsApiGenerated
     */
    public createLiveEvent(requestParameters: LiveEssentialsApiCreateLiveEventRequest, options?: AxiosRequestConfig) {
        return LiveEssentialsApiFp(this.configuration).createLiveEvent(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method deletes multiple events belonging to the authenticated user.
     * @summary Delete a list of live events
     * @param {LiveEssentialsApiDeleteMultipleEventsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEssentialsApiGenerated
     */
    public deleteMultipleEvents(requestParameters: LiveEssentialsApiDeleteMultipleEventsRequest, options?: AxiosRequestConfig) {
        return LiveEssentialsApiFp(this.configuration).deleteMultipleEvents(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method deletes multiple events belonging to the authenticated user.
     * @summary Delete a list of live events
     * @param {LiveEssentialsApiDeleteMultipleEvents0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEssentialsApiGenerated
     */
    public deleteMultipleEvents_1(requestParameters: LiveEssentialsApiDeleteMultipleEvents0Request, options?: AxiosRequestConfig) {
        return LiveEssentialsApiFp(this.configuration).deleteMultipleEvents_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method deletes multiple events belonging to the authenticated user.
     * @summary Delete a list of live events
     * @param {LiveEssentialsApiDeleteMultipleEvents1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEssentialsApiGenerated
     */
    public deleteMultipleEvents_2(requestParameters: LiveEssentialsApiDeleteMultipleEvents1Request, options?: AxiosRequestConfig) {
        return LiveEssentialsApiFp(this.configuration).deleteMultipleEvents_2(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method deletes a single event belonging to the authenticated user.
     * @summary Delete a specific live event
     * @param {LiveEssentialsApiDeleteSingleEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEssentialsApiGenerated
     */
    public deleteSingleEvent(requestParameters: LiveEssentialsApiDeleteSingleEventRequest, options?: AxiosRequestConfig) {
        return LiveEssentialsApiFp(this.configuration).deleteSingleEvent(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method deletes a single event belonging to the authenticated user.
     * @summary Delete a specific live event
     * @param {LiveEssentialsApiDeleteSpecificEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEssentialsApiGenerated
     */
    public deleteSpecificEvent(requestParameters: LiveEssentialsApiDeleteSpecificEventRequest, options?: AxiosRequestConfig) {
        return LiveEssentialsApiFp(this.configuration).deleteSpecificEvent(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method deletes a single event belonging to the authenticated user.
     * @summary Delete a specific live event
     * @param {LiveEssentialsApiDeleteSpecificLiveEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEssentialsApiGenerated
     */
    public deleteSpecificLiveEvent(requestParameters: LiveEssentialsApiDeleteSpecificLiveEventRequest, options?: AxiosRequestConfig) {
        return LiveEssentialsApiFp(this.configuration).deleteSpecificLiveEvent(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The method returns every event belonging to the authenticated user.
     * @summary Get all the live events that belong to the user
     * @param {LiveEssentialsApiGetAllUserLiveEventsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEssentialsApiGenerated
     */
    public getAllUserLiveEvents(requestParameters: LiveEssentialsApiGetAllUserLiveEventsRequest = {}, options?: AxiosRequestConfig) {
        return LiveEssentialsApiFp(this.configuration).getAllUserLiveEvents(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns a single event belonging to the authenticated user.
     * @summary Get a specific live event
     * @param {LiveEssentialsApiGetEventByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEssentialsApiGenerated
     */
    public getEventById(requestParameters: LiveEssentialsApiGetEventByIdRequest, options?: AxiosRequestConfig) {
        return LiveEssentialsApiFp(this.configuration).getEventById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns a single event belonging to the authenticated user.
     * @summary Get a specific live event
     * @param {LiveEssentialsApiGetEventById0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEssentialsApiGenerated
     */
    public getEventById_3(requestParameters: LiveEssentialsApiGetEventById0Request, options?: AxiosRequestConfig) {
        return LiveEssentialsApiFp(this.configuration).getEventById_3(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns a single event belonging to the authenticated user.
     * @summary Get a specific live event
     * @param {LiveEssentialsApiGetSpecificLiveEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEssentialsApiGenerated
     */
    public getSpecificLiveEvent(requestParameters: LiveEssentialsApiGetSpecificLiveEventRequest, options?: AxiosRequestConfig) {
        return LiveEssentialsApiFp(this.configuration).getSpecificLiveEvent(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The method returns every event belonging to the authenticated user.
     * @summary Get all the live events that belong to the user
     * @param {LiveEssentialsApiGetUserLiveEventsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEssentialsApiGenerated
     */
    public getUserLiveEvents(requestParameters: LiveEssentialsApiGetUserLiveEventsRequest = {}, options?: AxiosRequestConfig) {
        return LiveEssentialsApiFp(this.configuration).getUserLiveEvents(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The method returns every event belonging to the authenticated user.
     * @summary Get all the live events that belong to the user
     * @param {LiveEssentialsApiGetUserLiveEvents0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEssentialsApiGenerated
     */
    public getUserLiveEvents_4(requestParameters: LiveEssentialsApiGetUserLiveEvents0Request, options?: AxiosRequestConfig) {
        return LiveEssentialsApiFp(this.configuration).getUserLiveEvents_4(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method updates an event belonging to the authenticated user.
     * @summary Update a live event
     * @param {LiveEssentialsApiUpdateEventBelongingToAuthenticatedUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEssentialsApiGenerated
     */
    public updateEventBelongingToAuthenticatedUser(requestParameters: LiveEssentialsApiUpdateEventBelongingToAuthenticatedUserRequest, options?: AxiosRequestConfig) {
        return LiveEssentialsApiFp(this.configuration).updateEventBelongingToAuthenticatedUser(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method updates an event belonging to the authenticated user.
     * @summary Update a live event
     * @param {LiveEssentialsApiUpdateEventBelongingToAuthenticatedUser0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEssentialsApiGenerated
     */
    public updateEventBelongingToAuthenticatedUser_5(requestParameters: LiveEssentialsApiUpdateEventBelongingToAuthenticatedUser0Request, options?: AxiosRequestConfig) {
        return LiveEssentialsApiFp(this.configuration).updateEventBelongingToAuthenticatedUser_5(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method updates an event belonging to the authenticated user.
     * @summary Update a live event
     * @param {LiveEssentialsApiUpdateEventBelongingToAuthenticatedUser1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEssentialsApiGenerated
     */
    public updateEventBelongingToAuthenticatedUser_6(requestParameters: LiveEssentialsApiUpdateEventBelongingToAuthenticatedUser1Request, options?: AxiosRequestConfig) {
        return LiveEssentialsApiFp(this.configuration).updateEventBelongingToAuthenticatedUser_6(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
