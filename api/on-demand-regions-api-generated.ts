/* tslint:disable */
/* eslint-disable */
/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

The version of the OpenAPI document: 3.4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { LegacyError } from '../models';
// @ts-ignore
import { OnDemandRegion } from '../models';
// @ts-ignore
import { OnDemandRegionsAddMultipleRequest } from '../models';
// @ts-ignore
import { OnDemandRegionsRemoveMultipleRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * OnDemandRegionsApi - axios parameter creator
 * @export
 */
export const OnDemandRegionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method adds multiple regions to the specified On Demand page. The authenticated user must be the owner of the page.
         * @summary Add a list of regions to an On Demand page
         * @param {number} ondemandId The ID of the On Demand page.
         * @param {OnDemandRegionsAddMultipleRequest} onDemandRegionsAddMultipleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMultiple: async (ondemandId: number, onDemandRegionsAddMultipleRequest: OnDemandRegionsAddMultipleRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ondemandId' is not null or undefined
            assertParamExists('addMultiple', 'ondemandId', ondemandId)
            // verify required parameter 'onDemandRegionsAddMultipleRequest' is not null or undefined
            assertParamExists('addMultiple', 'onDemandRegionsAddMultipleRequest', onDemandRegionsAddMultipleRequest)
            const localVarPath = `/ondemand/pages/{ondemand_id}/regions`
                .replace(`{${"ondemand_id"}}`, encodeURIComponent(String(ondemandId !== undefined ? ondemandId : `-ondemand_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.vimeo.ondemand.region+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: onDemandRegionsAddMultipleRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ondemand/pages/{ondemand_id}/regions',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(onDemandRegionsAddMultipleRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method adds a single region to the specified On Demand page. The authenticated user must be the owner of the page.
         * @summary Add a specific region to an On Demand page
         * @param {string} country The country code of the region to add.
         * @param {number} ondemandId The ID of the On Demand page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addRegionToPage: async (country: string, ondemandId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'country' is not null or undefined
            assertParamExists('addRegionToPage', 'country', country)
            // verify required parameter 'ondemandId' is not null or undefined
            assertParamExists('addRegionToPage', 'ondemandId', ondemandId)
            const localVarPath = `/ondemand/pages/{ondemand_id}/regions/{country}`
                .replace(`{${"country"}}`, encodeURIComponent(String(country !== undefined ? country : `-country-`)))
                .replace(`{${"ondemand_id"}}`, encodeURIComponent(String(ondemandId !== undefined ? ondemandId : `-ondemand_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ondemand/pages/{ondemand_id}/regions/{country}',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every region on the specified On Demand page. The authenticated user must be the owner of the page.
         * @summary Get all the regions on an On Demand page
         * @param {number} ondemandId The ID of the On Demand page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll: async (ondemandId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ondemandId' is not null or undefined
            assertParamExists('getAll', 'ondemandId', ondemandId)
            const localVarPath = `/ondemand/pages/{ondemand_id}/regions`
                .replace(`{${"ondemand_id"}}`, encodeURIComponent(String(ondemandId !== undefined ? ondemandId : `-ondemand_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ondemand/pages/{ondemand_id}/regions',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns a single region on the specified On Demand page. The authenticated user must be the owner of the page.
         * @summary Get a specific region on an On Demand page
         * @param {string} country The country code of the region to return.
         * @param {number} ondemandId The ID of the On Demand page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificRegion: async (country: string, ondemandId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'country' is not null or undefined
            assertParamExists('getSpecificRegion', 'country', country)
            // verify required parameter 'ondemandId' is not null or undefined
            assertParamExists('getSpecificRegion', 'ondemandId', ondemandId)
            const localVarPath = `/ondemand/pages/{ondemand_id}/regions/{country}`
                .replace(`{${"country"}}`, encodeURIComponent(String(country !== undefined ? country : `-country-`)))
                .replace(`{${"ondemand_id"}}`, encodeURIComponent(String(ondemandId !== undefined ? ondemandId : `-ondemand_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ondemand/pages/{ondemand_id}/regions/{country}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns a single On Demand region.
         * @summary Get a specific On Demand region
         * @param {string} country The country code of the region to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        region: async (country: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'country' is not null or undefined
            assertParamExists('region', 'country', country)
            const localVarPath = `/ondemand/regions/{country}`
                .replace(`{${"country"}}`, encodeURIComponent(String(country !== undefined ? country : `-country-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ondemand/regions/{country}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every existing On Demand region.
         * @summary Get all the On Demand regions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regions: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ondemand/regions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ondemand/regions',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method removes multiple regions from the specified On Demand page. The authenticated user must be the owner of the page.
         * @summary Remove a list of regions from an On Demand page
         * @param {number} ondemandId The ID of the On Demand page.
         * @param {OnDemandRegionsRemoveMultipleRequest} [onDemandRegionsRemoveMultipleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeMultiple: async (ondemandId: number, onDemandRegionsRemoveMultipleRequest?: OnDemandRegionsRemoveMultipleRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ondemandId' is not null or undefined
            assertParamExists('removeMultiple', 'ondemandId', ondemandId)
            const localVarPath = `/ondemand/pages/{ondemand_id}/regions`
                .replace(`{${"ondemand_id"}}`, encodeURIComponent(String(ondemandId !== undefined ? ondemandId : `-ondemand_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.vimeo.ondemand.region+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: onDemandRegionsRemoveMultipleRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ondemand/pages/{ondemand_id}/regions',
                httpMethod: 'DELETE'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(onDemandRegionsRemoveMultipleRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method removes a single region from the specified On Demand page. The authenticated user must be the owner of the page.
         * @summary Remove a specific region from an On Demand page
         * @param {string} country The country code of the region to remove.
         * @param {number} ondemandId The ID of the On Demand page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeSpecificRegion: async (country: string, ondemandId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'country' is not null or undefined
            assertParamExists('removeSpecificRegion', 'country', country)
            // verify required parameter 'ondemandId' is not null or undefined
            assertParamExists('removeSpecificRegion', 'ondemandId', ondemandId)
            const localVarPath = `/ondemand/pages/{ondemand_id}/regions/{country}`
                .replace(`{${"country"}}`, encodeURIComponent(String(country !== undefined ? country : `-country-`)))
                .replace(`{${"ondemand_id"}}`, encodeURIComponent(String(ondemandId !== undefined ? ondemandId : `-ondemand_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ondemand/pages/{ondemand_id}/regions/{country}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OnDemandRegionsApi - functional programming interface
 * @export
 */
export const OnDemandRegionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OnDemandRegionsApiAxiosParamCreator(configuration)
    return {
        /**
         * This method adds multiple regions to the specified On Demand page. The authenticated user must be the owner of the page.
         * @summary Add a list of regions to an On Demand page
         * @param {OnDemandRegionsApiAddMultipleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addMultiple(requestParameters: OnDemandRegionsApiAddMultipleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OnDemandRegion>> {
            const onDemandRegionsAddMultipleRequest: OnDemandRegionsAddMultipleRequest = {
                countries: requestParameters.countries
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addMultiple(requestParameters.ondemandId, onDemandRegionsAddMultipleRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method adds a single region to the specified On Demand page. The authenticated user must be the owner of the page.
         * @summary Add a specific region to an On Demand page
         * @param {OnDemandRegionsApiAddRegionToPageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addRegionToPage(requestParameters: OnDemandRegionsApiAddRegionToPageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OnDemandRegion>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addRegionToPage(requestParameters.country, requestParameters.ondemandId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every region on the specified On Demand page. The authenticated user must be the owner of the page.
         * @summary Get all the regions on an On Demand page
         * @param {OnDemandRegionsApiGetAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAll(requestParameters: OnDemandRegionsApiGetAllRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OnDemandRegion>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAll(requestParameters.ondemandId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns a single region on the specified On Demand page. The authenticated user must be the owner of the page.
         * @summary Get a specific region on an On Demand page
         * @param {OnDemandRegionsApiGetSpecificRegionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpecificRegion(requestParameters: OnDemandRegionsApiGetSpecificRegionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OnDemandRegion>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpecificRegion(requestParameters.country, requestParameters.ondemandId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns a single On Demand region.
         * @summary Get a specific On Demand region
         * @param {OnDemandRegionsApiRegionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async region(requestParameters: OnDemandRegionsApiRegionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OnDemandRegion>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.region(requestParameters.country, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every existing On Demand region.
         * @summary Get all the On Demand regions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async regions(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OnDemandRegion>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.regions(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method removes multiple regions from the specified On Demand page. The authenticated user must be the owner of the page.
         * @summary Remove a list of regions from an On Demand page
         * @param {OnDemandRegionsApiRemoveMultipleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeMultiple(requestParameters: OnDemandRegionsApiRemoveMultipleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OnDemandRegion>>> {
            const onDemandRegionsRemoveMultipleRequest: OnDemandRegionsRemoveMultipleRequest = {
                countries: requestParameters.countries
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeMultiple(requestParameters.ondemandId, onDemandRegionsRemoveMultipleRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method removes a single region from the specified On Demand page. The authenticated user must be the owner of the page.
         * @summary Remove a specific region from an On Demand page
         * @param {OnDemandRegionsApiRemoveSpecificRegionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeSpecificRegion(requestParameters: OnDemandRegionsApiRemoveSpecificRegionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeSpecificRegion(requestParameters.country, requestParameters.ondemandId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OnDemandRegionsApi - factory interface
 * @export
 */
export const OnDemandRegionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OnDemandRegionsApiFp(configuration)
    return {
        /**
         * This method adds multiple regions to the specified On Demand page. The authenticated user must be the owner of the page.
         * @summary Add a list of regions to an On Demand page
         * @param {OnDemandRegionsApiAddMultipleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMultiple(requestParameters: OnDemandRegionsApiAddMultipleRequest, options?: AxiosRequestConfig): AxiosPromise<OnDemandRegion> {
            return localVarFp.addMultiple(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method adds a single region to the specified On Demand page. The authenticated user must be the owner of the page.
         * @summary Add a specific region to an On Demand page
         * @param {OnDemandRegionsApiAddRegionToPageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addRegionToPage(requestParameters: OnDemandRegionsApiAddRegionToPageRequest, options?: AxiosRequestConfig): AxiosPromise<OnDemandRegion> {
            return localVarFp.addRegionToPage(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every region on the specified On Demand page. The authenticated user must be the owner of the page.
         * @summary Get all the regions on an On Demand page
         * @param {OnDemandRegionsApiGetAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(requestParameters: OnDemandRegionsApiGetAllRequest, options?: AxiosRequestConfig): AxiosPromise<Array<OnDemandRegion>> {
            return localVarFp.getAll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns a single region on the specified On Demand page. The authenticated user must be the owner of the page.
         * @summary Get a specific region on an On Demand page
         * @param {OnDemandRegionsApiGetSpecificRegionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificRegion(requestParameters: OnDemandRegionsApiGetSpecificRegionRequest, options?: AxiosRequestConfig): AxiosPromise<OnDemandRegion> {
            return localVarFp.getSpecificRegion(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns a single On Demand region.
         * @summary Get a specific On Demand region
         * @param {OnDemandRegionsApiRegionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        region(requestParameters: OnDemandRegionsApiRegionRequest, options?: AxiosRequestConfig): AxiosPromise<OnDemandRegion> {
            return localVarFp.region(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every existing On Demand region.
         * @summary Get all the On Demand regions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regions(options?: AxiosRequestConfig): AxiosPromise<Array<OnDemandRegion>> {
            return localVarFp.regions(options).then((request) => request(axios, basePath));
        },
        /**
         * This method removes multiple regions from the specified On Demand page. The authenticated user must be the owner of the page.
         * @summary Remove a list of regions from an On Demand page
         * @param {OnDemandRegionsApiRemoveMultipleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeMultiple(requestParameters: OnDemandRegionsApiRemoveMultipleRequest, options?: AxiosRequestConfig): AxiosPromise<Array<OnDemandRegion>> {
            return localVarFp.removeMultiple(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method removes a single region from the specified On Demand page. The authenticated user must be the owner of the page.
         * @summary Remove a specific region from an On Demand page
         * @param {OnDemandRegionsApiRemoveSpecificRegionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeSpecificRegion(requestParameters: OnDemandRegionsApiRemoveSpecificRegionRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeSpecificRegion(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addMultiple operation in OnDemandRegionsApi.
 * @export
 * @interface OnDemandRegionsApiAddMultipleRequest
 */
export type OnDemandRegionsApiAddMultipleRequest = {
    
    /**
    * The ID of the On Demand page.
    * @type {number}
    * @memberof OnDemandRegionsApiAddMultiple
    */
    readonly ondemandId: number
    
} & OnDemandRegionsAddMultipleRequest

/**
 * Request parameters for addRegionToPage operation in OnDemandRegionsApi.
 * @export
 * @interface OnDemandRegionsApiAddRegionToPageRequest
 */
export type OnDemandRegionsApiAddRegionToPageRequest = {
    
    /**
    * The country code of the region to add.
    * @type {string}
    * @memberof OnDemandRegionsApiAddRegionToPage
    */
    readonly country: string
    
    /**
    * The ID of the On Demand page.
    * @type {number}
    * @memberof OnDemandRegionsApiAddRegionToPage
    */
    readonly ondemandId: number
    
}

/**
 * Request parameters for getAll operation in OnDemandRegionsApi.
 * @export
 * @interface OnDemandRegionsApiGetAllRequest
 */
export type OnDemandRegionsApiGetAllRequest = {
    
    /**
    * The ID of the On Demand page.
    * @type {number}
    * @memberof OnDemandRegionsApiGetAll
    */
    readonly ondemandId: number
    
}

/**
 * Request parameters for getSpecificRegion operation in OnDemandRegionsApi.
 * @export
 * @interface OnDemandRegionsApiGetSpecificRegionRequest
 */
export type OnDemandRegionsApiGetSpecificRegionRequest = {
    
    /**
    * The country code of the region to return.
    * @type {string}
    * @memberof OnDemandRegionsApiGetSpecificRegion
    */
    readonly country: string
    
    /**
    * The ID of the On Demand page.
    * @type {number}
    * @memberof OnDemandRegionsApiGetSpecificRegion
    */
    readonly ondemandId: number
    
}

/**
 * Request parameters for region operation in OnDemandRegionsApi.
 * @export
 * @interface OnDemandRegionsApiRegionRequest
 */
export type OnDemandRegionsApiRegionRequest = {
    
    /**
    * The country code of the region to return.
    * @type {string}
    * @memberof OnDemandRegionsApiRegion
    */
    readonly country: string
    
}

/**
 * Request parameters for removeMultiple operation in OnDemandRegionsApi.
 * @export
 * @interface OnDemandRegionsApiRemoveMultipleRequest
 */
export type OnDemandRegionsApiRemoveMultipleRequest = {
    
    /**
    * The ID of the On Demand page.
    * @type {number}
    * @memberof OnDemandRegionsApiRemoveMultiple
    */
    readonly ondemandId: number
    
} & OnDemandRegionsRemoveMultipleRequest

/**
 * Request parameters for removeSpecificRegion operation in OnDemandRegionsApi.
 * @export
 * @interface OnDemandRegionsApiRemoveSpecificRegionRequest
 */
export type OnDemandRegionsApiRemoveSpecificRegionRequest = {
    
    /**
    * The country code of the region to remove.
    * @type {string}
    * @memberof OnDemandRegionsApiRemoveSpecificRegion
    */
    readonly country: string
    
    /**
    * The ID of the On Demand page.
    * @type {number}
    * @memberof OnDemandRegionsApiRemoveSpecificRegion
    */
    readonly ondemandId: number
    
}

/**
 * OnDemandRegionsApiGenerated - object-oriented interface
 * @export
 * @class OnDemandRegionsApiGenerated
 * @extends {BaseAPI}
 */
export class OnDemandRegionsApiGenerated extends BaseAPI {
    /**
     * This method adds multiple regions to the specified On Demand page. The authenticated user must be the owner of the page.
     * @summary Add a list of regions to an On Demand page
     * @param {OnDemandRegionsApiAddMultipleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnDemandRegionsApiGenerated
     */
    public addMultiple(requestParameters: OnDemandRegionsApiAddMultipleRequest, options?: AxiosRequestConfig) {
        return OnDemandRegionsApiFp(this.configuration).addMultiple(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method adds a single region to the specified On Demand page. The authenticated user must be the owner of the page.
     * @summary Add a specific region to an On Demand page
     * @param {OnDemandRegionsApiAddRegionToPageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnDemandRegionsApiGenerated
     */
    public addRegionToPage(requestParameters: OnDemandRegionsApiAddRegionToPageRequest, options?: AxiosRequestConfig) {
        return OnDemandRegionsApiFp(this.configuration).addRegionToPage(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every region on the specified On Demand page. The authenticated user must be the owner of the page.
     * @summary Get all the regions on an On Demand page
     * @param {OnDemandRegionsApiGetAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnDemandRegionsApiGenerated
     */
    public getAll(requestParameters: OnDemandRegionsApiGetAllRequest, options?: AxiosRequestConfig) {
        return OnDemandRegionsApiFp(this.configuration).getAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns a single region on the specified On Demand page. The authenticated user must be the owner of the page.
     * @summary Get a specific region on an On Demand page
     * @param {OnDemandRegionsApiGetSpecificRegionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnDemandRegionsApiGenerated
     */
    public getSpecificRegion(requestParameters: OnDemandRegionsApiGetSpecificRegionRequest, options?: AxiosRequestConfig) {
        return OnDemandRegionsApiFp(this.configuration).getSpecificRegion(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns a single On Demand region.
     * @summary Get a specific On Demand region
     * @param {OnDemandRegionsApiRegionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnDemandRegionsApiGenerated
     */
    public region(requestParameters: OnDemandRegionsApiRegionRequest, options?: AxiosRequestConfig) {
        return OnDemandRegionsApiFp(this.configuration).region(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every existing On Demand region.
     * @summary Get all the On Demand regions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnDemandRegionsApiGenerated
     */
    public regions(options?: AxiosRequestConfig) {
        return OnDemandRegionsApiFp(this.configuration).regions(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method removes multiple regions from the specified On Demand page. The authenticated user must be the owner of the page.
     * @summary Remove a list of regions from an On Demand page
     * @param {OnDemandRegionsApiRemoveMultipleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnDemandRegionsApiGenerated
     */
    public removeMultiple(requestParameters: OnDemandRegionsApiRemoveMultipleRequest, options?: AxiosRequestConfig) {
        return OnDemandRegionsApiFp(this.configuration).removeMultiple(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method removes a single region from the specified On Demand page. The authenticated user must be the owner of the page.
     * @summary Remove a specific region from an On Demand page
     * @param {OnDemandRegionsApiRemoveSpecificRegionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnDemandRegionsApiGenerated
     */
    public removeSpecificRegion(requestParameters: OnDemandRegionsApiRemoveSpecificRegionRequest, options?: AxiosRequestConfig) {
        return OnDemandRegionsApiFp(this.configuration).removeSpecificRegion(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
