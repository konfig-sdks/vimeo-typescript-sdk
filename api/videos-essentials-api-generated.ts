/* tslint:disable */
/* eslint-disable */
/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

The version of the OpenAPI document: 3.4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { EditVideoRequest } from '../models';
// @ts-ignore
import { EditVideoRequestEmbed } from '../models';
// @ts-ignore
import { EditVideoRequestPrivacy } from '../models';
// @ts-ignore
import { EditVideoRequestReviewPage } from '../models';
// @ts-ignore
import { EditVideoRequestSpatial } from '../models';
// @ts-ignore
import { LegacyError } from '../models';
// @ts-ignore
import { ModelError } from '../models';
// @ts-ignore
import { Video } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * VideosEssentialsApi - axios parameter creator
 * @export
 */
export const VideosEssentialsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method returns all the videos in which the authenticated user has a credited appearance.
         * @summary Get all the videos in which the user appears
         * @param {number} userId The ID of the user.
         * @param {'asc' | 'desc'} [direction] The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order. 
         * @param {'embeddable'} [filter] The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Return embeddable videos. 
         * @param {boolean} [filterEmbeddable] Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;.
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {string} [query] The search query to use to filter the results.
         * @param {'alphabetical' | 'comments' | 'date' | 'duration' | 'likes' | 'plays'} [sort] The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;plays&#x60; - Sort the results by number of plays. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appearances: async (userId: number, direction?: 'asc' | 'desc', filter?: 'embeddable', filterEmbeddable?: boolean, page?: number, perPage?: number, query?: string, sort?: 'alphabetical' | 'comments' | 'date' | 'duration' | 'likes' | 'plays', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('appearances', 'userId', userId)
            const localVarPath = `/users/{user_id}/appearances`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (filterEmbeddable !== undefined) {
                localVarQueryParameter['filter_embeddable'] = filterEmbeddable;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/appearances',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method determines whether the authenticated user is the owner of the specified video.
         * @summary Check if the user owns a video
         * @param {number} userId The ID of the user.
         * @param {number} videoId The ID of the video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkUserOwnership: async (userId: number, videoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('checkUserOwnership', 'userId', userId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('checkUserOwnership', 'videoId', videoId)
            const localVarPath = `/users/{user_id}/videos/{video_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/videos/{video_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method determines whether the authenticated user is the owner of the specified video.
         * @summary Check if the user owns a video
         * @param {number} videoId The ID of the video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkUserOwnsVideo: async (videoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('checkUserOwnsVideo', 'videoId', videoId)
            const localVarPath = `/me/videos/{video_id}`
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/videos/{video_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method deletes one or more videos belonging to the specified user. The authenticated user must have permission to delete the videos.  Specify the videos to delete in a comma-separated list by URI using the **uris** query parameter.
         * @summary Delete a user\'s videos
         * @param {string} uris A comma-separated list of the video URIs to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserVideos: async (uris: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uris' is not null or undefined
            assertParamExists('deleteUserVideos', 'uris', uris)
            const localVarPath = `/me/videos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["delete"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["delete"], configuration)
            if (uris !== undefined) {
                localVarQueryParameter['uris'] = uris;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/videos',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns all the videos that the authenticated user has uploaded.
         * @summary Get all the videos that the user has uploaded
         * @param {string} [containingUri] The page that contains the video URI. The field is available only when not paired with **query**.
         * @param {'asc' | 'desc'} [direction] The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order. 
         * @param {'app_only' | 'embeddable' | 'featured' | 'live' | 'no_placeholder' | 'nolive' | 'playable' | 'screen_recorded'} [filter] The attribute by which to filter the results.  Option descriptions:  * &#x60;app_only&#x60; - Return app-only videos.  * &#x60;embeddable&#x60; - Return embeddable videos.  * &#x60;featured&#x60; - Return featured videos.  * &#x60;live&#x60; - Return only live videos.  * &#x60;no_placeholder&#x60; - Return no placeholder videos.  * &#x60;nolive&#x60; - Return no live videos.  * &#x60;playable&#x60; - Return playable videos.  * &#x60;screen_recorded&#x60; - Return screen-recorded videos. 
         * @param {boolean} [filterEmbeddable] Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;.
         * @param {boolean} [filterPlayable] Whether to filter the results by playable videos (&#x60;true&#x60;) or non-playable videos (&#x60;false&#x60;).
         * @param {boolean} [filterScreenRecorded] Whether to filter the results by screen-recorded videos (&#x60;true&#x60;) or non-screen-recorded videos (&#x60;false&#x60;).
         * @param {string} [filterTag] A comma-separated list of tags to filter on. All results must include at least one of these tags.
         * @param {string} [filterTagAllOf] A comma-separated list of tags to filter on. All results must include all of these tags.
         * @param {string} [filterTagExclude] A comma-separated list of tags to exclude. All results must exclude all of these tags.
         * @param {string} [includeTeamContent] Whether to include content from the user\&#39;s teams when searching. _This field is deprecated._
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {string} [query] The search query to use to filter the results.
         * @param {Array<string>} [queryFields] A comma-separated list of fields to query over. The default value is &#x60;title,description,chapters,tags&#x60;.  Option descriptions:  * &#x60;chapters&#x60; - Query by chapter titles that have been added to the video.  * &#x60;description&#x60; - Query by the description of the video.  * &#x60;tags&#x60; - Query by tag names that have been added to the video.  * &#x60;title&#x60; - Query by the title of the video. 
         * @param {'alphabetical' | 'date' | 'default' | 'duration' | 'last_user_action_event_date' | 'likes' | 'modified_time' | 'plays'} [sort] The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically by title.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Use the default sorting method.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;last_user_action_event_date&#x60; - Sort the results by last user interaction. If a result hasn\&#39;t had an interaction, the upload date is used instead.  * &#x60;likes&#x60; - Sort the results by number of likes. To use this option, **direction** must be &#x60;desc&#x60;.  * &#x60;modified_time&#x60; - Sort the results by last modification.  * &#x60;plays&#x60; - Sort the results by number of plays. To use this option, **direction** must be &#x60;desc&#x60;. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUserVideos: async (containingUri?: string, direction?: 'asc' | 'desc', filter?: 'app_only' | 'embeddable' | 'featured' | 'live' | 'no_placeholder' | 'nolive' | 'playable' | 'screen_recorded', filterEmbeddable?: boolean, filterPlayable?: boolean, filterScreenRecorded?: boolean, filterTag?: string, filterTagAllOf?: string, filterTagExclude?: string, includeTeamContent?: string, page?: number, perPage?: number, query?: string, queryFields?: Array<string>, sort?: 'alphabetical' | 'date' | 'default' | 'duration' | 'last_user_action_event_date' | 'likes' | 'modified_time' | 'plays', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/videos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            if (containingUri !== undefined) {
                localVarQueryParameter['containing_uri'] = containingUri;
            }

            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (filterEmbeddable !== undefined) {
                localVarQueryParameter['filter_embeddable'] = filterEmbeddable;
            }

            if (filterPlayable !== undefined) {
                localVarQueryParameter['filter_playable'] = filterPlayable;
            }

            if (filterScreenRecorded !== undefined) {
                localVarQueryParameter['filter_screen_recorded'] = filterScreenRecorded;
            }

            if (filterTag !== undefined) {
                localVarQueryParameter['filter_tag'] = filterTag;
            }

            if (filterTagAllOf !== undefined) {
                localVarQueryParameter['filter_tag_all_of'] = filterTagAllOf;
            }

            if (filterTagExclude !== undefined) {
                localVarQueryParameter['filter_tag_exclude'] = filterTagExclude;
            }

            if (includeTeamContent !== undefined) {
                localVarQueryParameter['include_team_content'] = includeTeamContent;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (queryFields) {
                localVarQueryParameter['query_fields'] = queryFields;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/videos',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns all the videos in which the authenticated user has a credited appearance.
         * @summary Get all the videos in which the user appears
         * @param {'asc' | 'desc'} [direction] The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order. 
         * @param {'embeddable'} [filter] The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Return embeddable videos. 
         * @param {boolean} [filterEmbeddable] Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;.
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {string} [query] The search query to use to filter the results.
         * @param {'alphabetical' | 'comments' | 'date' | 'duration' | 'likes' | 'plays'} [sort] The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;plays&#x60; - Sort the results by number of plays. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserAppearances: async (direction?: 'asc' | 'desc', filter?: 'embeddable', filterEmbeddable?: boolean, page?: number, perPage?: number, query?: string, sort?: 'alphabetical' | 'comments' | 'date' | 'duration' | 'likes' | 'plays', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/appearances`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (filterEmbeddable !== undefined) {
                localVarQueryParameter['filter_embeddable'] = filterEmbeddable;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/appearances',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns a single video.
         * @summary Get a specific video
         * @param {number} videoId The ID of the video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        video: async (videoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('video', 'videoId', videoId)
            const localVarPath = `/videos/{video_id}`
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/videos/{video_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method deletes the specified video. The authenticated user must be the owner of the video.
         * @summary Delete a video
         * @param {number} videoId The ID of the video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        video_1: async (videoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('video_1', 'videoId', videoId)
            const localVarPath = `/videos/{video_id}`
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["delete"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["delete"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/videos/{video_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method edits the specified video.
         * @summary Edit a video
         * @param {number} videoId The ID of the video.
         * @param {EditVideoRequest} editVideoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        video_2: async (videoId: number, editVideoRequest: EditVideoRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('video_2', 'videoId', videoId)
            // verify required parameter 'editVideoRequest' is not null or undefined
            assertParamExists('video_2', 'editVideoRequest', editVideoRequest)
            const localVarPath = `/videos/{video_id}`
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.vimeo.video+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: editVideoRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/videos/{video_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(editVideoRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns all the videos that the authenticated user has uploaded.
         * @summary Get all the videos that the user has uploaded
         * @param {number} userId The ID of the user.
         * @param {string} [containingUri] The page that contains the video URI. The field is available only when not paired with **query**.
         * @param {'asc' | 'desc'} [direction] The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order. 
         * @param {'app_only' | 'embeddable' | 'featured' | 'live' | 'no_placeholder' | 'nolive' | 'playable' | 'screen_recorded'} [filter] The attribute by which to filter the results.  Option descriptions:  * &#x60;app_only&#x60; - Return app-only videos.  * &#x60;embeddable&#x60; - Return embeddable videos.  * &#x60;featured&#x60; - Return featured videos.  * &#x60;live&#x60; - Return only live videos.  * &#x60;no_placeholder&#x60; - Return no placeholder videos.  * &#x60;nolive&#x60; - Return no live videos.  * &#x60;playable&#x60; - Return playable videos.  * &#x60;screen_recorded&#x60; - Return screen-recorded videos. 
         * @param {boolean} [filterEmbeddable] Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;.
         * @param {boolean} [filterPlayable] Whether to filter the results by playable videos (&#x60;true&#x60;) or non-playable videos (&#x60;false&#x60;).
         * @param {boolean} [filterScreenRecorded] Whether to filter the results by screen-recorded videos (&#x60;true&#x60;) or non-screen-recorded videos (&#x60;false&#x60;).
         * @param {string} [filterTag] A comma-separated list of tags to filter on. All results must include at least one of these tags.
         * @param {string} [filterTagAllOf] A comma-separated list of tags to filter on. All results must include all of these tags.
         * @param {string} [filterTagExclude] A comma-separated list of tags to exclude. All results must exclude all of these tags.
         * @param {string} [includeTeamContent] Whether to include content from the user\&#39;s teams when searching. _This field is deprecated._
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {string} [query] The search query to use to filter the results.
         * @param {Array<string>} [queryFields] A comma-separated list of fields to query over. The default value is &#x60;title,description,chapters,tags&#x60;.  Option descriptions:  * &#x60;chapters&#x60; - Query by chapter titles that have been added to the video.  * &#x60;description&#x60; - Query by the description of the video.  * &#x60;tags&#x60; - Query by tag names that have been added to the video.  * &#x60;title&#x60; - Query by the title of the video. 
         * @param {'alphabetical' | 'date' | 'default' | 'duration' | 'last_user_action_event_date' | 'likes' | 'modified_time' | 'plays'} [sort] The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically by title.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Use the default sorting method.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;last_user_action_event_date&#x60; - Sort the results by last user interaction. If a result hasn\&#39;t had an interaction, the upload date is used instead.  * &#x60;likes&#x60; - Sort the results by number of likes. To use this option, **direction** must be &#x60;desc&#x60;.  * &#x60;modified_time&#x60; - Sort the results by last modification.  * &#x60;plays&#x60; - Sort the results by number of plays. To use this option, **direction** must be &#x60;desc&#x60;. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videos: async (userId: number, containingUri?: string, direction?: 'asc' | 'desc', filter?: 'app_only' | 'embeddable' | 'featured' | 'live' | 'no_placeholder' | 'nolive' | 'playable' | 'screen_recorded', filterEmbeddable?: boolean, filterPlayable?: boolean, filterScreenRecorded?: boolean, filterTag?: string, filterTagAllOf?: string, filterTagExclude?: string, includeTeamContent?: string, page?: number, perPage?: number, query?: string, queryFields?: Array<string>, sort?: 'alphabetical' | 'date' | 'default' | 'duration' | 'last_user_action_event_date' | 'likes' | 'modified_time' | 'plays', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('videos', 'userId', userId)
            const localVarPath = `/users/{user_id}/videos`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            if (containingUri !== undefined) {
                localVarQueryParameter['containing_uri'] = containingUri;
            }

            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (filterEmbeddable !== undefined) {
                localVarQueryParameter['filter_embeddable'] = filterEmbeddable;
            }

            if (filterPlayable !== undefined) {
                localVarQueryParameter['filter_playable'] = filterPlayable;
            }

            if (filterScreenRecorded !== undefined) {
                localVarQueryParameter['filter_screen_recorded'] = filterScreenRecorded;
            }

            if (filterTag !== undefined) {
                localVarQueryParameter['filter_tag'] = filterTag;
            }

            if (filterTagAllOf !== undefined) {
                localVarQueryParameter['filter_tag_all_of'] = filterTagAllOf;
            }

            if (filterTagExclude !== undefined) {
                localVarQueryParameter['filter_tag_exclude'] = filterTagExclude;
            }

            if (includeTeamContent !== undefined) {
                localVarQueryParameter['include_team_content'] = includeTeamContent;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (queryFields) {
                localVarQueryParameter['query_fields'] = queryFields;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/videos',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method deletes one or more videos belonging to the specified user. The authenticated user must have permission to delete the videos.  Specify the videos to delete in a comma-separated list by URI using the **uris** query parameter.
         * @summary Delete a user\'s videos
         * @param {number} userId The ID of the user.
         * @param {string} uris A comma-separated list of the video URIs to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videos_3: async (userId: number, uris: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('videos_3', 'userId', userId)
            // verify required parameter 'uris' is not null or undefined
            assertParamExists('videos_3', 'uris', uris)
            const localVarPath = `/users/{user_id}/videos`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["delete"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["delete"], configuration)
            if (uris !== undefined) {
                localVarQueryParameter['uris'] = uris;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/videos',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns all the videos that match custom search criteria.
         * @summary Search for videos
         * @param {'asc' | 'desc'} [direction] The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order. 
         * @param {'CC' | 'CC-BY' | 'CC-BY-NC' | 'CC-BY-NC-ND' | 'CC-BY-NC-SA' | 'CC-BY-ND' | 'CC-BY-SA' | 'CC0' | 'categories' | 'duration' | 'in-progress' | 'minimum_likes' | 'trending' | 'upload_date'} [filter] The attribute by which to filter the results. &#x60;CC&#x60; and related filters target videos with the corresponding Creative Commons licenses. For more information, see our [Creative Commons](https://vimeo.com/creativecommons) page.  Option descriptions:  * &#x60;CC&#x60; - Return videos under any Creative Commons license.  * &#x60;CC-BY&#x60; - Return CC BY, or attribution-only, videos.  * &#x60;CC-BY-NC&#x60; - Return CC BY-NC, or Attribution-NonCommercial, videos.  * &#x60;CC-BY-NC-ND&#x60; - Return CC BY-NC-ND, or Attribution-NonCommercial-NoDerivs, videos.  * &#x60;CC-BY-NC-SA&#x60; - Return CC BY-NC-SA, or Attribution-NonCommercial-ShareAlike, videos.  * &#x60;CC-BY-ND&#x60; - Return CC BY-ND, or Attribution-NoDerivs, videos.  * &#x60;CC-BY-SA&#x60; - Return CC BY-SA, or Attribution-ShareAlike, videos.  * &#x60;CC0&#x60; - Return CC0, or public domain, videos.  * &#x60;categories&#x60; - Filter by categories.  * &#x60;duration&#x60; - Filter by duration.  * &#x60;in-progress&#x60; - Return in-progress videos.  * &#x60;minimum_likes&#x60; - Filter by minimum likes.  * &#x60;trending&#x60; - Return trending videos.  * &#x60;upload_date&#x60; - Filter by upload date. 
         * @param {string} [links] A comma-separated list of video URLs to find. Querying, filtering, and sorting aren\&#39;t supported when using this field.
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {string} [query] The search query.
         * @param {'alphabetical' | 'comments' | 'date' | 'duration' | 'likes' | 'plays' | 'relevant'} [sort] The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;plays&#x60; - Sort the results by number of plays.  * &#x60;relevant&#x60; - Sort the results by relevance. 
         * @param {string} [uris] A comma-separated list of video URIs to find. Querying, filtering, and sorting aren\&#39;t supported when using this field.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videos_4: async (direction?: 'asc' | 'desc', filter?: 'CC' | 'CC-BY' | 'CC-BY-NC' | 'CC-BY-NC-ND' | 'CC-BY-NC-SA' | 'CC-BY-ND' | 'CC-BY-SA' | 'CC0' | 'categories' | 'duration' | 'in-progress' | 'minimum_likes' | 'trending' | 'upload_date', links?: string, page?: number, perPage?: number, query?: string, sort?: 'alphabetical' | 'comments' | 'date' | 'duration' | 'likes' | 'plays' | 'relevant', uris?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/videos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (links !== undefined) {
                localVarQueryParameter['links'] = links;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (uris !== undefined) {
                localVarQueryParameter['uris'] = uris;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/videos',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VideosEssentialsApi - functional programming interface
 * @export
 */
export const VideosEssentialsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VideosEssentialsApiAxiosParamCreator(configuration)
    return {
        /**
         * This method returns all the videos in which the authenticated user has a credited appearance.
         * @summary Get all the videos in which the user appears
         * @param {VideosEssentialsApiAppearancesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appearances(requestParameters: VideosEssentialsApiAppearancesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Video>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appearances(requestParameters.userId, requestParameters.direction, requestParameters.filter, requestParameters.filterEmbeddable, requestParameters.page, requestParameters.perPage, requestParameters.query, requestParameters.sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method determines whether the authenticated user is the owner of the specified video.
         * @summary Check if the user owns a video
         * @param {VideosEssentialsApiCheckUserOwnershipRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkUserOwnership(requestParameters: VideosEssentialsApiCheckUserOwnershipRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Video>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkUserOwnership(requestParameters.userId, requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method determines whether the authenticated user is the owner of the specified video.
         * @summary Check if the user owns a video
         * @param {VideosEssentialsApiCheckUserOwnsVideoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkUserOwnsVideo(requestParameters: VideosEssentialsApiCheckUserOwnsVideoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Video>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkUserOwnsVideo(requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method deletes one or more videos belonging to the specified user. The authenticated user must have permission to delete the videos.  Specify the videos to delete in a comma-separated list by URI using the **uris** query parameter.
         * @summary Delete a user\'s videos
         * @param {VideosEssentialsApiDeleteUserVideosRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserVideos(requestParameters: VideosEssentialsApiDeleteUserVideosRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserVideos(requestParameters.uris, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns all the videos that the authenticated user has uploaded.
         * @summary Get all the videos that the user has uploaded
         * @param {VideosEssentialsApiGetAllUserVideosRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllUserVideos(requestParameters: VideosEssentialsApiGetAllUserVideosRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Video>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllUserVideos(requestParameters.containingUri, requestParameters.direction, requestParameters.filter, requestParameters.filterEmbeddable, requestParameters.filterPlayable, requestParameters.filterScreenRecorded, requestParameters.filterTag, requestParameters.filterTagAllOf, requestParameters.filterTagExclude, requestParameters.includeTeamContent, requestParameters.page, requestParameters.perPage, requestParameters.query, requestParameters.queryFields, requestParameters.sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns all the videos in which the authenticated user has a credited appearance.
         * @summary Get all the videos in which the user appears
         * @param {VideosEssentialsApiGetUserAppearancesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserAppearances(requestParameters: VideosEssentialsApiGetUserAppearancesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Video>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserAppearances(requestParameters.direction, requestParameters.filter, requestParameters.filterEmbeddable, requestParameters.page, requestParameters.perPage, requestParameters.query, requestParameters.sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns a single video.
         * @summary Get a specific video
         * @param {VideosEssentialsApiVideoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async video(requestParameters: VideosEssentialsApiVideoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Video>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.video(requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method deletes the specified video. The authenticated user must be the owner of the video.
         * @summary Delete a video
         * @param {VideosEssentialsApiVideo0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async video_1(requestParameters: VideosEssentialsApiVideo0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.video_1(requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method edits the specified video.
         * @summary Edit a video
         * @param {VideosEssentialsApiVideo1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async video_2(requestParameters: VideosEssentialsApiVideo1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Video>> {
            const editVideoRequest: EditVideoRequest = {
                description: requestParameters.description,
                content_rating: requestParameters.content_rating,
                custom_url: requestParameters.custom_url,
                embed: requestParameters.embed,
                embed_domains: requestParameters.embed_domains,
                embed_domains_add: requestParameters.embed_domains_add,
                embed_domains_delete: requestParameters.embed_domains_delete,
                hide_from_vimeo: requestParameters.hide_from_vimeo,
                license: requestParameters.license,
                locale: requestParameters.locale,
                name: requestParameters.name,
                password: requestParameters.password,
                privacy: requestParameters.privacy,
                review_page: requestParameters.review_page,
                spatial: requestParameters.spatial
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.video_2(requestParameters.videoId, editVideoRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns all the videos that the authenticated user has uploaded.
         * @summary Get all the videos that the user has uploaded
         * @param {VideosEssentialsApiVideosRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async videos(requestParameters: VideosEssentialsApiVideosRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Video>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.videos(requestParameters.userId, requestParameters.containingUri, requestParameters.direction, requestParameters.filter, requestParameters.filterEmbeddable, requestParameters.filterPlayable, requestParameters.filterScreenRecorded, requestParameters.filterTag, requestParameters.filterTagAllOf, requestParameters.filterTagExclude, requestParameters.includeTeamContent, requestParameters.page, requestParameters.perPage, requestParameters.query, requestParameters.queryFields, requestParameters.sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method deletes one or more videos belonging to the specified user. The authenticated user must have permission to delete the videos.  Specify the videos to delete in a comma-separated list by URI using the **uris** query parameter.
         * @summary Delete a user\'s videos
         * @param {VideosEssentialsApiVideos0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async videos_3(requestParameters: VideosEssentialsApiVideos0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.videos_3(requestParameters.userId, requestParameters.uris, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns all the videos that match custom search criteria.
         * @summary Search for videos
         * @param {VideosEssentialsApiVideos1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async videos_4(requestParameters: VideosEssentialsApiVideos1Request = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Video>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.videos_4(requestParameters.direction, requestParameters.filter, requestParameters.links, requestParameters.page, requestParameters.perPage, requestParameters.query, requestParameters.sort, requestParameters.uris, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VideosEssentialsApi - factory interface
 * @export
 */
export const VideosEssentialsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VideosEssentialsApiFp(configuration)
    return {
        /**
         * This method returns all the videos in which the authenticated user has a credited appearance.
         * @summary Get all the videos in which the user appears
         * @param {VideosEssentialsApiAppearancesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appearances(requestParameters: VideosEssentialsApiAppearancesRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Video>> {
            return localVarFp.appearances(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method determines whether the authenticated user is the owner of the specified video.
         * @summary Check if the user owns a video
         * @param {VideosEssentialsApiCheckUserOwnershipRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkUserOwnership(requestParameters: VideosEssentialsApiCheckUserOwnershipRequest, options?: AxiosRequestConfig): AxiosPromise<Video> {
            return localVarFp.checkUserOwnership(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method determines whether the authenticated user is the owner of the specified video.
         * @summary Check if the user owns a video
         * @param {VideosEssentialsApiCheckUserOwnsVideoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkUserOwnsVideo(requestParameters: VideosEssentialsApiCheckUserOwnsVideoRequest, options?: AxiosRequestConfig): AxiosPromise<Video> {
            return localVarFp.checkUserOwnsVideo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method deletes one or more videos belonging to the specified user. The authenticated user must have permission to delete the videos.  Specify the videos to delete in a comma-separated list by URI using the **uris** query parameter.
         * @summary Delete a user\'s videos
         * @param {VideosEssentialsApiDeleteUserVideosRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserVideos(requestParameters: VideosEssentialsApiDeleteUserVideosRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteUserVideos(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns all the videos that the authenticated user has uploaded.
         * @summary Get all the videos that the user has uploaded
         * @param {VideosEssentialsApiGetAllUserVideosRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUserVideos(requestParameters: VideosEssentialsApiGetAllUserVideosRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<Video>> {
            return localVarFp.getAllUserVideos(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns all the videos in which the authenticated user has a credited appearance.
         * @summary Get all the videos in which the user appears
         * @param {VideosEssentialsApiGetUserAppearancesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserAppearances(requestParameters: VideosEssentialsApiGetUserAppearancesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<Video>> {
            return localVarFp.getUserAppearances(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns a single video.
         * @summary Get a specific video
         * @param {VideosEssentialsApiVideoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        video(requestParameters: VideosEssentialsApiVideoRequest, options?: AxiosRequestConfig): AxiosPromise<Video> {
            return localVarFp.video(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method deletes the specified video. The authenticated user must be the owner of the video.
         * @summary Delete a video
         * @param {VideosEssentialsApiVideo0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        video_1(requestParameters: VideosEssentialsApiVideo0Request, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.video_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method edits the specified video.
         * @summary Edit a video
         * @param {VideosEssentialsApiVideo1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        video_2(requestParameters: VideosEssentialsApiVideo1Request, options?: AxiosRequestConfig): AxiosPromise<Video> {
            return localVarFp.video_2(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns all the videos that the authenticated user has uploaded.
         * @summary Get all the videos that the user has uploaded
         * @param {VideosEssentialsApiVideosRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videos(requestParameters: VideosEssentialsApiVideosRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Video>> {
            return localVarFp.videos(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method deletes one or more videos belonging to the specified user. The authenticated user must have permission to delete the videos.  Specify the videos to delete in a comma-separated list by URI using the **uris** query parameter.
         * @summary Delete a user\'s videos
         * @param {VideosEssentialsApiVideos0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videos_3(requestParameters: VideosEssentialsApiVideos0Request, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.videos_3(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns all the videos that match custom search criteria.
         * @summary Search for videos
         * @param {VideosEssentialsApiVideos1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videos_4(requestParameters: VideosEssentialsApiVideos1Request = {}, options?: AxiosRequestConfig): AxiosPromise<Array<Video>> {
            return localVarFp.videos_4(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for appearances operation in VideosEssentialsApi.
 * @export
 * @interface VideosEssentialsApiAppearancesRequest
 */
export type VideosEssentialsApiAppearancesRequest = {
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof VideosEssentialsApiAppearances
    */
    readonly userId: number
    
    /**
    * The sort direction of the results.  Option descriptions:  * `asc` - Sort the results in ascending order.  * `desc` - Sort the results in descending order. 
    * @type {'asc' | 'desc'}
    * @memberof VideosEssentialsApiAppearances
    */
    readonly direction?: 'asc' | 'desc'
    
    /**
    * The attribute by which to filter the results.  Option descriptions:  * `embeddable` - Return embeddable videos. 
    * @type {'embeddable'}
    * @memberof VideosEssentialsApiAppearances
    */
    readonly filter?: 'embeddable'
    
    /**
    * Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). This parameter is required only when **filter** is `embeddable`.
    * @type {boolean}
    * @memberof VideosEssentialsApiAppearances
    */
    readonly filterEmbeddable?: boolean
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof VideosEssentialsApiAppearances
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof VideosEssentialsApiAppearances
    */
    readonly perPage?: number
    
    /**
    * The search query to use to filter the results.
    * @type {string}
    * @memberof VideosEssentialsApiAppearances
    */
    readonly query?: string
    
    /**
    * The way to sort the results.  Option descriptions:  * `alphabetical` - Sort the results alphabetically.  * `comments` - Sort the results by number of comments.  * `date` - Sort the results by date.  * `duration` - Sort the results by duration.  * `likes` - Sort the results by number of likes.  * `plays` - Sort the results by number of plays. 
    * @type {'alphabetical' | 'comments' | 'date' | 'duration' | 'likes' | 'plays'}
    * @memberof VideosEssentialsApiAppearances
    */
    readonly sort?: 'alphabetical' | 'comments' | 'date' | 'duration' | 'likes' | 'plays'
    
}

/**
 * Request parameters for checkUserOwnership operation in VideosEssentialsApi.
 * @export
 * @interface VideosEssentialsApiCheckUserOwnershipRequest
 */
export type VideosEssentialsApiCheckUserOwnershipRequest = {
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof VideosEssentialsApiCheckUserOwnership
    */
    readonly userId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof VideosEssentialsApiCheckUserOwnership
    */
    readonly videoId: number
    
}

/**
 * Request parameters for checkUserOwnsVideo operation in VideosEssentialsApi.
 * @export
 * @interface VideosEssentialsApiCheckUserOwnsVideoRequest
 */
export type VideosEssentialsApiCheckUserOwnsVideoRequest = {
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof VideosEssentialsApiCheckUserOwnsVideo
    */
    readonly videoId: number
    
}

/**
 * Request parameters for deleteUserVideos operation in VideosEssentialsApi.
 * @export
 * @interface VideosEssentialsApiDeleteUserVideosRequest
 */
export type VideosEssentialsApiDeleteUserVideosRequest = {
    
    /**
    * A comma-separated list of the video URIs to delete.
    * @type {string}
    * @memberof VideosEssentialsApiDeleteUserVideos
    */
    readonly uris: string
    
}

/**
 * Request parameters for getAllUserVideos operation in VideosEssentialsApi.
 * @export
 * @interface VideosEssentialsApiGetAllUserVideosRequest
 */
export type VideosEssentialsApiGetAllUserVideosRequest = {
    
    /**
    * The page that contains the video URI. The field is available only when not paired with **query**.
    * @type {string}
    * @memberof VideosEssentialsApiGetAllUserVideos
    */
    readonly containingUri?: string
    
    /**
    * The sort direction of the results.  Option descriptions:  * `asc` - Sort the results in ascending order.  * `desc` - Sort the results in descending order. 
    * @type {'asc' | 'desc'}
    * @memberof VideosEssentialsApiGetAllUserVideos
    */
    readonly direction?: 'asc' | 'desc'
    
    /**
    * The attribute by which to filter the results.  Option descriptions:  * `app_only` - Return app-only videos.  * `embeddable` - Return embeddable videos.  * `featured` - Return featured videos.  * `live` - Return only live videos.  * `no_placeholder` - Return no placeholder videos.  * `nolive` - Return no live videos.  * `playable` - Return playable videos.  * `screen_recorded` - Return screen-recorded videos. 
    * @type {'app_only' | 'embeddable' | 'featured' | 'live' | 'no_placeholder' | 'nolive' | 'playable' | 'screen_recorded'}
    * @memberof VideosEssentialsApiGetAllUserVideos
    */
    readonly filter?: 'app_only' | 'embeddable' | 'featured' | 'live' | 'no_placeholder' | 'nolive' | 'playable' | 'screen_recorded'
    
    /**
    * Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). This parameter is required only when **filter** is `embeddable`.
    * @type {boolean}
    * @memberof VideosEssentialsApiGetAllUserVideos
    */
    readonly filterEmbeddable?: boolean
    
    /**
    * Whether to filter the results by playable videos (`true`) or non-playable videos (`false`).
    * @type {boolean}
    * @memberof VideosEssentialsApiGetAllUserVideos
    */
    readonly filterPlayable?: boolean
    
    /**
    * Whether to filter the results by screen-recorded videos (`true`) or non-screen-recorded videos (`false`).
    * @type {boolean}
    * @memberof VideosEssentialsApiGetAllUserVideos
    */
    readonly filterScreenRecorded?: boolean
    
    /**
    * A comma-separated list of tags to filter on. All results must include at least one of these tags.
    * @type {string}
    * @memberof VideosEssentialsApiGetAllUserVideos
    */
    readonly filterTag?: string
    
    /**
    * A comma-separated list of tags to filter on. All results must include all of these tags.
    * @type {string}
    * @memberof VideosEssentialsApiGetAllUserVideos
    */
    readonly filterTagAllOf?: string
    
    /**
    * A comma-separated list of tags to exclude. All results must exclude all of these tags.
    * @type {string}
    * @memberof VideosEssentialsApiGetAllUserVideos
    */
    readonly filterTagExclude?: string
    
    /**
    * Whether to include content from the user\'s teams when searching. _This field is deprecated._
    * @type {string}
    * @memberof VideosEssentialsApiGetAllUserVideos
    */
    readonly includeTeamContent?: string
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof VideosEssentialsApiGetAllUserVideos
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof VideosEssentialsApiGetAllUserVideos
    */
    readonly perPage?: number
    
    /**
    * The search query to use to filter the results.
    * @type {string}
    * @memberof VideosEssentialsApiGetAllUserVideos
    */
    readonly query?: string
    
    /**
    * A comma-separated list of fields to query over. The default value is `title,description,chapters,tags`.  Option descriptions:  * `chapters` - Query by chapter titles that have been added to the video.  * `description` - Query by the description of the video.  * `tags` - Query by tag names that have been added to the video.  * `title` - Query by the title of the video. 
    * @type {Array<string>}
    * @memberof VideosEssentialsApiGetAllUserVideos
    */
    readonly queryFields?: Array<string>
    
    /**
    * The way to sort the results.  Option descriptions:  * `alphabetical` - Sort the results alphabetically by title.  * `date` - Sort the results by date.  * `default` - Use the default sorting method.  * `duration` - Sort the results by duration.  * `last_user_action_event_date` - Sort the results by last user interaction. If a result hasn\'t had an interaction, the upload date is used instead.  * `likes` - Sort the results by number of likes. To use this option, **direction** must be `desc`.  * `modified_time` - Sort the results by last modification.  * `plays` - Sort the results by number of plays. To use this option, **direction** must be `desc`. 
    * @type {'alphabetical' | 'date' | 'default' | 'duration' | 'last_user_action_event_date' | 'likes' | 'modified_time' | 'plays'}
    * @memberof VideosEssentialsApiGetAllUserVideos
    */
    readonly sort?: 'alphabetical' | 'date' | 'default' | 'duration' | 'last_user_action_event_date' | 'likes' | 'modified_time' | 'plays'
    
}

/**
 * Request parameters for getUserAppearances operation in VideosEssentialsApi.
 * @export
 * @interface VideosEssentialsApiGetUserAppearancesRequest
 */
export type VideosEssentialsApiGetUserAppearancesRequest = {
    
    /**
    * The sort direction of the results.  Option descriptions:  * `asc` - Sort the results in ascending order.  * `desc` - Sort the results in descending order. 
    * @type {'asc' | 'desc'}
    * @memberof VideosEssentialsApiGetUserAppearances
    */
    readonly direction?: 'asc' | 'desc'
    
    /**
    * The attribute by which to filter the results.  Option descriptions:  * `embeddable` - Return embeddable videos. 
    * @type {'embeddable'}
    * @memberof VideosEssentialsApiGetUserAppearances
    */
    readonly filter?: 'embeddable'
    
    /**
    * Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). This parameter is required only when **filter** is `embeddable`.
    * @type {boolean}
    * @memberof VideosEssentialsApiGetUserAppearances
    */
    readonly filterEmbeddable?: boolean
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof VideosEssentialsApiGetUserAppearances
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof VideosEssentialsApiGetUserAppearances
    */
    readonly perPage?: number
    
    /**
    * The search query to use to filter the results.
    * @type {string}
    * @memberof VideosEssentialsApiGetUserAppearances
    */
    readonly query?: string
    
    /**
    * The way to sort the results.  Option descriptions:  * `alphabetical` - Sort the results alphabetically.  * `comments` - Sort the results by number of comments.  * `date` - Sort the results by date.  * `duration` - Sort the results by duration.  * `likes` - Sort the results by number of likes.  * `plays` - Sort the results by number of plays. 
    * @type {'alphabetical' | 'comments' | 'date' | 'duration' | 'likes' | 'plays'}
    * @memberof VideosEssentialsApiGetUserAppearances
    */
    readonly sort?: 'alphabetical' | 'comments' | 'date' | 'duration' | 'likes' | 'plays'
    
}

/**
 * Request parameters for video operation in VideosEssentialsApi.
 * @export
 * @interface VideosEssentialsApiVideoRequest
 */
export type VideosEssentialsApiVideoRequest = {
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof VideosEssentialsApiVideo
    */
    readonly videoId: number
    
}

/**
 * Request parameters for video_1 operation in VideosEssentialsApi.
 * @export
 * @interface VideosEssentialsApiVideo0Request
 */
export type VideosEssentialsApiVideo0Request = {
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof VideosEssentialsApiVideo0
    */
    readonly videoId: number
    
}

/**
 * Request parameters for video_2 operation in VideosEssentialsApi.
 * @export
 * @interface VideosEssentialsApiVideo1Request
 */
export type VideosEssentialsApiVideo1Request = {
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof VideosEssentialsApiVideo1
    */
    readonly videoId: number
    
} & EditVideoRequest

/**
 * Request parameters for videos operation in VideosEssentialsApi.
 * @export
 * @interface VideosEssentialsApiVideosRequest
 */
export type VideosEssentialsApiVideosRequest = {
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof VideosEssentialsApiVideos
    */
    readonly userId: number
    
    /**
    * The page that contains the video URI. The field is available only when not paired with **query**.
    * @type {string}
    * @memberof VideosEssentialsApiVideos
    */
    readonly containingUri?: string
    
    /**
    * The sort direction of the results.  Option descriptions:  * `asc` - Sort the results in ascending order.  * `desc` - Sort the results in descending order. 
    * @type {'asc' | 'desc'}
    * @memberof VideosEssentialsApiVideos
    */
    readonly direction?: 'asc' | 'desc'
    
    /**
    * The attribute by which to filter the results.  Option descriptions:  * `app_only` - Return app-only videos.  * `embeddable` - Return embeddable videos.  * `featured` - Return featured videos.  * `live` - Return only live videos.  * `no_placeholder` - Return no placeholder videos.  * `nolive` - Return no live videos.  * `playable` - Return playable videos.  * `screen_recorded` - Return screen-recorded videos. 
    * @type {'app_only' | 'embeddable' | 'featured' | 'live' | 'no_placeholder' | 'nolive' | 'playable' | 'screen_recorded'}
    * @memberof VideosEssentialsApiVideos
    */
    readonly filter?: 'app_only' | 'embeddable' | 'featured' | 'live' | 'no_placeholder' | 'nolive' | 'playable' | 'screen_recorded'
    
    /**
    * Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). This parameter is required only when **filter** is `embeddable`.
    * @type {boolean}
    * @memberof VideosEssentialsApiVideos
    */
    readonly filterEmbeddable?: boolean
    
    /**
    * Whether to filter the results by playable videos (`true`) or non-playable videos (`false`).
    * @type {boolean}
    * @memberof VideosEssentialsApiVideos
    */
    readonly filterPlayable?: boolean
    
    /**
    * Whether to filter the results by screen-recorded videos (`true`) or non-screen-recorded videos (`false`).
    * @type {boolean}
    * @memberof VideosEssentialsApiVideos
    */
    readonly filterScreenRecorded?: boolean
    
    /**
    * A comma-separated list of tags to filter on. All results must include at least one of these tags.
    * @type {string}
    * @memberof VideosEssentialsApiVideos
    */
    readonly filterTag?: string
    
    /**
    * A comma-separated list of tags to filter on. All results must include all of these tags.
    * @type {string}
    * @memberof VideosEssentialsApiVideos
    */
    readonly filterTagAllOf?: string
    
    /**
    * A comma-separated list of tags to exclude. All results must exclude all of these tags.
    * @type {string}
    * @memberof VideosEssentialsApiVideos
    */
    readonly filterTagExclude?: string
    
    /**
    * Whether to include content from the user\'s teams when searching. _This field is deprecated._
    * @type {string}
    * @memberof VideosEssentialsApiVideos
    */
    readonly includeTeamContent?: string
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof VideosEssentialsApiVideos
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof VideosEssentialsApiVideos
    */
    readonly perPage?: number
    
    /**
    * The search query to use to filter the results.
    * @type {string}
    * @memberof VideosEssentialsApiVideos
    */
    readonly query?: string
    
    /**
    * A comma-separated list of fields to query over. The default value is `title,description,chapters,tags`.  Option descriptions:  * `chapters` - Query by chapter titles that have been added to the video.  * `description` - Query by the description of the video.  * `tags` - Query by tag names that have been added to the video.  * `title` - Query by the title of the video. 
    * @type {Array<string>}
    * @memberof VideosEssentialsApiVideos
    */
    readonly queryFields?: Array<string>
    
    /**
    * The way to sort the results.  Option descriptions:  * `alphabetical` - Sort the results alphabetically by title.  * `date` - Sort the results by date.  * `default` - Use the default sorting method.  * `duration` - Sort the results by duration.  * `last_user_action_event_date` - Sort the results by last user interaction. If a result hasn\'t had an interaction, the upload date is used instead.  * `likes` - Sort the results by number of likes. To use this option, **direction** must be `desc`.  * `modified_time` - Sort the results by last modification.  * `plays` - Sort the results by number of plays. To use this option, **direction** must be `desc`. 
    * @type {'alphabetical' | 'date' | 'default' | 'duration' | 'last_user_action_event_date' | 'likes' | 'modified_time' | 'plays'}
    * @memberof VideosEssentialsApiVideos
    */
    readonly sort?: 'alphabetical' | 'date' | 'default' | 'duration' | 'last_user_action_event_date' | 'likes' | 'modified_time' | 'plays'
    
}

/**
 * Request parameters for videos_3 operation in VideosEssentialsApi.
 * @export
 * @interface VideosEssentialsApiVideos0Request
 */
export type VideosEssentialsApiVideos0Request = {
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof VideosEssentialsApiVideos0
    */
    readonly userId: number
    
    /**
    * A comma-separated list of the video URIs to delete.
    * @type {string}
    * @memberof VideosEssentialsApiVideos0
    */
    readonly uris: string
    
}

/**
 * Request parameters for videos_4 operation in VideosEssentialsApi.
 * @export
 * @interface VideosEssentialsApiVideos1Request
 */
export type VideosEssentialsApiVideos1Request = {
    
    /**
    * The sort direction of the results.  Option descriptions:  * `asc` - Sort the results in ascending order.  * `desc` - Sort the results in descending order. 
    * @type {'asc' | 'desc'}
    * @memberof VideosEssentialsApiVideos1
    */
    readonly direction?: 'asc' | 'desc'
    
    /**
    * The attribute by which to filter the results. `CC` and related filters target videos with the corresponding Creative Commons licenses. For more information, see our [Creative Commons](https://vimeo.com/creativecommons) page.  Option descriptions:  * `CC` - Return videos under any Creative Commons license.  * `CC-BY` - Return CC BY, or attribution-only, videos.  * `CC-BY-NC` - Return CC BY-NC, or Attribution-NonCommercial, videos.  * `CC-BY-NC-ND` - Return CC BY-NC-ND, or Attribution-NonCommercial-NoDerivs, videos.  * `CC-BY-NC-SA` - Return CC BY-NC-SA, or Attribution-NonCommercial-ShareAlike, videos.  * `CC-BY-ND` - Return CC BY-ND, or Attribution-NoDerivs, videos.  * `CC-BY-SA` - Return CC BY-SA, or Attribution-ShareAlike, videos.  * `CC0` - Return CC0, or public domain, videos.  * `categories` - Filter by categories.  * `duration` - Filter by duration.  * `in-progress` - Return in-progress videos.  * `minimum_likes` - Filter by minimum likes.  * `trending` - Return trending videos.  * `upload_date` - Filter by upload date. 
    * @type {'CC' | 'CC-BY' | 'CC-BY-NC' | 'CC-BY-NC-ND' | 'CC-BY-NC-SA' | 'CC-BY-ND' | 'CC-BY-SA' | 'CC0' | 'categories' | 'duration' | 'in-progress' | 'minimum_likes' | 'trending' | 'upload_date'}
    * @memberof VideosEssentialsApiVideos1
    */
    readonly filter?: 'CC' | 'CC-BY' | 'CC-BY-NC' | 'CC-BY-NC-ND' | 'CC-BY-NC-SA' | 'CC-BY-ND' | 'CC-BY-SA' | 'CC0' | 'categories' | 'duration' | 'in-progress' | 'minimum_likes' | 'trending' | 'upload_date'
    
    /**
    * A comma-separated list of video URLs to find. Querying, filtering, and sorting aren\'t supported when using this field.
    * @type {string}
    * @memberof VideosEssentialsApiVideos1
    */
    readonly links?: string
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof VideosEssentialsApiVideos1
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof VideosEssentialsApiVideos1
    */
    readonly perPage?: number
    
    /**
    * The search query.
    * @type {string}
    * @memberof VideosEssentialsApiVideos1
    */
    readonly query?: string
    
    /**
    * The way to sort the results.  Option descriptions:  * `alphabetical` - Sort the results alphabetically.  * `comments` - Sort the results by number of comments.  * `date` - Sort the results by date.  * `duration` - Sort the results by duration.  * `likes` - Sort the results by number of likes.  * `plays` - Sort the results by number of plays.  * `relevant` - Sort the results by relevance. 
    * @type {'alphabetical' | 'comments' | 'date' | 'duration' | 'likes' | 'plays' | 'relevant'}
    * @memberof VideosEssentialsApiVideos1
    */
    readonly sort?: 'alphabetical' | 'comments' | 'date' | 'duration' | 'likes' | 'plays' | 'relevant'
    
    /**
    * A comma-separated list of video URIs to find. Querying, filtering, and sorting aren\'t supported when using this field.
    * @type {string}
    * @memberof VideosEssentialsApiVideos1
    */
    readonly uris?: string
    
}

/**
 * VideosEssentialsApiGenerated - object-oriented interface
 * @export
 * @class VideosEssentialsApiGenerated
 * @extends {BaseAPI}
 */
export class VideosEssentialsApiGenerated extends BaseAPI {
    /**
     * This method returns all the videos in which the authenticated user has a credited appearance.
     * @summary Get all the videos in which the user appears
     * @param {VideosEssentialsApiAppearancesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosEssentialsApiGenerated
     */
    public appearances(requestParameters: VideosEssentialsApiAppearancesRequest, options?: AxiosRequestConfig) {
        return VideosEssentialsApiFp(this.configuration).appearances(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method determines whether the authenticated user is the owner of the specified video.
     * @summary Check if the user owns a video
     * @param {VideosEssentialsApiCheckUserOwnershipRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosEssentialsApiGenerated
     */
    public checkUserOwnership(requestParameters: VideosEssentialsApiCheckUserOwnershipRequest, options?: AxiosRequestConfig) {
        return VideosEssentialsApiFp(this.configuration).checkUserOwnership(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method determines whether the authenticated user is the owner of the specified video.
     * @summary Check if the user owns a video
     * @param {VideosEssentialsApiCheckUserOwnsVideoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosEssentialsApiGenerated
     */
    public checkUserOwnsVideo(requestParameters: VideosEssentialsApiCheckUserOwnsVideoRequest, options?: AxiosRequestConfig) {
        return VideosEssentialsApiFp(this.configuration).checkUserOwnsVideo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method deletes one or more videos belonging to the specified user. The authenticated user must have permission to delete the videos.  Specify the videos to delete in a comma-separated list by URI using the **uris** query parameter.
     * @summary Delete a user\'s videos
     * @param {VideosEssentialsApiDeleteUserVideosRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosEssentialsApiGenerated
     */
    public deleteUserVideos(requestParameters: VideosEssentialsApiDeleteUserVideosRequest, options?: AxiosRequestConfig) {
        return VideosEssentialsApiFp(this.configuration).deleteUserVideos(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns all the videos that the authenticated user has uploaded.
     * @summary Get all the videos that the user has uploaded
     * @param {VideosEssentialsApiGetAllUserVideosRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosEssentialsApiGenerated
     */
    public getAllUserVideos(requestParameters: VideosEssentialsApiGetAllUserVideosRequest = {}, options?: AxiosRequestConfig) {
        return VideosEssentialsApiFp(this.configuration).getAllUserVideos(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns all the videos in which the authenticated user has a credited appearance.
     * @summary Get all the videos in which the user appears
     * @param {VideosEssentialsApiGetUserAppearancesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosEssentialsApiGenerated
     */
    public getUserAppearances(requestParameters: VideosEssentialsApiGetUserAppearancesRequest = {}, options?: AxiosRequestConfig) {
        return VideosEssentialsApiFp(this.configuration).getUserAppearances(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns a single video.
     * @summary Get a specific video
     * @param {VideosEssentialsApiVideoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosEssentialsApiGenerated
     */
    public video(requestParameters: VideosEssentialsApiVideoRequest, options?: AxiosRequestConfig) {
        return VideosEssentialsApiFp(this.configuration).video(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method deletes the specified video. The authenticated user must be the owner of the video.
     * @summary Delete a video
     * @param {VideosEssentialsApiVideo0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosEssentialsApiGenerated
     */
    public video_1(requestParameters: VideosEssentialsApiVideo0Request, options?: AxiosRequestConfig) {
        return VideosEssentialsApiFp(this.configuration).video_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method edits the specified video.
     * @summary Edit a video
     * @param {VideosEssentialsApiVideo1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosEssentialsApiGenerated
     */
    public video_2(requestParameters: VideosEssentialsApiVideo1Request, options?: AxiosRequestConfig) {
        return VideosEssentialsApiFp(this.configuration).video_2(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns all the videos that the authenticated user has uploaded.
     * @summary Get all the videos that the user has uploaded
     * @param {VideosEssentialsApiVideosRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosEssentialsApiGenerated
     */
    public videos(requestParameters: VideosEssentialsApiVideosRequest, options?: AxiosRequestConfig) {
        return VideosEssentialsApiFp(this.configuration).videos(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method deletes one or more videos belonging to the specified user. The authenticated user must have permission to delete the videos.  Specify the videos to delete in a comma-separated list by URI using the **uris** query parameter.
     * @summary Delete a user\'s videos
     * @param {VideosEssentialsApiVideos0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosEssentialsApiGenerated
     */
    public videos_3(requestParameters: VideosEssentialsApiVideos0Request, options?: AxiosRequestConfig) {
        return VideosEssentialsApiFp(this.configuration).videos_3(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns all the videos that match custom search criteria.
     * @summary Search for videos
     * @param {VideosEssentialsApiVideos1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosEssentialsApiGenerated
     */
    public videos_4(requestParameters: VideosEssentialsApiVideos1Request = {}, options?: AxiosRequestConfig) {
        return VideosEssentialsApiFp(this.configuration).videos_4(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
