/* tslint:disable */
/* eslint-disable */
/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

The version of the OpenAPI document: 3.4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { LiveEventLowLatencyToggleOptionRequest } from '../models';
// @ts-ignore
import { LiveEventLowLatencyToggleOptionRequest1 } from '../models';
// @ts-ignore
import { LiveEventLowLatencyToggleOptionRequest2 } from '../models';
// @ts-ignore
import { ModelError } from '../models';
// @ts-ignore
import { RecurringLiveEventLowLatency } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * LiveEventLowLatencyApi - axios parameter creator
 * @export
 */
export const LiveEventLowLatencyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method toggles the low-latency option of the specified event.
         * @summary Toggle the low-latency option of a live event
         * @param {number} liveEventId The ID of the event.
         * @param {LiveEventLowLatencyToggleOptionRequest} [liveEventLowLatencyToggleOptionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toggleOption: async (liveEventId: number, liveEventLowLatencyToggleOptionRequest?: LiveEventLowLatencyToggleOptionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveEventId' is not null or undefined
            assertParamExists('toggleOption', 'liveEventId', liveEventId)
            const localVarPath = `/live_events/{live_event_id}/low_latency`
                .replace(`{${"live_event_id"}}`, encodeURIComponent(String(liveEventId !== undefined ? liveEventId : `-live_event_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/application/vnd.vimeo.live.low_latency+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: liveEventLowLatencyToggleOptionRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/live_events/{live_event_id}/low_latency',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(liveEventLowLatencyToggleOptionRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method toggles the low-latency option of the specified event.
         * @summary Toggle the low-latency option of a live event
         * @param {number} liveEventId The ID of the event.
         * @param {LiveEventLowLatencyToggleOptionRequest1} [liveEventLowLatencyToggleOptionRequest1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toggleOption_1: async (liveEventId: number, liveEventLowLatencyToggleOptionRequest1?: LiveEventLowLatencyToggleOptionRequest1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveEventId' is not null or undefined
            assertParamExists('toggleOption_1', 'liveEventId', liveEventId)
            const localVarPath = `/me/live_events/{live_event_id}/low_latency`
                .replace(`{${"live_event_id"}}`, encodeURIComponent(String(liveEventId !== undefined ? liveEventId : `-live_event_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/application/vnd.vimeo.live.low_latency+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: liveEventLowLatencyToggleOptionRequest1,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/live_events/{live_event_id}/low_latency',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(liveEventLowLatencyToggleOptionRequest1, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method toggles the low-latency option of the specified event.
         * @summary Toggle the low-latency option of a live event
         * @param {number} liveEventId The ID of the event.
         * @param {number} userId The ID of the user.
         * @param {LiveEventLowLatencyToggleOptionRequest2} [liveEventLowLatencyToggleOptionRequest2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toggleOption_2: async (liveEventId: number, userId: number, liveEventLowLatencyToggleOptionRequest2?: LiveEventLowLatencyToggleOptionRequest2, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveEventId' is not null or undefined
            assertParamExists('toggleOption_2', 'liveEventId', liveEventId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('toggleOption_2', 'userId', userId)
            const localVarPath = `/users/{user_id}/live_events/{live_event_id}/low_latency`
                .replace(`{${"live_event_id"}}`, encodeURIComponent(String(liveEventId !== undefined ? liveEventId : `-live_event_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/application/vnd.vimeo.live.low_latency+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: liveEventLowLatencyToggleOptionRequest2,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/live_events/{live_event_id}/low_latency',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(liveEventLowLatencyToggleOptionRequest2, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LiveEventLowLatencyApi - functional programming interface
 * @export
 */
export const LiveEventLowLatencyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LiveEventLowLatencyApiAxiosParamCreator(configuration)
    return {
        /**
         * This method toggles the low-latency option of the specified event.
         * @summary Toggle the low-latency option of a live event
         * @param {LiveEventLowLatencyApiToggleOptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async toggleOption(requestParameters: LiveEventLowLatencyApiToggleOptionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecurringLiveEventLowLatency>> {
            const liveEventLowLatencyToggleOptionRequest: LiveEventLowLatencyToggleOptionRequest = {
                low_latency: requestParameters.low_latency
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.toggleOption(requestParameters.liveEventId, liveEventLowLatencyToggleOptionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method toggles the low-latency option of the specified event.
         * @summary Toggle the low-latency option of a live event
         * @param {LiveEventLowLatencyApiToggleOption0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async toggleOption_1(requestParameters: LiveEventLowLatencyApiToggleOption0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecurringLiveEventLowLatency>> {
            const liveEventLowLatencyToggleOptionRequest1: LiveEventLowLatencyToggleOptionRequest1 = {
                low_latency: requestParameters.low_latency
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.toggleOption_1(requestParameters.liveEventId, liveEventLowLatencyToggleOptionRequest1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method toggles the low-latency option of the specified event.
         * @summary Toggle the low-latency option of a live event
         * @param {LiveEventLowLatencyApiToggleOption1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async toggleOption_2(requestParameters: LiveEventLowLatencyApiToggleOption1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecurringLiveEventLowLatency>> {
            const liveEventLowLatencyToggleOptionRequest2: LiveEventLowLatencyToggleOptionRequest2 = {
                low_latency: requestParameters.low_latency
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.toggleOption_2(requestParameters.liveEventId, requestParameters.userId, liveEventLowLatencyToggleOptionRequest2, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LiveEventLowLatencyApi - factory interface
 * @export
 */
export const LiveEventLowLatencyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LiveEventLowLatencyApiFp(configuration)
    return {
        /**
         * This method toggles the low-latency option of the specified event.
         * @summary Toggle the low-latency option of a live event
         * @param {LiveEventLowLatencyApiToggleOptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toggleOption(requestParameters: LiveEventLowLatencyApiToggleOptionRequest, options?: AxiosRequestConfig): AxiosPromise<RecurringLiveEventLowLatency> {
            return localVarFp.toggleOption(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method toggles the low-latency option of the specified event.
         * @summary Toggle the low-latency option of a live event
         * @param {LiveEventLowLatencyApiToggleOption0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toggleOption_1(requestParameters: LiveEventLowLatencyApiToggleOption0Request, options?: AxiosRequestConfig): AxiosPromise<RecurringLiveEventLowLatency> {
            return localVarFp.toggleOption_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method toggles the low-latency option of the specified event.
         * @summary Toggle the low-latency option of a live event
         * @param {LiveEventLowLatencyApiToggleOption1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toggleOption_2(requestParameters: LiveEventLowLatencyApiToggleOption1Request, options?: AxiosRequestConfig): AxiosPromise<RecurringLiveEventLowLatency> {
            return localVarFp.toggleOption_2(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for toggleOption operation in LiveEventLowLatencyApi.
 * @export
 * @interface LiveEventLowLatencyApiToggleOptionRequest
 */
export type LiveEventLowLatencyApiToggleOptionRequest = {
    
    /**
    * The ID of the event.
    * @type {number}
    * @memberof LiveEventLowLatencyApiToggleOption
    */
    readonly liveEventId: number
    
} & LiveEventLowLatencyToggleOptionRequest

/**
 * Request parameters for toggleOption_1 operation in LiveEventLowLatencyApi.
 * @export
 * @interface LiveEventLowLatencyApiToggleOption0Request
 */
export type LiveEventLowLatencyApiToggleOption0Request = {
    
    /**
    * The ID of the event.
    * @type {number}
    * @memberof LiveEventLowLatencyApiToggleOption0
    */
    readonly liveEventId: number
    
} & LiveEventLowLatencyToggleOptionRequest1

/**
 * Request parameters for toggleOption_2 operation in LiveEventLowLatencyApi.
 * @export
 * @interface LiveEventLowLatencyApiToggleOption1Request
 */
export type LiveEventLowLatencyApiToggleOption1Request = {
    
    /**
    * The ID of the event.
    * @type {number}
    * @memberof LiveEventLowLatencyApiToggleOption1
    */
    readonly liveEventId: number
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof LiveEventLowLatencyApiToggleOption1
    */
    readonly userId: number
    
} & LiveEventLowLatencyToggleOptionRequest2

/**
 * LiveEventLowLatencyApiGenerated - object-oriented interface
 * @export
 * @class LiveEventLowLatencyApiGenerated
 * @extends {BaseAPI}
 */
export class LiveEventLowLatencyApiGenerated extends BaseAPI {
    /**
     * This method toggles the low-latency option of the specified event.
     * @summary Toggle the low-latency option of a live event
     * @param {LiveEventLowLatencyApiToggleOptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEventLowLatencyApiGenerated
     */
    public toggleOption(requestParameters: LiveEventLowLatencyApiToggleOptionRequest, options?: AxiosRequestConfig) {
        return LiveEventLowLatencyApiFp(this.configuration).toggleOption(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method toggles the low-latency option of the specified event.
     * @summary Toggle the low-latency option of a live event
     * @param {LiveEventLowLatencyApiToggleOption0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEventLowLatencyApiGenerated
     */
    public toggleOption_1(requestParameters: LiveEventLowLatencyApiToggleOption0Request, options?: AxiosRequestConfig) {
        return LiveEventLowLatencyApiFp(this.configuration).toggleOption_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method toggles the low-latency option of the specified event.
     * @summary Toggle the low-latency option of a live event
     * @param {LiveEventLowLatencyApiToggleOption1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEventLowLatencyApiGenerated
     */
    public toggleOption_2(requestParameters: LiveEventLowLatencyApiToggleOption1Request, options?: AxiosRequestConfig) {
        return LiveEventLowLatencyApiFp(this.configuration).toggleOption_2(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
