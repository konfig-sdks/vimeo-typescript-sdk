/* tslint:disable */
/* eslint-disable */
/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

The version of the OpenAPI document: 3.4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ModelError } from '../models';
// @ts-ignore
import { WebinarEmailSettings } from '../models';
// @ts-ignore
import { WebinarEmailsCustomizePreferencesRequest } from '../models';
// @ts-ignore
import { WebinarEmailsCustomizePreferencesRequest1 } from '../models';
// @ts-ignore
import { WebinarEmailsCustomizePreferencesRequestEmailPreferences } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * WebinarEmailsApi - axios parameter creator
 * @export
 */
export const WebinarEmailsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method causes the authenticated user to customize the email preferences of the specified webinar. The user must have administrative access to the webinar.
         * @summary Customize the email preferences of a webinar
         * @param {string} webinarId The ID of the webinar.
         * @param {WebinarEmailsCustomizePreferencesRequest} [webinarEmailsCustomizePreferencesRequest] 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        customizePreferences: async (webinarId: string, webinarEmailsCustomizePreferencesRequest?: WebinarEmailsCustomizePreferencesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webinarId' is not null or undefined
            assertParamExists('customizePreferences', 'webinarId', webinarId)
            const localVarPath = `/me/webinars/{webinar_id}/email_settings`
                .replace(`{${"webinar_id"}}`, encodeURIComponent(String(webinarId !== undefined ? webinarId : `-webinar_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.vimeo.webinar.email.settings+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: webinarEmailsCustomizePreferencesRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/webinars/{webinar_id}/email_settings',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(webinarEmailsCustomizePreferencesRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method causes the authenticated user to customize the email preferences of the specified webinar. The user must have administrative access to the webinar.
         * @summary Customize the email preferences of a webinar
         * @param {number} userId The ID of the user.
         * @param {string} webinarId The ID of the webinar.
         * @param {WebinarEmailsCustomizePreferencesRequest1} [webinarEmailsCustomizePreferencesRequest1] 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        customizePreferences_1: async (userId: number, webinarId: string, webinarEmailsCustomizePreferencesRequest1?: WebinarEmailsCustomizePreferencesRequest1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('customizePreferences_1', 'userId', userId)
            // verify required parameter 'webinarId' is not null or undefined
            assertParamExists('customizePreferences_1', 'webinarId', webinarId)
            const localVarPath = `/users/{user_id}/webinars/{webinar_id}/email_settings`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)))
                .replace(`{${"webinar_id"}}`, encodeURIComponent(String(webinarId !== undefined ? webinarId : `-webinar_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.vimeo.webinar.email.settings+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: webinarEmailsCustomizePreferencesRequest1,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/webinars/{webinar_id}/email_settings',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(webinarEmailsCustomizePreferencesRequest1, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns customized email data for the specified webinar. The authenticated user must have administrative access to the webinar.
         * @summary Get customization email data for a webinar
         * @param {string} webinarId The ID of the webinar.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getCustomizationData: async (webinarId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webinarId' is not null or undefined
            assertParamExists('getCustomizationData', 'webinarId', webinarId)
            const localVarPath = `/me/webinars/{webinar_id}/email_settings`
                .replace(`{${"webinar_id"}}`, encodeURIComponent(String(webinarId !== undefined ? webinarId : `-webinar_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/webinars/{webinar_id}/email_settings',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns customized email data for the specified webinar. The authenticated user must have administrative access to the webinar.
         * @summary Get customization email data for a webinar
         * @param {number} userId The ID of the user.
         * @param {string} webinarId The ID of the webinar.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getCustomizationData_2: async (userId: number, webinarId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getCustomizationData_2', 'userId', userId)
            // verify required parameter 'webinarId' is not null or undefined
            assertParamExists('getCustomizationData_2', 'webinarId', webinarId)
            const localVarPath = `/users/{user_id}/webinars/{webinar_id}/email_settings`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)))
                .replace(`{${"webinar_id"}}`, encodeURIComponent(String(webinarId !== undefined ? webinarId : `-webinar_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/webinars/{webinar_id}/email_settings',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WebinarEmailsApi - functional programming interface
 * @export
 */
export const WebinarEmailsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WebinarEmailsApiAxiosParamCreator(configuration)
    return {
        /**
         * This method causes the authenticated user to customize the email preferences of the specified webinar. The user must have administrative access to the webinar.
         * @summary Customize the email preferences of a webinar
         * @param {WebinarEmailsApiCustomizePreferencesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async customizePreferences(requestParameters: WebinarEmailsApiCustomizePreferencesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebinarEmailSettings>> {
            const webinarEmailsCustomizePreferencesRequest: WebinarEmailsCustomizePreferencesRequest = {
                accent_color: requestParameters.accent_color,
                custom_link: requestParameters.custom_link,
                email_event_reminder_24_hrs: requestParameters.email_event_reminder_24_hrs,
                email_post_event_thank_you: requestParameters.email_post_event_thank_you,
                email_preferences: requestParameters.email_preferences,
                email_registration_confirmation: requestParameters.email_registration_confirmation,
                from: requestParameters.from,
                logo_uri: requestParameters.logo_uri,
                reply_email: requestParameters.reply_email,
                sender_address: requestParameters.sender_address,
                sender_policy_url: requestParameters.sender_policy_url,
                use_custom_link: requestParameters.use_custom_link,
                use_reply_email: requestParameters.use_reply_email,
                use_sender_address: requestParameters.use_sender_address,
                use_sender_policy_url: requestParameters.use_sender_policy_url
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.customizePreferences(requestParameters.webinarId, webinarEmailsCustomizePreferencesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method causes the authenticated user to customize the email preferences of the specified webinar. The user must have administrative access to the webinar.
         * @summary Customize the email preferences of a webinar
         * @param {WebinarEmailsApiCustomizePreferences0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async customizePreferences_1(requestParameters: WebinarEmailsApiCustomizePreferences0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebinarEmailSettings>> {
            const webinarEmailsCustomizePreferencesRequest1: WebinarEmailsCustomizePreferencesRequest1 = {
                accent_color: requestParameters.accent_color,
                custom_link: requestParameters.custom_link,
                email_event_reminder_24_hrs: requestParameters.email_event_reminder_24_hrs,
                email_post_event_thank_you: requestParameters.email_post_event_thank_you,
                email_preferences: requestParameters.email_preferences,
                email_registration_confirmation: requestParameters.email_registration_confirmation,
                from: requestParameters.from,
                logo_uri: requestParameters.logo_uri,
                reply_email: requestParameters.reply_email,
                sender_address: requestParameters.sender_address,
                sender_policy_url: requestParameters.sender_policy_url,
                use_custom_link: requestParameters.use_custom_link,
                use_reply_email: requestParameters.use_reply_email,
                use_sender_address: requestParameters.use_sender_address,
                use_sender_policy_url: requestParameters.use_sender_policy_url
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.customizePreferences_1(requestParameters.userId, requestParameters.webinarId, webinarEmailsCustomizePreferencesRequest1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns customized email data for the specified webinar. The authenticated user must have administrative access to the webinar.
         * @summary Get customization email data for a webinar
         * @param {WebinarEmailsApiGetCustomizationDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async getCustomizationData(requestParameters: WebinarEmailsApiGetCustomizationDataRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebinarEmailSettings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomizationData(requestParameters.webinarId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns customized email data for the specified webinar. The authenticated user must have administrative access to the webinar.
         * @summary Get customization email data for a webinar
         * @param {WebinarEmailsApiGetCustomizationData0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async getCustomizationData_2(requestParameters: WebinarEmailsApiGetCustomizationData0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebinarEmailSettings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomizationData_2(requestParameters.userId, requestParameters.webinarId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WebinarEmailsApi - factory interface
 * @export
 */
export const WebinarEmailsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WebinarEmailsApiFp(configuration)
    return {
        /**
         * This method causes the authenticated user to customize the email preferences of the specified webinar. The user must have administrative access to the webinar.
         * @summary Customize the email preferences of a webinar
         * @param {WebinarEmailsApiCustomizePreferencesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        customizePreferences(requestParameters: WebinarEmailsApiCustomizePreferencesRequest, options?: AxiosRequestConfig): AxiosPromise<WebinarEmailSettings> {
            return localVarFp.customizePreferences(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method causes the authenticated user to customize the email preferences of the specified webinar. The user must have administrative access to the webinar.
         * @summary Customize the email preferences of a webinar
         * @param {WebinarEmailsApiCustomizePreferences0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        customizePreferences_1(requestParameters: WebinarEmailsApiCustomizePreferences0Request, options?: AxiosRequestConfig): AxiosPromise<WebinarEmailSettings> {
            return localVarFp.customizePreferences_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns customized email data for the specified webinar. The authenticated user must have administrative access to the webinar.
         * @summary Get customization email data for a webinar
         * @param {WebinarEmailsApiGetCustomizationDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getCustomizationData(requestParameters: WebinarEmailsApiGetCustomizationDataRequest, options?: AxiosRequestConfig): AxiosPromise<WebinarEmailSettings> {
            return localVarFp.getCustomizationData(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns customized email data for the specified webinar. The authenticated user must have administrative access to the webinar.
         * @summary Get customization email data for a webinar
         * @param {WebinarEmailsApiGetCustomizationData0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getCustomizationData_2(requestParameters: WebinarEmailsApiGetCustomizationData0Request, options?: AxiosRequestConfig): AxiosPromise<WebinarEmailSettings> {
            return localVarFp.getCustomizationData_2(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for customizePreferences operation in WebinarEmailsApi.
 * @export
 * @interface WebinarEmailsApiCustomizePreferencesRequest
 */
export type WebinarEmailsApiCustomizePreferencesRequest = {
    
    /**
    * The ID of the webinar.
    * @type {string}
    * @memberof WebinarEmailsApiCustomizePreferences
    */
    readonly webinarId: string
    
} & WebinarEmailsCustomizePreferencesRequest

/**
 * Request parameters for customizePreferences_1 operation in WebinarEmailsApi.
 * @export
 * @interface WebinarEmailsApiCustomizePreferences0Request
 */
export type WebinarEmailsApiCustomizePreferences0Request = {
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof WebinarEmailsApiCustomizePreferences0
    */
    readonly userId: number
    
    /**
    * The ID of the webinar.
    * @type {string}
    * @memberof WebinarEmailsApiCustomizePreferences0
    */
    readonly webinarId: string
    
} & WebinarEmailsCustomizePreferencesRequest1

/**
 * Request parameters for getCustomizationData operation in WebinarEmailsApi.
 * @export
 * @interface WebinarEmailsApiGetCustomizationDataRequest
 */
export type WebinarEmailsApiGetCustomizationDataRequest = {
    
    /**
    * The ID of the webinar.
    * @type {string}
    * @memberof WebinarEmailsApiGetCustomizationData
    */
    readonly webinarId: string
    
}

/**
 * Request parameters for getCustomizationData_2 operation in WebinarEmailsApi.
 * @export
 * @interface WebinarEmailsApiGetCustomizationData0Request
 */
export type WebinarEmailsApiGetCustomizationData0Request = {
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof WebinarEmailsApiGetCustomizationData0
    */
    readonly userId: number
    
    /**
    * The ID of the webinar.
    * @type {string}
    * @memberof WebinarEmailsApiGetCustomizationData0
    */
    readonly webinarId: string
    
}

/**
 * WebinarEmailsApiGenerated - object-oriented interface
 * @export
 * @class WebinarEmailsApiGenerated
 * @extends {BaseAPI}
 */
export class WebinarEmailsApiGenerated extends BaseAPI {
    /**
     * This method causes the authenticated user to customize the email preferences of the specified webinar. The user must have administrative access to the webinar.
     * @summary Customize the email preferences of a webinar
     * @param {WebinarEmailsApiCustomizePreferencesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof WebinarEmailsApiGenerated
     */
    public customizePreferences(requestParameters: WebinarEmailsApiCustomizePreferencesRequest, options?: AxiosRequestConfig) {
        return WebinarEmailsApiFp(this.configuration).customizePreferences(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method causes the authenticated user to customize the email preferences of the specified webinar. The user must have administrative access to the webinar.
     * @summary Customize the email preferences of a webinar
     * @param {WebinarEmailsApiCustomizePreferences0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof WebinarEmailsApiGenerated
     */
    public customizePreferences_1(requestParameters: WebinarEmailsApiCustomizePreferences0Request, options?: AxiosRequestConfig) {
        return WebinarEmailsApiFp(this.configuration).customizePreferences_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns customized email data for the specified webinar. The authenticated user must have administrative access to the webinar.
     * @summary Get customization email data for a webinar
     * @param {WebinarEmailsApiGetCustomizationDataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof WebinarEmailsApiGenerated
     */
    public getCustomizationData(requestParameters: WebinarEmailsApiGetCustomizationDataRequest, options?: AxiosRequestConfig) {
        return WebinarEmailsApiFp(this.configuration).getCustomizationData(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns customized email data for the specified webinar. The authenticated user must have administrative access to the webinar.
     * @summary Get customization email data for a webinar
     * @param {WebinarEmailsApiGetCustomizationData0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof WebinarEmailsApiGenerated
     */
    public getCustomizationData_2(requestParameters: WebinarEmailsApiGetCustomizationData0Request, options?: AxiosRequestConfig) {
        return WebinarEmailsApiFp(this.configuration).getCustomizationData_2(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
