/* tslint:disable */
/* eslint-disable */
/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

The version of the OpenAPI document: 3.4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { LegacyError } from '../models';
// @ts-ignore
import { OnDemandPromotion } from '../models';
// @ts-ignore
import { OnDemandPromotionCode } from '../models';
// @ts-ignore
import { OnDemandPromotionsAddPromotionToPageRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * OnDemandPromotionsApi - axios parameter creator
 * @export
 */
export const OnDemandPromotionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method adds a promotion to the specified On Demand page. The authenticated user must be the owner of the page.
         * @summary Add a promotion to an On Demand page
         * @param {number} ondemandId The ID of the On Demand page.
         * @param {OnDemandPromotionsAddPromotionToPageRequest} onDemandPromotionsAddPromotionToPageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPromotionToPage: async (ondemandId: number, onDemandPromotionsAddPromotionToPageRequest: OnDemandPromotionsAddPromotionToPageRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ondemandId' is not null or undefined
            assertParamExists('addPromotionToPage', 'ondemandId', ondemandId)
            // verify required parameter 'onDemandPromotionsAddPromotionToPageRequest' is not null or undefined
            assertParamExists('addPromotionToPage', 'onDemandPromotionsAddPromotionToPageRequest', onDemandPromotionsAddPromotionToPageRequest)
            const localVarPath = `/ondemand/pages/{ondemand_id}/promotions`
                .replace(`{${"ondemand_id"}}`, encodeURIComponent(String(ondemandId !== undefined ? ondemandId : `-ondemand_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["promo_codes", "create"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["promo_codes", "create"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.vimeo.ondemand.promotion+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: onDemandPromotionsAddPromotionToPageRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ondemand/pages/{ondemand_id}/promotions',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(onDemandPromotionsAddPromotionToPageRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method deletes a promotion on the specified On Demand page. The authenticated user must be the owner of the page.
         * @summary Delete a promotion on an On Demand page
         * @param {number} ondemandId The ID of the On Demand page.
         * @param {number} promotionId The ID of the promotion.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePromotionOnPage: async (ondemandId: number, promotionId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ondemandId' is not null or undefined
            assertParamExists('deletePromotionOnPage', 'ondemandId', ondemandId)
            // verify required parameter 'promotionId' is not null or undefined
            assertParamExists('deletePromotionOnPage', 'promotionId', promotionId)
            const localVarPath = `/ondemand/pages/{ondemand_id}/promotions/{promotion_id}`
                .replace(`{${"ondemand_id"}}`, encodeURIComponent(String(ondemandId !== undefined ? ondemandId : `-ondemand_id-`)))
                .replace(`{${"promotion_id"}}`, encodeURIComponent(String(promotionId !== undefined ? promotionId : `-promotion_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["promo_codes", "delete"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["promo_codes", "delete"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ondemand/pages/{ondemand_id}/promotions/{promotion_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every promotion on the specified On Demand page. The authenticated user must be the owner of the page.
         * @summary Get all the promotions on an On Demand page
         * @param {number} ondemandId The ID of the On Demand page.
         * @param {'batch' | 'default' | 'single' | 'vip'} filter The type of filter to apply to the results.  Option descriptions:  * &#x60;batch&#x60; - Filter the results by the &#x60;batch&#x60; promotion.  * &#x60;default&#x60; - Filter the results by the default promotion.  * &#x60;single&#x60; - Filter the results by the &#x60;single&#x60; promotion.  * &#x60;vip&#x60; - Filter the results by the &#x60;vip&#x60; promotion. 
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPagePromotions: async (ondemandId: number, filter: 'batch' | 'default' | 'single' | 'vip', page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ondemandId' is not null or undefined
            assertParamExists('getAllPagePromotions', 'ondemandId', ondemandId)
            // verify required parameter 'filter' is not null or undefined
            assertParamExists('getAllPagePromotions', 'filter', filter)
            const localVarPath = `/ondemand/pages/{ondemand_id}/promotions`
                .replace(`{${"ondemand_id"}}`, encodeURIComponent(String(ondemandId !== undefined ? ondemandId : `-ondemand_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["promo_codes"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["promo_codes"], configuration)
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ondemand/pages/{ondemand_id}/promotions',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every code of the specified promotion on an On Demand page. The authenticated user must be the owner of the page.
         * @summary Get all the codes of a promotion on an On Demand page
         * @param {number} ondemandId The ID of the On Demand page.
         * @param {number} promotionId The ID of the promotion.
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPromotionCodes: async (ondemandId: number, promotionId: number, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ondemandId' is not null or undefined
            assertParamExists('getAllPromotionCodes', 'ondemandId', ondemandId)
            // verify required parameter 'promotionId' is not null or undefined
            assertParamExists('getAllPromotionCodes', 'promotionId', promotionId)
            const localVarPath = `/ondemand/pages/{ondemand_id}/promotions/{promotion_id}/codes`
                .replace(`{${"ondemand_id"}}`, encodeURIComponent(String(ondemandId !== undefined ? ondemandId : `-ondemand_id-`)))
                .replace(`{${"promotion_id"}}`, encodeURIComponent(String(promotionId !== undefined ? promotionId : `-promotion_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["promo_codes"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["promo_codes"], configuration)
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ondemand/pages/{ondemand_id}/promotions/{promotion_id}/codes',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns a single promotion on the specified On Demand page. The authenticated user must be the owner of the page.
         * @summary Get a specific promotion on an On Demand page
         * @param {number} ondemandId The ID of the On Demand page.
         * @param {number} promotionId The ID of the promotion.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        specificPromotionGet: async (ondemandId: number, promotionId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ondemandId' is not null or undefined
            assertParamExists('specificPromotionGet', 'ondemandId', ondemandId)
            // verify required parameter 'promotionId' is not null or undefined
            assertParamExists('specificPromotionGet', 'promotionId', promotionId)
            const localVarPath = `/ondemand/pages/{ondemand_id}/promotions/{promotion_id}`
                .replace(`{${"ondemand_id"}}`, encodeURIComponent(String(ondemandId !== undefined ? ondemandId : `-ondemand_id-`)))
                .replace(`{${"promotion_id"}}`, encodeURIComponent(String(promotionId !== undefined ? promotionId : `-promotion_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["promo_codes"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["promo_codes"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ondemand/pages/{ondemand_id}/promotions/{promotion_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OnDemandPromotionsApi - functional programming interface
 * @export
 */
export const OnDemandPromotionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OnDemandPromotionsApiAxiosParamCreator(configuration)
    return {
        /**
         * This method adds a promotion to the specified On Demand page. The authenticated user must be the owner of the page.
         * @summary Add a promotion to an On Demand page
         * @param {OnDemandPromotionsApiAddPromotionToPageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addPromotionToPage(requestParameters: OnDemandPromotionsApiAddPromotionToPageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OnDemandPromotion>> {
            const onDemandPromotionsAddPromotionToPageRequest: OnDemandPromotionsAddPromotionToPageRequest = {
                access_type: requestParameters.access_type,
                code: requestParameters.code,
                discount_type: requestParameters.discount_type,
                download: requestParameters.download,
                end_time: requestParameters.end_time,
                label: requestParameters.label,
                percent_off: requestParameters.percent_off,
                product_type: requestParameters.product_type,
                start_time: requestParameters.start_time,
                stream_period: requestParameters.stream_period,
                total: requestParameters.total,
                type: requestParameters.type
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addPromotionToPage(requestParameters.ondemandId, onDemandPromotionsAddPromotionToPageRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method deletes a promotion on the specified On Demand page. The authenticated user must be the owner of the page.
         * @summary Delete a promotion on an On Demand page
         * @param {OnDemandPromotionsApiDeletePromotionOnPageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePromotionOnPage(requestParameters: OnDemandPromotionsApiDeletePromotionOnPageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePromotionOnPage(requestParameters.ondemandId, requestParameters.promotionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every promotion on the specified On Demand page. The authenticated user must be the owner of the page.
         * @summary Get all the promotions on an On Demand page
         * @param {OnDemandPromotionsApiGetAllPagePromotionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllPagePromotions(requestParameters: OnDemandPromotionsApiGetAllPagePromotionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OnDemandPromotion>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllPagePromotions(requestParameters.ondemandId, requestParameters.filter, requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every code of the specified promotion on an On Demand page. The authenticated user must be the owner of the page.
         * @summary Get all the codes of a promotion on an On Demand page
         * @param {OnDemandPromotionsApiGetAllPromotionCodesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllPromotionCodes(requestParameters: OnDemandPromotionsApiGetAllPromotionCodesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OnDemandPromotionCode>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllPromotionCodes(requestParameters.ondemandId, requestParameters.promotionId, requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns a single promotion on the specified On Demand page. The authenticated user must be the owner of the page.
         * @summary Get a specific promotion on an On Demand page
         * @param {OnDemandPromotionsApiSpecificPromotionGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async specificPromotionGet(requestParameters: OnDemandPromotionsApiSpecificPromotionGetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OnDemandPromotion>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.specificPromotionGet(requestParameters.ondemandId, requestParameters.promotionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OnDemandPromotionsApi - factory interface
 * @export
 */
export const OnDemandPromotionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OnDemandPromotionsApiFp(configuration)
    return {
        /**
         * This method adds a promotion to the specified On Demand page. The authenticated user must be the owner of the page.
         * @summary Add a promotion to an On Demand page
         * @param {OnDemandPromotionsApiAddPromotionToPageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPromotionToPage(requestParameters: OnDemandPromotionsApiAddPromotionToPageRequest, options?: AxiosRequestConfig): AxiosPromise<OnDemandPromotion> {
            return localVarFp.addPromotionToPage(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method deletes a promotion on the specified On Demand page. The authenticated user must be the owner of the page.
         * @summary Delete a promotion on an On Demand page
         * @param {OnDemandPromotionsApiDeletePromotionOnPageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePromotionOnPage(requestParameters: OnDemandPromotionsApiDeletePromotionOnPageRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletePromotionOnPage(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every promotion on the specified On Demand page. The authenticated user must be the owner of the page.
         * @summary Get all the promotions on an On Demand page
         * @param {OnDemandPromotionsApiGetAllPagePromotionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPagePromotions(requestParameters: OnDemandPromotionsApiGetAllPagePromotionsRequest, options?: AxiosRequestConfig): AxiosPromise<OnDemandPromotion> {
            return localVarFp.getAllPagePromotions(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every code of the specified promotion on an On Demand page. The authenticated user must be the owner of the page.
         * @summary Get all the codes of a promotion on an On Demand page
         * @param {OnDemandPromotionsApiGetAllPromotionCodesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPromotionCodes(requestParameters: OnDemandPromotionsApiGetAllPromotionCodesRequest, options?: AxiosRequestConfig): AxiosPromise<OnDemandPromotionCode> {
            return localVarFp.getAllPromotionCodes(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns a single promotion on the specified On Demand page. The authenticated user must be the owner of the page.
         * @summary Get a specific promotion on an On Demand page
         * @param {OnDemandPromotionsApiSpecificPromotionGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        specificPromotionGet(requestParameters: OnDemandPromotionsApiSpecificPromotionGetRequest, options?: AxiosRequestConfig): AxiosPromise<OnDemandPromotion> {
            return localVarFp.specificPromotionGet(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addPromotionToPage operation in OnDemandPromotionsApi.
 * @export
 * @interface OnDemandPromotionsApiAddPromotionToPageRequest
 */
export type OnDemandPromotionsApiAddPromotionToPageRequest = {
    
    /**
    * The ID of the On Demand page.
    * @type {number}
    * @memberof OnDemandPromotionsApiAddPromotionToPage
    */
    readonly ondemandId: number
    
} & OnDemandPromotionsAddPromotionToPageRequest

/**
 * Request parameters for deletePromotionOnPage operation in OnDemandPromotionsApi.
 * @export
 * @interface OnDemandPromotionsApiDeletePromotionOnPageRequest
 */
export type OnDemandPromotionsApiDeletePromotionOnPageRequest = {
    
    /**
    * The ID of the On Demand page.
    * @type {number}
    * @memberof OnDemandPromotionsApiDeletePromotionOnPage
    */
    readonly ondemandId: number
    
    /**
    * The ID of the promotion.
    * @type {number}
    * @memberof OnDemandPromotionsApiDeletePromotionOnPage
    */
    readonly promotionId: number
    
}

/**
 * Request parameters for getAllPagePromotions operation in OnDemandPromotionsApi.
 * @export
 * @interface OnDemandPromotionsApiGetAllPagePromotionsRequest
 */
export type OnDemandPromotionsApiGetAllPagePromotionsRequest = {
    
    /**
    * The ID of the On Demand page.
    * @type {number}
    * @memberof OnDemandPromotionsApiGetAllPagePromotions
    */
    readonly ondemandId: number
    
    /**
    * The type of filter to apply to the results.  Option descriptions:  * `batch` - Filter the results by the `batch` promotion.  * `default` - Filter the results by the default promotion.  * `single` - Filter the results by the `single` promotion.  * `vip` - Filter the results by the `vip` promotion. 
    * @type {'batch' | 'default' | 'single' | 'vip'}
    * @memberof OnDemandPromotionsApiGetAllPagePromotions
    */
    readonly filter: 'batch' | 'default' | 'single' | 'vip'
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof OnDemandPromotionsApiGetAllPagePromotions
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof OnDemandPromotionsApiGetAllPagePromotions
    */
    readonly perPage?: number
    
}

/**
 * Request parameters for getAllPromotionCodes operation in OnDemandPromotionsApi.
 * @export
 * @interface OnDemandPromotionsApiGetAllPromotionCodesRequest
 */
export type OnDemandPromotionsApiGetAllPromotionCodesRequest = {
    
    /**
    * The ID of the On Demand page.
    * @type {number}
    * @memberof OnDemandPromotionsApiGetAllPromotionCodes
    */
    readonly ondemandId: number
    
    /**
    * The ID of the promotion.
    * @type {number}
    * @memberof OnDemandPromotionsApiGetAllPromotionCodes
    */
    readonly promotionId: number
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof OnDemandPromotionsApiGetAllPromotionCodes
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof OnDemandPromotionsApiGetAllPromotionCodes
    */
    readonly perPage?: number
    
}

/**
 * Request parameters for specificPromotionGet operation in OnDemandPromotionsApi.
 * @export
 * @interface OnDemandPromotionsApiSpecificPromotionGetRequest
 */
export type OnDemandPromotionsApiSpecificPromotionGetRequest = {
    
    /**
    * The ID of the On Demand page.
    * @type {number}
    * @memberof OnDemandPromotionsApiSpecificPromotionGet
    */
    readonly ondemandId: number
    
    /**
    * The ID of the promotion.
    * @type {number}
    * @memberof OnDemandPromotionsApiSpecificPromotionGet
    */
    readonly promotionId: number
    
}

/**
 * OnDemandPromotionsApiGenerated - object-oriented interface
 * @export
 * @class OnDemandPromotionsApiGenerated
 * @extends {BaseAPI}
 */
export class OnDemandPromotionsApiGenerated extends BaseAPI {
    /**
     * This method adds a promotion to the specified On Demand page. The authenticated user must be the owner of the page.
     * @summary Add a promotion to an On Demand page
     * @param {OnDemandPromotionsApiAddPromotionToPageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnDemandPromotionsApiGenerated
     */
    public addPromotionToPage(requestParameters: OnDemandPromotionsApiAddPromotionToPageRequest, options?: AxiosRequestConfig) {
        return OnDemandPromotionsApiFp(this.configuration).addPromotionToPage(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method deletes a promotion on the specified On Demand page. The authenticated user must be the owner of the page.
     * @summary Delete a promotion on an On Demand page
     * @param {OnDemandPromotionsApiDeletePromotionOnPageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnDemandPromotionsApiGenerated
     */
    public deletePromotionOnPage(requestParameters: OnDemandPromotionsApiDeletePromotionOnPageRequest, options?: AxiosRequestConfig) {
        return OnDemandPromotionsApiFp(this.configuration).deletePromotionOnPage(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every promotion on the specified On Demand page. The authenticated user must be the owner of the page.
     * @summary Get all the promotions on an On Demand page
     * @param {OnDemandPromotionsApiGetAllPagePromotionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnDemandPromotionsApiGenerated
     */
    public getAllPagePromotions(requestParameters: OnDemandPromotionsApiGetAllPagePromotionsRequest, options?: AxiosRequestConfig) {
        return OnDemandPromotionsApiFp(this.configuration).getAllPagePromotions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every code of the specified promotion on an On Demand page. The authenticated user must be the owner of the page.
     * @summary Get all the codes of a promotion on an On Demand page
     * @param {OnDemandPromotionsApiGetAllPromotionCodesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnDemandPromotionsApiGenerated
     */
    public getAllPromotionCodes(requestParameters: OnDemandPromotionsApiGetAllPromotionCodesRequest, options?: AxiosRequestConfig) {
        return OnDemandPromotionsApiFp(this.configuration).getAllPromotionCodes(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns a single promotion on the specified On Demand page. The authenticated user must be the owner of the page.
     * @summary Get a specific promotion on an On Demand page
     * @param {OnDemandPromotionsApiSpecificPromotionGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnDemandPromotionsApiGenerated
     */
    public specificPromotionGet(requestParameters: OnDemandPromotionsApiSpecificPromotionGetRequest, options?: AxiosRequestConfig) {
        return OnDemandPromotionsApiFp(this.configuration).specificPromotionGet(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
