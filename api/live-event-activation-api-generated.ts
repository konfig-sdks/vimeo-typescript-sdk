/* tslint:disable */
/* eslint-disable */
/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

The version of the OpenAPI document: 3.4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { LiveEventActivationCreateRtmpLinksRequest } from '../models';
// @ts-ignore
import { LiveEventActivationCreateRtmpLinksRequest1 } from '../models';
// @ts-ignore
import { LiveEventActivationCreateRtmpLinksRequest2 } from '../models';
// @ts-ignore
import { ModelError } from '../models';
// @ts-ignore
import { Video } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * LiveEventActivationApi - axios parameter creator
 * @export
 */
export const LiveEventActivationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method creates the necessary RTMP links for the specified event. Begin streaming to these links to trigger the event on Vimeo. The authenticated user must be the owner of the event.
         * @summary Activate a live event
         * @param {number} liveEventId The ID of the event.
         * @param {LiveEventActivationCreateRtmpLinksRequest} [liveEventActivationCreateRtmpLinksRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRtmpLinks: async (liveEventId: number, liveEventActivationCreateRtmpLinksRequest?: LiveEventActivationCreateRtmpLinksRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveEventId' is not null or undefined
            assertParamExists('createRtmpLinks', 'liveEventId', liveEventId)
            const localVarPath = `/live_events/{live_event_id}/activate`
                .replace(`{${"live_event_id"}}`, encodeURIComponent(String(liveEventId !== undefined ? liveEventId : `-live_event_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "private"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "private"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.vimeo.video+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: liveEventActivationCreateRtmpLinksRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/live_events/{live_event_id}/activate',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(liveEventActivationCreateRtmpLinksRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method creates the necessary RTMP links for the specified event. Begin streaming to these links to trigger the event on Vimeo. The authenticated user must be the owner of the event.
         * @summary Activate a live event
         * @param {number} liveEventId The ID of the event.
         * @param {LiveEventActivationCreateRtmpLinksRequest1} [liveEventActivationCreateRtmpLinksRequest1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRtmpLinks_1: async (liveEventId: number, liveEventActivationCreateRtmpLinksRequest1?: LiveEventActivationCreateRtmpLinksRequest1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveEventId' is not null or undefined
            assertParamExists('createRtmpLinks_1', 'liveEventId', liveEventId)
            const localVarPath = `/me/live_events/{live_event_id}/activate`
                .replace(`{${"live_event_id"}}`, encodeURIComponent(String(liveEventId !== undefined ? liveEventId : `-live_event_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "private"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "private"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.vimeo.video+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: liveEventActivationCreateRtmpLinksRequest1,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/live_events/{live_event_id}/activate',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(liveEventActivationCreateRtmpLinksRequest1, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method creates the necessary RTMP links for the specified event. Begin streaming to these links to trigger the event on Vimeo. The authenticated user must be the owner of the event.
         * @summary Activate a live event
         * @param {number} liveEventId The ID of the event.
         * @param {number} userId The ID of the user.
         * @param {LiveEventActivationCreateRtmpLinksRequest2} [liveEventActivationCreateRtmpLinksRequest2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRtmpLinks_2: async (liveEventId: number, userId: number, liveEventActivationCreateRtmpLinksRequest2?: LiveEventActivationCreateRtmpLinksRequest2, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveEventId' is not null or undefined
            assertParamExists('createRtmpLinks_2', 'liveEventId', liveEventId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('createRtmpLinks_2', 'userId', userId)
            const localVarPath = `/users/{user_id}/live_events/{live_event_id}/activate`
                .replace(`{${"live_event_id"}}`, encodeURIComponent(String(liveEventId !== undefined ? liveEventId : `-live_event_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "private"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "private"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.vimeo.video+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: liveEventActivationCreateRtmpLinksRequest2,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/live_events/{live_event_id}/activate',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(liveEventActivationCreateRtmpLinksRequest2, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LiveEventActivationApi - functional programming interface
 * @export
 */
export const LiveEventActivationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LiveEventActivationApiAxiosParamCreator(configuration)
    return {
        /**
         * This method creates the necessary RTMP links for the specified event. Begin streaming to these links to trigger the event on Vimeo. The authenticated user must be the owner of the event.
         * @summary Activate a live event
         * @param {LiveEventActivationApiCreateRtmpLinksRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRtmpLinks(requestParameters: LiveEventActivationApiCreateRtmpLinksRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Video>> {
            const liveEventActivationCreateRtmpLinksRequest: LiveEventActivationCreateRtmpLinksRequest = {
                cloud_composing_streaming: requestParameters.cloud_composing_streaming,
                streaming_start_requested: requestParameters.streaming_start_requested
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRtmpLinks(requestParameters.liveEventId, liveEventActivationCreateRtmpLinksRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method creates the necessary RTMP links for the specified event. Begin streaming to these links to trigger the event on Vimeo. The authenticated user must be the owner of the event.
         * @summary Activate a live event
         * @param {LiveEventActivationApiCreateRtmpLinks0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRtmpLinks_1(requestParameters: LiveEventActivationApiCreateRtmpLinks0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Video>> {
            const liveEventActivationCreateRtmpLinksRequest1: LiveEventActivationCreateRtmpLinksRequest1 = {
                cloud_composing_streaming: requestParameters.cloud_composing_streaming,
                streaming_start_requested: requestParameters.streaming_start_requested
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRtmpLinks_1(requestParameters.liveEventId, liveEventActivationCreateRtmpLinksRequest1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method creates the necessary RTMP links for the specified event. Begin streaming to these links to trigger the event on Vimeo. The authenticated user must be the owner of the event.
         * @summary Activate a live event
         * @param {LiveEventActivationApiCreateRtmpLinks1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRtmpLinks_2(requestParameters: LiveEventActivationApiCreateRtmpLinks1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Video>> {
            const liveEventActivationCreateRtmpLinksRequest2: LiveEventActivationCreateRtmpLinksRequest2 = {
                cloud_composing_streaming: requestParameters.cloud_composing_streaming,
                streaming_start_requested: requestParameters.streaming_start_requested
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRtmpLinks_2(requestParameters.liveEventId, requestParameters.userId, liveEventActivationCreateRtmpLinksRequest2, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LiveEventActivationApi - factory interface
 * @export
 */
export const LiveEventActivationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LiveEventActivationApiFp(configuration)
    return {
        /**
         * This method creates the necessary RTMP links for the specified event. Begin streaming to these links to trigger the event on Vimeo. The authenticated user must be the owner of the event.
         * @summary Activate a live event
         * @param {LiveEventActivationApiCreateRtmpLinksRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRtmpLinks(requestParameters: LiveEventActivationApiCreateRtmpLinksRequest, options?: AxiosRequestConfig): AxiosPromise<Video> {
            return localVarFp.createRtmpLinks(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method creates the necessary RTMP links for the specified event. Begin streaming to these links to trigger the event on Vimeo. The authenticated user must be the owner of the event.
         * @summary Activate a live event
         * @param {LiveEventActivationApiCreateRtmpLinks0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRtmpLinks_1(requestParameters: LiveEventActivationApiCreateRtmpLinks0Request, options?: AxiosRequestConfig): AxiosPromise<Video> {
            return localVarFp.createRtmpLinks_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method creates the necessary RTMP links for the specified event. Begin streaming to these links to trigger the event on Vimeo. The authenticated user must be the owner of the event.
         * @summary Activate a live event
         * @param {LiveEventActivationApiCreateRtmpLinks1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRtmpLinks_2(requestParameters: LiveEventActivationApiCreateRtmpLinks1Request, options?: AxiosRequestConfig): AxiosPromise<Video> {
            return localVarFp.createRtmpLinks_2(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createRtmpLinks operation in LiveEventActivationApi.
 * @export
 * @interface LiveEventActivationApiCreateRtmpLinksRequest
 */
export type LiveEventActivationApiCreateRtmpLinksRequest = {
    
    /**
    * The ID of the event.
    * @type {number}
    * @memberof LiveEventActivationApiCreateRtmpLinks
    */
    readonly liveEventId: number
    
} & LiveEventActivationCreateRtmpLinksRequest

/**
 * Request parameters for createRtmpLinks_1 operation in LiveEventActivationApi.
 * @export
 * @interface LiveEventActivationApiCreateRtmpLinks0Request
 */
export type LiveEventActivationApiCreateRtmpLinks0Request = {
    
    /**
    * The ID of the event.
    * @type {number}
    * @memberof LiveEventActivationApiCreateRtmpLinks0
    */
    readonly liveEventId: number
    
} & LiveEventActivationCreateRtmpLinksRequest1

/**
 * Request parameters for createRtmpLinks_2 operation in LiveEventActivationApi.
 * @export
 * @interface LiveEventActivationApiCreateRtmpLinks1Request
 */
export type LiveEventActivationApiCreateRtmpLinks1Request = {
    
    /**
    * The ID of the event.
    * @type {number}
    * @memberof LiveEventActivationApiCreateRtmpLinks1
    */
    readonly liveEventId: number
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof LiveEventActivationApiCreateRtmpLinks1
    */
    readonly userId: number
    
} & LiveEventActivationCreateRtmpLinksRequest2

/**
 * LiveEventActivationApiGenerated - object-oriented interface
 * @export
 * @class LiveEventActivationApiGenerated
 * @extends {BaseAPI}
 */
export class LiveEventActivationApiGenerated extends BaseAPI {
    /**
     * This method creates the necessary RTMP links for the specified event. Begin streaming to these links to trigger the event on Vimeo. The authenticated user must be the owner of the event.
     * @summary Activate a live event
     * @param {LiveEventActivationApiCreateRtmpLinksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEventActivationApiGenerated
     */
    public createRtmpLinks(requestParameters: LiveEventActivationApiCreateRtmpLinksRequest, options?: AxiosRequestConfig) {
        return LiveEventActivationApiFp(this.configuration).createRtmpLinks(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method creates the necessary RTMP links for the specified event. Begin streaming to these links to trigger the event on Vimeo. The authenticated user must be the owner of the event.
     * @summary Activate a live event
     * @param {LiveEventActivationApiCreateRtmpLinks0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEventActivationApiGenerated
     */
    public createRtmpLinks_1(requestParameters: LiveEventActivationApiCreateRtmpLinks0Request, options?: AxiosRequestConfig) {
        return LiveEventActivationApiFp(this.configuration).createRtmpLinks_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method creates the necessary RTMP links for the specified event. Begin streaming to these links to trigger the event on Vimeo. The authenticated user must be the owner of the event.
     * @summary Activate a live event
     * @param {LiveEventActivationApiCreateRtmpLinks1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEventActivationApiGenerated
     */
    public createRtmpLinks_2(requestParameters: LiveEventActivationApiCreateRtmpLinks1Request, options?: AxiosRequestConfig) {
        return LiveEventActivationApiFp(this.configuration).createRtmpLinks_2(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
