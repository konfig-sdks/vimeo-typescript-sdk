/* tslint:disable */
/* eslint-disable */
/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

The version of the OpenAPI document: 3.4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Channel } from '../models';
// @ts-ignore
import { ChannelsVideosAddMultipleToChannelRequest } from '../models';
// @ts-ignore
import { ChannelsVideosRemoveMultipleFromChannelRequest } from '../models';
// @ts-ignore
import { LegacyError } from '../models';
// @ts-ignore
import { Video } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ChannelsVideosApi - axios parameter creator
 * @export
 */
export const ChannelsVideosApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method adds multiple videos to the specified channel. The authenticated user must be a moderator of the channel.
         * @summary Add a list of videos to a channel
         * @param {number} channelId The ID of the channel.
         * @param {ChannelsVideosAddMultipleToChannelRequest} channelsVideosAddMultipleToChannelRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMultipleToChannel: async (channelId: number, channelsVideosAddMultipleToChannelRequest: ChannelsVideosAddMultipleToChannelRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('addMultipleToChannel', 'channelId', channelId)
            // verify required parameter 'channelsVideosAddMultipleToChannelRequest' is not null or undefined
            assertParamExists('addMultipleToChannel', 'channelsVideosAddMultipleToChannelRequest', channelsVideosAddMultipleToChannelRequest)
            const localVarPath = `/channels/{channel_id}/videos`
                .replace(`{${"channel_id"}}`, encodeURIComponent(String(channelId !== undefined ? channelId : `-channel_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: channelsVideosAddMultipleToChannelRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/channels/{channel_id}/videos',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(channelsVideosAddMultipleToChannelRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method adds a single video to the specified channel. The authenticated user must be a moderator of the channel.
         * @summary Add a specific video to a channel
         * @param {number} channelId The ID of the channel.
         * @param {number} videoId The ID of the video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addVideoToChannel: async (channelId: number, videoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('addVideoToChannel', 'channelId', channelId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('addVideoToChannel', 'videoId', videoId)
            const localVarPath = `/channels/{channel_id}/videos/{video_id}`
                .replace(`{${"channel_id"}}`, encodeURIComponent(String(channelId !== undefined ? channelId : `-channel_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/channels/{channel_id}/videos/{video_id}',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every channel to which the authenticated user can add or remove the specified video. The authenticated user must be a moderator of the channel.
         * @summary Get all the channels to which the user can add or remove a specific video
         * @param {number} videoId The ID of the video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccessibleChannels: async (videoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('getAccessibleChannels', 'videoId', videoId)
            const localVarPath = `/videos/{video_id}/available_channels`
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/videos/{video_id}/available_channels',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns a single video in the specified channel. You can use it to determine whether the video is in the channel.
         * @summary Get a specific video in a channel
         * @param {number} channelId The ID of the channel.
         * @param {number} videoId The ID of the video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificVideoInChannel: async (channelId: number, videoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('getSpecificVideoInChannel', 'channelId', channelId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('getSpecificVideoInChannel', 'videoId', videoId)
            const localVarPath = `/channels/{channel_id}/videos/{video_id}`
                .replace(`{${"channel_id"}}`, encodeURIComponent(String(channelId !== undefined ? channelId : `-channel_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/channels/{channel_id}/videos/{video_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every video in the specified channel.
         * @summary Get all the videos in a channel
         * @param {number} channelId The ID of the channel.
         * @param {string} [containingUri] The page that contains the video URI.
         * @param {'asc' | 'desc'} [direction] The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order. 
         * @param {'embeddable'} [filter] The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Return embeddable videos. 
         * @param {boolean} [filterEmbeddable] Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;.
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {string} [query] The search query to use to filter the results.
         * @param {'added' | 'alphabetical' | 'comments' | 'date' | 'default' | 'duration' | 'likes' | 'manual' | 'modified_time' | 'plays'} [sort] The way to sort the results.  Option descriptions:  * &#x60;added&#x60; - Sort the results by date added.  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by creation date.  * &#x60;default&#x60; - Use the default sorting method.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;manual&#x60; - Sort the results as the user has arranged them.  * &#x60;modified_time&#x60; - Sort the results by last modification.  * &#x60;plays&#x60; - Sort the results by number of plays. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInChannel: async (channelId: number, containingUri?: string, direction?: 'asc' | 'desc', filter?: 'embeddable', filterEmbeddable?: boolean, page?: number, perPage?: number, query?: string, sort?: 'added' | 'alphabetical' | 'comments' | 'date' | 'default' | 'duration' | 'likes' | 'manual' | 'modified_time' | 'plays', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('listInChannel', 'channelId', channelId)
            const localVarPath = `/channels/{channel_id}/videos`
                .replace(`{${"channel_id"}}`, encodeURIComponent(String(channelId !== undefined ? channelId : `-channel_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            if (containingUri !== undefined) {
                localVarQueryParameter['containing_uri'] = containingUri;
            }

            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (filterEmbeddable !== undefined) {
                localVarQueryParameter['filter_embeddable'] = filterEmbeddable;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/channels/{channel_id}/videos',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method removes multiple videos from the specified channel. Include the videos by their URI as a JSON block in the body of the request using the **video_uri** field, like this: `[{ \"video_uri\": \"/videos/1234\" }, { \"video_uri\": \"/videos/1235\" }]`. The authenticated user must be a moderator of the channel. For more information on batch requests like this one, see [Using Common Formats and Parameters](https://developer.vimeo.com/api/common-formats#working-with-batch-requests).
         * @summary Remove a list of videos from a channel
         * @param {number} channelId The ID of the channel.
         * @param {ChannelsVideosRemoveMultipleFromChannelRequest} channelsVideosRemoveMultipleFromChannelRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeMultipleFromChannel: async (channelId: number, channelsVideosRemoveMultipleFromChannelRequest: ChannelsVideosRemoveMultipleFromChannelRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('removeMultipleFromChannel', 'channelId', channelId)
            // verify required parameter 'channelsVideosRemoveMultipleFromChannelRequest' is not null or undefined
            assertParamExists('removeMultipleFromChannel', 'channelsVideosRemoveMultipleFromChannelRequest', channelsVideosRemoveMultipleFromChannelRequest)
            const localVarPath = `/channels/{channel_id}/videos`
                .replace(`{${"channel_id"}}`, encodeURIComponent(String(channelId !== undefined ? channelId : `-channel_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: channelsVideosRemoveMultipleFromChannelRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/channels/{channel_id}/videos',
                httpMethod: 'DELETE'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(channelsVideosRemoveMultipleFromChannelRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method removes a single video from the specified channel. The authenticated user must be a moderator of the channel.
         * @summary Remove a specific video from a channel
         * @param {number} channelId The ID of the channel.
         * @param {number} videoId The ID of the video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeSpecificVideo: async (channelId: number, videoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('removeSpecificVideo', 'channelId', channelId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('removeSpecificVideo', 'videoId', videoId)
            const localVarPath = `/channels/{channel_id}/videos/{video_id}`
                .replace(`{${"channel_id"}}`, encodeURIComponent(String(channelId !== undefined ? channelId : `-channel_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/channels/{channel_id}/videos/{video_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChannelsVideosApi - functional programming interface
 * @export
 */
export const ChannelsVideosApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ChannelsVideosApiAxiosParamCreator(configuration)
    return {
        /**
         * This method adds multiple videos to the specified channel. The authenticated user must be a moderator of the channel.
         * @summary Add a list of videos to a channel
         * @param {ChannelsVideosApiAddMultipleToChannelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addMultipleToChannel(requestParameters: ChannelsVideosApiAddMultipleToChannelRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const channelsVideosAddMultipleToChannelRequest: ChannelsVideosAddMultipleToChannelRequest = {
                video_uri: requestParameters.video_uri
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addMultipleToChannel(requestParameters.channelId, channelsVideosAddMultipleToChannelRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method adds a single video to the specified channel. The authenticated user must be a moderator of the channel.
         * @summary Add a specific video to a channel
         * @param {ChannelsVideosApiAddVideoToChannelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addVideoToChannel(requestParameters: ChannelsVideosApiAddVideoToChannelRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addVideoToChannel(requestParameters.channelId, requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every channel to which the authenticated user can add or remove the specified video. The authenticated user must be a moderator of the channel.
         * @summary Get all the channels to which the user can add or remove a specific video
         * @param {ChannelsVideosApiGetAccessibleChannelsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccessibleChannels(requestParameters: ChannelsVideosApiGetAccessibleChannelsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Channel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccessibleChannels(requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns a single video in the specified channel. You can use it to determine whether the video is in the channel.
         * @summary Get a specific video in a channel
         * @param {ChannelsVideosApiGetSpecificVideoInChannelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpecificVideoInChannel(requestParameters: ChannelsVideosApiGetSpecificVideoInChannelRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Video>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpecificVideoInChannel(requestParameters.channelId, requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every video in the specified channel.
         * @summary Get all the videos in a channel
         * @param {ChannelsVideosApiListInChannelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listInChannel(requestParameters: ChannelsVideosApiListInChannelRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Video>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listInChannel(requestParameters.channelId, requestParameters.containingUri, requestParameters.direction, requestParameters.filter, requestParameters.filterEmbeddable, requestParameters.page, requestParameters.perPage, requestParameters.query, requestParameters.sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method removes multiple videos from the specified channel. Include the videos by their URI as a JSON block in the body of the request using the **video_uri** field, like this: `[{ \"video_uri\": \"/videos/1234\" }, { \"video_uri\": \"/videos/1235\" }]`. The authenticated user must be a moderator of the channel. For more information on batch requests like this one, see [Using Common Formats and Parameters](https://developer.vimeo.com/api/common-formats#working-with-batch-requests).
         * @summary Remove a list of videos from a channel
         * @param {ChannelsVideosApiRemoveMultipleFromChannelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeMultipleFromChannel(requestParameters: ChannelsVideosApiRemoveMultipleFromChannelRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const channelsVideosRemoveMultipleFromChannelRequest: ChannelsVideosRemoveMultipleFromChannelRequest = {
                video_uri: requestParameters.video_uri
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeMultipleFromChannel(requestParameters.channelId, channelsVideosRemoveMultipleFromChannelRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method removes a single video from the specified channel. The authenticated user must be a moderator of the channel.
         * @summary Remove a specific video from a channel
         * @param {ChannelsVideosApiRemoveSpecificVideoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeSpecificVideo(requestParameters: ChannelsVideosApiRemoveSpecificVideoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeSpecificVideo(requestParameters.channelId, requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ChannelsVideosApi - factory interface
 * @export
 */
export const ChannelsVideosApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ChannelsVideosApiFp(configuration)
    return {
        /**
         * This method adds multiple videos to the specified channel. The authenticated user must be a moderator of the channel.
         * @summary Add a list of videos to a channel
         * @param {ChannelsVideosApiAddMultipleToChannelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMultipleToChannel(requestParameters: ChannelsVideosApiAddMultipleToChannelRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addMultipleToChannel(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method adds a single video to the specified channel. The authenticated user must be a moderator of the channel.
         * @summary Add a specific video to a channel
         * @param {ChannelsVideosApiAddVideoToChannelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addVideoToChannel(requestParameters: ChannelsVideosApiAddVideoToChannelRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addVideoToChannel(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every channel to which the authenticated user can add or remove the specified video. The authenticated user must be a moderator of the channel.
         * @summary Get all the channels to which the user can add or remove a specific video
         * @param {ChannelsVideosApiGetAccessibleChannelsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccessibleChannels(requestParameters: ChannelsVideosApiGetAccessibleChannelsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Channel>> {
            return localVarFp.getAccessibleChannels(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns a single video in the specified channel. You can use it to determine whether the video is in the channel.
         * @summary Get a specific video in a channel
         * @param {ChannelsVideosApiGetSpecificVideoInChannelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificVideoInChannel(requestParameters: ChannelsVideosApiGetSpecificVideoInChannelRequest, options?: AxiosRequestConfig): AxiosPromise<Video> {
            return localVarFp.getSpecificVideoInChannel(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every video in the specified channel.
         * @summary Get all the videos in a channel
         * @param {ChannelsVideosApiListInChannelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInChannel(requestParameters: ChannelsVideosApiListInChannelRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Video>> {
            return localVarFp.listInChannel(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method removes multiple videos from the specified channel. Include the videos by their URI as a JSON block in the body of the request using the **video_uri** field, like this: `[{ \"video_uri\": \"/videos/1234\" }, { \"video_uri\": \"/videos/1235\" }]`. The authenticated user must be a moderator of the channel. For more information on batch requests like this one, see [Using Common Formats and Parameters](https://developer.vimeo.com/api/common-formats#working-with-batch-requests).
         * @summary Remove a list of videos from a channel
         * @param {ChannelsVideosApiRemoveMultipleFromChannelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeMultipleFromChannel(requestParameters: ChannelsVideosApiRemoveMultipleFromChannelRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeMultipleFromChannel(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method removes a single video from the specified channel. The authenticated user must be a moderator of the channel.
         * @summary Remove a specific video from a channel
         * @param {ChannelsVideosApiRemoveSpecificVideoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeSpecificVideo(requestParameters: ChannelsVideosApiRemoveSpecificVideoRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeSpecificVideo(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addMultipleToChannel operation in ChannelsVideosApi.
 * @export
 * @interface ChannelsVideosApiAddMultipleToChannelRequest
 */
export type ChannelsVideosApiAddMultipleToChannelRequest = {
    
    /**
    * The ID of the channel.
    * @type {number}
    * @memberof ChannelsVideosApiAddMultipleToChannel
    */
    readonly channelId: number
    
} & ChannelsVideosAddMultipleToChannelRequest

/**
 * Request parameters for addVideoToChannel operation in ChannelsVideosApi.
 * @export
 * @interface ChannelsVideosApiAddVideoToChannelRequest
 */
export type ChannelsVideosApiAddVideoToChannelRequest = {
    
    /**
    * The ID of the channel.
    * @type {number}
    * @memberof ChannelsVideosApiAddVideoToChannel
    */
    readonly channelId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof ChannelsVideosApiAddVideoToChannel
    */
    readonly videoId: number
    
}

/**
 * Request parameters for getAccessibleChannels operation in ChannelsVideosApi.
 * @export
 * @interface ChannelsVideosApiGetAccessibleChannelsRequest
 */
export type ChannelsVideosApiGetAccessibleChannelsRequest = {
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof ChannelsVideosApiGetAccessibleChannels
    */
    readonly videoId: number
    
}

/**
 * Request parameters for getSpecificVideoInChannel operation in ChannelsVideosApi.
 * @export
 * @interface ChannelsVideosApiGetSpecificVideoInChannelRequest
 */
export type ChannelsVideosApiGetSpecificVideoInChannelRequest = {
    
    /**
    * The ID of the channel.
    * @type {number}
    * @memberof ChannelsVideosApiGetSpecificVideoInChannel
    */
    readonly channelId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof ChannelsVideosApiGetSpecificVideoInChannel
    */
    readonly videoId: number
    
}

/**
 * Request parameters for listInChannel operation in ChannelsVideosApi.
 * @export
 * @interface ChannelsVideosApiListInChannelRequest
 */
export type ChannelsVideosApiListInChannelRequest = {
    
    /**
    * The ID of the channel.
    * @type {number}
    * @memberof ChannelsVideosApiListInChannel
    */
    readonly channelId: number
    
    /**
    * The page that contains the video URI.
    * @type {string}
    * @memberof ChannelsVideosApiListInChannel
    */
    readonly containingUri?: string
    
    /**
    * The sort direction of the results.  Option descriptions:  * `asc` - Sort the results in ascending order.  * `desc` - Sort the results in descending order. 
    * @type {'asc' | 'desc'}
    * @memberof ChannelsVideosApiListInChannel
    */
    readonly direction?: 'asc' | 'desc'
    
    /**
    * The attribute by which to filter the results.  Option descriptions:  * `embeddable` - Return embeddable videos. 
    * @type {'embeddable'}
    * @memberof ChannelsVideosApiListInChannel
    */
    readonly filter?: 'embeddable'
    
    /**
    * Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). This parameter is required only when **filter** is `embeddable`.
    * @type {boolean}
    * @memberof ChannelsVideosApiListInChannel
    */
    readonly filterEmbeddable?: boolean
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof ChannelsVideosApiListInChannel
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof ChannelsVideosApiListInChannel
    */
    readonly perPage?: number
    
    /**
    * The search query to use to filter the results.
    * @type {string}
    * @memberof ChannelsVideosApiListInChannel
    */
    readonly query?: string
    
    /**
    * The way to sort the results.  Option descriptions:  * `added` - Sort the results by date added.  * `alphabetical` - Sort the results alphabetically.  * `comments` - Sort the results by number of comments.  * `date` - Sort the results by creation date.  * `default` - Use the default sorting method.  * `duration` - Sort the results by duration.  * `likes` - Sort the results by number of likes.  * `manual` - Sort the results as the user has arranged them.  * `modified_time` - Sort the results by last modification.  * `plays` - Sort the results by number of plays. 
    * @type {'added' | 'alphabetical' | 'comments' | 'date' | 'default' | 'duration' | 'likes' | 'manual' | 'modified_time' | 'plays'}
    * @memberof ChannelsVideosApiListInChannel
    */
    readonly sort?: 'added' | 'alphabetical' | 'comments' | 'date' | 'default' | 'duration' | 'likes' | 'manual' | 'modified_time' | 'plays'
    
}

/**
 * Request parameters for removeMultipleFromChannel operation in ChannelsVideosApi.
 * @export
 * @interface ChannelsVideosApiRemoveMultipleFromChannelRequest
 */
export type ChannelsVideosApiRemoveMultipleFromChannelRequest = {
    
    /**
    * The ID of the channel.
    * @type {number}
    * @memberof ChannelsVideosApiRemoveMultipleFromChannel
    */
    readonly channelId: number
    
} & ChannelsVideosRemoveMultipleFromChannelRequest

/**
 * Request parameters for removeSpecificVideo operation in ChannelsVideosApi.
 * @export
 * @interface ChannelsVideosApiRemoveSpecificVideoRequest
 */
export type ChannelsVideosApiRemoveSpecificVideoRequest = {
    
    /**
    * The ID of the channel.
    * @type {number}
    * @memberof ChannelsVideosApiRemoveSpecificVideo
    */
    readonly channelId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof ChannelsVideosApiRemoveSpecificVideo
    */
    readonly videoId: number
    
}

/**
 * ChannelsVideosApiGenerated - object-oriented interface
 * @export
 * @class ChannelsVideosApiGenerated
 * @extends {BaseAPI}
 */
export class ChannelsVideosApiGenerated extends BaseAPI {
    /**
     * This method adds multiple videos to the specified channel. The authenticated user must be a moderator of the channel.
     * @summary Add a list of videos to a channel
     * @param {ChannelsVideosApiAddMultipleToChannelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelsVideosApiGenerated
     */
    public addMultipleToChannel(requestParameters: ChannelsVideosApiAddMultipleToChannelRequest, options?: AxiosRequestConfig) {
        return ChannelsVideosApiFp(this.configuration).addMultipleToChannel(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method adds a single video to the specified channel. The authenticated user must be a moderator of the channel.
     * @summary Add a specific video to a channel
     * @param {ChannelsVideosApiAddVideoToChannelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelsVideosApiGenerated
     */
    public addVideoToChannel(requestParameters: ChannelsVideosApiAddVideoToChannelRequest, options?: AxiosRequestConfig) {
        return ChannelsVideosApiFp(this.configuration).addVideoToChannel(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every channel to which the authenticated user can add or remove the specified video. The authenticated user must be a moderator of the channel.
     * @summary Get all the channels to which the user can add or remove a specific video
     * @param {ChannelsVideosApiGetAccessibleChannelsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelsVideosApiGenerated
     */
    public getAccessibleChannels(requestParameters: ChannelsVideosApiGetAccessibleChannelsRequest, options?: AxiosRequestConfig) {
        return ChannelsVideosApiFp(this.configuration).getAccessibleChannels(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns a single video in the specified channel. You can use it to determine whether the video is in the channel.
     * @summary Get a specific video in a channel
     * @param {ChannelsVideosApiGetSpecificVideoInChannelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelsVideosApiGenerated
     */
    public getSpecificVideoInChannel(requestParameters: ChannelsVideosApiGetSpecificVideoInChannelRequest, options?: AxiosRequestConfig) {
        return ChannelsVideosApiFp(this.configuration).getSpecificVideoInChannel(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every video in the specified channel.
     * @summary Get all the videos in a channel
     * @param {ChannelsVideosApiListInChannelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelsVideosApiGenerated
     */
    public listInChannel(requestParameters: ChannelsVideosApiListInChannelRequest, options?: AxiosRequestConfig) {
        return ChannelsVideosApiFp(this.configuration).listInChannel(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method removes multiple videos from the specified channel. Include the videos by their URI as a JSON block in the body of the request using the **video_uri** field, like this: `[{ \"video_uri\": \"/videos/1234\" }, { \"video_uri\": \"/videos/1235\" }]`. The authenticated user must be a moderator of the channel. For more information on batch requests like this one, see [Using Common Formats and Parameters](https://developer.vimeo.com/api/common-formats#working-with-batch-requests).
     * @summary Remove a list of videos from a channel
     * @param {ChannelsVideosApiRemoveMultipleFromChannelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelsVideosApiGenerated
     */
    public removeMultipleFromChannel(requestParameters: ChannelsVideosApiRemoveMultipleFromChannelRequest, options?: AxiosRequestConfig) {
        return ChannelsVideosApiFp(this.configuration).removeMultipleFromChannel(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method removes a single video from the specified channel. The authenticated user must be a moderator of the channel.
     * @summary Remove a specific video from a channel
     * @param {ChannelsVideosApiRemoveSpecificVideoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelsVideosApiGenerated
     */
    public removeSpecificVideo(requestParameters: ChannelsVideosApiRemoveSpecificVideoRequest, options?: AxiosRequestConfig) {
        return ChannelsVideosApiFp(this.configuration).removeSpecificVideo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
