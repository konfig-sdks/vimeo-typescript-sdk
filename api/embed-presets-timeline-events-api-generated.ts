/* tslint:disable */
/* eslint-disable */
/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

The version of the OpenAPI document: 3.4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { LegacyError } from '../models';
// @ts-ignore
import { Picture } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * EmbedPresetsTimelineEventsApi - axios parameter creator
 * @export
 */
export const EmbedPresetsTimelineEventsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method adds a timeline event thumbnail to the specified video. The authenticated user must be the owner of the video.
         * @summary Add a timeline event thumbnail to a video
         * @param {number} videoId The ID of the video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addThumbnailToVideo: async (videoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('addThumbnailToVideo', 'videoId', videoId)
            const localVarPath = `/videos/{video_id}/timelinethumbnails`
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["upload"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["upload"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/videos/{video_id}/timelinethumbnails',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns a single timeline event thumbnail that belongs to the specified video.
         * @summary Get a timeline event thumbnail
         * @param {number} thumbnailId The ID of the timeline event thumbnail.
         * @param {number} videoId The ID of the video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleThumbnail: async (thumbnailId: number, videoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'thumbnailId' is not null or undefined
            assertParamExists('getSingleThumbnail', 'thumbnailId', thumbnailId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('getSingleThumbnail', 'videoId', videoId)
            const localVarPath = `/videos/{video_id}/timelinethumbnails/{thumbnail_id}`
                .replace(`{${"thumbnail_id"}}`, encodeURIComponent(String(thumbnailId !== undefined ? thumbnailId : `-thumbnail_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/videos/{video_id}/timelinethumbnails/{thumbnail_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmbedPresetsTimelineEventsApi - functional programming interface
 * @export
 */
export const EmbedPresetsTimelineEventsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmbedPresetsTimelineEventsApiAxiosParamCreator(configuration)
    return {
        /**
         * This method adds a timeline event thumbnail to the specified video. The authenticated user must be the owner of the video.
         * @summary Add a timeline event thumbnail to a video
         * @param {EmbedPresetsTimelineEventsApiAddThumbnailToVideoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addThumbnailToVideo(requestParameters: EmbedPresetsTimelineEventsApiAddThumbnailToVideoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Picture>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addThumbnailToVideo(requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns a single timeline event thumbnail that belongs to the specified video.
         * @summary Get a timeline event thumbnail
         * @param {EmbedPresetsTimelineEventsApiGetSingleThumbnailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingleThumbnail(requestParameters: EmbedPresetsTimelineEventsApiGetSingleThumbnailRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Picture>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingleThumbnail(requestParameters.thumbnailId, requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EmbedPresetsTimelineEventsApi - factory interface
 * @export
 */
export const EmbedPresetsTimelineEventsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmbedPresetsTimelineEventsApiFp(configuration)
    return {
        /**
         * This method adds a timeline event thumbnail to the specified video. The authenticated user must be the owner of the video.
         * @summary Add a timeline event thumbnail to a video
         * @param {EmbedPresetsTimelineEventsApiAddThumbnailToVideoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addThumbnailToVideo(requestParameters: EmbedPresetsTimelineEventsApiAddThumbnailToVideoRequest, options?: AxiosRequestConfig): AxiosPromise<Picture> {
            return localVarFp.addThumbnailToVideo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns a single timeline event thumbnail that belongs to the specified video.
         * @summary Get a timeline event thumbnail
         * @param {EmbedPresetsTimelineEventsApiGetSingleThumbnailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleThumbnail(requestParameters: EmbedPresetsTimelineEventsApiGetSingleThumbnailRequest, options?: AxiosRequestConfig): AxiosPromise<Picture> {
            return localVarFp.getSingleThumbnail(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addThumbnailToVideo operation in EmbedPresetsTimelineEventsApi.
 * @export
 * @interface EmbedPresetsTimelineEventsApiAddThumbnailToVideoRequest
 */
export type EmbedPresetsTimelineEventsApiAddThumbnailToVideoRequest = {
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof EmbedPresetsTimelineEventsApiAddThumbnailToVideo
    */
    readonly videoId: number
    
}

/**
 * Request parameters for getSingleThumbnail operation in EmbedPresetsTimelineEventsApi.
 * @export
 * @interface EmbedPresetsTimelineEventsApiGetSingleThumbnailRequest
 */
export type EmbedPresetsTimelineEventsApiGetSingleThumbnailRequest = {
    
    /**
    * The ID of the timeline event thumbnail.
    * @type {number}
    * @memberof EmbedPresetsTimelineEventsApiGetSingleThumbnail
    */
    readonly thumbnailId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof EmbedPresetsTimelineEventsApiGetSingleThumbnail
    */
    readonly videoId: number
    
}

/**
 * EmbedPresetsTimelineEventsApiGenerated - object-oriented interface
 * @export
 * @class EmbedPresetsTimelineEventsApiGenerated
 * @extends {BaseAPI}
 */
export class EmbedPresetsTimelineEventsApiGenerated extends BaseAPI {
    /**
     * This method adds a timeline event thumbnail to the specified video. The authenticated user must be the owner of the video.
     * @summary Add a timeline event thumbnail to a video
     * @param {EmbedPresetsTimelineEventsApiAddThumbnailToVideoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmbedPresetsTimelineEventsApiGenerated
     */
    public addThumbnailToVideo(requestParameters: EmbedPresetsTimelineEventsApiAddThumbnailToVideoRequest, options?: AxiosRequestConfig) {
        return EmbedPresetsTimelineEventsApiFp(this.configuration).addThumbnailToVideo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns a single timeline event thumbnail that belongs to the specified video.
     * @summary Get a timeline event thumbnail
     * @param {EmbedPresetsTimelineEventsApiGetSingleThumbnailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmbedPresetsTimelineEventsApiGenerated
     */
    public getSingleThumbnail(requestParameters: EmbedPresetsTimelineEventsApiGetSingleThumbnailRequest, options?: AxiosRequestConfig) {
        return EmbedPresetsTimelineEventsApiFp(this.configuration).getSingleThumbnail(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
