/* tslint:disable */
/* eslint-disable */
/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

The version of the OpenAPI document: 3.4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Domain } from '../models';
// @ts-ignore
import { LiveEmbedPrivacyEmbedEventOnDomainsRequest } from '../models';
// @ts-ignore
import { LiveEmbedPrivacyEmbedEventOnDomainsRequest1 } from '../models';
// @ts-ignore
import { LiveEmbedPrivacyEmbedEventOnDomainsRequest2 } from '../models';
// @ts-ignore
import { ModelError } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * LiveEmbedPrivacyApi - axios parameter creator
 * @export
 */
export const LiveEmbedPrivacyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method embeds an event on the specified domains. The embed privacy setting must be `whitelist`.
         * @summary Embed a live event on one or more domains
         * @param {number} liveEventId The ID of the event.
         * @param {LiveEmbedPrivacyEmbedEventOnDomainsRequest} [liveEmbedPrivacyEmbedEventOnDomainsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        embedEventOnDomains: async (liveEventId: number, liveEmbedPrivacyEmbedEventOnDomainsRequest?: LiveEmbedPrivacyEmbedEventOnDomainsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveEventId' is not null or undefined
            assertParamExists('embedEventOnDomains', 'liveEventId', liveEventId)
            const localVarPath = `/live_events/{live_event_id}/privacy/domains`
                .replace(`{${"live_event_id"}}`, encodeURIComponent(String(liveEventId !== undefined ? liveEventId : `-live_event_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit", "private"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit", "private"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: liveEmbedPrivacyEmbedEventOnDomainsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/live_events/{live_event_id}/privacy/domains',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(liveEmbedPrivacyEmbedEventOnDomainsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method embeds an event on the specified domains. The embed privacy setting must be `whitelist`.
         * @summary Embed a live event on one or more domains
         * @param {number} liveEventId The ID of the event.
         * @param {LiveEmbedPrivacyEmbedEventOnDomainsRequest1} [liveEmbedPrivacyEmbedEventOnDomainsRequest1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        embedEventOnDomains_1: async (liveEventId: number, liveEmbedPrivacyEmbedEventOnDomainsRequest1?: LiveEmbedPrivacyEmbedEventOnDomainsRequest1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveEventId' is not null or undefined
            assertParamExists('embedEventOnDomains_1', 'liveEventId', liveEventId)
            const localVarPath = `/me/live_events/{live_event_id}/privacy/domains`
                .replace(`{${"live_event_id"}}`, encodeURIComponent(String(liveEventId !== undefined ? liveEventId : `-live_event_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit", "private"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit", "private"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: liveEmbedPrivacyEmbedEventOnDomainsRequest1,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/live_events/{live_event_id}/privacy/domains',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(liveEmbedPrivacyEmbedEventOnDomainsRequest1, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method embeds an event on the specified domains. The embed privacy setting must be `whitelist`.
         * @summary Embed a live event on one or more domains
         * @param {number} liveEventId The ID of the event.
         * @param {number} userId The ID of the user.
         * @param {LiveEmbedPrivacyEmbedEventOnDomainsRequest2} [liveEmbedPrivacyEmbedEventOnDomainsRequest2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        embedEventOnDomains_2: async (liveEventId: number, userId: number, liveEmbedPrivacyEmbedEventOnDomainsRequest2?: LiveEmbedPrivacyEmbedEventOnDomainsRequest2, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveEventId' is not null or undefined
            assertParamExists('embedEventOnDomains_2', 'liveEventId', liveEventId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('embedEventOnDomains_2', 'userId', userId)
            const localVarPath = `/users/{user_id}/live_events/{live_event_id}/privacy/domains`
                .replace(`{${"live_event_id"}}`, encodeURIComponent(String(liveEventId !== undefined ? liveEventId : `-live_event_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit", "private"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit", "private"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: liveEmbedPrivacyEmbedEventOnDomainsRequest2,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/live_events/{live_event_id}/privacy/domains',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(liveEmbedPrivacyEmbedEventOnDomainsRequest2, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every whitelisted domain for an event. The embed privacy setting must be `whitelist`.
         * @summary Get all the domains on which a live event can be embedded
         * @param {number} liveEventId The ID of the event.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWhitelistDomains: async (liveEventId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveEventId' is not null or undefined
            assertParamExists('getWhitelistDomains', 'liveEventId', liveEventId)
            const localVarPath = `/live_events/{live_event_id}/privacy/domains`
                .replace(`{${"live_event_id"}}`, encodeURIComponent(String(liveEventId !== undefined ? liveEventId : `-live_event_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/live_events/{live_event_id}/privacy/domains',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every whitelisted domain for an event. The embed privacy setting must be `whitelist`.
         * @summary Get all the domains on which a live event can be embedded
         * @param {number} liveEventId The ID of the event.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWhitelistDomains_3: async (liveEventId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveEventId' is not null or undefined
            assertParamExists('getWhitelistDomains_3', 'liveEventId', liveEventId)
            const localVarPath = `/me/live_events/{live_event_id}/privacy/domains`
                .replace(`{${"live_event_id"}}`, encodeURIComponent(String(liveEventId !== undefined ? liveEventId : `-live_event_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/live_events/{live_event_id}/privacy/domains',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every whitelisted domain for an event. The embed privacy setting must be `whitelist`.
         * @summary Get all the domains on which a live event can be embedded
         * @param {number} liveEventId The ID of the event.
         * @param {number} userId The ID of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWhitelistDomains_4: async (liveEventId: number, userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveEventId' is not null or undefined
            assertParamExists('getWhitelistDomains_4', 'liveEventId', liveEventId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getWhitelistDomains_4', 'userId', userId)
            const localVarPath = `/users/{user_id}/live_events/{live_event_id}/privacy/domains`
                .replace(`{${"live_event_id"}}`, encodeURIComponent(String(liveEventId !== undefined ? liveEventId : `-live_event_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/live_events/{live_event_id}/privacy/domains',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LiveEmbedPrivacyApi - functional programming interface
 * @export
 */
export const LiveEmbedPrivacyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LiveEmbedPrivacyApiAxiosParamCreator(configuration)
    return {
        /**
         * This method embeds an event on the specified domains. The embed privacy setting must be `whitelist`.
         * @summary Embed a live event on one or more domains
         * @param {LiveEmbedPrivacyApiEmbedEventOnDomainsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async embedEventOnDomains(requestParameters: LiveEmbedPrivacyApiEmbedEventOnDomainsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const liveEmbedPrivacyEmbedEventOnDomainsRequest: LiveEmbedPrivacyEmbedEventOnDomainsRequest = {
                allowed_domains: requestParameters.allowed_domains
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.embedEventOnDomains(requestParameters.liveEventId, liveEmbedPrivacyEmbedEventOnDomainsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method embeds an event on the specified domains. The embed privacy setting must be `whitelist`.
         * @summary Embed a live event on one or more domains
         * @param {LiveEmbedPrivacyApiEmbedEventOnDomains0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async embedEventOnDomains_1(requestParameters: LiveEmbedPrivacyApiEmbedEventOnDomains0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const liveEmbedPrivacyEmbedEventOnDomainsRequest1: LiveEmbedPrivacyEmbedEventOnDomainsRequest1 = {
                allowed_domains: requestParameters.allowed_domains
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.embedEventOnDomains_1(requestParameters.liveEventId, liveEmbedPrivacyEmbedEventOnDomainsRequest1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method embeds an event on the specified domains. The embed privacy setting must be `whitelist`.
         * @summary Embed a live event on one or more domains
         * @param {LiveEmbedPrivacyApiEmbedEventOnDomains1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async embedEventOnDomains_2(requestParameters: LiveEmbedPrivacyApiEmbedEventOnDomains1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const liveEmbedPrivacyEmbedEventOnDomainsRequest2: LiveEmbedPrivacyEmbedEventOnDomainsRequest2 = {
                allowed_domains: requestParameters.allowed_domains
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.embedEventOnDomains_2(requestParameters.liveEventId, requestParameters.userId, liveEmbedPrivacyEmbedEventOnDomainsRequest2, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every whitelisted domain for an event. The embed privacy setting must be `whitelist`.
         * @summary Get all the domains on which a live event can be embedded
         * @param {LiveEmbedPrivacyApiGetWhitelistDomainsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWhitelistDomains(requestParameters: LiveEmbedPrivacyApiGetWhitelistDomainsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Domain>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWhitelistDomains(requestParameters.liveEventId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every whitelisted domain for an event. The embed privacy setting must be `whitelist`.
         * @summary Get all the domains on which a live event can be embedded
         * @param {LiveEmbedPrivacyApiGetWhitelistDomains0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWhitelistDomains_3(requestParameters: LiveEmbedPrivacyApiGetWhitelistDomains0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Domain>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWhitelistDomains_3(requestParameters.liveEventId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every whitelisted domain for an event. The embed privacy setting must be `whitelist`.
         * @summary Get all the domains on which a live event can be embedded
         * @param {LiveEmbedPrivacyApiGetWhitelistDomains1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWhitelistDomains_4(requestParameters: LiveEmbedPrivacyApiGetWhitelistDomains1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Domain>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWhitelistDomains_4(requestParameters.liveEventId, requestParameters.userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LiveEmbedPrivacyApi - factory interface
 * @export
 */
export const LiveEmbedPrivacyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LiveEmbedPrivacyApiFp(configuration)
    return {
        /**
         * This method embeds an event on the specified domains. The embed privacy setting must be `whitelist`.
         * @summary Embed a live event on one or more domains
         * @param {LiveEmbedPrivacyApiEmbedEventOnDomainsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        embedEventOnDomains(requestParameters: LiveEmbedPrivacyApiEmbedEventOnDomainsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.embedEventOnDomains(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method embeds an event on the specified domains. The embed privacy setting must be `whitelist`.
         * @summary Embed a live event on one or more domains
         * @param {LiveEmbedPrivacyApiEmbedEventOnDomains0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        embedEventOnDomains_1(requestParameters: LiveEmbedPrivacyApiEmbedEventOnDomains0Request, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.embedEventOnDomains_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method embeds an event on the specified domains. The embed privacy setting must be `whitelist`.
         * @summary Embed a live event on one or more domains
         * @param {LiveEmbedPrivacyApiEmbedEventOnDomains1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        embedEventOnDomains_2(requestParameters: LiveEmbedPrivacyApiEmbedEventOnDomains1Request, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.embedEventOnDomains_2(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every whitelisted domain for an event. The embed privacy setting must be `whitelist`.
         * @summary Get all the domains on which a live event can be embedded
         * @param {LiveEmbedPrivacyApiGetWhitelistDomainsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWhitelistDomains(requestParameters: LiveEmbedPrivacyApiGetWhitelistDomainsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Domain>> {
            return localVarFp.getWhitelistDomains(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every whitelisted domain for an event. The embed privacy setting must be `whitelist`.
         * @summary Get all the domains on which a live event can be embedded
         * @param {LiveEmbedPrivacyApiGetWhitelistDomains0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWhitelistDomains_3(requestParameters: LiveEmbedPrivacyApiGetWhitelistDomains0Request, options?: AxiosRequestConfig): AxiosPromise<Array<Domain>> {
            return localVarFp.getWhitelistDomains_3(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every whitelisted domain for an event. The embed privacy setting must be `whitelist`.
         * @summary Get all the domains on which a live event can be embedded
         * @param {LiveEmbedPrivacyApiGetWhitelistDomains1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWhitelistDomains_4(requestParameters: LiveEmbedPrivacyApiGetWhitelistDomains1Request, options?: AxiosRequestConfig): AxiosPromise<Array<Domain>> {
            return localVarFp.getWhitelistDomains_4(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for embedEventOnDomains operation in LiveEmbedPrivacyApi.
 * @export
 * @interface LiveEmbedPrivacyApiEmbedEventOnDomainsRequest
 */
export type LiveEmbedPrivacyApiEmbedEventOnDomainsRequest = {
    
    /**
    * The ID of the event.
    * @type {number}
    * @memberof LiveEmbedPrivacyApiEmbedEventOnDomains
    */
    readonly liveEventId: number
    
} & LiveEmbedPrivacyEmbedEventOnDomainsRequest

/**
 * Request parameters for embedEventOnDomains_1 operation in LiveEmbedPrivacyApi.
 * @export
 * @interface LiveEmbedPrivacyApiEmbedEventOnDomains0Request
 */
export type LiveEmbedPrivacyApiEmbedEventOnDomains0Request = {
    
    /**
    * The ID of the event.
    * @type {number}
    * @memberof LiveEmbedPrivacyApiEmbedEventOnDomains0
    */
    readonly liveEventId: number
    
} & LiveEmbedPrivacyEmbedEventOnDomainsRequest1

/**
 * Request parameters for embedEventOnDomains_2 operation in LiveEmbedPrivacyApi.
 * @export
 * @interface LiveEmbedPrivacyApiEmbedEventOnDomains1Request
 */
export type LiveEmbedPrivacyApiEmbedEventOnDomains1Request = {
    
    /**
    * The ID of the event.
    * @type {number}
    * @memberof LiveEmbedPrivacyApiEmbedEventOnDomains1
    */
    readonly liveEventId: number
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof LiveEmbedPrivacyApiEmbedEventOnDomains1
    */
    readonly userId: number
    
} & LiveEmbedPrivacyEmbedEventOnDomainsRequest2

/**
 * Request parameters for getWhitelistDomains operation in LiveEmbedPrivacyApi.
 * @export
 * @interface LiveEmbedPrivacyApiGetWhitelistDomainsRequest
 */
export type LiveEmbedPrivacyApiGetWhitelistDomainsRequest = {
    
    /**
    * The ID of the event.
    * @type {number}
    * @memberof LiveEmbedPrivacyApiGetWhitelistDomains
    */
    readonly liveEventId: number
    
}

/**
 * Request parameters for getWhitelistDomains_3 operation in LiveEmbedPrivacyApi.
 * @export
 * @interface LiveEmbedPrivacyApiGetWhitelistDomains0Request
 */
export type LiveEmbedPrivacyApiGetWhitelistDomains0Request = {
    
    /**
    * The ID of the event.
    * @type {number}
    * @memberof LiveEmbedPrivacyApiGetWhitelistDomains0
    */
    readonly liveEventId: number
    
}

/**
 * Request parameters for getWhitelistDomains_4 operation in LiveEmbedPrivacyApi.
 * @export
 * @interface LiveEmbedPrivacyApiGetWhitelistDomains1Request
 */
export type LiveEmbedPrivacyApiGetWhitelistDomains1Request = {
    
    /**
    * The ID of the event.
    * @type {number}
    * @memberof LiveEmbedPrivacyApiGetWhitelistDomains1
    */
    readonly liveEventId: number
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof LiveEmbedPrivacyApiGetWhitelistDomains1
    */
    readonly userId: number
    
}

/**
 * LiveEmbedPrivacyApiGenerated - object-oriented interface
 * @export
 * @class LiveEmbedPrivacyApiGenerated
 * @extends {BaseAPI}
 */
export class LiveEmbedPrivacyApiGenerated extends BaseAPI {
    /**
     * This method embeds an event on the specified domains. The embed privacy setting must be `whitelist`.
     * @summary Embed a live event on one or more domains
     * @param {LiveEmbedPrivacyApiEmbedEventOnDomainsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEmbedPrivacyApiGenerated
     */
    public embedEventOnDomains(requestParameters: LiveEmbedPrivacyApiEmbedEventOnDomainsRequest, options?: AxiosRequestConfig) {
        return LiveEmbedPrivacyApiFp(this.configuration).embedEventOnDomains(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method embeds an event on the specified domains. The embed privacy setting must be `whitelist`.
     * @summary Embed a live event on one or more domains
     * @param {LiveEmbedPrivacyApiEmbedEventOnDomains0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEmbedPrivacyApiGenerated
     */
    public embedEventOnDomains_1(requestParameters: LiveEmbedPrivacyApiEmbedEventOnDomains0Request, options?: AxiosRequestConfig) {
        return LiveEmbedPrivacyApiFp(this.configuration).embedEventOnDomains_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method embeds an event on the specified domains. The embed privacy setting must be `whitelist`.
     * @summary Embed a live event on one or more domains
     * @param {LiveEmbedPrivacyApiEmbedEventOnDomains1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEmbedPrivacyApiGenerated
     */
    public embedEventOnDomains_2(requestParameters: LiveEmbedPrivacyApiEmbedEventOnDomains1Request, options?: AxiosRequestConfig) {
        return LiveEmbedPrivacyApiFp(this.configuration).embedEventOnDomains_2(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every whitelisted domain for an event. The embed privacy setting must be `whitelist`.
     * @summary Get all the domains on which a live event can be embedded
     * @param {LiveEmbedPrivacyApiGetWhitelistDomainsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEmbedPrivacyApiGenerated
     */
    public getWhitelistDomains(requestParameters: LiveEmbedPrivacyApiGetWhitelistDomainsRequest, options?: AxiosRequestConfig) {
        return LiveEmbedPrivacyApiFp(this.configuration).getWhitelistDomains(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every whitelisted domain for an event. The embed privacy setting must be `whitelist`.
     * @summary Get all the domains on which a live event can be embedded
     * @param {LiveEmbedPrivacyApiGetWhitelistDomains0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEmbedPrivacyApiGenerated
     */
    public getWhitelistDomains_3(requestParameters: LiveEmbedPrivacyApiGetWhitelistDomains0Request, options?: AxiosRequestConfig) {
        return LiveEmbedPrivacyApiFp(this.configuration).getWhitelistDomains_3(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every whitelisted domain for an event. The embed privacy setting must be `whitelist`.
     * @summary Get all the domains on which a live event can be embedded
     * @param {LiveEmbedPrivacyApiGetWhitelistDomains1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEmbedPrivacyApiGenerated
     */
    public getWhitelistDomains_4(requestParameters: LiveEmbedPrivacyApiGetWhitelistDomains1Request, options?: AxiosRequestConfig) {
        return LiveEmbedPrivacyApiFp(this.configuration).getWhitelistDomains_4(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
