/* tslint:disable */
/* eslint-disable */
/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

The version of the OpenAPI document: 3.4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { LegacyError } from '../models';
// @ts-ignore
import { OnDemandVideo } from '../models';
// @ts-ignore
import { OnDemandVideosAddVideoToPageRequest } from '../models';
// @ts-ignore
import { OnDemandVideosAddVideoToPageRequestBuy } from '../models';
// @ts-ignore
import { OnDemandVideosAddVideoToPageRequestRent } from '../models';
// @ts-ignore
import { Video } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * OnDemandVideosApi - axios parameter creator
 * @export
 */
export const OnDemandVideosApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method adds a video to the specified On Demand page. The authenticated user must be the owner of the page.
         * @summary Add a video to an On Demand page
         * @param {number} ondemandId The ID of the On Demand page.
         * @param {number} videoId The ID of the video.
         * @param {OnDemandVideosAddVideoToPageRequest} onDemandVideosAddVideoToPageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addVideoToPage: async (ondemandId: number, videoId: number, onDemandVideosAddVideoToPageRequest: OnDemandVideosAddVideoToPageRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ondemandId' is not null or undefined
            assertParamExists('addVideoToPage', 'ondemandId', ondemandId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('addVideoToPage', 'videoId', videoId)
            // verify required parameter 'onDemandVideosAddVideoToPageRequest' is not null or undefined
            assertParamExists('addVideoToPage', 'onDemandVideosAddVideoToPageRequest', onDemandVideosAddVideoToPageRequest)
            const localVarPath = `/ondemand/pages/{ondemand_id}/videos/{video_id}`
                .replace(`{${"ondemand_id"}}`, encodeURIComponent(String(ondemandId !== undefined ? ondemandId : `-ondemand_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.vimeo.ondemand.video+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: onDemandVideosAddVideoToPageRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ondemand/pages/{ondemand_id}/videos/{video_id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(onDemandVideosAddVideoToPageRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every video on the specified On Demand page.
         * @summary Get all the videos on an On Demand page
         * @param {number} ondemandId The ID of the On Demand page.
         * @param {'asc' | 'desc'} [direction] The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order. 
         * @param {'all' | 'buy' | 'expiring_soon' | 'extra' | 'main' | 'main.viewable' | 'rent' | 'trailer' | 'unwatched' | 'viewable' | 'watched'} [filter] The attribute by which to filter the results.  Option descriptions:  * &#x60;all&#x60; - Filter for all videos.  * &#x60;buy&#x60; - Filter for purchased videos.  * &#x60;expiring_soon&#x60; - Filter for videos that expire soon.  * &#x60;extra&#x60; - Filter for extra footage videos.  * &#x60;main&#x60; - Filter for main videos.  * &#x60;main.viewable&#x60; - Filter for videos that are both the main video and are viewable.  * &#x60;rent&#x60; - Filter for rented videos.  * &#x60;trailer&#x60; - Filter for trailer videos.  * &#x60;unwatched&#x60; - Filter for unwatched videos.  * &#x60;viewable&#x60; - Filter for videos that are viewable.  * &#x60;watched&#x60; - Filter for watched videos. 
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {'date' | 'default' | 'episode' | 'manual' | 'name' | 'purchase_time' | 'release_date'} [sort] The way to sort the results.  Option descriptions:  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Use the default sorting method.  * &#x60;episode&#x60; - Sort the results by episode.  * &#x60;manual&#x60; - Sort the results manually.  * &#x60;name&#x60; - Sort the results by name.  * &#x60;purchase_time&#x60; - Sort the results by time of purchase.  * &#x60;release_date&#x60; - Sort the results by release date. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllVideos: async (ondemandId: number, direction?: 'asc' | 'desc', filter?: 'all' | 'buy' | 'expiring_soon' | 'extra' | 'main' | 'main.viewable' | 'rent' | 'trailer' | 'unwatched' | 'viewable' | 'watched', page?: number, perPage?: number, sort?: 'date' | 'default' | 'episode' | 'manual' | 'name' | 'purchase_time' | 'release_date', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ondemandId' is not null or undefined
            assertParamExists('getAllVideos', 'ondemandId', ondemandId)
            const localVarPath = `/ondemand/pages/{ondemand_id}/videos`
                .replace(`{${"ondemand_id"}}`, encodeURIComponent(String(ondemandId !== undefined ? ondemandId : `-ondemand_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ondemand/pages/{ondemand_id}/videos',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method removes a video from the specified On Demand page. The authenticated user must be the owner of the page.
         * @summary Remove a video from an On Demand page
         * @param {number} ondemandId The ID of the On Demand page.
         * @param {number} videoId The ID of the video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFromPage: async (ondemandId: number, videoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ondemandId' is not null or undefined
            assertParamExists('removeFromPage', 'ondemandId', ondemandId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('removeFromPage', 'videoId', videoId)
            const localVarPath = `/ondemand/pages/{ondemand_id}/videos/{video_id}`
                .replace(`{${"ondemand_id"}}`, encodeURIComponent(String(ondemandId !== undefined ? ondemandId : `-ondemand_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ondemand/pages/{ondemand_id}/videos/{video_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns a single video on the specified On Demand page. Use this method to determine whether the video is on the page.
         * @summary Get a specific video on an On Demand page
         * @param {number} ondemandId The ID of the On Demand page.
         * @param {number} videoId The ID of the video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        specificVideoGet: async (ondemandId: number, videoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ondemandId' is not null or undefined
            assertParamExists('specificVideoGet', 'ondemandId', ondemandId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('specificVideoGet', 'videoId', videoId)
            const localVarPath = `/ondemand/pages/{ondemand_id}/videos/{video_id}`
                .replace(`{${"ondemand_id"}}`, encodeURIComponent(String(ondemandId !== undefined ? ondemandId : `-ondemand_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ondemand/pages/{ondemand_id}/videos/{video_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OnDemandVideosApi - functional programming interface
 * @export
 */
export const OnDemandVideosApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OnDemandVideosApiAxiosParamCreator(configuration)
    return {
        /**
         * This method adds a video to the specified On Demand page. The authenticated user must be the owner of the page.
         * @summary Add a video to an On Demand page
         * @param {OnDemandVideosApiAddVideoToPageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addVideoToPage(requestParameters: OnDemandVideosApiAddVideoToPageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OnDemandVideo>> {
            const onDemandVideosAddVideoToPageRequest: OnDemandVideosAddVideoToPageRequest = {
                buy: requestParameters.buy,
                position: requestParameters.position,
                release_year: requestParameters.release_year,
                rent: requestParameters.rent,
                type: requestParameters.type
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addVideoToPage(requestParameters.ondemandId, requestParameters.videoId, onDemandVideosAddVideoToPageRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every video on the specified On Demand page.
         * @summary Get all the videos on an On Demand page
         * @param {OnDemandVideosApiGetAllVideosRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllVideos(requestParameters: OnDemandVideosApiGetAllVideosRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OnDemandVideo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllVideos(requestParameters.ondemandId, requestParameters.direction, requestParameters.filter, requestParameters.page, requestParameters.perPage, requestParameters.sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method removes a video from the specified On Demand page. The authenticated user must be the owner of the page.
         * @summary Remove a video from an On Demand page
         * @param {OnDemandVideosApiRemoveFromPageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeFromPage(requestParameters: OnDemandVideosApiRemoveFromPageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeFromPage(requestParameters.ondemandId, requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns a single video on the specified On Demand page. Use this method to determine whether the video is on the page.
         * @summary Get a specific video on an On Demand page
         * @param {OnDemandVideosApiSpecificVideoGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async specificVideoGet(requestParameters: OnDemandVideosApiSpecificVideoGetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Video>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.specificVideoGet(requestParameters.ondemandId, requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OnDemandVideosApi - factory interface
 * @export
 */
export const OnDemandVideosApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OnDemandVideosApiFp(configuration)
    return {
        /**
         * This method adds a video to the specified On Demand page. The authenticated user must be the owner of the page.
         * @summary Add a video to an On Demand page
         * @param {OnDemandVideosApiAddVideoToPageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addVideoToPage(requestParameters: OnDemandVideosApiAddVideoToPageRequest, options?: AxiosRequestConfig): AxiosPromise<OnDemandVideo> {
            return localVarFp.addVideoToPage(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every video on the specified On Demand page.
         * @summary Get all the videos on an On Demand page
         * @param {OnDemandVideosApiGetAllVideosRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllVideos(requestParameters: OnDemandVideosApiGetAllVideosRequest, options?: AxiosRequestConfig): AxiosPromise<Array<OnDemandVideo>> {
            return localVarFp.getAllVideos(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method removes a video from the specified On Demand page. The authenticated user must be the owner of the page.
         * @summary Remove a video from an On Demand page
         * @param {OnDemandVideosApiRemoveFromPageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFromPage(requestParameters: OnDemandVideosApiRemoveFromPageRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeFromPage(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns a single video on the specified On Demand page. Use this method to determine whether the video is on the page.
         * @summary Get a specific video on an On Demand page
         * @param {OnDemandVideosApiSpecificVideoGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        specificVideoGet(requestParameters: OnDemandVideosApiSpecificVideoGetRequest, options?: AxiosRequestConfig): AxiosPromise<Video> {
            return localVarFp.specificVideoGet(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addVideoToPage operation in OnDemandVideosApi.
 * @export
 * @interface OnDemandVideosApiAddVideoToPageRequest
 */
export type OnDemandVideosApiAddVideoToPageRequest = {
    
    /**
    * The ID of the On Demand page.
    * @type {number}
    * @memberof OnDemandVideosApiAddVideoToPage
    */
    readonly ondemandId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof OnDemandVideosApiAddVideoToPage
    */
    readonly videoId: number
    
} & OnDemandVideosAddVideoToPageRequest

/**
 * Request parameters for getAllVideos operation in OnDemandVideosApi.
 * @export
 * @interface OnDemandVideosApiGetAllVideosRequest
 */
export type OnDemandVideosApiGetAllVideosRequest = {
    
    /**
    * The ID of the On Demand page.
    * @type {number}
    * @memberof OnDemandVideosApiGetAllVideos
    */
    readonly ondemandId: number
    
    /**
    * The sort direction of the results.  Option descriptions:  * `asc` - Sort the results in ascending order.  * `desc` - Sort the results in descending order. 
    * @type {'asc' | 'desc'}
    * @memberof OnDemandVideosApiGetAllVideos
    */
    readonly direction?: 'asc' | 'desc'
    
    /**
    * The attribute by which to filter the results.  Option descriptions:  * `all` - Filter for all videos.  * `buy` - Filter for purchased videos.  * `expiring_soon` - Filter for videos that expire soon.  * `extra` - Filter for extra footage videos.  * `main` - Filter for main videos.  * `main.viewable` - Filter for videos that are both the main video and are viewable.  * `rent` - Filter for rented videos.  * `trailer` - Filter for trailer videos.  * `unwatched` - Filter for unwatched videos.  * `viewable` - Filter for videos that are viewable.  * `watched` - Filter for watched videos. 
    * @type {'all' | 'buy' | 'expiring_soon' | 'extra' | 'main' | 'main.viewable' | 'rent' | 'trailer' | 'unwatched' | 'viewable' | 'watched'}
    * @memberof OnDemandVideosApiGetAllVideos
    */
    readonly filter?: 'all' | 'buy' | 'expiring_soon' | 'extra' | 'main' | 'main.viewable' | 'rent' | 'trailer' | 'unwatched' | 'viewable' | 'watched'
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof OnDemandVideosApiGetAllVideos
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof OnDemandVideosApiGetAllVideos
    */
    readonly perPage?: number
    
    /**
    * The way to sort the results.  Option descriptions:  * `date` - Sort the results by date.  * `default` - Use the default sorting method.  * `episode` - Sort the results by episode.  * `manual` - Sort the results manually.  * `name` - Sort the results by name.  * `purchase_time` - Sort the results by time of purchase.  * `release_date` - Sort the results by release date. 
    * @type {'date' | 'default' | 'episode' | 'manual' | 'name' | 'purchase_time' | 'release_date'}
    * @memberof OnDemandVideosApiGetAllVideos
    */
    readonly sort?: 'date' | 'default' | 'episode' | 'manual' | 'name' | 'purchase_time' | 'release_date'
    
}

/**
 * Request parameters for removeFromPage operation in OnDemandVideosApi.
 * @export
 * @interface OnDemandVideosApiRemoveFromPageRequest
 */
export type OnDemandVideosApiRemoveFromPageRequest = {
    
    /**
    * The ID of the On Demand page.
    * @type {number}
    * @memberof OnDemandVideosApiRemoveFromPage
    */
    readonly ondemandId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof OnDemandVideosApiRemoveFromPage
    */
    readonly videoId: number
    
}

/**
 * Request parameters for specificVideoGet operation in OnDemandVideosApi.
 * @export
 * @interface OnDemandVideosApiSpecificVideoGetRequest
 */
export type OnDemandVideosApiSpecificVideoGetRequest = {
    
    /**
    * The ID of the On Demand page.
    * @type {number}
    * @memberof OnDemandVideosApiSpecificVideoGet
    */
    readonly ondemandId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof OnDemandVideosApiSpecificVideoGet
    */
    readonly videoId: number
    
}

/**
 * OnDemandVideosApiGenerated - object-oriented interface
 * @export
 * @class OnDemandVideosApiGenerated
 * @extends {BaseAPI}
 */
export class OnDemandVideosApiGenerated extends BaseAPI {
    /**
     * This method adds a video to the specified On Demand page. The authenticated user must be the owner of the page.
     * @summary Add a video to an On Demand page
     * @param {OnDemandVideosApiAddVideoToPageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnDemandVideosApiGenerated
     */
    public addVideoToPage(requestParameters: OnDemandVideosApiAddVideoToPageRequest, options?: AxiosRequestConfig) {
        return OnDemandVideosApiFp(this.configuration).addVideoToPage(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every video on the specified On Demand page.
     * @summary Get all the videos on an On Demand page
     * @param {OnDemandVideosApiGetAllVideosRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnDemandVideosApiGenerated
     */
    public getAllVideos(requestParameters: OnDemandVideosApiGetAllVideosRequest, options?: AxiosRequestConfig) {
        return OnDemandVideosApiFp(this.configuration).getAllVideos(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method removes a video from the specified On Demand page. The authenticated user must be the owner of the page.
     * @summary Remove a video from an On Demand page
     * @param {OnDemandVideosApiRemoveFromPageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnDemandVideosApiGenerated
     */
    public removeFromPage(requestParameters: OnDemandVideosApiRemoveFromPageRequest, options?: AxiosRequestConfig) {
        return OnDemandVideosApiFp(this.configuration).removeFromPage(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns a single video on the specified On Demand page. Use this method to determine whether the video is on the page.
     * @summary Get a specific video on an On Demand page
     * @param {OnDemandVideosApiSpecificVideoGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnDemandVideosApiGenerated
     */
    public specificVideoGet(requestParameters: OnDemandVideosApiSpecificVideoGetRequest, options?: AxiosRequestConfig) {
        return OnDemandVideosApiFp(this.configuration).specificVideoGet(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
