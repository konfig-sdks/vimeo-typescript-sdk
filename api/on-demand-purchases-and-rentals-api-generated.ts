/* tslint:disable */
/* eslint-disable */
/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

The version of the OpenAPI document: 3.4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { LegacyError } from '../models';
// @ts-ignore
import { OnDemandPage } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * OnDemandPurchasesAndRentalsApi - axios parameter creator
 * @export
 */
export const OnDemandPurchasesAndRentalsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method determines whether the authenticated user has made a purchase or rental from the specified On Demand page.
         * @summary Check if a user has made a purchase or rental from an On Demand page
         * @param {number} ondemandId The ID of the On Demand page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkUserPurchasesAndRentals: async (ondemandId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ondemandId' is not null or undefined
            assertParamExists('checkUserPurchasesAndRentals', 'ondemandId', ondemandId)
            const localVarPath = `/me/ondemand/purchases/{ondemand_id}`
                .replace(`{${"ondemand_id"}}`, encodeURIComponent(String(ondemandId !== undefined ? ondemandId : `-ondemand_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["purchased"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["purchased"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/ondemand/purchases/{ondemand_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every purchase and rental that the authenticated user has made across all On Demand pages.
         * @summary Get all of the user\'s On Demand purchases and rentals
         * @param {'asc' | 'desc'} [direction] The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order. 
         * @param {'all' | 'expiring_soon' | 'film' | 'important' | 'purchased' | 'rented' | 'series' | 'subscription' | 'unwatched' | 'watched'} [filter] The type of the On Demand video to filter on.  Option descriptions:  * &#x60;all&#x60; - Filter by all video types.  * &#x60;expiring_soon&#x60; - Filter by videos that expire soon.  * &#x60;film&#x60; - Filter by film.  * &#x60;important&#x60; - Filter by pages that are about to expire.  * &#x60;purchased&#x60; - Filter by purchased videos.  * &#x60;rented&#x60; - Filter by rented videos.  * &#x60;series&#x60; - Filter by series.  * &#x60;subscription&#x60; - Filter by video subscription.  * &#x60;unwatched&#x60; - Filter by unwatched videos.  * &#x60;watched&#x60; - Filter by watched videos. 
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {'added' | 'alphabetical' | 'date' | 'name' | 'purchase_time' | 'rating' | 'release_date'} [sort] The way to sort the results.  Option descriptions:  * &#x60;added&#x60; - Sort the results by most recently added video.  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;name&#x60; - Sort the results by video name.  * &#x60;purchase_time&#x60; - Sort the results by time of video purchase.  * &#x60;rating&#x60; - Sort the results by content rating.  * &#x60;release_date&#x60; - Sort the results by video release date. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUserPurchasesAndRentals: async (direction?: 'asc' | 'desc', filter?: 'all' | 'expiring_soon' | 'film' | 'important' | 'purchased' | 'rented' | 'series' | 'subscription' | 'unwatched' | 'watched', page?: number, perPage?: number, sort?: 'added' | 'alphabetical' | 'date' | 'name' | 'purchase_time' | 'rating' | 'release_date', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/ondemand/purchases`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["purchased"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["purchased"], configuration)
            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/ondemand/purchases',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every purchase and rental that the authenticated user has made across all On Demand pages.
         * @summary Get all of the user\'s On Demand purchases and rentals
         * @param {number} userId The ID of the user.
         * @param {'asc' | 'desc'} [direction] The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order. 
         * @param {'all' | 'expiring_soon' | 'film' | 'important' | 'purchased' | 'rented' | 'series' | 'subscription' | 'unwatched' | 'watched'} [filter] The type of the On Demand video to filter on.  Option descriptions:  * &#x60;all&#x60; - Filter by all video types.  * &#x60;expiring_soon&#x60; - Filter by videos that expire soon.  * &#x60;film&#x60; - Filter by film.  * &#x60;important&#x60; - Filter by pages that are about to expire.  * &#x60;purchased&#x60; - Filter by purchased videos.  * &#x60;rented&#x60; - Filter by rented videos.  * &#x60;series&#x60; - Filter by series.  * &#x60;subscription&#x60; - Filter by video subscription.  * &#x60;unwatched&#x60; - Filter by unwatched videos.  * &#x60;watched&#x60; - Filter by watched videos. 
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {'added' | 'alphabetical' | 'date' | 'name' | 'purchase_time' | 'rating' | 'release_date'} [sort] The way to sort the results.  Option descriptions:  * &#x60;added&#x60; - Sort the results by most recently added video.  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;name&#x60; - Sort the results by video name.  * &#x60;purchase_time&#x60; - Sort the results by time of video purchase.  * &#x60;rating&#x60; - Sort the results by content rating.  * &#x60;release_date&#x60; - Sort the results by video release date. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserPurchasesAndRentals: async (userId: number, direction?: 'asc' | 'desc', filter?: 'all' | 'expiring_soon' | 'film' | 'important' | 'purchased' | 'rented' | 'series' | 'subscription' | 'unwatched' | 'watched', page?: number, perPage?: number, sort?: 'added' | 'alphabetical' | 'date' | 'name' | 'purchase_time' | 'rating' | 'release_date', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('listUserPurchasesAndRentals', 'userId', userId)
            const localVarPath = `/users/{user_id}/ondemand/purchases`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["purchased"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["purchased"], configuration)
            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/ondemand/purchases',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OnDemandPurchasesAndRentalsApi - functional programming interface
 * @export
 */
export const OnDemandPurchasesAndRentalsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OnDemandPurchasesAndRentalsApiAxiosParamCreator(configuration)
    return {
        /**
         * This method determines whether the authenticated user has made a purchase or rental from the specified On Demand page.
         * @summary Check if a user has made a purchase or rental from an On Demand page
         * @param {OnDemandPurchasesAndRentalsApiCheckUserPurchasesAndRentalsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkUserPurchasesAndRentals(requestParameters: OnDemandPurchasesAndRentalsApiCheckUserPurchasesAndRentalsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OnDemandPage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkUserPurchasesAndRentals(requestParameters.ondemandId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every purchase and rental that the authenticated user has made across all On Demand pages.
         * @summary Get all of the user\'s On Demand purchases and rentals
         * @param {OnDemandPurchasesAndRentalsApiGetAllUserPurchasesAndRentalsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllUserPurchasesAndRentals(requestParameters: OnDemandPurchasesAndRentalsApiGetAllUserPurchasesAndRentalsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OnDemandPage>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllUserPurchasesAndRentals(requestParameters.direction, requestParameters.filter, requestParameters.page, requestParameters.perPage, requestParameters.sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every purchase and rental that the authenticated user has made across all On Demand pages.
         * @summary Get all of the user\'s On Demand purchases and rentals
         * @param {OnDemandPurchasesAndRentalsApiListUserPurchasesAndRentalsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserPurchasesAndRentals(requestParameters: OnDemandPurchasesAndRentalsApiListUserPurchasesAndRentalsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OnDemandPage>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUserPurchasesAndRentals(requestParameters.userId, requestParameters.direction, requestParameters.filter, requestParameters.page, requestParameters.perPage, requestParameters.sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OnDemandPurchasesAndRentalsApi - factory interface
 * @export
 */
export const OnDemandPurchasesAndRentalsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OnDemandPurchasesAndRentalsApiFp(configuration)
    return {
        /**
         * This method determines whether the authenticated user has made a purchase or rental from the specified On Demand page.
         * @summary Check if a user has made a purchase or rental from an On Demand page
         * @param {OnDemandPurchasesAndRentalsApiCheckUserPurchasesAndRentalsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkUserPurchasesAndRentals(requestParameters: OnDemandPurchasesAndRentalsApiCheckUserPurchasesAndRentalsRequest, options?: AxiosRequestConfig): AxiosPromise<OnDemandPage> {
            return localVarFp.checkUserPurchasesAndRentals(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every purchase and rental that the authenticated user has made across all On Demand pages.
         * @summary Get all of the user\'s On Demand purchases and rentals
         * @param {OnDemandPurchasesAndRentalsApiGetAllUserPurchasesAndRentalsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUserPurchasesAndRentals(requestParameters: OnDemandPurchasesAndRentalsApiGetAllUserPurchasesAndRentalsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<OnDemandPage>> {
            return localVarFp.getAllUserPurchasesAndRentals(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every purchase and rental that the authenticated user has made across all On Demand pages.
         * @summary Get all of the user\'s On Demand purchases and rentals
         * @param {OnDemandPurchasesAndRentalsApiListUserPurchasesAndRentalsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserPurchasesAndRentals(requestParameters: OnDemandPurchasesAndRentalsApiListUserPurchasesAndRentalsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<OnDemandPage>> {
            return localVarFp.listUserPurchasesAndRentals(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for checkUserPurchasesAndRentals operation in OnDemandPurchasesAndRentalsApi.
 * @export
 * @interface OnDemandPurchasesAndRentalsApiCheckUserPurchasesAndRentalsRequest
 */
export type OnDemandPurchasesAndRentalsApiCheckUserPurchasesAndRentalsRequest = {
    
    /**
    * The ID of the On Demand page.
    * @type {number}
    * @memberof OnDemandPurchasesAndRentalsApiCheckUserPurchasesAndRentals
    */
    readonly ondemandId: number
    
}

/**
 * Request parameters for getAllUserPurchasesAndRentals operation in OnDemandPurchasesAndRentalsApi.
 * @export
 * @interface OnDemandPurchasesAndRentalsApiGetAllUserPurchasesAndRentalsRequest
 */
export type OnDemandPurchasesAndRentalsApiGetAllUserPurchasesAndRentalsRequest = {
    
    /**
    * The sort direction of the results.  Option descriptions:  * `asc` - Sort the results in ascending order.  * `desc` - Sort the results in descending order. 
    * @type {'asc' | 'desc'}
    * @memberof OnDemandPurchasesAndRentalsApiGetAllUserPurchasesAndRentals
    */
    readonly direction?: 'asc' | 'desc'
    
    /**
    * The type of the On Demand video to filter on.  Option descriptions:  * `all` - Filter by all video types.  * `expiring_soon` - Filter by videos that expire soon.  * `film` - Filter by film.  * `important` - Filter by pages that are about to expire.  * `purchased` - Filter by purchased videos.  * `rented` - Filter by rented videos.  * `series` - Filter by series.  * `subscription` - Filter by video subscription.  * `unwatched` - Filter by unwatched videos.  * `watched` - Filter by watched videos. 
    * @type {'all' | 'expiring_soon' | 'film' | 'important' | 'purchased' | 'rented' | 'series' | 'subscription' | 'unwatched' | 'watched'}
    * @memberof OnDemandPurchasesAndRentalsApiGetAllUserPurchasesAndRentals
    */
    readonly filter?: 'all' | 'expiring_soon' | 'film' | 'important' | 'purchased' | 'rented' | 'series' | 'subscription' | 'unwatched' | 'watched'
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof OnDemandPurchasesAndRentalsApiGetAllUserPurchasesAndRentals
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof OnDemandPurchasesAndRentalsApiGetAllUserPurchasesAndRentals
    */
    readonly perPage?: number
    
    /**
    * The way to sort the results.  Option descriptions:  * `added` - Sort the results by most recently added video.  * `alphabetical` - Sort the results alphabetically.  * `date` - Sort the results by date.  * `name` - Sort the results by video name.  * `purchase_time` - Sort the results by time of video purchase.  * `rating` - Sort the results by content rating.  * `release_date` - Sort the results by video release date. 
    * @type {'added' | 'alphabetical' | 'date' | 'name' | 'purchase_time' | 'rating' | 'release_date'}
    * @memberof OnDemandPurchasesAndRentalsApiGetAllUserPurchasesAndRentals
    */
    readonly sort?: 'added' | 'alphabetical' | 'date' | 'name' | 'purchase_time' | 'rating' | 'release_date'
    
}

/**
 * Request parameters for listUserPurchasesAndRentals operation in OnDemandPurchasesAndRentalsApi.
 * @export
 * @interface OnDemandPurchasesAndRentalsApiListUserPurchasesAndRentalsRequest
 */
export type OnDemandPurchasesAndRentalsApiListUserPurchasesAndRentalsRequest = {
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof OnDemandPurchasesAndRentalsApiListUserPurchasesAndRentals
    */
    readonly userId: number
    
    /**
    * The sort direction of the results.  Option descriptions:  * `asc` - Sort the results in ascending order.  * `desc` - Sort the results in descending order. 
    * @type {'asc' | 'desc'}
    * @memberof OnDemandPurchasesAndRentalsApiListUserPurchasesAndRentals
    */
    readonly direction?: 'asc' | 'desc'
    
    /**
    * The type of the On Demand video to filter on.  Option descriptions:  * `all` - Filter by all video types.  * `expiring_soon` - Filter by videos that expire soon.  * `film` - Filter by film.  * `important` - Filter by pages that are about to expire.  * `purchased` - Filter by purchased videos.  * `rented` - Filter by rented videos.  * `series` - Filter by series.  * `subscription` - Filter by video subscription.  * `unwatched` - Filter by unwatched videos.  * `watched` - Filter by watched videos. 
    * @type {'all' | 'expiring_soon' | 'film' | 'important' | 'purchased' | 'rented' | 'series' | 'subscription' | 'unwatched' | 'watched'}
    * @memberof OnDemandPurchasesAndRentalsApiListUserPurchasesAndRentals
    */
    readonly filter?: 'all' | 'expiring_soon' | 'film' | 'important' | 'purchased' | 'rented' | 'series' | 'subscription' | 'unwatched' | 'watched'
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof OnDemandPurchasesAndRentalsApiListUserPurchasesAndRentals
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof OnDemandPurchasesAndRentalsApiListUserPurchasesAndRentals
    */
    readonly perPage?: number
    
    /**
    * The way to sort the results.  Option descriptions:  * `added` - Sort the results by most recently added video.  * `alphabetical` - Sort the results alphabetically.  * `date` - Sort the results by date.  * `name` - Sort the results by video name.  * `purchase_time` - Sort the results by time of video purchase.  * `rating` - Sort the results by content rating.  * `release_date` - Sort the results by video release date. 
    * @type {'added' | 'alphabetical' | 'date' | 'name' | 'purchase_time' | 'rating' | 'release_date'}
    * @memberof OnDemandPurchasesAndRentalsApiListUserPurchasesAndRentals
    */
    readonly sort?: 'added' | 'alphabetical' | 'date' | 'name' | 'purchase_time' | 'rating' | 'release_date'
    
}

/**
 * OnDemandPurchasesAndRentalsApiGenerated - object-oriented interface
 * @export
 * @class OnDemandPurchasesAndRentalsApiGenerated
 * @extends {BaseAPI}
 */
export class OnDemandPurchasesAndRentalsApiGenerated extends BaseAPI {
    /**
     * This method determines whether the authenticated user has made a purchase or rental from the specified On Demand page.
     * @summary Check if a user has made a purchase or rental from an On Demand page
     * @param {OnDemandPurchasesAndRentalsApiCheckUserPurchasesAndRentalsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnDemandPurchasesAndRentalsApiGenerated
     */
    public checkUserPurchasesAndRentals(requestParameters: OnDemandPurchasesAndRentalsApiCheckUserPurchasesAndRentalsRequest, options?: AxiosRequestConfig) {
        return OnDemandPurchasesAndRentalsApiFp(this.configuration).checkUserPurchasesAndRentals(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every purchase and rental that the authenticated user has made across all On Demand pages.
     * @summary Get all of the user\'s On Demand purchases and rentals
     * @param {OnDemandPurchasesAndRentalsApiGetAllUserPurchasesAndRentalsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnDemandPurchasesAndRentalsApiGenerated
     */
    public getAllUserPurchasesAndRentals(requestParameters: OnDemandPurchasesAndRentalsApiGetAllUserPurchasesAndRentalsRequest = {}, options?: AxiosRequestConfig) {
        return OnDemandPurchasesAndRentalsApiFp(this.configuration).getAllUserPurchasesAndRentals(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every purchase and rental that the authenticated user has made across all On Demand pages.
     * @summary Get all of the user\'s On Demand purchases and rentals
     * @param {OnDemandPurchasesAndRentalsApiListUserPurchasesAndRentalsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnDemandPurchasesAndRentalsApiGenerated
     */
    public listUserPurchasesAndRentals(requestParameters: OnDemandPurchasesAndRentalsApiListUserPurchasesAndRentalsRequest, options?: AxiosRequestConfig) {
        return OnDemandPurchasesAndRentalsApiFp(this.configuration).listUserPurchasesAndRentals(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
