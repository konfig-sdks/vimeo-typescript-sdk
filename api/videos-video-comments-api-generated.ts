/* tslint:disable */
/* eslint-disable */
/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

The version of the OpenAPI document: 3.4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Comment } from '../models';
// @ts-ignore
import { CreateCommentRequest } from '../models';
// @ts-ignore
import { EditCommentRequest } from '../models';
// @ts-ignore
import { LegacyError } from '../models';
// @ts-ignore
import { ModelError } from '../models';
// @ts-ignore
import { VideosVideoCommentsAddNewCommentRequest } from '../models';
// @ts-ignore
import { VideosVideoCommentsCreateReplyRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * VideosVideoCommentsApi - axios parameter creator
 * @export
 */
export const VideosVideoCommentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method adds a video comment to the specified video.
         * @summary Add a video comment to a video
         * @param {number} channelId The ID of the channel.
         * @param {number} videoId The ID of the video.
         * @param {VideosVideoCommentsAddNewCommentRequest} videosVideoCommentsAddNewCommentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewComment: async (channelId: number, videoId: number, videosVideoCommentsAddNewCommentRequest: VideosVideoCommentsAddNewCommentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('addNewComment', 'channelId', channelId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('addNewComment', 'videoId', videoId)
            // verify required parameter 'videosVideoCommentsAddNewCommentRequest' is not null or undefined
            assertParamExists('addNewComment', 'videosVideoCommentsAddNewCommentRequest', videosVideoCommentsAddNewCommentRequest)
            const localVarPath = `/channels/{channel_id}/videos/{video_id}/comments`
                .replace(`{${"channel_id"}}`, encodeURIComponent(String(channelId !== undefined ? channelId : `-channel_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["interact"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["interact"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.vimeo.comment+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: videosVideoCommentsAddNewCommentRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/channels/{channel_id}/videos/{video_id}/comments',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(videosVideoCommentsAddNewCommentRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method adds a video comment to the specified video.
         * @summary Add a video comment to a video
         * @param {number} videoId The ID of the video.
         * @param {CreateCommentRequest} createCommentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        comment: async (videoId: number, createCommentRequest: CreateCommentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('comment', 'videoId', videoId)
            // verify required parameter 'createCommentRequest' is not null or undefined
            assertParamExists('comment', 'createCommentRequest', createCommentRequest)
            const localVarPath = `/videos/{video_id}/comments`
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["interact"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["interact"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.vimeo.comment+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createCommentRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/videos/{video_id}/comments',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createCommentRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns the specified video comment.
         * @summary Get a specific video comment
         * @param {number} commentId The ID of the comment.
         * @param {number} videoId The ID of the video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        comment_1: async (commentId: number, videoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'commentId' is not null or undefined
            assertParamExists('comment_1', 'commentId', commentId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('comment_1', 'videoId', videoId)
            const localVarPath = `/videos/{video_id}/comments/{comment_id}`
                .replace(`{${"comment_id"}}`, encodeURIComponent(String(commentId !== undefined ? commentId : `-comment_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/videos/{video_id}/comments/{comment_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method deletes the specified video comment. The authenticated user must be the owner of the comment.
         * @summary Delete a video comment
         * @param {number} commentId The ID of the comment.
         * @param {number} videoId The ID of the video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        comment_2: async (commentId: number, videoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'commentId' is not null or undefined
            assertParamExists('comment_2', 'commentId', commentId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('comment_2', 'videoId', videoId)
            const localVarPath = `/videos/{video_id}/comments/{comment_id}`
                .replace(`{${"comment_id"}}`, encodeURIComponent(String(commentId !== undefined ? commentId : `-comment_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["delete"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["delete"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/videos/{video_id}/comments/{comment_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method edits the specified video comment. The authenticated user must be the owner of the comment.
         * @summary Edit a video comment
         * @param {number} commentId The ID of the comment.
         * @param {number} videoId The ID of the video.
         * @param {EditCommentRequest} editCommentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        comment_3: async (commentId: number, videoId: number, editCommentRequest: EditCommentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'commentId' is not null or undefined
            assertParamExists('comment_3', 'commentId', commentId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('comment_3', 'videoId', videoId)
            // verify required parameter 'editCommentRequest' is not null or undefined
            assertParamExists('comment_3', 'editCommentRequest', editCommentRequest)
            const localVarPath = `/videos/{video_id}/comments/{comment_id}`
                .replace(`{${"comment_id"}}`, encodeURIComponent(String(commentId !== undefined ? commentId : `-comment_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.vimeo.comment+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: editCommentRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/videos/{video_id}/comments/{comment_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(editCommentRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every video comment on the specified video.
         * @summary Get all the video comments on a video
         * @param {number} videoId The ID of the video.
         * @param {'asc' | 'desc'} [direction] The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order. 
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        comments: async (videoId: number, direction?: 'asc' | 'desc', page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('comments', 'videoId', videoId)
            const localVarPath = `/videos/{video_id}/comments`
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/videos/{video_id}/comments',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method adds a reply to the specified video comment.
         * @summary Add a reply to a video comment
         * @param {number} commentId The ID of the comment.
         * @param {number} videoId The ID of the video.
         * @param {VideosVideoCommentsCreateReplyRequest} videosVideoCommentsCreateReplyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReply: async (commentId: number, videoId: number, videosVideoCommentsCreateReplyRequest: VideosVideoCommentsCreateReplyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'commentId' is not null or undefined
            assertParamExists('createReply', 'commentId', commentId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('createReply', 'videoId', videoId)
            // verify required parameter 'videosVideoCommentsCreateReplyRequest' is not null or undefined
            assertParamExists('createReply', 'videosVideoCommentsCreateReplyRequest', videosVideoCommentsCreateReplyRequest)
            const localVarPath = `/videos/{video_id}/comments/{comment_id}/replies`
                .replace(`{${"comment_id"}}`, encodeURIComponent(String(commentId !== undefined ? commentId : `-comment_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["interact"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["interact"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.vimeo.comment+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: videosVideoCommentsCreateReplyRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/videos/{video_id}/comments/{comment_id}/replies',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(videosVideoCommentsCreateReplyRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every video comment on the specified video.
         * @summary Get all the video comments on a video
         * @param {number} channelId The ID of the channel.
         * @param {number} videoId The ID of the video.
         * @param {'asc' | 'desc'} [direction] The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order. 
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllReplies: async (channelId: number, videoId: number, direction?: 'asc' | 'desc', page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('getAllReplies', 'channelId', channelId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('getAllReplies', 'videoId', videoId)
            const localVarPath = `/channels/{channel_id}/videos/{video_id}/comments`
                .replace(`{${"channel_id"}}`, encodeURIComponent(String(channelId !== undefined ? channelId : `-channel_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/channels/{channel_id}/videos/{video_id}/comments',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every reply to the specified video comment.
         * @summary Get all the replies to a video comment
         * @param {number} commentId The ID of the comment.
         * @param {number} videoId The ID of the video.
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllReplies_4: async (commentId: number, videoId: number, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'commentId' is not null or undefined
            assertParamExists('getAllReplies_4', 'commentId', commentId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('getAllReplies_4', 'videoId', videoId)
            const localVarPath = `/videos/{video_id}/comments/{comment_id}/replies`
                .replace(`{${"comment_id"}}`, encodeURIComponent(String(commentId !== undefined ? commentId : `-comment_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/videos/{video_id}/comments/{comment_id}/replies',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VideosVideoCommentsApi - functional programming interface
 * @export
 */
export const VideosVideoCommentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VideosVideoCommentsApiAxiosParamCreator(configuration)
    return {
        /**
         * This method adds a video comment to the specified video.
         * @summary Add a video comment to a video
         * @param {VideosVideoCommentsApiAddNewCommentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewComment(requestParameters: VideosVideoCommentsApiAddNewCommentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Comment>> {
            const videosVideoCommentsAddNewCommentRequest: VideosVideoCommentsAddNewCommentRequest = {
                text: requestParameters.text
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewComment(requestParameters.channelId, requestParameters.videoId, videosVideoCommentsAddNewCommentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method adds a video comment to the specified video.
         * @summary Add a video comment to a video
         * @param {VideosVideoCommentsApiCommentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async comment(requestParameters: VideosVideoCommentsApiCommentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Comment>> {
            const createCommentRequest: CreateCommentRequest = {
                text: requestParameters.text
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.comment(requestParameters.videoId, createCommentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns the specified video comment.
         * @summary Get a specific video comment
         * @param {VideosVideoCommentsApiComment0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async comment_1(requestParameters: VideosVideoCommentsApiComment0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Comment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.comment_1(requestParameters.commentId, requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method deletes the specified video comment. The authenticated user must be the owner of the comment.
         * @summary Delete a video comment
         * @param {VideosVideoCommentsApiComment1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async comment_2(requestParameters: VideosVideoCommentsApiComment1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.comment_2(requestParameters.commentId, requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method edits the specified video comment. The authenticated user must be the owner of the comment.
         * @summary Edit a video comment
         * @param {VideosVideoCommentsApiComment2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async comment_3(requestParameters: VideosVideoCommentsApiComment2Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Comment>> {
            const editCommentRequest: EditCommentRequest = {
                text: requestParameters.text
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.comment_3(requestParameters.commentId, requestParameters.videoId, editCommentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every video comment on the specified video.
         * @summary Get all the video comments on a video
         * @param {VideosVideoCommentsApiCommentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async comments(requestParameters: VideosVideoCommentsApiCommentsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Comment>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.comments(requestParameters.videoId, requestParameters.direction, requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method adds a reply to the specified video comment.
         * @summary Add a reply to a video comment
         * @param {VideosVideoCommentsApiCreateReplyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createReply(requestParameters: VideosVideoCommentsApiCreateReplyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Comment>> {
            const videosVideoCommentsCreateReplyRequest: VideosVideoCommentsCreateReplyRequest = {
                text: requestParameters.text
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createReply(requestParameters.commentId, requestParameters.videoId, videosVideoCommentsCreateReplyRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every video comment on the specified video.
         * @summary Get all the video comments on a video
         * @param {VideosVideoCommentsApiGetAllRepliesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllReplies(requestParameters: VideosVideoCommentsApiGetAllRepliesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Comment>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllReplies(requestParameters.channelId, requestParameters.videoId, requestParameters.direction, requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every reply to the specified video comment.
         * @summary Get all the replies to a video comment
         * @param {VideosVideoCommentsApiGetAllReplies0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllReplies_4(requestParameters: VideosVideoCommentsApiGetAllReplies0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Comment>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllReplies_4(requestParameters.commentId, requestParameters.videoId, requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VideosVideoCommentsApi - factory interface
 * @export
 */
export const VideosVideoCommentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VideosVideoCommentsApiFp(configuration)
    return {
        /**
         * This method adds a video comment to the specified video.
         * @summary Add a video comment to a video
         * @param {VideosVideoCommentsApiAddNewCommentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewComment(requestParameters: VideosVideoCommentsApiAddNewCommentRequest, options?: AxiosRequestConfig): AxiosPromise<Comment> {
            return localVarFp.addNewComment(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method adds a video comment to the specified video.
         * @summary Add a video comment to a video
         * @param {VideosVideoCommentsApiCommentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        comment(requestParameters: VideosVideoCommentsApiCommentRequest, options?: AxiosRequestConfig): AxiosPromise<Comment> {
            return localVarFp.comment(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns the specified video comment.
         * @summary Get a specific video comment
         * @param {VideosVideoCommentsApiComment0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        comment_1(requestParameters: VideosVideoCommentsApiComment0Request, options?: AxiosRequestConfig): AxiosPromise<Comment> {
            return localVarFp.comment_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method deletes the specified video comment. The authenticated user must be the owner of the comment.
         * @summary Delete a video comment
         * @param {VideosVideoCommentsApiComment1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        comment_2(requestParameters: VideosVideoCommentsApiComment1Request, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.comment_2(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method edits the specified video comment. The authenticated user must be the owner of the comment.
         * @summary Edit a video comment
         * @param {VideosVideoCommentsApiComment2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        comment_3(requestParameters: VideosVideoCommentsApiComment2Request, options?: AxiosRequestConfig): AxiosPromise<Comment> {
            return localVarFp.comment_3(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every video comment on the specified video.
         * @summary Get all the video comments on a video
         * @param {VideosVideoCommentsApiCommentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        comments(requestParameters: VideosVideoCommentsApiCommentsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Comment>> {
            return localVarFp.comments(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method adds a reply to the specified video comment.
         * @summary Add a reply to a video comment
         * @param {VideosVideoCommentsApiCreateReplyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReply(requestParameters: VideosVideoCommentsApiCreateReplyRequest, options?: AxiosRequestConfig): AxiosPromise<Comment> {
            return localVarFp.createReply(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every video comment on the specified video.
         * @summary Get all the video comments on a video
         * @param {VideosVideoCommentsApiGetAllRepliesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllReplies(requestParameters: VideosVideoCommentsApiGetAllRepliesRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Comment>> {
            return localVarFp.getAllReplies(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every reply to the specified video comment.
         * @summary Get all the replies to a video comment
         * @param {VideosVideoCommentsApiGetAllReplies0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllReplies_4(requestParameters: VideosVideoCommentsApiGetAllReplies0Request, options?: AxiosRequestConfig): AxiosPromise<Array<Comment>> {
            return localVarFp.getAllReplies_4(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNewComment operation in VideosVideoCommentsApi.
 * @export
 * @interface VideosVideoCommentsApiAddNewCommentRequest
 */
export type VideosVideoCommentsApiAddNewCommentRequest = {
    
    /**
    * The ID of the channel.
    * @type {number}
    * @memberof VideosVideoCommentsApiAddNewComment
    */
    readonly channelId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof VideosVideoCommentsApiAddNewComment
    */
    readonly videoId: number
    
} & VideosVideoCommentsAddNewCommentRequest

/**
 * Request parameters for comment operation in VideosVideoCommentsApi.
 * @export
 * @interface VideosVideoCommentsApiCommentRequest
 */
export type VideosVideoCommentsApiCommentRequest = {
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof VideosVideoCommentsApiComment
    */
    readonly videoId: number
    
} & CreateCommentRequest

/**
 * Request parameters for comment_1 operation in VideosVideoCommentsApi.
 * @export
 * @interface VideosVideoCommentsApiComment0Request
 */
export type VideosVideoCommentsApiComment0Request = {
    
    /**
    * The ID of the comment.
    * @type {number}
    * @memberof VideosVideoCommentsApiComment0
    */
    readonly commentId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof VideosVideoCommentsApiComment0
    */
    readonly videoId: number
    
}

/**
 * Request parameters for comment_2 operation in VideosVideoCommentsApi.
 * @export
 * @interface VideosVideoCommentsApiComment1Request
 */
export type VideosVideoCommentsApiComment1Request = {
    
    /**
    * The ID of the comment.
    * @type {number}
    * @memberof VideosVideoCommentsApiComment1
    */
    readonly commentId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof VideosVideoCommentsApiComment1
    */
    readonly videoId: number
    
}

/**
 * Request parameters for comment_3 operation in VideosVideoCommentsApi.
 * @export
 * @interface VideosVideoCommentsApiComment2Request
 */
export type VideosVideoCommentsApiComment2Request = {
    
    /**
    * The ID of the comment.
    * @type {number}
    * @memberof VideosVideoCommentsApiComment2
    */
    readonly commentId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof VideosVideoCommentsApiComment2
    */
    readonly videoId: number
    
} & EditCommentRequest

/**
 * Request parameters for comments operation in VideosVideoCommentsApi.
 * @export
 * @interface VideosVideoCommentsApiCommentsRequest
 */
export type VideosVideoCommentsApiCommentsRequest = {
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof VideosVideoCommentsApiComments
    */
    readonly videoId: number
    
    /**
    * The sort direction of the results.  Option descriptions:  * `asc` - Sort the results in ascending order.  * `desc` - Sort the results in descending order. 
    * @type {'asc' | 'desc'}
    * @memberof VideosVideoCommentsApiComments
    */
    readonly direction?: 'asc' | 'desc'
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof VideosVideoCommentsApiComments
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof VideosVideoCommentsApiComments
    */
    readonly perPage?: number
    
}

/**
 * Request parameters for createReply operation in VideosVideoCommentsApi.
 * @export
 * @interface VideosVideoCommentsApiCreateReplyRequest
 */
export type VideosVideoCommentsApiCreateReplyRequest = {
    
    /**
    * The ID of the comment.
    * @type {number}
    * @memberof VideosVideoCommentsApiCreateReply
    */
    readonly commentId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof VideosVideoCommentsApiCreateReply
    */
    readonly videoId: number
    
} & VideosVideoCommentsCreateReplyRequest

/**
 * Request parameters for getAllReplies operation in VideosVideoCommentsApi.
 * @export
 * @interface VideosVideoCommentsApiGetAllRepliesRequest
 */
export type VideosVideoCommentsApiGetAllRepliesRequest = {
    
    /**
    * The ID of the channel.
    * @type {number}
    * @memberof VideosVideoCommentsApiGetAllReplies
    */
    readonly channelId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof VideosVideoCommentsApiGetAllReplies
    */
    readonly videoId: number
    
    /**
    * The sort direction of the results.  Option descriptions:  * `asc` - Sort the results in ascending order.  * `desc` - Sort the results in descending order. 
    * @type {'asc' | 'desc'}
    * @memberof VideosVideoCommentsApiGetAllReplies
    */
    readonly direction?: 'asc' | 'desc'
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof VideosVideoCommentsApiGetAllReplies
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof VideosVideoCommentsApiGetAllReplies
    */
    readonly perPage?: number
    
}

/**
 * Request parameters for getAllReplies_4 operation in VideosVideoCommentsApi.
 * @export
 * @interface VideosVideoCommentsApiGetAllReplies0Request
 */
export type VideosVideoCommentsApiGetAllReplies0Request = {
    
    /**
    * The ID of the comment.
    * @type {number}
    * @memberof VideosVideoCommentsApiGetAllReplies0
    */
    readonly commentId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof VideosVideoCommentsApiGetAllReplies0
    */
    readonly videoId: number
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof VideosVideoCommentsApiGetAllReplies0
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof VideosVideoCommentsApiGetAllReplies0
    */
    readonly perPage?: number
    
}

/**
 * VideosVideoCommentsApiGenerated - object-oriented interface
 * @export
 * @class VideosVideoCommentsApiGenerated
 * @extends {BaseAPI}
 */
export class VideosVideoCommentsApiGenerated extends BaseAPI {
    /**
     * This method adds a video comment to the specified video.
     * @summary Add a video comment to a video
     * @param {VideosVideoCommentsApiAddNewCommentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosVideoCommentsApiGenerated
     */
    public addNewComment(requestParameters: VideosVideoCommentsApiAddNewCommentRequest, options?: AxiosRequestConfig) {
        return VideosVideoCommentsApiFp(this.configuration).addNewComment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method adds a video comment to the specified video.
     * @summary Add a video comment to a video
     * @param {VideosVideoCommentsApiCommentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosVideoCommentsApiGenerated
     */
    public comment(requestParameters: VideosVideoCommentsApiCommentRequest, options?: AxiosRequestConfig) {
        return VideosVideoCommentsApiFp(this.configuration).comment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns the specified video comment.
     * @summary Get a specific video comment
     * @param {VideosVideoCommentsApiComment0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosVideoCommentsApiGenerated
     */
    public comment_1(requestParameters: VideosVideoCommentsApiComment0Request, options?: AxiosRequestConfig) {
        return VideosVideoCommentsApiFp(this.configuration).comment_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method deletes the specified video comment. The authenticated user must be the owner of the comment.
     * @summary Delete a video comment
     * @param {VideosVideoCommentsApiComment1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosVideoCommentsApiGenerated
     */
    public comment_2(requestParameters: VideosVideoCommentsApiComment1Request, options?: AxiosRequestConfig) {
        return VideosVideoCommentsApiFp(this.configuration).comment_2(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method edits the specified video comment. The authenticated user must be the owner of the comment.
     * @summary Edit a video comment
     * @param {VideosVideoCommentsApiComment2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosVideoCommentsApiGenerated
     */
    public comment_3(requestParameters: VideosVideoCommentsApiComment2Request, options?: AxiosRequestConfig) {
        return VideosVideoCommentsApiFp(this.configuration).comment_3(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every video comment on the specified video.
     * @summary Get all the video comments on a video
     * @param {VideosVideoCommentsApiCommentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosVideoCommentsApiGenerated
     */
    public comments(requestParameters: VideosVideoCommentsApiCommentsRequest, options?: AxiosRequestConfig) {
        return VideosVideoCommentsApiFp(this.configuration).comments(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method adds a reply to the specified video comment.
     * @summary Add a reply to a video comment
     * @param {VideosVideoCommentsApiCreateReplyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosVideoCommentsApiGenerated
     */
    public createReply(requestParameters: VideosVideoCommentsApiCreateReplyRequest, options?: AxiosRequestConfig) {
        return VideosVideoCommentsApiFp(this.configuration).createReply(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every video comment on the specified video.
     * @summary Get all the video comments on a video
     * @param {VideosVideoCommentsApiGetAllRepliesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosVideoCommentsApiGenerated
     */
    public getAllReplies(requestParameters: VideosVideoCommentsApiGetAllRepliesRequest, options?: AxiosRequestConfig) {
        return VideosVideoCommentsApiFp(this.configuration).getAllReplies(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every reply to the specified video comment.
     * @summary Get all the replies to a video comment
     * @param {VideosVideoCommentsApiGetAllReplies0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosVideoCommentsApiGenerated
     */
    public getAllReplies_4(requestParameters: VideosVideoCommentsApiGetAllReplies0Request, options?: AxiosRequestConfig) {
        return VideosVideoCommentsApiFp(this.configuration).getAllReplies_4(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
