/* tslint:disable */
/* eslint-disable */
/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

The version of the OpenAPI document: 3.4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Chapter } from '../models';
// @ts-ignore
import { CreateChapterRequest } from '../models';
// @ts-ignore
import { EditChapterRequest } from '../models';
// @ts-ignore
import { LegacyError } from '../models';
// @ts-ignore
import { ModelError } from '../models';
// @ts-ignore
import { Picture } from '../models';
// @ts-ignore
import { VideosChaptersGenerateChapterThumbnailOrUploadLinkRequest } from '../models';
// @ts-ignore
import { VideosChaptersGenerateChapterThumbnailRequest } from '../models';
// @ts-ignore
import { VideosChaptersSetChapterThumbnailActiveRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * VideosChaptersApi - axios parameter creator
 * @export
 */
export const VideosChaptersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method adds a chapter to the specified video.
         * @summary Add a chapter to a video
         * @param {number} videoId The ID of the video.
         * @param {CreateChapterRequest} [createChapterRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chapter: async (videoId: number, createChapterRequest?: CreateChapterRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('chapter', 'videoId', videoId)
            const localVarPath = `/videos/{video_id}/chapters`
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["upload"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["upload"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.vimeo.video.chapter+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createChapterRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/videos/{video_id}/chapters',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createChapterRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns a single chapter of the specified video.
         * @summary Get a specific chapter
         * @param {number} chapterId The ID of the chapter.
         * @param {number} videoId The ID of the video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chapter_1: async (chapterId: number, videoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chapterId' is not null or undefined
            assertParamExists('chapter_1', 'chapterId', chapterId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('chapter_1', 'videoId', videoId)
            const localVarPath = `/videos/{video_id}/chapters/{chapter_id}`
                .replace(`{${"chapter_id"}}`, encodeURIComponent(String(chapterId !== undefined ? chapterId : `-chapter_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/videos/{video_id}/chapters/{chapter_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method deletes the specified chapter from a video. The authenticated user must be the owner of the video.
         * @summary Delete a chapter
         * @param {number} chapterId The ID of the chapter.
         * @param {number} videoId The ID of the video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chapter_2: async (chapterId: number, videoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chapterId' is not null or undefined
            assertParamExists('chapter_2', 'chapterId', chapterId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('chapter_2', 'videoId', videoId)
            const localVarPath = `/videos/{video_id}/chapters/{chapter_id}`
                .replace(`{${"chapter_id"}}`, encodeURIComponent(String(chapterId !== undefined ? chapterId : `-chapter_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["delete"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["delete"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/videos/{video_id}/chapters/{chapter_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method edits the specified chapter of a video. The authenticated user must be the owner of the video.
         * @summary Edit a chapter
         * @param {number} chapterId The ID of the chapter.
         * @param {number} videoId The ID of the video.
         * @param {EditChapterRequest} [editChapterRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chapter_3: async (chapterId: number, videoId: number, editChapterRequest?: EditChapterRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chapterId' is not null or undefined
            assertParamExists('chapter_3', 'chapterId', chapterId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('chapter_3', 'videoId', videoId)
            const localVarPath = `/videos/{video_id}/chapters/{chapter_id}`
                .replace(`{${"chapter_id"}}`, encodeURIComponent(String(chapterId !== undefined ? chapterId : `-chapter_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.vimeo.video.chapter+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: editChapterRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/videos/{video_id}/chapters/{chapter_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(editChapterRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every chapter of the specified video.
         * @summary Get all the chapters of a video
         * @param {number} videoId The ID of the video.
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chapters: async (videoId: number, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('chapters', 'videoId', videoId)
            const localVarPath = `/videos/{video_id}/chapters`
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/videos/{video_id}/chapters',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method deletes the specified chapter thumbnail from a video.  The authenticated user must be the owner of the video that the chapter belongs to. This method deletes both timecode-generated and custom-uploaded thumbnails.
         * @summary Delete a chapter thumbnail
         * @param {number} chapterId The ID of the chapter.
         * @param {string} uid The unique ID of the thumbnail.
         * @param {number} videoId The ID of the video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteChapterThumbnail: async (chapterId: number, uid: string, videoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chapterId' is not null or undefined
            assertParamExists('deleteChapterThumbnail', 'chapterId', chapterId)
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('deleteChapterThumbnail', 'uid', uid)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('deleteChapterThumbnail', 'videoId', videoId)
            const localVarPath = `/videos/{video_id}/chapters/{chapter_id}/pictures/{uid}`
                .replace(`{${"chapter_id"}}`, encodeURIComponent(String(chapterId !== undefined ? chapterId : `-chapter_id-`)))
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid !== undefined ? uid : `-uid-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["delete"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["delete"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/videos/{video_id}/chapters/{chapter_id}/pictures/{uid}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method generates either an upload link or a timecode-based thumbnail for an unsaved video chapter. To generate the upload link, which enables the authenticated user to upload a chapter thumbnail image manually, leave the body of the request empty. To generate an automatic timecode-based thumbnail, specify the **timecode** parameter in the body of the request.
         * @summary Generate an upload link or timecode-based thumbnail for an unsaved video chapter
         * @param {number} videoId The ID of the video.
         * @param {VideosChaptersGenerateChapterThumbnailRequest} [videosChaptersGenerateChapterThumbnailRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateChapterThumbnail: async (videoId: number, videosChaptersGenerateChapterThumbnailRequest?: VideosChaptersGenerateChapterThumbnailRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('generateChapterThumbnail', 'videoId', videoId)
            const localVarPath = `/videos/{video_id}/chapters/temporary/pictures`
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["public"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["public"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: videosChaptersGenerateChapterThumbnailRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/videos/{video_id}/chapters/temporary/pictures',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(videosChaptersGenerateChapterThumbnailRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method generates either an upload link or a timecode-based thumbnail for the specified saved video chapter. To generate the upload link, which enables the authenticated user to upload a chapter thumbnail image manually, leave the body of the request empty. To generate an automatic timecode-based thumbnail, include the **timecode** parameter in the body of the request.
         * @summary Generate an upload link or timecode-based thumbnail for a saved video chapter
         * @param {number} chapterId The ID of the chapter.
         * @param {number} videoId The ID of the video.
         * @param {VideosChaptersGenerateChapterThumbnailOrUploadLinkRequest} [videosChaptersGenerateChapterThumbnailOrUploadLinkRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateChapterThumbnailOrUploadLink: async (chapterId: number, videoId: number, videosChaptersGenerateChapterThumbnailOrUploadLinkRequest?: VideosChaptersGenerateChapterThumbnailOrUploadLinkRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chapterId' is not null or undefined
            assertParamExists('generateChapterThumbnailOrUploadLink', 'chapterId', chapterId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('generateChapterThumbnailOrUploadLink', 'videoId', videoId)
            const localVarPath = `/videos/{video_id}/chapters/{chapter_id}/pictures`
                .replace(`{${"chapter_id"}}`, encodeURIComponent(String(chapterId !== undefined ? chapterId : `-chapter_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: videosChaptersGenerateChapterThumbnailOrUploadLinkRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/videos/{video_id}/chapters/{chapter_id}/pictures',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(videosChaptersGenerateChapterThumbnailOrUploadLinkRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every thumbnail associated with the specified saved video chapter.
         * @summary Get all the thumbnails associated with a saved video chapter
         * @param {number} chapterId The ID of the chapter.
         * @param {number} videoId The ID of the video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChapterThumbnails: async (chapterId: number, videoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chapterId' is not null or undefined
            assertParamExists('getChapterThumbnails', 'chapterId', chapterId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('getChapterThumbnails', 'videoId', videoId)
            const localVarPath = `/videos/{video_id}/chapters/{chapter_id}/pictures`
                .replace(`{${"chapter_id"}}`, encodeURIComponent(String(chapterId !== undefined ? chapterId : `-chapter_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["public"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["public"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/videos/{video_id}/chapters/{chapter_id}/pictures',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns the specified thumbnail associated with an unsaved video chapter.
         * @summary Get a single chapter thumbnail associated with an unsaved video chapter
         * @param {number} videoId The ID of the video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleChapterThumbnail: async (videoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('getSingleChapterThumbnail', 'videoId', videoId)
            const localVarPath = `/videos/{video_id}/chapters/temporary/pictures/{uid}`
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/videos/{video_id}/chapters/temporary/pictures/{uid}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns the specified thumbnail associated with a saved video chapter.
         * @summary Get a single chapter thumbnail associated with a saved video chapter
         * @param {number} chapterId The ID of the chapter.
         * @param {number} videoId The ID of the video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleChapterThumbnail_4: async (chapterId: number, videoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chapterId' is not null or undefined
            assertParamExists('getSingleChapterThumbnail_4', 'chapterId', chapterId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('getSingleChapterThumbnail_4', 'videoId', videoId)
            const localVarPath = `/videos/{video_id}/chapters/{chapter_id}/pictures/{uid}`
                .replace(`{${"chapter_id"}}`, encodeURIComponent(String(chapterId !== undefined ? chapterId : `-chapter_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/videos/{video_id}/chapters/{chapter_id}/pictures/{uid}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method sets the specified chapter thumbnail for a video as active.
         * @summary Set a chapter thumbnail as active
         * @param {number} chapterId The ID of the chapter.
         * @param {number} videoId The ID of the video.
         * @param {VideosChaptersSetChapterThumbnailActiveRequest} [videosChaptersSetChapterThumbnailActiveRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setChapterThumbnailActive: async (chapterId: number, videoId: number, videosChaptersSetChapterThumbnailActiveRequest?: VideosChaptersSetChapterThumbnailActiveRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chapterId' is not null or undefined
            assertParamExists('setChapterThumbnailActive', 'chapterId', chapterId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('setChapterThumbnailActive', 'videoId', videoId)
            const localVarPath = `/videos/{video_id}/chapters/{chapter_id}/pictures/{uid}`
                .replace(`{${"chapter_id"}}`, encodeURIComponent(String(chapterId !== undefined ? chapterId : `-chapter_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: videosChaptersSetChapterThumbnailActiveRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/videos/{video_id}/chapters/{chapter_id}/pictures/{uid}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(videosChaptersSetChapterThumbnailActiveRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VideosChaptersApi - functional programming interface
 * @export
 */
export const VideosChaptersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VideosChaptersApiAxiosParamCreator(configuration)
    return {
        /**
         * This method adds a chapter to the specified video.
         * @summary Add a chapter to a video
         * @param {VideosChaptersApiChapterRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async chapter(requestParameters: VideosChaptersApiChapterRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Chapter>> {
            const createChapterRequest: CreateChapterRequest = {
                title: requestParameters.title,
                active_thumbnail_uri: requestParameters.active_thumbnail_uri,
                thumbnail_uris: requestParameters.thumbnail_uris,
                timecode: requestParameters.timecode
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.chapter(requestParameters.videoId, createChapterRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns a single chapter of the specified video.
         * @summary Get a specific chapter
         * @param {VideosChaptersApiChapter0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async chapter_1(requestParameters: VideosChaptersApiChapter0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Chapter>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.chapter_1(requestParameters.chapterId, requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method deletes the specified chapter from a video. The authenticated user must be the owner of the video.
         * @summary Delete a chapter
         * @param {VideosChaptersApiChapter1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async chapter_2(requestParameters: VideosChaptersApiChapter1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.chapter_2(requestParameters.chapterId, requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method edits the specified chapter of a video. The authenticated user must be the owner of the video.
         * @summary Edit a chapter
         * @param {VideosChaptersApiChapter2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async chapter_3(requestParameters: VideosChaptersApiChapter2Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Chapter>> {
            const editChapterRequest: EditChapterRequest = {
                title: requestParameters.title,
                active_thumbnail_uri: requestParameters.active_thumbnail_uri,
                timecode: requestParameters.timecode
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.chapter_3(requestParameters.chapterId, requestParameters.videoId, editChapterRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every chapter of the specified video.
         * @summary Get all the chapters of a video
         * @param {VideosChaptersApiChaptersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async chapters(requestParameters: VideosChaptersApiChaptersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Chapter>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.chapters(requestParameters.videoId, requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method deletes the specified chapter thumbnail from a video.  The authenticated user must be the owner of the video that the chapter belongs to. This method deletes both timecode-generated and custom-uploaded thumbnails.
         * @summary Delete a chapter thumbnail
         * @param {VideosChaptersApiDeleteChapterThumbnailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteChapterThumbnail(requestParameters: VideosChaptersApiDeleteChapterThumbnailRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteChapterThumbnail(requestParameters.chapterId, requestParameters.uid, requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method generates either an upload link or a timecode-based thumbnail for an unsaved video chapter. To generate the upload link, which enables the authenticated user to upload a chapter thumbnail image manually, leave the body of the request empty. To generate an automatic timecode-based thumbnail, specify the **timecode** parameter in the body of the request.
         * @summary Generate an upload link or timecode-based thumbnail for an unsaved video chapter
         * @param {VideosChaptersApiGenerateChapterThumbnailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateChapterThumbnail(requestParameters: VideosChaptersApiGenerateChapterThumbnailRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Picture>> {
            const videosChaptersGenerateChapterThumbnailRequest: VideosChaptersGenerateChapterThumbnailRequest = {
                timecode: requestParameters.timecode
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateChapterThumbnail(requestParameters.videoId, videosChaptersGenerateChapterThumbnailRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method generates either an upload link or a timecode-based thumbnail for the specified saved video chapter. To generate the upload link, which enables the authenticated user to upload a chapter thumbnail image manually, leave the body of the request empty. To generate an automatic timecode-based thumbnail, include the **timecode** parameter in the body of the request.
         * @summary Generate an upload link or timecode-based thumbnail for a saved video chapter
         * @param {VideosChaptersApiGenerateChapterThumbnailOrUploadLinkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateChapterThumbnailOrUploadLink(requestParameters: VideosChaptersApiGenerateChapterThumbnailOrUploadLinkRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Picture>> {
            const videosChaptersGenerateChapterThumbnailOrUploadLinkRequest: VideosChaptersGenerateChapterThumbnailOrUploadLinkRequest = {
                timecode: requestParameters.timecode
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateChapterThumbnailOrUploadLink(requestParameters.chapterId, requestParameters.videoId, videosChaptersGenerateChapterThumbnailOrUploadLinkRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every thumbnail associated with the specified saved video chapter.
         * @summary Get all the thumbnails associated with a saved video chapter
         * @param {VideosChaptersApiGetChapterThumbnailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChapterThumbnails(requestParameters: VideosChaptersApiGetChapterThumbnailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Picture>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getChapterThumbnails(requestParameters.chapterId, requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns the specified thumbnail associated with an unsaved video chapter.
         * @summary Get a single chapter thumbnail associated with an unsaved video chapter
         * @param {VideosChaptersApiGetSingleChapterThumbnailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingleChapterThumbnail(requestParameters: VideosChaptersApiGetSingleChapterThumbnailRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Picture>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingleChapterThumbnail(requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns the specified thumbnail associated with a saved video chapter.
         * @summary Get a single chapter thumbnail associated with a saved video chapter
         * @param {VideosChaptersApiGetSingleChapterThumbnail0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingleChapterThumbnail_4(requestParameters: VideosChaptersApiGetSingleChapterThumbnail0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Picture>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingleChapterThumbnail_4(requestParameters.chapterId, requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method sets the specified chapter thumbnail for a video as active.
         * @summary Set a chapter thumbnail as active
         * @param {VideosChaptersApiSetChapterThumbnailActiveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setChapterThumbnailActive(requestParameters: VideosChaptersApiSetChapterThumbnailActiveRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Picture>> {
            const videosChaptersSetChapterThumbnailActiveRequest: VideosChaptersSetChapterThumbnailActiveRequest = {
                active: requestParameters.active
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.setChapterThumbnailActive(requestParameters.chapterId, requestParameters.videoId, videosChaptersSetChapterThumbnailActiveRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VideosChaptersApi - factory interface
 * @export
 */
export const VideosChaptersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VideosChaptersApiFp(configuration)
    return {
        /**
         * This method adds a chapter to the specified video.
         * @summary Add a chapter to a video
         * @param {VideosChaptersApiChapterRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chapter(requestParameters: VideosChaptersApiChapterRequest, options?: AxiosRequestConfig): AxiosPromise<Chapter> {
            return localVarFp.chapter(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns a single chapter of the specified video.
         * @summary Get a specific chapter
         * @param {VideosChaptersApiChapter0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chapter_1(requestParameters: VideosChaptersApiChapter0Request, options?: AxiosRequestConfig): AxiosPromise<Chapter> {
            return localVarFp.chapter_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method deletes the specified chapter from a video. The authenticated user must be the owner of the video.
         * @summary Delete a chapter
         * @param {VideosChaptersApiChapter1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chapter_2(requestParameters: VideosChaptersApiChapter1Request, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.chapter_2(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method edits the specified chapter of a video. The authenticated user must be the owner of the video.
         * @summary Edit a chapter
         * @param {VideosChaptersApiChapter2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chapter_3(requestParameters: VideosChaptersApiChapter2Request, options?: AxiosRequestConfig): AxiosPromise<Chapter> {
            return localVarFp.chapter_3(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every chapter of the specified video.
         * @summary Get all the chapters of a video
         * @param {VideosChaptersApiChaptersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chapters(requestParameters: VideosChaptersApiChaptersRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Chapter>> {
            return localVarFp.chapters(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method deletes the specified chapter thumbnail from a video.  The authenticated user must be the owner of the video that the chapter belongs to. This method deletes both timecode-generated and custom-uploaded thumbnails.
         * @summary Delete a chapter thumbnail
         * @param {VideosChaptersApiDeleteChapterThumbnailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteChapterThumbnail(requestParameters: VideosChaptersApiDeleteChapterThumbnailRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteChapterThumbnail(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method generates either an upload link or a timecode-based thumbnail for an unsaved video chapter. To generate the upload link, which enables the authenticated user to upload a chapter thumbnail image manually, leave the body of the request empty. To generate an automatic timecode-based thumbnail, specify the **timecode** parameter in the body of the request.
         * @summary Generate an upload link or timecode-based thumbnail for an unsaved video chapter
         * @param {VideosChaptersApiGenerateChapterThumbnailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateChapterThumbnail(requestParameters: VideosChaptersApiGenerateChapterThumbnailRequest, options?: AxiosRequestConfig): AxiosPromise<Picture> {
            return localVarFp.generateChapterThumbnail(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method generates either an upload link or a timecode-based thumbnail for the specified saved video chapter. To generate the upload link, which enables the authenticated user to upload a chapter thumbnail image manually, leave the body of the request empty. To generate an automatic timecode-based thumbnail, include the **timecode** parameter in the body of the request.
         * @summary Generate an upload link or timecode-based thumbnail for a saved video chapter
         * @param {VideosChaptersApiGenerateChapterThumbnailOrUploadLinkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateChapterThumbnailOrUploadLink(requestParameters: VideosChaptersApiGenerateChapterThumbnailOrUploadLinkRequest, options?: AxiosRequestConfig): AxiosPromise<Picture> {
            return localVarFp.generateChapterThumbnailOrUploadLink(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every thumbnail associated with the specified saved video chapter.
         * @summary Get all the thumbnails associated with a saved video chapter
         * @param {VideosChaptersApiGetChapterThumbnailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChapterThumbnails(requestParameters: VideosChaptersApiGetChapterThumbnailsRequest, options?: AxiosRequestConfig): AxiosPromise<Picture> {
            return localVarFp.getChapterThumbnails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns the specified thumbnail associated with an unsaved video chapter.
         * @summary Get a single chapter thumbnail associated with an unsaved video chapter
         * @param {VideosChaptersApiGetSingleChapterThumbnailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleChapterThumbnail(requestParameters: VideosChaptersApiGetSingleChapterThumbnailRequest, options?: AxiosRequestConfig): AxiosPromise<Picture> {
            return localVarFp.getSingleChapterThumbnail(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns the specified thumbnail associated with a saved video chapter.
         * @summary Get a single chapter thumbnail associated with a saved video chapter
         * @param {VideosChaptersApiGetSingleChapterThumbnail0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleChapterThumbnail_4(requestParameters: VideosChaptersApiGetSingleChapterThumbnail0Request, options?: AxiosRequestConfig): AxiosPromise<Picture> {
            return localVarFp.getSingleChapterThumbnail_4(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method sets the specified chapter thumbnail for a video as active.
         * @summary Set a chapter thumbnail as active
         * @param {VideosChaptersApiSetChapterThumbnailActiveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setChapterThumbnailActive(requestParameters: VideosChaptersApiSetChapterThumbnailActiveRequest, options?: AxiosRequestConfig): AxiosPromise<Picture> {
            return localVarFp.setChapterThumbnailActive(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for chapter operation in VideosChaptersApi.
 * @export
 * @interface VideosChaptersApiChapterRequest
 */
export type VideosChaptersApiChapterRequest = {
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof VideosChaptersApiChapter
    */
    readonly videoId: number
    
} & CreateChapterRequest

/**
 * Request parameters for chapter_1 operation in VideosChaptersApi.
 * @export
 * @interface VideosChaptersApiChapter0Request
 */
export type VideosChaptersApiChapter0Request = {
    
    /**
    * The ID of the chapter.
    * @type {number}
    * @memberof VideosChaptersApiChapter0
    */
    readonly chapterId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof VideosChaptersApiChapter0
    */
    readonly videoId: number
    
}

/**
 * Request parameters for chapter_2 operation in VideosChaptersApi.
 * @export
 * @interface VideosChaptersApiChapter1Request
 */
export type VideosChaptersApiChapter1Request = {
    
    /**
    * The ID of the chapter.
    * @type {number}
    * @memberof VideosChaptersApiChapter1
    */
    readonly chapterId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof VideosChaptersApiChapter1
    */
    readonly videoId: number
    
}

/**
 * Request parameters for chapter_3 operation in VideosChaptersApi.
 * @export
 * @interface VideosChaptersApiChapter2Request
 */
export type VideosChaptersApiChapter2Request = {
    
    /**
    * The ID of the chapter.
    * @type {number}
    * @memberof VideosChaptersApiChapter2
    */
    readonly chapterId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof VideosChaptersApiChapter2
    */
    readonly videoId: number
    
} & EditChapterRequest

/**
 * Request parameters for chapters operation in VideosChaptersApi.
 * @export
 * @interface VideosChaptersApiChaptersRequest
 */
export type VideosChaptersApiChaptersRequest = {
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof VideosChaptersApiChapters
    */
    readonly videoId: number
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof VideosChaptersApiChapters
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof VideosChaptersApiChapters
    */
    readonly perPage?: number
    
}

/**
 * Request parameters for deleteChapterThumbnail operation in VideosChaptersApi.
 * @export
 * @interface VideosChaptersApiDeleteChapterThumbnailRequest
 */
export type VideosChaptersApiDeleteChapterThumbnailRequest = {
    
    /**
    * The ID of the chapter.
    * @type {number}
    * @memberof VideosChaptersApiDeleteChapterThumbnail
    */
    readonly chapterId: number
    
    /**
    * The unique ID of the thumbnail.
    * @type {string}
    * @memberof VideosChaptersApiDeleteChapterThumbnail
    */
    readonly uid: string
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof VideosChaptersApiDeleteChapterThumbnail
    */
    readonly videoId: number
    
}

/**
 * Request parameters for generateChapterThumbnail operation in VideosChaptersApi.
 * @export
 * @interface VideosChaptersApiGenerateChapterThumbnailRequest
 */
export type VideosChaptersApiGenerateChapterThumbnailRequest = {
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof VideosChaptersApiGenerateChapterThumbnail
    */
    readonly videoId: number
    
} & VideosChaptersGenerateChapterThumbnailRequest

/**
 * Request parameters for generateChapterThumbnailOrUploadLink operation in VideosChaptersApi.
 * @export
 * @interface VideosChaptersApiGenerateChapterThumbnailOrUploadLinkRequest
 */
export type VideosChaptersApiGenerateChapterThumbnailOrUploadLinkRequest = {
    
    /**
    * The ID of the chapter.
    * @type {number}
    * @memberof VideosChaptersApiGenerateChapterThumbnailOrUploadLink
    */
    readonly chapterId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof VideosChaptersApiGenerateChapterThumbnailOrUploadLink
    */
    readonly videoId: number
    
} & VideosChaptersGenerateChapterThumbnailOrUploadLinkRequest

/**
 * Request parameters for getChapterThumbnails operation in VideosChaptersApi.
 * @export
 * @interface VideosChaptersApiGetChapterThumbnailsRequest
 */
export type VideosChaptersApiGetChapterThumbnailsRequest = {
    
    /**
    * The ID of the chapter.
    * @type {number}
    * @memberof VideosChaptersApiGetChapterThumbnails
    */
    readonly chapterId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof VideosChaptersApiGetChapterThumbnails
    */
    readonly videoId: number
    
}

/**
 * Request parameters for getSingleChapterThumbnail operation in VideosChaptersApi.
 * @export
 * @interface VideosChaptersApiGetSingleChapterThumbnailRequest
 */
export type VideosChaptersApiGetSingleChapterThumbnailRequest = {
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof VideosChaptersApiGetSingleChapterThumbnail
    */
    readonly videoId: number
    
}

/**
 * Request parameters for getSingleChapterThumbnail_4 operation in VideosChaptersApi.
 * @export
 * @interface VideosChaptersApiGetSingleChapterThumbnail0Request
 */
export type VideosChaptersApiGetSingleChapterThumbnail0Request = {
    
    /**
    * The ID of the chapter.
    * @type {number}
    * @memberof VideosChaptersApiGetSingleChapterThumbnail0
    */
    readonly chapterId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof VideosChaptersApiGetSingleChapterThumbnail0
    */
    readonly videoId: number
    
}

/**
 * Request parameters for setChapterThumbnailActive operation in VideosChaptersApi.
 * @export
 * @interface VideosChaptersApiSetChapterThumbnailActiveRequest
 */
export type VideosChaptersApiSetChapterThumbnailActiveRequest = {
    
    /**
    * The ID of the chapter.
    * @type {number}
    * @memberof VideosChaptersApiSetChapterThumbnailActive
    */
    readonly chapterId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof VideosChaptersApiSetChapterThumbnailActive
    */
    readonly videoId: number
    
} & VideosChaptersSetChapterThumbnailActiveRequest

/**
 * VideosChaptersApiGenerated - object-oriented interface
 * @export
 * @class VideosChaptersApiGenerated
 * @extends {BaseAPI}
 */
export class VideosChaptersApiGenerated extends BaseAPI {
    /**
     * This method adds a chapter to the specified video.
     * @summary Add a chapter to a video
     * @param {VideosChaptersApiChapterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosChaptersApiGenerated
     */
    public chapter(requestParameters: VideosChaptersApiChapterRequest, options?: AxiosRequestConfig) {
        return VideosChaptersApiFp(this.configuration).chapter(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns a single chapter of the specified video.
     * @summary Get a specific chapter
     * @param {VideosChaptersApiChapter0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosChaptersApiGenerated
     */
    public chapter_1(requestParameters: VideosChaptersApiChapter0Request, options?: AxiosRequestConfig) {
        return VideosChaptersApiFp(this.configuration).chapter_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method deletes the specified chapter from a video. The authenticated user must be the owner of the video.
     * @summary Delete a chapter
     * @param {VideosChaptersApiChapter1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosChaptersApiGenerated
     */
    public chapter_2(requestParameters: VideosChaptersApiChapter1Request, options?: AxiosRequestConfig) {
        return VideosChaptersApiFp(this.configuration).chapter_2(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method edits the specified chapter of a video. The authenticated user must be the owner of the video.
     * @summary Edit a chapter
     * @param {VideosChaptersApiChapter2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosChaptersApiGenerated
     */
    public chapter_3(requestParameters: VideosChaptersApiChapter2Request, options?: AxiosRequestConfig) {
        return VideosChaptersApiFp(this.configuration).chapter_3(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every chapter of the specified video.
     * @summary Get all the chapters of a video
     * @param {VideosChaptersApiChaptersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosChaptersApiGenerated
     */
    public chapters(requestParameters: VideosChaptersApiChaptersRequest, options?: AxiosRequestConfig) {
        return VideosChaptersApiFp(this.configuration).chapters(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method deletes the specified chapter thumbnail from a video.  The authenticated user must be the owner of the video that the chapter belongs to. This method deletes both timecode-generated and custom-uploaded thumbnails.
     * @summary Delete a chapter thumbnail
     * @param {VideosChaptersApiDeleteChapterThumbnailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosChaptersApiGenerated
     */
    public deleteChapterThumbnail(requestParameters: VideosChaptersApiDeleteChapterThumbnailRequest, options?: AxiosRequestConfig) {
        return VideosChaptersApiFp(this.configuration).deleteChapterThumbnail(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method generates either an upload link or a timecode-based thumbnail for an unsaved video chapter. To generate the upload link, which enables the authenticated user to upload a chapter thumbnail image manually, leave the body of the request empty. To generate an automatic timecode-based thumbnail, specify the **timecode** parameter in the body of the request.
     * @summary Generate an upload link or timecode-based thumbnail for an unsaved video chapter
     * @param {VideosChaptersApiGenerateChapterThumbnailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosChaptersApiGenerated
     */
    public generateChapterThumbnail(requestParameters: VideosChaptersApiGenerateChapterThumbnailRequest, options?: AxiosRequestConfig) {
        return VideosChaptersApiFp(this.configuration).generateChapterThumbnail(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method generates either an upload link or a timecode-based thumbnail for the specified saved video chapter. To generate the upload link, which enables the authenticated user to upload a chapter thumbnail image manually, leave the body of the request empty. To generate an automatic timecode-based thumbnail, include the **timecode** parameter in the body of the request.
     * @summary Generate an upload link or timecode-based thumbnail for a saved video chapter
     * @param {VideosChaptersApiGenerateChapterThumbnailOrUploadLinkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosChaptersApiGenerated
     */
    public generateChapterThumbnailOrUploadLink(requestParameters: VideosChaptersApiGenerateChapterThumbnailOrUploadLinkRequest, options?: AxiosRequestConfig) {
        return VideosChaptersApiFp(this.configuration).generateChapterThumbnailOrUploadLink(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every thumbnail associated with the specified saved video chapter.
     * @summary Get all the thumbnails associated with a saved video chapter
     * @param {VideosChaptersApiGetChapterThumbnailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosChaptersApiGenerated
     */
    public getChapterThumbnails(requestParameters: VideosChaptersApiGetChapterThumbnailsRequest, options?: AxiosRequestConfig) {
        return VideosChaptersApiFp(this.configuration).getChapterThumbnails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns the specified thumbnail associated with an unsaved video chapter.
     * @summary Get a single chapter thumbnail associated with an unsaved video chapter
     * @param {VideosChaptersApiGetSingleChapterThumbnailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosChaptersApiGenerated
     */
    public getSingleChapterThumbnail(requestParameters: VideosChaptersApiGetSingleChapterThumbnailRequest, options?: AxiosRequestConfig) {
        return VideosChaptersApiFp(this.configuration).getSingleChapterThumbnail(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns the specified thumbnail associated with a saved video chapter.
     * @summary Get a single chapter thumbnail associated with a saved video chapter
     * @param {VideosChaptersApiGetSingleChapterThumbnail0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosChaptersApiGenerated
     */
    public getSingleChapterThumbnail_4(requestParameters: VideosChaptersApiGetSingleChapterThumbnail0Request, options?: AxiosRequestConfig) {
        return VideosChaptersApiFp(this.configuration).getSingleChapterThumbnail_4(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method sets the specified chapter thumbnail for a video as active.
     * @summary Set a chapter thumbnail as active
     * @param {VideosChaptersApiSetChapterThumbnailActiveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosChaptersApiGenerated
     */
    public setChapterThumbnailActive(requestParameters: VideosChaptersApiSetChapterThumbnailActiveRequest, options?: AxiosRequestConfig) {
        return VideosChaptersApiFp(this.configuration).setChapterThumbnailActive(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
