/* tslint:disable */
/* eslint-disable */
/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

The version of the OpenAPI document: 3.4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { EmbedPresetsEssentialsCreateEmbedPresetRequest } from '../models';
// @ts-ignore
import { EmbedPresetsEssentialsCreateEmbedPresetRequestEmbed } from '../models';
// @ts-ignore
import { EmbedPresetsEssentialsCreatePresetRequest } from '../models';
// @ts-ignore
import { EmbedPresetsEssentialsCreatePresetRequestEmbed } from '../models';
// @ts-ignore
import { EmbedPresetsEssentialsEditPresetRequest } from '../models';
// @ts-ignore
import { EmbedPresetsEssentialsEditPresetRequest1 } from '../models';
// @ts-ignore
import { LegacyError } from '../models';
// @ts-ignore
import { Preset } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * EmbedPresetsEssentialsApi - axios parameter creator
 * @export
 */
export const EmbedPresetsEssentialsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method creates an embed preset.
         * @summary Create an embed preset
         * @param {number} userId The ID of the user.
         * @param {EmbedPresetsEssentialsCreateEmbedPresetRequest} [embedPresetsEssentialsCreateEmbedPresetRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmbedPreset: async (userId: number, embedPresetsEssentialsCreateEmbedPresetRequest?: EmbedPresetsEssentialsCreateEmbedPresetRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('createEmbedPreset', 'userId', userId)
            const localVarPath = `/users/{user_id}/presets`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.vimeo.preset+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: embedPresetsEssentialsCreateEmbedPresetRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/presets',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(embedPresetsEssentialsCreateEmbedPresetRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method creates an embed preset.
         * @summary Create an embed preset
         * @param {EmbedPresetsEssentialsCreatePresetRequest} [embedPresetsEssentialsCreatePresetRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPreset: async (embedPresetsEssentialsCreatePresetRequest?: EmbedPresetsEssentialsCreatePresetRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/presets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.vimeo.preset+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: embedPresetsEssentialsCreatePresetRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/presets',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(embedPresetsEssentialsCreatePresetRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method edits the specified embed preset. The authenticated user must be the owner of the preset.
         * @summary Edit an embed preset
         * @param {number} presetId The ID of the preset.
         * @param {EmbedPresetsEssentialsEditPresetRequest} [embedPresetsEssentialsEditPresetRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editPreset: async (presetId: number, embedPresetsEssentialsEditPresetRequest?: EmbedPresetsEssentialsEditPresetRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'presetId' is not null or undefined
            assertParamExists('editPreset', 'presetId', presetId)
            const localVarPath = `/me/presets/{preset_id}`
                .replace(`{${"preset_id"}}`, encodeURIComponent(String(presetId !== undefined ? presetId : `-preset_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.vimeo.preset+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: embedPresetsEssentialsEditPresetRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/presets/{preset_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(embedPresetsEssentialsEditPresetRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method edits the specified embed preset. The authenticated user must be the owner of the preset.
         * @summary Edit an embed preset
         * @param {number} presetId The ID of the preset.
         * @param {number} userId The ID of the user.
         * @param {EmbedPresetsEssentialsEditPresetRequest1} [embedPresetsEssentialsEditPresetRequest1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editPreset_1: async (presetId: number, userId: number, embedPresetsEssentialsEditPresetRequest1?: EmbedPresetsEssentialsEditPresetRequest1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'presetId' is not null or undefined
            assertParamExists('editPreset_1', 'presetId', presetId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('editPreset_1', 'userId', userId)
            const localVarPath = `/users/{user_id}/presets/{preset_id}`
                .replace(`{${"preset_id"}}`, encodeURIComponent(String(presetId !== undefined ? presetId : `-preset_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.vimeo.preset+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: embedPresetsEssentialsEditPresetRequest1,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/presets/{preset_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(embedPresetsEssentialsEditPresetRequest1, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every embed preset that belongs to the authenticated user.
         * @summary Get all the embed presets that a user has created
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUserCreatedEmbedPresets: async (page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/presets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/presets',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns a single embed preset. The authenticated user must be the owner of the preset.
         * @summary Get a specific embed preset
         * @param {number} presetId The ID of the preset.
         * @param {number} userId The ID of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificEmbedPreset: async (presetId: number, userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'presetId' is not null or undefined
            assertParamExists('getSpecificEmbedPreset', 'presetId', presetId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getSpecificEmbedPreset', 'userId', userId)
            const localVarPath = `/users/{user_id}/presets/{preset_id}`
                .replace(`{${"preset_id"}}`, encodeURIComponent(String(presetId !== undefined ? presetId : `-preset_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/presets/{preset_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns a single embed preset. The authenticated user must be the owner of the preset.
         * @summary Get a specific embed preset
         * @param {number} presetId The ID of the preset.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificPreset: async (presetId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'presetId' is not null or undefined
            assertParamExists('getSpecificPreset', 'presetId', presetId)
            const localVarPath = `/me/presets/{preset_id}`
                .replace(`{${"preset_id"}}`, encodeURIComponent(String(presetId !== undefined ? presetId : `-preset_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/presets/{preset_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every embed preset that belongs to the authenticated user.
         * @summary Get all the embed presets that a user has created
         * @param {number} userId The ID of the user.
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserEmbedPresets: async (userId: number, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUserEmbedPresets', 'userId', userId)
            const localVarPath = `/users/{user_id}/presets`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/presets',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmbedPresetsEssentialsApi - functional programming interface
 * @export
 */
export const EmbedPresetsEssentialsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmbedPresetsEssentialsApiAxiosParamCreator(configuration)
    return {
        /**
         * This method creates an embed preset.
         * @summary Create an embed preset
         * @param {EmbedPresetsEssentialsApiCreateEmbedPresetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEmbedPreset(requestParameters: EmbedPresetsEssentialsApiCreateEmbedPresetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Preset>> {
            const embedPresetsEssentialsCreateEmbedPresetRequest: EmbedPresetsEssentialsCreateEmbedPresetRequest = {
                embed: requestParameters.embed,
                name: requestParameters.name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEmbedPreset(requestParameters.userId, embedPresetsEssentialsCreateEmbedPresetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method creates an embed preset.
         * @summary Create an embed preset
         * @param {EmbedPresetsEssentialsApiCreatePresetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPreset(requestParameters: EmbedPresetsEssentialsApiCreatePresetRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Preset>> {
            const embedPresetsEssentialsCreatePresetRequest: EmbedPresetsEssentialsCreatePresetRequest = {
                embed: requestParameters.embed,
                name: requestParameters.name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPreset(embedPresetsEssentialsCreatePresetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method edits the specified embed preset. The authenticated user must be the owner of the preset.
         * @summary Edit an embed preset
         * @param {EmbedPresetsEssentialsApiEditPresetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editPreset(requestParameters: EmbedPresetsEssentialsApiEditPresetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Preset>> {
            const embedPresetsEssentialsEditPresetRequest: EmbedPresetsEssentialsEditPresetRequest = {
                outro: requestParameters.outro
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.editPreset(requestParameters.presetId, embedPresetsEssentialsEditPresetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method edits the specified embed preset. The authenticated user must be the owner of the preset.
         * @summary Edit an embed preset
         * @param {EmbedPresetsEssentialsApiEditPreset0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editPreset_1(requestParameters: EmbedPresetsEssentialsApiEditPreset0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Preset>> {
            const embedPresetsEssentialsEditPresetRequest1: EmbedPresetsEssentialsEditPresetRequest1 = {
                outro: requestParameters.outro
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.editPreset_1(requestParameters.presetId, requestParameters.userId, embedPresetsEssentialsEditPresetRequest1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every embed preset that belongs to the authenticated user.
         * @summary Get all the embed presets that a user has created
         * @param {EmbedPresetsEssentialsApiGetAllUserCreatedEmbedPresetsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllUserCreatedEmbedPresets(requestParameters: EmbedPresetsEssentialsApiGetAllUserCreatedEmbedPresetsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Preset>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllUserCreatedEmbedPresets(requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns a single embed preset. The authenticated user must be the owner of the preset.
         * @summary Get a specific embed preset
         * @param {EmbedPresetsEssentialsApiGetSpecificEmbedPresetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpecificEmbedPreset(requestParameters: EmbedPresetsEssentialsApiGetSpecificEmbedPresetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Preset>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpecificEmbedPreset(requestParameters.presetId, requestParameters.userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns a single embed preset. The authenticated user must be the owner of the preset.
         * @summary Get a specific embed preset
         * @param {EmbedPresetsEssentialsApiGetSpecificPresetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpecificPreset(requestParameters: EmbedPresetsEssentialsApiGetSpecificPresetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Preset>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpecificPreset(requestParameters.presetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every embed preset that belongs to the authenticated user.
         * @summary Get all the embed presets that a user has created
         * @param {EmbedPresetsEssentialsApiGetUserEmbedPresetsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserEmbedPresets(requestParameters: EmbedPresetsEssentialsApiGetUserEmbedPresetsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Preset>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserEmbedPresets(requestParameters.userId, requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EmbedPresetsEssentialsApi - factory interface
 * @export
 */
export const EmbedPresetsEssentialsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmbedPresetsEssentialsApiFp(configuration)
    return {
        /**
         * This method creates an embed preset.
         * @summary Create an embed preset
         * @param {EmbedPresetsEssentialsApiCreateEmbedPresetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmbedPreset(requestParameters: EmbedPresetsEssentialsApiCreateEmbedPresetRequest, options?: AxiosRequestConfig): AxiosPromise<Preset> {
            return localVarFp.createEmbedPreset(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method creates an embed preset.
         * @summary Create an embed preset
         * @param {EmbedPresetsEssentialsApiCreatePresetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPreset(requestParameters: EmbedPresetsEssentialsApiCreatePresetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Preset> {
            return localVarFp.createPreset(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method edits the specified embed preset. The authenticated user must be the owner of the preset.
         * @summary Edit an embed preset
         * @param {EmbedPresetsEssentialsApiEditPresetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editPreset(requestParameters: EmbedPresetsEssentialsApiEditPresetRequest, options?: AxiosRequestConfig): AxiosPromise<Preset> {
            return localVarFp.editPreset(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method edits the specified embed preset. The authenticated user must be the owner of the preset.
         * @summary Edit an embed preset
         * @param {EmbedPresetsEssentialsApiEditPreset0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editPreset_1(requestParameters: EmbedPresetsEssentialsApiEditPreset0Request, options?: AxiosRequestConfig): AxiosPromise<Preset> {
            return localVarFp.editPreset_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every embed preset that belongs to the authenticated user.
         * @summary Get all the embed presets that a user has created
         * @param {EmbedPresetsEssentialsApiGetAllUserCreatedEmbedPresetsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUserCreatedEmbedPresets(requestParameters: EmbedPresetsEssentialsApiGetAllUserCreatedEmbedPresetsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<Preset>> {
            return localVarFp.getAllUserCreatedEmbedPresets(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns a single embed preset. The authenticated user must be the owner of the preset.
         * @summary Get a specific embed preset
         * @param {EmbedPresetsEssentialsApiGetSpecificEmbedPresetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificEmbedPreset(requestParameters: EmbedPresetsEssentialsApiGetSpecificEmbedPresetRequest, options?: AxiosRequestConfig): AxiosPromise<Preset> {
            return localVarFp.getSpecificEmbedPreset(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns a single embed preset. The authenticated user must be the owner of the preset.
         * @summary Get a specific embed preset
         * @param {EmbedPresetsEssentialsApiGetSpecificPresetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificPreset(requestParameters: EmbedPresetsEssentialsApiGetSpecificPresetRequest, options?: AxiosRequestConfig): AxiosPromise<Preset> {
            return localVarFp.getSpecificPreset(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every embed preset that belongs to the authenticated user.
         * @summary Get all the embed presets that a user has created
         * @param {EmbedPresetsEssentialsApiGetUserEmbedPresetsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserEmbedPresets(requestParameters: EmbedPresetsEssentialsApiGetUserEmbedPresetsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Preset>> {
            return localVarFp.getUserEmbedPresets(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createEmbedPreset operation in EmbedPresetsEssentialsApi.
 * @export
 * @interface EmbedPresetsEssentialsApiCreateEmbedPresetRequest
 */
export type EmbedPresetsEssentialsApiCreateEmbedPresetRequest = {
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof EmbedPresetsEssentialsApiCreateEmbedPreset
    */
    readonly userId: number
    
} & EmbedPresetsEssentialsCreateEmbedPresetRequest

/**
 * Request parameters for createPreset operation in EmbedPresetsEssentialsApi.
 * @export
 * @interface EmbedPresetsEssentialsApiCreatePresetRequest
 */
export type EmbedPresetsEssentialsApiCreatePresetRequest = {
    
} & EmbedPresetsEssentialsCreatePresetRequest

/**
 * Request parameters for editPreset operation in EmbedPresetsEssentialsApi.
 * @export
 * @interface EmbedPresetsEssentialsApiEditPresetRequest
 */
export type EmbedPresetsEssentialsApiEditPresetRequest = {
    
    /**
    * The ID of the preset.
    * @type {number}
    * @memberof EmbedPresetsEssentialsApiEditPreset
    */
    readonly presetId: number
    
} & EmbedPresetsEssentialsEditPresetRequest

/**
 * Request parameters for editPreset_1 operation in EmbedPresetsEssentialsApi.
 * @export
 * @interface EmbedPresetsEssentialsApiEditPreset0Request
 */
export type EmbedPresetsEssentialsApiEditPreset0Request = {
    
    /**
    * The ID of the preset.
    * @type {number}
    * @memberof EmbedPresetsEssentialsApiEditPreset0
    */
    readonly presetId: number
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof EmbedPresetsEssentialsApiEditPreset0
    */
    readonly userId: number
    
} & EmbedPresetsEssentialsEditPresetRequest1

/**
 * Request parameters for getAllUserCreatedEmbedPresets operation in EmbedPresetsEssentialsApi.
 * @export
 * @interface EmbedPresetsEssentialsApiGetAllUserCreatedEmbedPresetsRequest
 */
export type EmbedPresetsEssentialsApiGetAllUserCreatedEmbedPresetsRequest = {
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof EmbedPresetsEssentialsApiGetAllUserCreatedEmbedPresets
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof EmbedPresetsEssentialsApiGetAllUserCreatedEmbedPresets
    */
    readonly perPage?: number
    
}

/**
 * Request parameters for getSpecificEmbedPreset operation in EmbedPresetsEssentialsApi.
 * @export
 * @interface EmbedPresetsEssentialsApiGetSpecificEmbedPresetRequest
 */
export type EmbedPresetsEssentialsApiGetSpecificEmbedPresetRequest = {
    
    /**
    * The ID of the preset.
    * @type {number}
    * @memberof EmbedPresetsEssentialsApiGetSpecificEmbedPreset
    */
    readonly presetId: number
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof EmbedPresetsEssentialsApiGetSpecificEmbedPreset
    */
    readonly userId: number
    
}

/**
 * Request parameters for getSpecificPreset operation in EmbedPresetsEssentialsApi.
 * @export
 * @interface EmbedPresetsEssentialsApiGetSpecificPresetRequest
 */
export type EmbedPresetsEssentialsApiGetSpecificPresetRequest = {
    
    /**
    * The ID of the preset.
    * @type {number}
    * @memberof EmbedPresetsEssentialsApiGetSpecificPreset
    */
    readonly presetId: number
    
}

/**
 * Request parameters for getUserEmbedPresets operation in EmbedPresetsEssentialsApi.
 * @export
 * @interface EmbedPresetsEssentialsApiGetUserEmbedPresetsRequest
 */
export type EmbedPresetsEssentialsApiGetUserEmbedPresetsRequest = {
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof EmbedPresetsEssentialsApiGetUserEmbedPresets
    */
    readonly userId: number
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof EmbedPresetsEssentialsApiGetUserEmbedPresets
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof EmbedPresetsEssentialsApiGetUserEmbedPresets
    */
    readonly perPage?: number
    
}

/**
 * EmbedPresetsEssentialsApiGenerated - object-oriented interface
 * @export
 * @class EmbedPresetsEssentialsApiGenerated
 * @extends {BaseAPI}
 */
export class EmbedPresetsEssentialsApiGenerated extends BaseAPI {
    /**
     * This method creates an embed preset.
     * @summary Create an embed preset
     * @param {EmbedPresetsEssentialsApiCreateEmbedPresetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmbedPresetsEssentialsApiGenerated
     */
    public createEmbedPreset(requestParameters: EmbedPresetsEssentialsApiCreateEmbedPresetRequest, options?: AxiosRequestConfig) {
        return EmbedPresetsEssentialsApiFp(this.configuration).createEmbedPreset(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method creates an embed preset.
     * @summary Create an embed preset
     * @param {EmbedPresetsEssentialsApiCreatePresetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmbedPresetsEssentialsApiGenerated
     */
    public createPreset(requestParameters: EmbedPresetsEssentialsApiCreatePresetRequest = {}, options?: AxiosRequestConfig) {
        return EmbedPresetsEssentialsApiFp(this.configuration).createPreset(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method edits the specified embed preset. The authenticated user must be the owner of the preset.
     * @summary Edit an embed preset
     * @param {EmbedPresetsEssentialsApiEditPresetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmbedPresetsEssentialsApiGenerated
     */
    public editPreset(requestParameters: EmbedPresetsEssentialsApiEditPresetRequest, options?: AxiosRequestConfig) {
        return EmbedPresetsEssentialsApiFp(this.configuration).editPreset(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method edits the specified embed preset. The authenticated user must be the owner of the preset.
     * @summary Edit an embed preset
     * @param {EmbedPresetsEssentialsApiEditPreset0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmbedPresetsEssentialsApiGenerated
     */
    public editPreset_1(requestParameters: EmbedPresetsEssentialsApiEditPreset0Request, options?: AxiosRequestConfig) {
        return EmbedPresetsEssentialsApiFp(this.configuration).editPreset_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every embed preset that belongs to the authenticated user.
     * @summary Get all the embed presets that a user has created
     * @param {EmbedPresetsEssentialsApiGetAllUserCreatedEmbedPresetsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmbedPresetsEssentialsApiGenerated
     */
    public getAllUserCreatedEmbedPresets(requestParameters: EmbedPresetsEssentialsApiGetAllUserCreatedEmbedPresetsRequest = {}, options?: AxiosRequestConfig) {
        return EmbedPresetsEssentialsApiFp(this.configuration).getAllUserCreatedEmbedPresets(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns a single embed preset. The authenticated user must be the owner of the preset.
     * @summary Get a specific embed preset
     * @param {EmbedPresetsEssentialsApiGetSpecificEmbedPresetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmbedPresetsEssentialsApiGenerated
     */
    public getSpecificEmbedPreset(requestParameters: EmbedPresetsEssentialsApiGetSpecificEmbedPresetRequest, options?: AxiosRequestConfig) {
        return EmbedPresetsEssentialsApiFp(this.configuration).getSpecificEmbedPreset(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns a single embed preset. The authenticated user must be the owner of the preset.
     * @summary Get a specific embed preset
     * @param {EmbedPresetsEssentialsApiGetSpecificPresetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmbedPresetsEssentialsApiGenerated
     */
    public getSpecificPreset(requestParameters: EmbedPresetsEssentialsApiGetSpecificPresetRequest, options?: AxiosRequestConfig) {
        return EmbedPresetsEssentialsApiFp(this.configuration).getSpecificPreset(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every embed preset that belongs to the authenticated user.
     * @summary Get all the embed presets that a user has created
     * @param {EmbedPresetsEssentialsApiGetUserEmbedPresetsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmbedPresetsEssentialsApiGenerated
     */
    public getUserEmbedPresets(requestParameters: EmbedPresetsEssentialsApiGetUserEmbedPresetsRequest, options?: AxiosRequestConfig) {
        return EmbedPresetsEssentialsApiFp(this.configuration).getUserEmbedPresets(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
