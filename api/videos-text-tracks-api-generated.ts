/* tslint:disable */
/* eslint-disable */
/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

The version of the OpenAPI document: 3.4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { LegacyError } from '../models';
// @ts-ignore
import { ModelError } from '../models';
// @ts-ignore
import { TextTrack } from '../models';
// @ts-ignore
import { VideosTextTracksAddTextTrackRequest } from '../models';
// @ts-ignore
import { VideosTextTracksAddTextTrackToVideoRequest } from '../models';
// @ts-ignore
import { VideosTextTracksEditTextTrackRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * VideosTextTracksApi - axios parameter creator
 * @export
 */
export const VideosTextTracksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method adds a text track to the specified video. For more information, see [Working with Text Track Uploads](https://developer.vimeo.com/api/upload/texttracks).
         * @summary Add a text track to a video
         * @param {number} videoId The ID of the video.
         * @param {VideosTextTracksAddTextTrackRequest} videosTextTracksAddTextTrackRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTextTrack: async (videoId: number, videosTextTracksAddTextTrackRequest: VideosTextTracksAddTextTrackRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('addTextTrack', 'videoId', videoId)
            // verify required parameter 'videosTextTracksAddTextTrackRequest' is not null or undefined
            assertParamExists('addTextTrack', 'videosTextTracksAddTextTrackRequest', videosTextTracksAddTextTrackRequest)
            const localVarPath = `/videos/{video_id}/texttracks`
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["upload"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["upload"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.vimeo.video.texttrack+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: videosTextTracksAddTextTrackRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/videos/{video_id}/texttracks',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(videosTextTracksAddTextTrackRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method adds a text track to the specified video. For more information, see [Working with Text Track Uploads](https://developer.vimeo.com/api/upload/texttracks).
         * @summary Add a text track to a video
         * @param {number} channelId The ID of the channel.
         * @param {number} videoId The ID of the video.
         * @param {VideosTextTracksAddTextTrackToVideoRequest} videosTextTracksAddTextTrackToVideoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTextTrackToVideo: async (channelId: number, videoId: number, videosTextTracksAddTextTrackToVideoRequest: VideosTextTracksAddTextTrackToVideoRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('addTextTrackToVideo', 'channelId', channelId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('addTextTrackToVideo', 'videoId', videoId)
            // verify required parameter 'videosTextTracksAddTextTrackToVideoRequest' is not null or undefined
            assertParamExists('addTextTrackToVideo', 'videosTextTracksAddTextTrackToVideoRequest', videosTextTracksAddTextTrackToVideoRequest)
            const localVarPath = `/channels/{channel_id}/videos/{video_id}/texttracks`
                .replace(`{${"channel_id"}}`, encodeURIComponent(String(channelId !== undefined ? channelId : `-channel_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["upload"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["upload"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.vimeo.video.texttrack+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: videosTextTracksAddTextTrackToVideoRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/channels/{channel_id}/videos/{video_id}/texttracks',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(videosTextTracksAddTextTrackToVideoRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method deletes the specified text track from a video. The authenticated user must be the owner of the video.
         * @summary Delete a text track
         * @param {number} texttrackId The ID of the text track.
         * @param {number} videoId The ID of the video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTextTrack: async (texttrackId: number, videoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'texttrackId' is not null or undefined
            assertParamExists('deleteTextTrack', 'texttrackId', texttrackId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('deleteTextTrack', 'videoId', videoId)
            const localVarPath = `/videos/{video_id}/texttracks/{texttrack_id}`
                .replace(`{${"texttrack_id"}}`, encodeURIComponent(String(texttrackId !== undefined ? texttrackId : `-texttrack_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["delete"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["delete"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/videos/{video_id}/texttracks/{texttrack_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method edits the specified text track of a video. The authenticated user must be the owner of the video.
         * @summary Edit a text track
         * @param {number} texttrackId The ID of the text track.
         * @param {number} videoId The ID of the video.
         * @param {VideosTextTracksEditTextTrackRequest} [videosTextTracksEditTextTrackRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editTextTrack: async (texttrackId: number, videoId: number, videosTextTracksEditTextTrackRequest?: VideosTextTracksEditTextTrackRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'texttrackId' is not null or undefined
            assertParamExists('editTextTrack', 'texttrackId', texttrackId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('editTextTrack', 'videoId', videoId)
            const localVarPath = `/videos/{video_id}/texttracks/{texttrack_id}`
                .replace(`{${"texttrack_id"}}`, encodeURIComponent(String(texttrackId !== undefined ? texttrackId : `-texttrack_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.vimeo.video.texttrack+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: videosTextTracksEditTextTrackRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/videos/{video_id}/texttracks/{texttrack_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(videosTextTracksEditTextTrackRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every text track of the specified video. The authenticated user must be the owner of the video.
         * @summary Get all the text tracks of a video
         * @param {number} channelId The ID of the channel.
         * @param {number} videoId The ID of the video.
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTracks: async (channelId: number, videoId: number, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('getAllTracks', 'channelId', channelId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('getAllTracks', 'videoId', videoId)
            const localVarPath = `/channels/{channel_id}/videos/{video_id}/texttracks`
                .replace(`{${"channel_id"}}`, encodeURIComponent(String(channelId !== undefined ? channelId : `-channel_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/channels/{channel_id}/videos/{video_id}/texttracks',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every text track of the specified video. The authenticated user must be the owner of the video.
         * @summary Get all the text tracks of a video
         * @param {number} videoId The ID of the video.
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllVideoTracks: async (videoId: number, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('getAllVideoTracks', 'videoId', videoId)
            const localVarPath = `/videos/{video_id}/texttracks`
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/videos/{video_id}/texttracks',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns a single text track of the specified video. The authenticated user must be the owner of the video.
         * @summary Get a specific text track
         * @param {number} texttrackId The ID of the text track.
         * @param {number} videoId The ID of the video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificTextTrack: async (texttrackId: number, videoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'texttrackId' is not null or undefined
            assertParamExists('getSpecificTextTrack', 'texttrackId', texttrackId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('getSpecificTextTrack', 'videoId', videoId)
            const localVarPath = `/videos/{video_id}/texttracks/{texttrack_id}`
                .replace(`{${"texttrack_id"}}`, encodeURIComponent(String(texttrackId !== undefined ? texttrackId : `-texttrack_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/videos/{video_id}/texttracks/{texttrack_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VideosTextTracksApi - functional programming interface
 * @export
 */
export const VideosTextTracksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VideosTextTracksApiAxiosParamCreator(configuration)
    return {
        /**
         * This method adds a text track to the specified video. For more information, see [Working with Text Track Uploads](https://developer.vimeo.com/api/upload/texttracks).
         * @summary Add a text track to a video
         * @param {VideosTextTracksApiAddTextTrackRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addTextTrack(requestParameters: VideosTextTracksApiAddTextTrackRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TextTrack>> {
            const videosTextTracksAddTextTrackRequest: VideosTextTracksAddTextTrackRequest = {
                active: requestParameters.active,
                is_auto_generated: requestParameters.is_auto_generated,
                is_edited: requestParameters.is_edited,
                language: requestParameters.language,
                name: requestParameters.name,
                type: requestParameters.type
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addTextTrack(requestParameters.videoId, videosTextTracksAddTextTrackRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method adds a text track to the specified video. For more information, see [Working with Text Track Uploads](https://developer.vimeo.com/api/upload/texttracks).
         * @summary Add a text track to a video
         * @param {VideosTextTracksApiAddTextTrackToVideoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addTextTrackToVideo(requestParameters: VideosTextTracksApiAddTextTrackToVideoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TextTrack>> {
            const videosTextTracksAddTextTrackToVideoRequest: VideosTextTracksAddTextTrackToVideoRequest = {
                active: requestParameters.active,
                is_auto_generated: requestParameters.is_auto_generated,
                is_edited: requestParameters.is_edited,
                language: requestParameters.language,
                name: requestParameters.name,
                type: requestParameters.type
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addTextTrackToVideo(requestParameters.channelId, requestParameters.videoId, videosTextTracksAddTextTrackToVideoRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method deletes the specified text track from a video. The authenticated user must be the owner of the video.
         * @summary Delete a text track
         * @param {VideosTextTracksApiDeleteTextTrackRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTextTrack(requestParameters: VideosTextTracksApiDeleteTextTrackRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTextTrack(requestParameters.texttrackId, requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method edits the specified text track of a video. The authenticated user must be the owner of the video.
         * @summary Edit a text track
         * @param {VideosTextTracksApiEditTextTrackRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editTextTrack(requestParameters: VideosTextTracksApiEditTextTrackRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TextTrack>> {
            const videosTextTracksEditTextTrackRequest: VideosTextTracksEditTextTrackRequest = {
                active: requestParameters.active,
                language: requestParameters.language,
                name: requestParameters.name,
                type: requestParameters.type
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.editTextTrack(requestParameters.texttrackId, requestParameters.videoId, videosTextTracksEditTextTrackRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every text track of the specified video. The authenticated user must be the owner of the video.
         * @summary Get all the text tracks of a video
         * @param {VideosTextTracksApiGetAllTracksRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllTracks(requestParameters: VideosTextTracksApiGetAllTracksRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TextTrack>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllTracks(requestParameters.channelId, requestParameters.videoId, requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every text track of the specified video. The authenticated user must be the owner of the video.
         * @summary Get all the text tracks of a video
         * @param {VideosTextTracksApiGetAllVideoTracksRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllVideoTracks(requestParameters: VideosTextTracksApiGetAllVideoTracksRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TextTrack>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllVideoTracks(requestParameters.videoId, requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns a single text track of the specified video. The authenticated user must be the owner of the video.
         * @summary Get a specific text track
         * @param {VideosTextTracksApiGetSpecificTextTrackRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpecificTextTrack(requestParameters: VideosTextTracksApiGetSpecificTextTrackRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TextTrack>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpecificTextTrack(requestParameters.texttrackId, requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VideosTextTracksApi - factory interface
 * @export
 */
export const VideosTextTracksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VideosTextTracksApiFp(configuration)
    return {
        /**
         * This method adds a text track to the specified video. For more information, see [Working with Text Track Uploads](https://developer.vimeo.com/api/upload/texttracks).
         * @summary Add a text track to a video
         * @param {VideosTextTracksApiAddTextTrackRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTextTrack(requestParameters: VideosTextTracksApiAddTextTrackRequest, options?: AxiosRequestConfig): AxiosPromise<TextTrack> {
            return localVarFp.addTextTrack(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method adds a text track to the specified video. For more information, see [Working with Text Track Uploads](https://developer.vimeo.com/api/upload/texttracks).
         * @summary Add a text track to a video
         * @param {VideosTextTracksApiAddTextTrackToVideoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTextTrackToVideo(requestParameters: VideosTextTracksApiAddTextTrackToVideoRequest, options?: AxiosRequestConfig): AxiosPromise<TextTrack> {
            return localVarFp.addTextTrackToVideo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method deletes the specified text track from a video. The authenticated user must be the owner of the video.
         * @summary Delete a text track
         * @param {VideosTextTracksApiDeleteTextTrackRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTextTrack(requestParameters: VideosTextTracksApiDeleteTextTrackRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteTextTrack(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method edits the specified text track of a video. The authenticated user must be the owner of the video.
         * @summary Edit a text track
         * @param {VideosTextTracksApiEditTextTrackRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editTextTrack(requestParameters: VideosTextTracksApiEditTextTrackRequest, options?: AxiosRequestConfig): AxiosPromise<TextTrack> {
            return localVarFp.editTextTrack(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every text track of the specified video. The authenticated user must be the owner of the video.
         * @summary Get all the text tracks of a video
         * @param {VideosTextTracksApiGetAllTracksRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTracks(requestParameters: VideosTextTracksApiGetAllTracksRequest, options?: AxiosRequestConfig): AxiosPromise<Array<TextTrack>> {
            return localVarFp.getAllTracks(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every text track of the specified video. The authenticated user must be the owner of the video.
         * @summary Get all the text tracks of a video
         * @param {VideosTextTracksApiGetAllVideoTracksRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllVideoTracks(requestParameters: VideosTextTracksApiGetAllVideoTracksRequest, options?: AxiosRequestConfig): AxiosPromise<Array<TextTrack>> {
            return localVarFp.getAllVideoTracks(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns a single text track of the specified video. The authenticated user must be the owner of the video.
         * @summary Get a specific text track
         * @param {VideosTextTracksApiGetSpecificTextTrackRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificTextTrack(requestParameters: VideosTextTracksApiGetSpecificTextTrackRequest, options?: AxiosRequestConfig): AxiosPromise<TextTrack> {
            return localVarFp.getSpecificTextTrack(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addTextTrack operation in VideosTextTracksApi.
 * @export
 * @interface VideosTextTracksApiAddTextTrackRequest
 */
export type VideosTextTracksApiAddTextTrackRequest = {
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof VideosTextTracksApiAddTextTrack
    */
    readonly videoId: number
    
} & VideosTextTracksAddTextTrackRequest

/**
 * Request parameters for addTextTrackToVideo operation in VideosTextTracksApi.
 * @export
 * @interface VideosTextTracksApiAddTextTrackToVideoRequest
 */
export type VideosTextTracksApiAddTextTrackToVideoRequest = {
    
    /**
    * The ID of the channel.
    * @type {number}
    * @memberof VideosTextTracksApiAddTextTrackToVideo
    */
    readonly channelId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof VideosTextTracksApiAddTextTrackToVideo
    */
    readonly videoId: number
    
} & VideosTextTracksAddTextTrackToVideoRequest

/**
 * Request parameters for deleteTextTrack operation in VideosTextTracksApi.
 * @export
 * @interface VideosTextTracksApiDeleteTextTrackRequest
 */
export type VideosTextTracksApiDeleteTextTrackRequest = {
    
    /**
    * The ID of the text track.
    * @type {number}
    * @memberof VideosTextTracksApiDeleteTextTrack
    */
    readonly texttrackId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof VideosTextTracksApiDeleteTextTrack
    */
    readonly videoId: number
    
}

/**
 * Request parameters for editTextTrack operation in VideosTextTracksApi.
 * @export
 * @interface VideosTextTracksApiEditTextTrackRequest
 */
export type VideosTextTracksApiEditTextTrackRequest = {
    
    /**
    * The ID of the text track.
    * @type {number}
    * @memberof VideosTextTracksApiEditTextTrack
    */
    readonly texttrackId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof VideosTextTracksApiEditTextTrack
    */
    readonly videoId: number
    
} & VideosTextTracksEditTextTrackRequest

/**
 * Request parameters for getAllTracks operation in VideosTextTracksApi.
 * @export
 * @interface VideosTextTracksApiGetAllTracksRequest
 */
export type VideosTextTracksApiGetAllTracksRequest = {
    
    /**
    * The ID of the channel.
    * @type {number}
    * @memberof VideosTextTracksApiGetAllTracks
    */
    readonly channelId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof VideosTextTracksApiGetAllTracks
    */
    readonly videoId: number
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof VideosTextTracksApiGetAllTracks
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof VideosTextTracksApiGetAllTracks
    */
    readonly perPage?: number
    
}

/**
 * Request parameters for getAllVideoTracks operation in VideosTextTracksApi.
 * @export
 * @interface VideosTextTracksApiGetAllVideoTracksRequest
 */
export type VideosTextTracksApiGetAllVideoTracksRequest = {
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof VideosTextTracksApiGetAllVideoTracks
    */
    readonly videoId: number
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof VideosTextTracksApiGetAllVideoTracks
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof VideosTextTracksApiGetAllVideoTracks
    */
    readonly perPage?: number
    
}

/**
 * Request parameters for getSpecificTextTrack operation in VideosTextTracksApi.
 * @export
 * @interface VideosTextTracksApiGetSpecificTextTrackRequest
 */
export type VideosTextTracksApiGetSpecificTextTrackRequest = {
    
    /**
    * The ID of the text track.
    * @type {number}
    * @memberof VideosTextTracksApiGetSpecificTextTrack
    */
    readonly texttrackId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof VideosTextTracksApiGetSpecificTextTrack
    */
    readonly videoId: number
    
}

/**
 * VideosTextTracksApiGenerated - object-oriented interface
 * @export
 * @class VideosTextTracksApiGenerated
 * @extends {BaseAPI}
 */
export class VideosTextTracksApiGenerated extends BaseAPI {
    /**
     * This method adds a text track to the specified video. For more information, see [Working with Text Track Uploads](https://developer.vimeo.com/api/upload/texttracks).
     * @summary Add a text track to a video
     * @param {VideosTextTracksApiAddTextTrackRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosTextTracksApiGenerated
     */
    public addTextTrack(requestParameters: VideosTextTracksApiAddTextTrackRequest, options?: AxiosRequestConfig) {
        return VideosTextTracksApiFp(this.configuration).addTextTrack(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method adds a text track to the specified video. For more information, see [Working with Text Track Uploads](https://developer.vimeo.com/api/upload/texttracks).
     * @summary Add a text track to a video
     * @param {VideosTextTracksApiAddTextTrackToVideoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosTextTracksApiGenerated
     */
    public addTextTrackToVideo(requestParameters: VideosTextTracksApiAddTextTrackToVideoRequest, options?: AxiosRequestConfig) {
        return VideosTextTracksApiFp(this.configuration).addTextTrackToVideo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method deletes the specified text track from a video. The authenticated user must be the owner of the video.
     * @summary Delete a text track
     * @param {VideosTextTracksApiDeleteTextTrackRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosTextTracksApiGenerated
     */
    public deleteTextTrack(requestParameters: VideosTextTracksApiDeleteTextTrackRequest, options?: AxiosRequestConfig) {
        return VideosTextTracksApiFp(this.configuration).deleteTextTrack(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method edits the specified text track of a video. The authenticated user must be the owner of the video.
     * @summary Edit a text track
     * @param {VideosTextTracksApiEditTextTrackRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosTextTracksApiGenerated
     */
    public editTextTrack(requestParameters: VideosTextTracksApiEditTextTrackRequest, options?: AxiosRequestConfig) {
        return VideosTextTracksApiFp(this.configuration).editTextTrack(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every text track of the specified video. The authenticated user must be the owner of the video.
     * @summary Get all the text tracks of a video
     * @param {VideosTextTracksApiGetAllTracksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosTextTracksApiGenerated
     */
    public getAllTracks(requestParameters: VideosTextTracksApiGetAllTracksRequest, options?: AxiosRequestConfig) {
        return VideosTextTracksApiFp(this.configuration).getAllTracks(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every text track of the specified video. The authenticated user must be the owner of the video.
     * @summary Get all the text tracks of a video
     * @param {VideosTextTracksApiGetAllVideoTracksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosTextTracksApiGenerated
     */
    public getAllVideoTracks(requestParameters: VideosTextTracksApiGetAllVideoTracksRequest, options?: AxiosRequestConfig) {
        return VideosTextTracksApiFp(this.configuration).getAllVideoTracks(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns a single text track of the specified video. The authenticated user must be the owner of the video.
     * @summary Get a specific text track
     * @param {VideosTextTracksApiGetSpecificTextTrackRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosTextTracksApiGenerated
     */
    public getSpecificTextTrack(requestParameters: VideosTextTracksApiGetSpecificTextTrackRequest, options?: AxiosRequestConfig) {
        return VideosTextTracksApiFp(this.configuration).getSpecificTextTrack(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
