/* tslint:disable */
/* eslint-disable */
/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

The version of the OpenAPI document: 3.4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { LegacyError } from '../models';
// @ts-ignore
import { Video } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * EmbedPresetsVideosApi - axios parameter creator
 * @export
 */
export const EmbedPresetsVideosApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method adds an embed preset to the specified video. The authenticated user must either be the owner of the video or a team user with the contributor or admin role.
         * @summary Add an embed preset to a video
         * @param {number} presetId The ID of the embed preset.
         * @param {number} videoId The ID of the video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPresetToVideo: async (presetId: number, videoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'presetId' is not null or undefined
            assertParamExists('addPresetToVideo', 'presetId', presetId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('addPresetToVideo', 'videoId', videoId)
            const localVarPath = `/videos/{video_id}/presets/{preset_id}`
                .replace(`{${"preset_id"}}`, encodeURIComponent(String(presetId !== undefined ? presetId : `-preset_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/videos/{video_id}/presets/{preset_id}',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method determines whether a video has the specified embed preset.
         * @summary Check if an embed preset has been added to a video
         * @param {number} presetId The ID of the embed preset.
         * @param {number} videoId The ID of the video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkIfPresetAddedToVideo: async (presetId: number, videoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'presetId' is not null or undefined
            assertParamExists('checkIfPresetAddedToVideo', 'presetId', presetId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('checkIfPresetAddedToVideo', 'videoId', videoId)
            const localVarPath = `/videos/{video_id}/presets/{preset_id}`
                .replace(`{${"preset_id"}}`, encodeURIComponent(String(presetId !== undefined ? presetId : `-preset_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/videos/{video_id}/presets/{preset_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every video to which the specified embed preset has been added. The authenticated user must be the owner of videos.
         * @summary Get all the videos that have a specific embed preset
         * @param {number} presetId The ID of the embed preset.
         * @param {number} userId The ID of the user.
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPresetVideos: async (presetId: number, userId: number, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'presetId' is not null or undefined
            assertParamExists('getPresetVideos', 'presetId', presetId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getPresetVideos', 'userId', userId)
            const localVarPath = `/users/{user_id}/presets/{preset_id}/videos`
                .replace(`{${"preset_id"}}`, encodeURIComponent(String(presetId !== undefined ? presetId : `-preset_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/presets/{preset_id}/videos',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every video to which the specified embed preset has been added. The authenticated user must be the owner of videos.
         * @summary Get all the videos that have a specific embed preset
         * @param {number} presetId The ID of the embed preset.
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificPresetVideos: async (presetId: number, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'presetId' is not null or undefined
            assertParamExists('getSpecificPresetVideos', 'presetId', presetId)
            const localVarPath = `/me/presets/{preset_id}/videos`
                .replace(`{${"preset_id"}}`, encodeURIComponent(String(presetId !== undefined ? presetId : `-preset_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/presets/{preset_id}/videos',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method removes the specified embed preset from a video. The authenticated user must either be the owner of the video or a team user with the contributor or admin role.
         * @summary Remove an embed preset from a video
         * @param {number} presetId The ID of the embed preset.
         * @param {number} videoId The ID of the video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePresetFromVideo: async (presetId: number, videoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'presetId' is not null or undefined
            assertParamExists('removePresetFromVideo', 'presetId', presetId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('removePresetFromVideo', 'videoId', videoId)
            const localVarPath = `/videos/{video_id}/presets/{preset_id}`
                .replace(`{${"preset_id"}}`, encodeURIComponent(String(presetId !== undefined ? presetId : `-preset_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/videos/{video_id}/presets/{preset_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmbedPresetsVideosApi - functional programming interface
 * @export
 */
export const EmbedPresetsVideosApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmbedPresetsVideosApiAxiosParamCreator(configuration)
    return {
        /**
         * This method adds an embed preset to the specified video. The authenticated user must either be the owner of the video or a team user with the contributor or admin role.
         * @summary Add an embed preset to a video
         * @param {EmbedPresetsVideosApiAddPresetToVideoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addPresetToVideo(requestParameters: EmbedPresetsVideosApiAddPresetToVideoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addPresetToVideo(requestParameters.presetId, requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method determines whether a video has the specified embed preset.
         * @summary Check if an embed preset has been added to a video
         * @param {EmbedPresetsVideosApiCheckIfPresetAddedToVideoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkIfPresetAddedToVideo(requestParameters: EmbedPresetsVideosApiCheckIfPresetAddedToVideoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkIfPresetAddedToVideo(requestParameters.presetId, requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every video to which the specified embed preset has been added. The authenticated user must be the owner of videos.
         * @summary Get all the videos that have a specific embed preset
         * @param {EmbedPresetsVideosApiGetPresetVideosRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPresetVideos(requestParameters: EmbedPresetsVideosApiGetPresetVideosRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Video>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPresetVideos(requestParameters.presetId, requestParameters.userId, requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every video to which the specified embed preset has been added. The authenticated user must be the owner of videos.
         * @summary Get all the videos that have a specific embed preset
         * @param {EmbedPresetsVideosApiGetSpecificPresetVideosRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpecificPresetVideos(requestParameters: EmbedPresetsVideosApiGetSpecificPresetVideosRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Video>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpecificPresetVideos(requestParameters.presetId, requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method removes the specified embed preset from a video. The authenticated user must either be the owner of the video or a team user with the contributor or admin role.
         * @summary Remove an embed preset from a video
         * @param {EmbedPresetsVideosApiRemovePresetFromVideoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removePresetFromVideo(requestParameters: EmbedPresetsVideosApiRemovePresetFromVideoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removePresetFromVideo(requestParameters.presetId, requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EmbedPresetsVideosApi - factory interface
 * @export
 */
export const EmbedPresetsVideosApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmbedPresetsVideosApiFp(configuration)
    return {
        /**
         * This method adds an embed preset to the specified video. The authenticated user must either be the owner of the video or a team user with the contributor or admin role.
         * @summary Add an embed preset to a video
         * @param {EmbedPresetsVideosApiAddPresetToVideoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPresetToVideo(requestParameters: EmbedPresetsVideosApiAddPresetToVideoRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addPresetToVideo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method determines whether a video has the specified embed preset.
         * @summary Check if an embed preset has been added to a video
         * @param {EmbedPresetsVideosApiCheckIfPresetAddedToVideoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkIfPresetAddedToVideo(requestParameters: EmbedPresetsVideosApiCheckIfPresetAddedToVideoRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.checkIfPresetAddedToVideo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every video to which the specified embed preset has been added. The authenticated user must be the owner of videos.
         * @summary Get all the videos that have a specific embed preset
         * @param {EmbedPresetsVideosApiGetPresetVideosRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPresetVideos(requestParameters: EmbedPresetsVideosApiGetPresetVideosRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Video>> {
            return localVarFp.getPresetVideos(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every video to which the specified embed preset has been added. The authenticated user must be the owner of videos.
         * @summary Get all the videos that have a specific embed preset
         * @param {EmbedPresetsVideosApiGetSpecificPresetVideosRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificPresetVideos(requestParameters: EmbedPresetsVideosApiGetSpecificPresetVideosRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Video>> {
            return localVarFp.getSpecificPresetVideos(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method removes the specified embed preset from a video. The authenticated user must either be the owner of the video or a team user with the contributor or admin role.
         * @summary Remove an embed preset from a video
         * @param {EmbedPresetsVideosApiRemovePresetFromVideoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePresetFromVideo(requestParameters: EmbedPresetsVideosApiRemovePresetFromVideoRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removePresetFromVideo(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addPresetToVideo operation in EmbedPresetsVideosApi.
 * @export
 * @interface EmbedPresetsVideosApiAddPresetToVideoRequest
 */
export type EmbedPresetsVideosApiAddPresetToVideoRequest = {
    
    /**
    * The ID of the embed preset.
    * @type {number}
    * @memberof EmbedPresetsVideosApiAddPresetToVideo
    */
    readonly presetId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof EmbedPresetsVideosApiAddPresetToVideo
    */
    readonly videoId: number
    
}

/**
 * Request parameters for checkIfPresetAddedToVideo operation in EmbedPresetsVideosApi.
 * @export
 * @interface EmbedPresetsVideosApiCheckIfPresetAddedToVideoRequest
 */
export type EmbedPresetsVideosApiCheckIfPresetAddedToVideoRequest = {
    
    /**
    * The ID of the embed preset.
    * @type {number}
    * @memberof EmbedPresetsVideosApiCheckIfPresetAddedToVideo
    */
    readonly presetId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof EmbedPresetsVideosApiCheckIfPresetAddedToVideo
    */
    readonly videoId: number
    
}

/**
 * Request parameters for getPresetVideos operation in EmbedPresetsVideosApi.
 * @export
 * @interface EmbedPresetsVideosApiGetPresetVideosRequest
 */
export type EmbedPresetsVideosApiGetPresetVideosRequest = {
    
    /**
    * The ID of the embed preset.
    * @type {number}
    * @memberof EmbedPresetsVideosApiGetPresetVideos
    */
    readonly presetId: number
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof EmbedPresetsVideosApiGetPresetVideos
    */
    readonly userId: number
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof EmbedPresetsVideosApiGetPresetVideos
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof EmbedPresetsVideosApiGetPresetVideos
    */
    readonly perPage?: number
    
}

/**
 * Request parameters for getSpecificPresetVideos operation in EmbedPresetsVideosApi.
 * @export
 * @interface EmbedPresetsVideosApiGetSpecificPresetVideosRequest
 */
export type EmbedPresetsVideosApiGetSpecificPresetVideosRequest = {
    
    /**
    * The ID of the embed preset.
    * @type {number}
    * @memberof EmbedPresetsVideosApiGetSpecificPresetVideos
    */
    readonly presetId: number
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof EmbedPresetsVideosApiGetSpecificPresetVideos
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof EmbedPresetsVideosApiGetSpecificPresetVideos
    */
    readonly perPage?: number
    
}

/**
 * Request parameters for removePresetFromVideo operation in EmbedPresetsVideosApi.
 * @export
 * @interface EmbedPresetsVideosApiRemovePresetFromVideoRequest
 */
export type EmbedPresetsVideosApiRemovePresetFromVideoRequest = {
    
    /**
    * The ID of the embed preset.
    * @type {number}
    * @memberof EmbedPresetsVideosApiRemovePresetFromVideo
    */
    readonly presetId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof EmbedPresetsVideosApiRemovePresetFromVideo
    */
    readonly videoId: number
    
}

/**
 * EmbedPresetsVideosApiGenerated - object-oriented interface
 * @export
 * @class EmbedPresetsVideosApiGenerated
 * @extends {BaseAPI}
 */
export class EmbedPresetsVideosApiGenerated extends BaseAPI {
    /**
     * This method adds an embed preset to the specified video. The authenticated user must either be the owner of the video or a team user with the contributor or admin role.
     * @summary Add an embed preset to a video
     * @param {EmbedPresetsVideosApiAddPresetToVideoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmbedPresetsVideosApiGenerated
     */
    public addPresetToVideo(requestParameters: EmbedPresetsVideosApiAddPresetToVideoRequest, options?: AxiosRequestConfig) {
        return EmbedPresetsVideosApiFp(this.configuration).addPresetToVideo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method determines whether a video has the specified embed preset.
     * @summary Check if an embed preset has been added to a video
     * @param {EmbedPresetsVideosApiCheckIfPresetAddedToVideoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmbedPresetsVideosApiGenerated
     */
    public checkIfPresetAddedToVideo(requestParameters: EmbedPresetsVideosApiCheckIfPresetAddedToVideoRequest, options?: AxiosRequestConfig) {
        return EmbedPresetsVideosApiFp(this.configuration).checkIfPresetAddedToVideo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every video to which the specified embed preset has been added. The authenticated user must be the owner of videos.
     * @summary Get all the videos that have a specific embed preset
     * @param {EmbedPresetsVideosApiGetPresetVideosRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmbedPresetsVideosApiGenerated
     */
    public getPresetVideos(requestParameters: EmbedPresetsVideosApiGetPresetVideosRequest, options?: AxiosRequestConfig) {
        return EmbedPresetsVideosApiFp(this.configuration).getPresetVideos(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every video to which the specified embed preset has been added. The authenticated user must be the owner of videos.
     * @summary Get all the videos that have a specific embed preset
     * @param {EmbedPresetsVideosApiGetSpecificPresetVideosRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmbedPresetsVideosApiGenerated
     */
    public getSpecificPresetVideos(requestParameters: EmbedPresetsVideosApiGetSpecificPresetVideosRequest, options?: AxiosRequestConfig) {
        return EmbedPresetsVideosApiFp(this.configuration).getSpecificPresetVideos(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method removes the specified embed preset from a video. The authenticated user must either be the owner of the video or a team user with the contributor or admin role.
     * @summary Remove an embed preset from a video
     * @param {EmbedPresetsVideosApiRemovePresetFromVideoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmbedPresetsVideosApiGenerated
     */
    public removePresetFromVideo(requestParameters: EmbedPresetsVideosApiRemovePresetFromVideoRequest, options?: AxiosRequestConfig) {
        return EmbedPresetsVideosApiFp(this.configuration).removePresetFromVideo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
