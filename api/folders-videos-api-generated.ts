/* tslint:disable */
/* eslint-disable */
/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

The version of the OpenAPI document: 3.4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ModelError } from '../models';
// @ts-ignore
import { Video } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * FoldersVideosApi - axios parameter creator
 * @export
 */
export const FoldersVideosApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method adds multiple videos to the specified folder. The authenticated user must be the owner of the folder.
         * @summary Add a list of videos to a folder
         * @param {number} projectId The ID of the folder.
         * @param {string} uris A comma-separated list of video URIs to add.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMultipleToFolder: async (projectId: number, uris: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('addMultipleToFolder', 'projectId', projectId)
            // verify required parameter 'uris' is not null or undefined
            assertParamExists('addMultipleToFolder', 'uris', uris)
            const localVarPath = `/me/projects/{project_id}/videos`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-project_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["interact"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["interact"], configuration)
            if (uris !== undefined) {
                localVarQueryParameter['uris'] = uris;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/projects/{project_id}/videos',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method adds a single video to the specified folder. The authenticated user must be the owner of the folder.
         * @summary Add a video to a folder
         * @param {number} projectId The ID of the folder.
         * @param {number} userId The ID of the user.
         * @param {number} videoId The ID of the video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSingleFolderVideo: async (projectId: number, userId: number, videoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('addSingleFolderVideo', 'projectId', projectId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('addSingleFolderVideo', 'userId', userId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('addSingleFolderVideo', 'videoId', videoId)
            const localVarPath = `/users/{user_id}/projects/{project_id}/videos/{video_id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-project_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["interact"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["interact"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/projects/{project_id}/videos/{video_id}',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method adds a single video to the specified folder. The authenticated user must be the owner of the folder.
         * @summary Add a video to a folder
         * @param {number} projectId The ID of the folder.
         * @param {number} videoId The ID of the video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToFolder: async (projectId: number, videoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('addToFolder', 'projectId', projectId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('addToFolder', 'videoId', videoId)
            const localVarPath = `/me/projects/{project_id}/videos/{video_id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-project_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["interact"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["interact"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/projects/{project_id}/videos/{video_id}',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method adds multiple videos to the specified folder. The authenticated user must be the owner of the folder.
         * @summary Add a list of videos to a folder
         * @param {number} projectId The ID of the folder.
         * @param {number} userId The ID of the user.
         * @param {string} uris A comma-separated list of video URIs to add.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToFolderVideos: async (projectId: number, userId: number, uris: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('addToFolderVideos', 'projectId', projectId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('addToFolderVideos', 'userId', userId)
            // verify required parameter 'uris' is not null or undefined
            assertParamExists('addToFolderVideos', 'uris', uris)
            const localVarPath = `/users/{user_id}/projects/{project_id}/videos`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-project_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["interact"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["interact"], configuration)
            if (uris !== undefined) {
                localVarQueryParameter['uris'] = uris;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/projects/{project_id}/videos',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns all the videos that belong to the specified folder.
         * @summary Get all the videos in a folder
         * @param {number} projectId The ID of the folder.
         * @param {number} userId The ID of the user.
         * @param {'asc' | 'desc'} [direction] The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order. 
         * @param {string} [filterTag] A comma-separated list of tags to filter on. All results must include at least one of these tags. The use of this parameter triggers a search.
         * @param {string} [filterTagAllOf] A comma-separated list of tags to filter on. All results must include all of these tags. The use of this parameter triggers a search.
         * @param {string} [filterTagExclude] A comma-separated list of tags to exclude. The use of this parameter triggers a search.
         * @param {boolean} [includeSubfolders] Whether to include subfolders.
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {string} [query] The search query to use to filter the results.
         * @param {string} [queryFields] A comma-separated list of fields to query over. The default value is &#x60;title,description,chapters,tags&#x60;.
         * @param {'alphabetical' | 'date' | 'default' | 'duration' | 'last_user_action_event_date'} [sort] The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Use the default sort order.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;last_user_action_event_date&#x60; - Sort the results by the date of the last user action. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllFolderVideos: async (projectId: number, userId: number, direction?: 'asc' | 'desc', filterTag?: string, filterTagAllOf?: string, filterTagExclude?: string, includeSubfolders?: boolean, page?: number, perPage?: number, query?: string, queryFields?: string, sort?: 'alphabetical' | 'date' | 'default' | 'duration' | 'last_user_action_event_date', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getAllFolderVideos', 'projectId', projectId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getAllFolderVideos', 'userId', userId)
            const localVarPath = `/users/{user_id}/projects/{project_id}/videos`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-project_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (filterTag !== undefined) {
                localVarQueryParameter['filter_tag'] = filterTag;
            }

            if (filterTagAllOf !== undefined) {
                localVarQueryParameter['filter_tag_all_of'] = filterTagAllOf;
            }

            if (filterTagExclude !== undefined) {
                localVarQueryParameter['filter_tag_exclude'] = filterTagExclude;
            }

            if (includeSubfolders !== undefined) {
                localVarQueryParameter['include_subfolders'] = includeSubfolders;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (queryFields !== undefined) {
                localVarQueryParameter['query_fields'] = queryFields;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/projects/{project_id}/videos',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns all the videos that belong to the specified folder.
         * @summary Get all the videos in a folder
         * @param {number} projectId The ID of the folder.
         * @param {'asc' | 'desc'} [direction] The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order. 
         * @param {string} [filterTag] A comma-separated list of tags to filter on. All results must include at least one of these tags. The use of this parameter triggers a search.
         * @param {string} [filterTagAllOf] A comma-separated list of tags to filter on. All results must include all of these tags. The use of this parameter triggers a search.
         * @param {string} [filterTagExclude] A comma-separated list of tags to exclude. The use of this parameter triggers a search.
         * @param {boolean} [includeSubfolders] Whether to include subfolders.
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {string} [query] The search query to use to filter the results.
         * @param {string} [queryFields] A comma-separated list of fields to query over. The default value is &#x60;title,description,chapters,tags&#x60;.
         * @param {'alphabetical' | 'date' | 'default' | 'duration' | 'last_user_action_event_date'} [sort] The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Use the default sort order.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;last_user_action_event_date&#x60; - Sort the results by the date of the last user action. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVideosInFolder: async (projectId: number, direction?: 'asc' | 'desc', filterTag?: string, filterTagAllOf?: string, filterTagExclude?: string, includeSubfolders?: boolean, page?: number, perPage?: number, query?: string, queryFields?: string, sort?: 'alphabetical' | 'date' | 'default' | 'duration' | 'last_user_action_event_date', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getVideosInFolder', 'projectId', projectId)
            const localVarPath = `/me/projects/{project_id}/videos`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-project_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (filterTag !== undefined) {
                localVarQueryParameter['filter_tag'] = filterTag;
            }

            if (filterTagAllOf !== undefined) {
                localVarQueryParameter['filter_tag_all_of'] = filterTagAllOf;
            }

            if (filterTagExclude !== undefined) {
                localVarQueryParameter['filter_tag_exclude'] = filterTagExclude;
            }

            if (includeSubfolders !== undefined) {
                localVarQueryParameter['include_subfolders'] = includeSubfolders;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (queryFields !== undefined) {
                localVarQueryParameter['query_fields'] = queryFields;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/projects/{project_id}/videos',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method removes a single video from the specified folder. Please note that this doesn\'t delete the video itself.
         * @summary Remove a video from a folder
         * @param {number} projectId The ID of the folder.
         * @param {number} userId The ID of the user.
         * @param {number} videoId The ID of the video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFromFolderVideo: async (projectId: number, userId: number, videoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('removeFromFolderVideo', 'projectId', projectId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('removeFromFolderVideo', 'userId', userId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('removeFromFolderVideo', 'videoId', videoId)
            const localVarPath = `/users/{user_id}/projects/{project_id}/videos/{video_id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-project_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["delete"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["delete"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/projects/{project_id}/videos/{video_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method removes multiple videos from the specified folder. The authenticated user must be the owner of the folder.
         * @summary Remove a list of videos from a folder
         * @param {number} projectId The ID of the folder.
         * @param {string} uris A comma-separated list of the video URIs to remove.
         * @param {boolean} [shouldDeleteClips] Whether to delete the videos when removing them from the folder.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeMultipleFromFolder: async (projectId: number, uris: string, shouldDeleteClips?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('removeMultipleFromFolder', 'projectId', projectId)
            // verify required parameter 'uris' is not null or undefined
            assertParamExists('removeMultipleFromFolder', 'uris', uris)
            const localVarPath = `/me/projects/{project_id}/videos`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-project_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["interact"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["interact"], configuration)
            if (shouldDeleteClips !== undefined) {
                localVarQueryParameter['should_delete_clips'] = shouldDeleteClips;
            }

            if (uris !== undefined) {
                localVarQueryParameter['uris'] = uris;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/projects/{project_id}/videos',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method removes multiple videos from the specified folder. The authenticated user must be the owner of the folder.
         * @summary Remove a list of videos from a folder
         * @param {number} projectId The ID of the folder.
         * @param {number} userId The ID of the user.
         * @param {string} uris A comma-separated list of the video URIs to remove.
         * @param {boolean} [shouldDeleteClips] Whether to delete the videos when removing them from the folder.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeMultipleVideosFromFolder: async (projectId: number, userId: number, uris: string, shouldDeleteClips?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('removeMultipleVideosFromFolder', 'projectId', projectId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('removeMultipleVideosFromFolder', 'userId', userId)
            // verify required parameter 'uris' is not null or undefined
            assertParamExists('removeMultipleVideosFromFolder', 'uris', uris)
            const localVarPath = `/users/{user_id}/projects/{project_id}/videos`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-project_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["interact"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["interact"], configuration)
            if (shouldDeleteClips !== undefined) {
                localVarQueryParameter['should_delete_clips'] = shouldDeleteClips;
            }

            if (uris !== undefined) {
                localVarQueryParameter['uris'] = uris;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/projects/{project_id}/videos',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method removes a single video from the specified folder. Please note that this doesn\'t delete the video itself.
         * @summary Remove a video from a folder
         * @param {number} projectId The ID of the folder.
         * @param {number} videoId The ID of the video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeSingleVideo: async (projectId: number, videoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('removeSingleVideo', 'projectId', projectId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('removeSingleVideo', 'videoId', videoId)
            const localVarPath = `/me/projects/{project_id}/videos/{video_id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-project_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["delete"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["delete"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/projects/{project_id}/videos/{video_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FoldersVideosApi - functional programming interface
 * @export
 */
export const FoldersVideosApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FoldersVideosApiAxiosParamCreator(configuration)
    return {
        /**
         * This method adds multiple videos to the specified folder. The authenticated user must be the owner of the folder.
         * @summary Add a list of videos to a folder
         * @param {FoldersVideosApiAddMultipleToFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addMultipleToFolder(requestParameters: FoldersVideosApiAddMultipleToFolderRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addMultipleToFolder(requestParameters.projectId, requestParameters.uris, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method adds a single video to the specified folder. The authenticated user must be the owner of the folder.
         * @summary Add a video to a folder
         * @param {FoldersVideosApiAddSingleFolderVideoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addSingleFolderVideo(requestParameters: FoldersVideosApiAddSingleFolderVideoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addSingleFolderVideo(requestParameters.projectId, requestParameters.userId, requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method adds a single video to the specified folder. The authenticated user must be the owner of the folder.
         * @summary Add a video to a folder
         * @param {FoldersVideosApiAddToFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addToFolder(requestParameters: FoldersVideosApiAddToFolderRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addToFolder(requestParameters.projectId, requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method adds multiple videos to the specified folder. The authenticated user must be the owner of the folder.
         * @summary Add a list of videos to a folder
         * @param {FoldersVideosApiAddToFolderVideosRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addToFolderVideos(requestParameters: FoldersVideosApiAddToFolderVideosRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addToFolderVideos(requestParameters.projectId, requestParameters.userId, requestParameters.uris, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns all the videos that belong to the specified folder.
         * @summary Get all the videos in a folder
         * @param {FoldersVideosApiGetAllFolderVideosRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllFolderVideos(requestParameters: FoldersVideosApiGetAllFolderVideosRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Video>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllFolderVideos(requestParameters.projectId, requestParameters.userId, requestParameters.direction, requestParameters.filterTag, requestParameters.filterTagAllOf, requestParameters.filterTagExclude, requestParameters.includeSubfolders, requestParameters.page, requestParameters.perPage, requestParameters.query, requestParameters.queryFields, requestParameters.sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns all the videos that belong to the specified folder.
         * @summary Get all the videos in a folder
         * @param {FoldersVideosApiGetVideosInFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVideosInFolder(requestParameters: FoldersVideosApiGetVideosInFolderRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Video>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVideosInFolder(requestParameters.projectId, requestParameters.direction, requestParameters.filterTag, requestParameters.filterTagAllOf, requestParameters.filterTagExclude, requestParameters.includeSubfolders, requestParameters.page, requestParameters.perPage, requestParameters.query, requestParameters.queryFields, requestParameters.sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method removes a single video from the specified folder. Please note that this doesn\'t delete the video itself.
         * @summary Remove a video from a folder
         * @param {FoldersVideosApiRemoveFromFolderVideoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeFromFolderVideo(requestParameters: FoldersVideosApiRemoveFromFolderVideoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeFromFolderVideo(requestParameters.projectId, requestParameters.userId, requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method removes multiple videos from the specified folder. The authenticated user must be the owner of the folder.
         * @summary Remove a list of videos from a folder
         * @param {FoldersVideosApiRemoveMultipleFromFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeMultipleFromFolder(requestParameters: FoldersVideosApiRemoveMultipleFromFolderRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeMultipleFromFolder(requestParameters.projectId, requestParameters.uris, requestParameters.shouldDeleteClips, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method removes multiple videos from the specified folder. The authenticated user must be the owner of the folder.
         * @summary Remove a list of videos from a folder
         * @param {FoldersVideosApiRemoveMultipleVideosFromFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeMultipleVideosFromFolder(requestParameters: FoldersVideosApiRemoveMultipleVideosFromFolderRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeMultipleVideosFromFolder(requestParameters.projectId, requestParameters.userId, requestParameters.uris, requestParameters.shouldDeleteClips, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method removes a single video from the specified folder. Please note that this doesn\'t delete the video itself.
         * @summary Remove a video from a folder
         * @param {FoldersVideosApiRemoveSingleVideoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeSingleVideo(requestParameters: FoldersVideosApiRemoveSingleVideoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeSingleVideo(requestParameters.projectId, requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FoldersVideosApi - factory interface
 * @export
 */
export const FoldersVideosApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FoldersVideosApiFp(configuration)
    return {
        /**
         * This method adds multiple videos to the specified folder. The authenticated user must be the owner of the folder.
         * @summary Add a list of videos to a folder
         * @param {FoldersVideosApiAddMultipleToFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMultipleToFolder(requestParameters: FoldersVideosApiAddMultipleToFolderRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addMultipleToFolder(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method adds a single video to the specified folder. The authenticated user must be the owner of the folder.
         * @summary Add a video to a folder
         * @param {FoldersVideosApiAddSingleFolderVideoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSingleFolderVideo(requestParameters: FoldersVideosApiAddSingleFolderVideoRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addSingleFolderVideo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method adds a single video to the specified folder. The authenticated user must be the owner of the folder.
         * @summary Add a video to a folder
         * @param {FoldersVideosApiAddToFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToFolder(requestParameters: FoldersVideosApiAddToFolderRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addToFolder(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method adds multiple videos to the specified folder. The authenticated user must be the owner of the folder.
         * @summary Add a list of videos to a folder
         * @param {FoldersVideosApiAddToFolderVideosRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToFolderVideos(requestParameters: FoldersVideosApiAddToFolderVideosRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addToFolderVideos(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns all the videos that belong to the specified folder.
         * @summary Get all the videos in a folder
         * @param {FoldersVideosApiGetAllFolderVideosRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllFolderVideos(requestParameters: FoldersVideosApiGetAllFolderVideosRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Video>> {
            return localVarFp.getAllFolderVideos(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns all the videos that belong to the specified folder.
         * @summary Get all the videos in a folder
         * @param {FoldersVideosApiGetVideosInFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVideosInFolder(requestParameters: FoldersVideosApiGetVideosInFolderRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Video>> {
            return localVarFp.getVideosInFolder(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method removes a single video from the specified folder. Please note that this doesn\'t delete the video itself.
         * @summary Remove a video from a folder
         * @param {FoldersVideosApiRemoveFromFolderVideoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFromFolderVideo(requestParameters: FoldersVideosApiRemoveFromFolderVideoRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeFromFolderVideo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method removes multiple videos from the specified folder. The authenticated user must be the owner of the folder.
         * @summary Remove a list of videos from a folder
         * @param {FoldersVideosApiRemoveMultipleFromFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeMultipleFromFolder(requestParameters: FoldersVideosApiRemoveMultipleFromFolderRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeMultipleFromFolder(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method removes multiple videos from the specified folder. The authenticated user must be the owner of the folder.
         * @summary Remove a list of videos from a folder
         * @param {FoldersVideosApiRemoveMultipleVideosFromFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeMultipleVideosFromFolder(requestParameters: FoldersVideosApiRemoveMultipleVideosFromFolderRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeMultipleVideosFromFolder(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method removes a single video from the specified folder. Please note that this doesn\'t delete the video itself.
         * @summary Remove a video from a folder
         * @param {FoldersVideosApiRemoveSingleVideoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeSingleVideo(requestParameters: FoldersVideosApiRemoveSingleVideoRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeSingleVideo(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addMultipleToFolder operation in FoldersVideosApi.
 * @export
 * @interface FoldersVideosApiAddMultipleToFolderRequest
 */
export type FoldersVideosApiAddMultipleToFolderRequest = {
    
    /**
    * The ID of the folder.
    * @type {number}
    * @memberof FoldersVideosApiAddMultipleToFolder
    */
    readonly projectId: number
    
    /**
    * A comma-separated list of video URIs to add.
    * @type {string}
    * @memberof FoldersVideosApiAddMultipleToFolder
    */
    readonly uris: string
    
}

/**
 * Request parameters for addSingleFolderVideo operation in FoldersVideosApi.
 * @export
 * @interface FoldersVideosApiAddSingleFolderVideoRequest
 */
export type FoldersVideosApiAddSingleFolderVideoRequest = {
    
    /**
    * The ID of the folder.
    * @type {number}
    * @memberof FoldersVideosApiAddSingleFolderVideo
    */
    readonly projectId: number
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof FoldersVideosApiAddSingleFolderVideo
    */
    readonly userId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof FoldersVideosApiAddSingleFolderVideo
    */
    readonly videoId: number
    
}

/**
 * Request parameters for addToFolder operation in FoldersVideosApi.
 * @export
 * @interface FoldersVideosApiAddToFolderRequest
 */
export type FoldersVideosApiAddToFolderRequest = {
    
    /**
    * The ID of the folder.
    * @type {number}
    * @memberof FoldersVideosApiAddToFolder
    */
    readonly projectId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof FoldersVideosApiAddToFolder
    */
    readonly videoId: number
    
}

/**
 * Request parameters for addToFolderVideos operation in FoldersVideosApi.
 * @export
 * @interface FoldersVideosApiAddToFolderVideosRequest
 */
export type FoldersVideosApiAddToFolderVideosRequest = {
    
    /**
    * The ID of the folder.
    * @type {number}
    * @memberof FoldersVideosApiAddToFolderVideos
    */
    readonly projectId: number
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof FoldersVideosApiAddToFolderVideos
    */
    readonly userId: number
    
    /**
    * A comma-separated list of video URIs to add.
    * @type {string}
    * @memberof FoldersVideosApiAddToFolderVideos
    */
    readonly uris: string
    
}

/**
 * Request parameters for getAllFolderVideos operation in FoldersVideosApi.
 * @export
 * @interface FoldersVideosApiGetAllFolderVideosRequest
 */
export type FoldersVideosApiGetAllFolderVideosRequest = {
    
    /**
    * The ID of the folder.
    * @type {number}
    * @memberof FoldersVideosApiGetAllFolderVideos
    */
    readonly projectId: number
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof FoldersVideosApiGetAllFolderVideos
    */
    readonly userId: number
    
    /**
    * The sort direction of the results.  Option descriptions:  * `asc` - Sort the results in ascending order.  * `desc` - Sort the results in descending order. 
    * @type {'asc' | 'desc'}
    * @memberof FoldersVideosApiGetAllFolderVideos
    */
    readonly direction?: 'asc' | 'desc'
    
    /**
    * A comma-separated list of tags to filter on. All results must include at least one of these tags. The use of this parameter triggers a search.
    * @type {string}
    * @memberof FoldersVideosApiGetAllFolderVideos
    */
    readonly filterTag?: string
    
    /**
    * A comma-separated list of tags to filter on. All results must include all of these tags. The use of this parameter triggers a search.
    * @type {string}
    * @memberof FoldersVideosApiGetAllFolderVideos
    */
    readonly filterTagAllOf?: string
    
    /**
    * A comma-separated list of tags to exclude. The use of this parameter triggers a search.
    * @type {string}
    * @memberof FoldersVideosApiGetAllFolderVideos
    */
    readonly filterTagExclude?: string
    
    /**
    * Whether to include subfolders.
    * @type {boolean}
    * @memberof FoldersVideosApiGetAllFolderVideos
    */
    readonly includeSubfolders?: boolean
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof FoldersVideosApiGetAllFolderVideos
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof FoldersVideosApiGetAllFolderVideos
    */
    readonly perPage?: number
    
    /**
    * The search query to use to filter the results.
    * @type {string}
    * @memberof FoldersVideosApiGetAllFolderVideos
    */
    readonly query?: string
    
    /**
    * A comma-separated list of fields to query over. The default value is `title,description,chapters,tags`.
    * @type {string}
    * @memberof FoldersVideosApiGetAllFolderVideos
    */
    readonly queryFields?: string
    
    /**
    * The way to sort the results.  Option descriptions:  * `alphabetical` - Sort the results alphabetically.  * `date` - Sort the results by date.  * `default` - Use the default sort order.  * `duration` - Sort the results by duration.  * `last_user_action_event_date` - Sort the results by the date of the last user action. 
    * @type {'alphabetical' | 'date' | 'default' | 'duration' | 'last_user_action_event_date'}
    * @memberof FoldersVideosApiGetAllFolderVideos
    */
    readonly sort?: 'alphabetical' | 'date' | 'default' | 'duration' | 'last_user_action_event_date'
    
}

/**
 * Request parameters for getVideosInFolder operation in FoldersVideosApi.
 * @export
 * @interface FoldersVideosApiGetVideosInFolderRequest
 */
export type FoldersVideosApiGetVideosInFolderRequest = {
    
    /**
    * The ID of the folder.
    * @type {number}
    * @memberof FoldersVideosApiGetVideosInFolder
    */
    readonly projectId: number
    
    /**
    * The sort direction of the results.  Option descriptions:  * `asc` - Sort the results in ascending order.  * `desc` - Sort the results in descending order. 
    * @type {'asc' | 'desc'}
    * @memberof FoldersVideosApiGetVideosInFolder
    */
    readonly direction?: 'asc' | 'desc'
    
    /**
    * A comma-separated list of tags to filter on. All results must include at least one of these tags. The use of this parameter triggers a search.
    * @type {string}
    * @memberof FoldersVideosApiGetVideosInFolder
    */
    readonly filterTag?: string
    
    /**
    * A comma-separated list of tags to filter on. All results must include all of these tags. The use of this parameter triggers a search.
    * @type {string}
    * @memberof FoldersVideosApiGetVideosInFolder
    */
    readonly filterTagAllOf?: string
    
    /**
    * A comma-separated list of tags to exclude. The use of this parameter triggers a search.
    * @type {string}
    * @memberof FoldersVideosApiGetVideosInFolder
    */
    readonly filterTagExclude?: string
    
    /**
    * Whether to include subfolders.
    * @type {boolean}
    * @memberof FoldersVideosApiGetVideosInFolder
    */
    readonly includeSubfolders?: boolean
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof FoldersVideosApiGetVideosInFolder
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof FoldersVideosApiGetVideosInFolder
    */
    readonly perPage?: number
    
    /**
    * The search query to use to filter the results.
    * @type {string}
    * @memberof FoldersVideosApiGetVideosInFolder
    */
    readonly query?: string
    
    /**
    * A comma-separated list of fields to query over. The default value is `title,description,chapters,tags`.
    * @type {string}
    * @memberof FoldersVideosApiGetVideosInFolder
    */
    readonly queryFields?: string
    
    /**
    * The way to sort the results.  Option descriptions:  * `alphabetical` - Sort the results alphabetically.  * `date` - Sort the results by date.  * `default` - Use the default sort order.  * `duration` - Sort the results by duration.  * `last_user_action_event_date` - Sort the results by the date of the last user action. 
    * @type {'alphabetical' | 'date' | 'default' | 'duration' | 'last_user_action_event_date'}
    * @memberof FoldersVideosApiGetVideosInFolder
    */
    readonly sort?: 'alphabetical' | 'date' | 'default' | 'duration' | 'last_user_action_event_date'
    
}

/**
 * Request parameters for removeFromFolderVideo operation in FoldersVideosApi.
 * @export
 * @interface FoldersVideosApiRemoveFromFolderVideoRequest
 */
export type FoldersVideosApiRemoveFromFolderVideoRequest = {
    
    /**
    * The ID of the folder.
    * @type {number}
    * @memberof FoldersVideosApiRemoveFromFolderVideo
    */
    readonly projectId: number
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof FoldersVideosApiRemoveFromFolderVideo
    */
    readonly userId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof FoldersVideosApiRemoveFromFolderVideo
    */
    readonly videoId: number
    
}

/**
 * Request parameters for removeMultipleFromFolder operation in FoldersVideosApi.
 * @export
 * @interface FoldersVideosApiRemoveMultipleFromFolderRequest
 */
export type FoldersVideosApiRemoveMultipleFromFolderRequest = {
    
    /**
    * The ID of the folder.
    * @type {number}
    * @memberof FoldersVideosApiRemoveMultipleFromFolder
    */
    readonly projectId: number
    
    /**
    * A comma-separated list of the video URIs to remove.
    * @type {string}
    * @memberof FoldersVideosApiRemoveMultipleFromFolder
    */
    readonly uris: string
    
    /**
    * Whether to delete the videos when removing them from the folder.
    * @type {boolean}
    * @memberof FoldersVideosApiRemoveMultipleFromFolder
    */
    readonly shouldDeleteClips?: boolean
    
}

/**
 * Request parameters for removeMultipleVideosFromFolder operation in FoldersVideosApi.
 * @export
 * @interface FoldersVideosApiRemoveMultipleVideosFromFolderRequest
 */
export type FoldersVideosApiRemoveMultipleVideosFromFolderRequest = {
    
    /**
    * The ID of the folder.
    * @type {number}
    * @memberof FoldersVideosApiRemoveMultipleVideosFromFolder
    */
    readonly projectId: number
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof FoldersVideosApiRemoveMultipleVideosFromFolder
    */
    readonly userId: number
    
    /**
    * A comma-separated list of the video URIs to remove.
    * @type {string}
    * @memberof FoldersVideosApiRemoveMultipleVideosFromFolder
    */
    readonly uris: string
    
    /**
    * Whether to delete the videos when removing them from the folder.
    * @type {boolean}
    * @memberof FoldersVideosApiRemoveMultipleVideosFromFolder
    */
    readonly shouldDeleteClips?: boolean
    
}

/**
 * Request parameters for removeSingleVideo operation in FoldersVideosApi.
 * @export
 * @interface FoldersVideosApiRemoveSingleVideoRequest
 */
export type FoldersVideosApiRemoveSingleVideoRequest = {
    
    /**
    * The ID of the folder.
    * @type {number}
    * @memberof FoldersVideosApiRemoveSingleVideo
    */
    readonly projectId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof FoldersVideosApiRemoveSingleVideo
    */
    readonly videoId: number
    
}

/**
 * FoldersVideosApiGenerated - object-oriented interface
 * @export
 * @class FoldersVideosApiGenerated
 * @extends {BaseAPI}
 */
export class FoldersVideosApiGenerated extends BaseAPI {
    /**
     * This method adds multiple videos to the specified folder. The authenticated user must be the owner of the folder.
     * @summary Add a list of videos to a folder
     * @param {FoldersVideosApiAddMultipleToFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersVideosApiGenerated
     */
    public addMultipleToFolder(requestParameters: FoldersVideosApiAddMultipleToFolderRequest, options?: AxiosRequestConfig) {
        return FoldersVideosApiFp(this.configuration).addMultipleToFolder(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method adds a single video to the specified folder. The authenticated user must be the owner of the folder.
     * @summary Add a video to a folder
     * @param {FoldersVideosApiAddSingleFolderVideoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersVideosApiGenerated
     */
    public addSingleFolderVideo(requestParameters: FoldersVideosApiAddSingleFolderVideoRequest, options?: AxiosRequestConfig) {
        return FoldersVideosApiFp(this.configuration).addSingleFolderVideo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method adds a single video to the specified folder. The authenticated user must be the owner of the folder.
     * @summary Add a video to a folder
     * @param {FoldersVideosApiAddToFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersVideosApiGenerated
     */
    public addToFolder(requestParameters: FoldersVideosApiAddToFolderRequest, options?: AxiosRequestConfig) {
        return FoldersVideosApiFp(this.configuration).addToFolder(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method adds multiple videos to the specified folder. The authenticated user must be the owner of the folder.
     * @summary Add a list of videos to a folder
     * @param {FoldersVideosApiAddToFolderVideosRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersVideosApiGenerated
     */
    public addToFolderVideos(requestParameters: FoldersVideosApiAddToFolderVideosRequest, options?: AxiosRequestConfig) {
        return FoldersVideosApiFp(this.configuration).addToFolderVideos(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns all the videos that belong to the specified folder.
     * @summary Get all the videos in a folder
     * @param {FoldersVideosApiGetAllFolderVideosRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersVideosApiGenerated
     */
    public getAllFolderVideos(requestParameters: FoldersVideosApiGetAllFolderVideosRequest, options?: AxiosRequestConfig) {
        return FoldersVideosApiFp(this.configuration).getAllFolderVideos(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns all the videos that belong to the specified folder.
     * @summary Get all the videos in a folder
     * @param {FoldersVideosApiGetVideosInFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersVideosApiGenerated
     */
    public getVideosInFolder(requestParameters: FoldersVideosApiGetVideosInFolderRequest, options?: AxiosRequestConfig) {
        return FoldersVideosApiFp(this.configuration).getVideosInFolder(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method removes a single video from the specified folder. Please note that this doesn\'t delete the video itself.
     * @summary Remove a video from a folder
     * @param {FoldersVideosApiRemoveFromFolderVideoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersVideosApiGenerated
     */
    public removeFromFolderVideo(requestParameters: FoldersVideosApiRemoveFromFolderVideoRequest, options?: AxiosRequestConfig) {
        return FoldersVideosApiFp(this.configuration).removeFromFolderVideo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method removes multiple videos from the specified folder. The authenticated user must be the owner of the folder.
     * @summary Remove a list of videos from a folder
     * @param {FoldersVideosApiRemoveMultipleFromFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersVideosApiGenerated
     */
    public removeMultipleFromFolder(requestParameters: FoldersVideosApiRemoveMultipleFromFolderRequest, options?: AxiosRequestConfig) {
        return FoldersVideosApiFp(this.configuration).removeMultipleFromFolder(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method removes multiple videos from the specified folder. The authenticated user must be the owner of the folder.
     * @summary Remove a list of videos from a folder
     * @param {FoldersVideosApiRemoveMultipleVideosFromFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersVideosApiGenerated
     */
    public removeMultipleVideosFromFolder(requestParameters: FoldersVideosApiRemoveMultipleVideosFromFolderRequest, options?: AxiosRequestConfig) {
        return FoldersVideosApiFp(this.configuration).removeMultipleVideosFromFolder(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method removes a single video from the specified folder. Please note that this doesn\'t delete the video itself.
     * @summary Remove a video from a folder
     * @param {FoldersVideosApiRemoveSingleVideoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersVideosApiGenerated
     */
    public removeSingleVideo(requestParameters: FoldersVideosApiRemoveSingleVideoRequest, options?: AxiosRequestConfig) {
        return FoldersVideosApiFp(this.configuration).removeSingleVideo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
