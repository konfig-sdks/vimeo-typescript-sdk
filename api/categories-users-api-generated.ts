/* tslint:disable */
/* eslint-disable */
/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

The version of the OpenAPI document: 3.4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Category } from '../models';
// @ts-ignore
import { ModelError } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CategoriesUsersApi - axios parameter creator
 * @export
 */
export const CategoriesUsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method determines whether the authenticated user follows the specified category.
         * @summary Check if the user follows a category
         * @param {string} category The name of the category.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkFollowedCategory: async (category: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'category' is not null or undefined
            assertParamExists('checkFollowedCategory', 'category', category)
            const localVarPath = `/me/categories/{category}`
                .replace(`{${"category"}}`, encodeURIComponent(String(category !== undefined ? category : `-category-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/categories/{category}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method determines whether the authenticated user follows the specified category.
         * @summary Check if the user follows a category
         * @param {string} category The name of the category.
         * @param {number} userId The ID of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkFollowedCategory_1: async (category: string, userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'category' is not null or undefined
            assertParamExists('checkFollowedCategory_1', 'category', category)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('checkFollowedCategory_1', 'userId', userId)
            const localVarPath = `/users/{user_id}/categories/{category}`
                .replace(`{${"category"}}`, encodeURIComponent(String(category !== undefined ? category : `-category-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/categories/{category}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method causes the authenticated user to follow the specified category.
         * @summary Cause the user to follow a specific category
         * @param {number} category The name of the category.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followCategory: async (category: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'category' is not null or undefined
            assertParamExists('followCategory', 'category', category)
            const localVarPath = `/me/categories/{category}`
                .replace(`{${"category"}}`, encodeURIComponent(String(category !== undefined ? category : `-category-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["interact"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["interact"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/categories/{category}',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method causes the authenticated user to follow the specified category.
         * @summary Cause the user to follow a specific category
         * @param {number} category The name of the category.
         * @param {number} userId The ID of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followSpecificCategory: async (category: number, userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'category' is not null or undefined
            assertParamExists('followSpecificCategory', 'category', category)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('followSpecificCategory', 'userId', userId)
            const localVarPath = `/users/{user_id}/categories/{category}`
                .replace(`{${"category"}}`, encodeURIComponent(String(category !== undefined ? category : `-category-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["interact"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["interact"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/categories/{category}',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every category that the authenticated user follows.
         * @summary Get all the categories that the user follows
         * @param {'asc' | 'desc'} [direction] The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order. 
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {'alphabetical' | 'date' | 'name'} [sort] The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;name&#x60; - Sort the results by name. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFollowedCategories: async (direction?: 'asc' | 'desc', page?: number, perPage?: number, sort?: 'alphabetical' | 'date' | 'name', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)
            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/categories',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every category that the authenticated user follows.
         * @summary Get all the categories that the user follows
         * @param {number} userId The ID of the user.
         * @param {'asc' | 'desc'} [direction] The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order. 
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {'alphabetical' | 'date' | 'name'} [sort] The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;name&#x60; - Sort the results by name. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFollowedCategories_2: async (userId: number, direction?: 'asc' | 'desc', page?: number, perPage?: number, sort?: 'alphabetical' | 'date' | 'name', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('listFollowedCategories_2', 'userId', userId)
            const localVarPath = `/users/{user_id}/categories`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)
            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/categories',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method causes the authenticated user to stop following the specified category.
         * @summary Cause the user to stop following a category
         * @param {string} category The name of the category.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopFollowingCategory: async (category: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'category' is not null or undefined
            assertParamExists('stopFollowingCategory', 'category', category)
            const localVarPath = `/me/categories/{category}`
                .replace(`{${"category"}}`, encodeURIComponent(String(category !== undefined ? category : `-category-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["interact"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["interact"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/categories/{category}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method causes the authenticated user to stop following the specified category.
         * @summary Cause the user to stop following a category
         * @param {string} category The name of the category.
         * @param {number} userId The ID of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopFollowingCategory_3: async (category: string, userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'category' is not null or undefined
            assertParamExists('stopFollowingCategory_3', 'category', category)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('stopFollowingCategory_3', 'userId', userId)
            const localVarPath = `/users/{user_id}/categories/{category}`
                .replace(`{${"category"}}`, encodeURIComponent(String(category !== undefined ? category : `-category-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["interact"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["interact"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/categories/{category}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CategoriesUsersApi - functional programming interface
 * @export
 */
export const CategoriesUsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CategoriesUsersApiAxiosParamCreator(configuration)
    return {
        /**
         * This method determines whether the authenticated user follows the specified category.
         * @summary Check if the user follows a category
         * @param {CategoriesUsersApiCheckFollowedCategoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkFollowedCategory(requestParameters: CategoriesUsersApiCheckFollowedCategoryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkFollowedCategory(requestParameters.category, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method determines whether the authenticated user follows the specified category.
         * @summary Check if the user follows a category
         * @param {CategoriesUsersApiCheckFollowedCategory0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkFollowedCategory_1(requestParameters: CategoriesUsersApiCheckFollowedCategory0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkFollowedCategory_1(requestParameters.category, requestParameters.userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method causes the authenticated user to follow the specified category.
         * @summary Cause the user to follow a specific category
         * @param {CategoriesUsersApiFollowCategoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async followCategory(requestParameters: CategoriesUsersApiFollowCategoryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.followCategory(requestParameters.category, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method causes the authenticated user to follow the specified category.
         * @summary Cause the user to follow a specific category
         * @param {CategoriesUsersApiFollowSpecificCategoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async followSpecificCategory(requestParameters: CategoriesUsersApiFollowSpecificCategoryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.followSpecificCategory(requestParameters.category, requestParameters.userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every category that the authenticated user follows.
         * @summary Get all the categories that the user follows
         * @param {CategoriesUsersApiListFollowedCategoriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listFollowedCategories(requestParameters: CategoriesUsersApiListFollowedCategoriesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Category>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listFollowedCategories(requestParameters.direction, requestParameters.page, requestParameters.perPage, requestParameters.sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every category that the authenticated user follows.
         * @summary Get all the categories that the user follows
         * @param {CategoriesUsersApiListFollowedCategories0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listFollowedCategories_2(requestParameters: CategoriesUsersApiListFollowedCategories0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Category>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listFollowedCategories_2(requestParameters.userId, requestParameters.direction, requestParameters.page, requestParameters.perPage, requestParameters.sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method causes the authenticated user to stop following the specified category.
         * @summary Cause the user to stop following a category
         * @param {CategoriesUsersApiStopFollowingCategoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stopFollowingCategory(requestParameters: CategoriesUsersApiStopFollowingCategoryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stopFollowingCategory(requestParameters.category, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method causes the authenticated user to stop following the specified category.
         * @summary Cause the user to stop following a category
         * @param {CategoriesUsersApiStopFollowingCategory0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stopFollowingCategory_3(requestParameters: CategoriesUsersApiStopFollowingCategory0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stopFollowingCategory_3(requestParameters.category, requestParameters.userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CategoriesUsersApi - factory interface
 * @export
 */
export const CategoriesUsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CategoriesUsersApiFp(configuration)
    return {
        /**
         * This method determines whether the authenticated user follows the specified category.
         * @summary Check if the user follows a category
         * @param {CategoriesUsersApiCheckFollowedCategoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkFollowedCategory(requestParameters: CategoriesUsersApiCheckFollowedCategoryRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.checkFollowedCategory(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method determines whether the authenticated user follows the specified category.
         * @summary Check if the user follows a category
         * @param {CategoriesUsersApiCheckFollowedCategory0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkFollowedCategory_1(requestParameters: CategoriesUsersApiCheckFollowedCategory0Request, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.checkFollowedCategory_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method causes the authenticated user to follow the specified category.
         * @summary Cause the user to follow a specific category
         * @param {CategoriesUsersApiFollowCategoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followCategory(requestParameters: CategoriesUsersApiFollowCategoryRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.followCategory(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method causes the authenticated user to follow the specified category.
         * @summary Cause the user to follow a specific category
         * @param {CategoriesUsersApiFollowSpecificCategoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followSpecificCategory(requestParameters: CategoriesUsersApiFollowSpecificCategoryRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.followSpecificCategory(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every category that the authenticated user follows.
         * @summary Get all the categories that the user follows
         * @param {CategoriesUsersApiListFollowedCategoriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFollowedCategories(requestParameters: CategoriesUsersApiListFollowedCategoriesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<Category>> {
            return localVarFp.listFollowedCategories(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every category that the authenticated user follows.
         * @summary Get all the categories that the user follows
         * @param {CategoriesUsersApiListFollowedCategories0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFollowedCategories_2(requestParameters: CategoriesUsersApiListFollowedCategories0Request, options?: AxiosRequestConfig): AxiosPromise<Array<Category>> {
            return localVarFp.listFollowedCategories_2(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method causes the authenticated user to stop following the specified category.
         * @summary Cause the user to stop following a category
         * @param {CategoriesUsersApiStopFollowingCategoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopFollowingCategory(requestParameters: CategoriesUsersApiStopFollowingCategoryRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.stopFollowingCategory(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method causes the authenticated user to stop following the specified category.
         * @summary Cause the user to stop following a category
         * @param {CategoriesUsersApiStopFollowingCategory0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopFollowingCategory_3(requestParameters: CategoriesUsersApiStopFollowingCategory0Request, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.stopFollowingCategory_3(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for checkFollowedCategory operation in CategoriesUsersApi.
 * @export
 * @interface CategoriesUsersApiCheckFollowedCategoryRequest
 */
export type CategoriesUsersApiCheckFollowedCategoryRequest = {
    
    /**
    * The name of the category.
    * @type {string}
    * @memberof CategoriesUsersApiCheckFollowedCategory
    */
    readonly category: string
    
}

/**
 * Request parameters for checkFollowedCategory_1 operation in CategoriesUsersApi.
 * @export
 * @interface CategoriesUsersApiCheckFollowedCategory0Request
 */
export type CategoriesUsersApiCheckFollowedCategory0Request = {
    
    /**
    * The name of the category.
    * @type {string}
    * @memberof CategoriesUsersApiCheckFollowedCategory0
    */
    readonly category: string
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof CategoriesUsersApiCheckFollowedCategory0
    */
    readonly userId: number
    
}

/**
 * Request parameters for followCategory operation in CategoriesUsersApi.
 * @export
 * @interface CategoriesUsersApiFollowCategoryRequest
 */
export type CategoriesUsersApiFollowCategoryRequest = {
    
    /**
    * The name of the category.
    * @type {number}
    * @memberof CategoriesUsersApiFollowCategory
    */
    readonly category: number
    
}

/**
 * Request parameters for followSpecificCategory operation in CategoriesUsersApi.
 * @export
 * @interface CategoriesUsersApiFollowSpecificCategoryRequest
 */
export type CategoriesUsersApiFollowSpecificCategoryRequest = {
    
    /**
    * The name of the category.
    * @type {number}
    * @memberof CategoriesUsersApiFollowSpecificCategory
    */
    readonly category: number
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof CategoriesUsersApiFollowSpecificCategory
    */
    readonly userId: number
    
}

/**
 * Request parameters for listFollowedCategories operation in CategoriesUsersApi.
 * @export
 * @interface CategoriesUsersApiListFollowedCategoriesRequest
 */
export type CategoriesUsersApiListFollowedCategoriesRequest = {
    
    /**
    * The sort direction of the results.  Option descriptions:  * `asc` - Sort the results in ascending order.  * `desc` - Sort the results in descending order. 
    * @type {'asc' | 'desc'}
    * @memberof CategoriesUsersApiListFollowedCategories
    */
    readonly direction?: 'asc' | 'desc'
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof CategoriesUsersApiListFollowedCategories
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof CategoriesUsersApiListFollowedCategories
    */
    readonly perPage?: number
    
    /**
    * The way to sort the results.  Option descriptions:  * `alphabetical` - Sort the results alphabetically.  * `date` - Sort the results by date.  * `name` - Sort the results by name. 
    * @type {'alphabetical' | 'date' | 'name'}
    * @memberof CategoriesUsersApiListFollowedCategories
    */
    readonly sort?: 'alphabetical' | 'date' | 'name'
    
}

/**
 * Request parameters for listFollowedCategories_2 operation in CategoriesUsersApi.
 * @export
 * @interface CategoriesUsersApiListFollowedCategories0Request
 */
export type CategoriesUsersApiListFollowedCategories0Request = {
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof CategoriesUsersApiListFollowedCategories0
    */
    readonly userId: number
    
    /**
    * The sort direction of the results.  Option descriptions:  * `asc` - Sort the results in ascending order.  * `desc` - Sort the results in descending order. 
    * @type {'asc' | 'desc'}
    * @memberof CategoriesUsersApiListFollowedCategories0
    */
    readonly direction?: 'asc' | 'desc'
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof CategoriesUsersApiListFollowedCategories0
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof CategoriesUsersApiListFollowedCategories0
    */
    readonly perPage?: number
    
    /**
    * The way to sort the results.  Option descriptions:  * `alphabetical` - Sort the results alphabetically.  * `date` - Sort the results by date.  * `name` - Sort the results by name. 
    * @type {'alphabetical' | 'date' | 'name'}
    * @memberof CategoriesUsersApiListFollowedCategories0
    */
    readonly sort?: 'alphabetical' | 'date' | 'name'
    
}

/**
 * Request parameters for stopFollowingCategory operation in CategoriesUsersApi.
 * @export
 * @interface CategoriesUsersApiStopFollowingCategoryRequest
 */
export type CategoriesUsersApiStopFollowingCategoryRequest = {
    
    /**
    * The name of the category.
    * @type {string}
    * @memberof CategoriesUsersApiStopFollowingCategory
    */
    readonly category: string
    
}

/**
 * Request parameters for stopFollowingCategory_3 operation in CategoriesUsersApi.
 * @export
 * @interface CategoriesUsersApiStopFollowingCategory0Request
 */
export type CategoriesUsersApiStopFollowingCategory0Request = {
    
    /**
    * The name of the category.
    * @type {string}
    * @memberof CategoriesUsersApiStopFollowingCategory0
    */
    readonly category: string
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof CategoriesUsersApiStopFollowingCategory0
    */
    readonly userId: number
    
}

/**
 * CategoriesUsersApiGenerated - object-oriented interface
 * @export
 * @class CategoriesUsersApiGenerated
 * @extends {BaseAPI}
 */
export class CategoriesUsersApiGenerated extends BaseAPI {
    /**
     * This method determines whether the authenticated user follows the specified category.
     * @summary Check if the user follows a category
     * @param {CategoriesUsersApiCheckFollowedCategoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesUsersApiGenerated
     */
    public checkFollowedCategory(requestParameters: CategoriesUsersApiCheckFollowedCategoryRequest, options?: AxiosRequestConfig) {
        return CategoriesUsersApiFp(this.configuration).checkFollowedCategory(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method determines whether the authenticated user follows the specified category.
     * @summary Check if the user follows a category
     * @param {CategoriesUsersApiCheckFollowedCategory0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesUsersApiGenerated
     */
    public checkFollowedCategory_1(requestParameters: CategoriesUsersApiCheckFollowedCategory0Request, options?: AxiosRequestConfig) {
        return CategoriesUsersApiFp(this.configuration).checkFollowedCategory_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method causes the authenticated user to follow the specified category.
     * @summary Cause the user to follow a specific category
     * @param {CategoriesUsersApiFollowCategoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesUsersApiGenerated
     */
    public followCategory(requestParameters: CategoriesUsersApiFollowCategoryRequest, options?: AxiosRequestConfig) {
        return CategoriesUsersApiFp(this.configuration).followCategory(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method causes the authenticated user to follow the specified category.
     * @summary Cause the user to follow a specific category
     * @param {CategoriesUsersApiFollowSpecificCategoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesUsersApiGenerated
     */
    public followSpecificCategory(requestParameters: CategoriesUsersApiFollowSpecificCategoryRequest, options?: AxiosRequestConfig) {
        return CategoriesUsersApiFp(this.configuration).followSpecificCategory(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every category that the authenticated user follows.
     * @summary Get all the categories that the user follows
     * @param {CategoriesUsersApiListFollowedCategoriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesUsersApiGenerated
     */
    public listFollowedCategories(requestParameters: CategoriesUsersApiListFollowedCategoriesRequest = {}, options?: AxiosRequestConfig) {
        return CategoriesUsersApiFp(this.configuration).listFollowedCategories(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every category that the authenticated user follows.
     * @summary Get all the categories that the user follows
     * @param {CategoriesUsersApiListFollowedCategories0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesUsersApiGenerated
     */
    public listFollowedCategories_2(requestParameters: CategoriesUsersApiListFollowedCategories0Request, options?: AxiosRequestConfig) {
        return CategoriesUsersApiFp(this.configuration).listFollowedCategories_2(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method causes the authenticated user to stop following the specified category.
     * @summary Cause the user to stop following a category
     * @param {CategoriesUsersApiStopFollowingCategoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesUsersApiGenerated
     */
    public stopFollowingCategory(requestParameters: CategoriesUsersApiStopFollowingCategoryRequest, options?: AxiosRequestConfig) {
        return CategoriesUsersApiFp(this.configuration).stopFollowingCategory(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method causes the authenticated user to stop following the specified category.
     * @summary Cause the user to stop following a category
     * @param {CategoriesUsersApiStopFollowingCategory0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesUsersApiGenerated
     */
    public stopFollowingCategory_3(requestParameters: CategoriesUsersApiStopFollowingCategory0Request, options?: AxiosRequestConfig) {
        return CategoriesUsersApiFp(this.configuration).stopFollowingCategory_3(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
