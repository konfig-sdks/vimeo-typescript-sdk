/* tslint:disable */
/* eslint-disable */
/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

The version of the OpenAPI document: 3.4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { LegacyError } from '../models';
// @ts-ignore
import { Video } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PortfoliosVideosApi - axios parameter creator
 * @export
 */
export const PortfoliosVideosApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method adds a video to the specified portfolio belonging to the authenticated user.
         * @summary Add a video to a portfolio
         * @param {number} portfolioId The ID of the portfolio.
         * @param {number} userId The ID of the user.
         * @param {number} videoId The ID of the video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addVideoToPortfolio: async (portfolioId: number, userId: number, videoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'portfolioId' is not null or undefined
            assertParamExists('addVideoToPortfolio', 'portfolioId', portfolioId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('addVideoToPortfolio', 'userId', userId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('addVideoToPortfolio', 'videoId', videoId)
            const localVarPath = `/users/{user_id}/portfolios/{portfolio_id}/videos/{video_id}`
                .replace(`{${"portfolio_id"}}`, encodeURIComponent(String(portfolioId !== undefined ? portfolioId : `-portfolio_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/portfolios/{portfolio_id}/videos/{video_id}',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every video from the specified portfolio belonging to the authenticated user.
         * @summary Get all the videos in a portfolio
         * @param {number} portfolioId The ID of the portfolio.
         * @param {string} [containingUri] The page that contains the video URI.
         * @param {'embeddable'} [filter] The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Return embeddable videos. 
         * @param {boolean} [filterEmbeddable] Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;.
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {'alphabetical' | 'comments' | 'date' | 'default' | 'likes' | 'manual' | 'plays'} [sort] The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by creation date.  * &#x60;default&#x60; - Use the default sorting method.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;manual&#x60; - Sort the results by their user-specified order.  * &#x60;plays&#x60; - Sort the results by number of plays. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPortfolioVideos: async (portfolioId: number, containingUri?: string, filter?: 'embeddable', filterEmbeddable?: boolean, page?: number, perPage?: number, sort?: 'alphabetical' | 'comments' | 'date' | 'default' | 'likes' | 'manual' | 'plays', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'portfolioId' is not null or undefined
            assertParamExists('getAllPortfolioVideos', 'portfolioId', portfolioId)
            const localVarPath = `/me/portfolios/{portfolio_id}/videos`
                .replace(`{${"portfolio_id"}}`, encodeURIComponent(String(portfolioId !== undefined ? portfolioId : `-portfolio_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            if (containingUri !== undefined) {
                localVarQueryParameter['containing_uri'] = containingUri;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (filterEmbeddable !== undefined) {
                localVarQueryParameter['filter_embeddable'] = filterEmbeddable;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/portfolios/{portfolio_id}/videos',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every video from the specified portfolio belonging to the authenticated user.
         * @summary Get all the videos in a portfolio
         * @param {number} portfolioId The ID of the portfolio.
         * @param {number} userId The ID of the user.
         * @param {string} [containingUri] The page that contains the video URI.
         * @param {'embeddable'} [filter] The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Return embeddable videos. 
         * @param {boolean} [filterEmbeddable] Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;.
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {'alphabetical' | 'comments' | 'date' | 'default' | 'likes' | 'manual' | 'plays'} [sort] The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by creation date.  * &#x60;default&#x60; - Use the default sorting method.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;manual&#x60; - Sort the results by their user-specified order.  * &#x60;plays&#x60; - Sort the results by number of plays. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPortfolioVideos_1: async (portfolioId: number, userId: number, containingUri?: string, filter?: 'embeddable', filterEmbeddable?: boolean, page?: number, perPage?: number, sort?: 'alphabetical' | 'comments' | 'date' | 'default' | 'likes' | 'manual' | 'plays', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'portfolioId' is not null or undefined
            assertParamExists('getAllPortfolioVideos_1', 'portfolioId', portfolioId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getAllPortfolioVideos_1', 'userId', userId)
            const localVarPath = `/users/{user_id}/portfolios/{portfolio_id}/videos`
                .replace(`{${"portfolio_id"}}`, encodeURIComponent(String(portfolioId !== undefined ? portfolioId : `-portfolio_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            if (containingUri !== undefined) {
                localVarQueryParameter['containing_uri'] = containingUri;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (filterEmbeddable !== undefined) {
                localVarQueryParameter['filter_embeddable'] = filterEmbeddable;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/portfolios/{portfolio_id}/videos',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns a single video from the specified portfolio belonging to the authenticated user.
         * @summary Get a specific video in a portfolio
         * @param {number} portfolioId The ID of the portfolio.
         * @param {number} videoId The ID of the video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificVideo: async (portfolioId: number, videoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'portfolioId' is not null or undefined
            assertParamExists('getSpecificVideo', 'portfolioId', portfolioId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('getSpecificVideo', 'videoId', videoId)
            const localVarPath = `/me/portfolios/{portfolio_id}/videos/{video_id}`
                .replace(`{${"portfolio_id"}}`, encodeURIComponent(String(portfolioId !== undefined ? portfolioId : `-portfolio_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/portfolios/{portfolio_id}/videos/{video_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns a single video from the specified portfolio belonging to the authenticated user.
         * @summary Get a specific video in a portfolio
         * @param {number} portfolioId The ID of the portfolio.
         * @param {number} userId The ID of the user.
         * @param {number} videoId The ID of the video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificVideo_2: async (portfolioId: number, userId: number, videoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'portfolioId' is not null or undefined
            assertParamExists('getSpecificVideo_2', 'portfolioId', portfolioId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getSpecificVideo_2', 'userId', userId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('getSpecificVideo_2', 'videoId', videoId)
            const localVarPath = `/users/{user_id}/portfolios/{portfolio_id}/videos/{video_id}`
                .replace(`{${"portfolio_id"}}`, encodeURIComponent(String(portfolioId !== undefined ? portfolioId : `-portfolio_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/portfolios/{portfolio_id}/videos/{video_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method adds a video to the specified portfolio belonging to the authenticated user.
         * @summary Add a video to a portfolio
         * @param {number} portfolioId The ID of the portfolio.
         * @param {number} videoId The ID of the video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putVideoToPortfolio: async (portfolioId: number, videoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'portfolioId' is not null or undefined
            assertParamExists('putVideoToPortfolio', 'portfolioId', portfolioId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('putVideoToPortfolio', 'videoId', videoId)
            const localVarPath = `/me/portfolios/{portfolio_id}/videos/{video_id}`
                .replace(`{${"portfolio_id"}}`, encodeURIComponent(String(portfolioId !== undefined ? portfolioId : `-portfolio_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/portfolios/{portfolio_id}/videos/{video_id}',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method removes a video from the specified portfolio belonging to the authenticated user.
         * @summary Remove a video from a portfolio
         * @param {number} portfolioId The ID of the portfolio.
         * @param {number} videoId The ID of the video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFromPortfolio: async (portfolioId: number, videoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'portfolioId' is not null or undefined
            assertParamExists('removeFromPortfolio', 'portfolioId', portfolioId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('removeFromPortfolio', 'videoId', videoId)
            const localVarPath = `/me/portfolios/{portfolio_id}/videos/{video_id}`
                .replace(`{${"portfolio_id"}}`, encodeURIComponent(String(portfolioId !== undefined ? portfolioId : `-portfolio_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/portfolios/{portfolio_id}/videos/{video_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method removes a video from the specified portfolio belonging to the authenticated user.
         * @summary Remove a video from a portfolio
         * @param {number} portfolioId The ID of the portfolio.
         * @param {number} userId The ID of the user.
         * @param {number} videoId The ID of the video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFromPortfolioVideo: async (portfolioId: number, userId: number, videoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'portfolioId' is not null or undefined
            assertParamExists('removeFromPortfolioVideo', 'portfolioId', portfolioId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('removeFromPortfolioVideo', 'userId', userId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('removeFromPortfolioVideo', 'videoId', videoId)
            const localVarPath = `/users/{user_id}/portfolios/{portfolio_id}/videos/{video_id}`
                .replace(`{${"portfolio_id"}}`, encodeURIComponent(String(portfolioId !== undefined ? portfolioId : `-portfolio_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/portfolios/{portfolio_id}/videos/{video_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PortfoliosVideosApi - functional programming interface
 * @export
 */
export const PortfoliosVideosApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PortfoliosVideosApiAxiosParamCreator(configuration)
    return {
        /**
         * This method adds a video to the specified portfolio belonging to the authenticated user.
         * @summary Add a video to a portfolio
         * @param {PortfoliosVideosApiAddVideoToPortfolioRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addVideoToPortfolio(requestParameters: PortfoliosVideosApiAddVideoToPortfolioRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addVideoToPortfolio(requestParameters.portfolioId, requestParameters.userId, requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every video from the specified portfolio belonging to the authenticated user.
         * @summary Get all the videos in a portfolio
         * @param {PortfoliosVideosApiGetAllPortfolioVideosRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllPortfolioVideos(requestParameters: PortfoliosVideosApiGetAllPortfolioVideosRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Video>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllPortfolioVideos(requestParameters.portfolioId, requestParameters.containingUri, requestParameters.filter, requestParameters.filterEmbeddable, requestParameters.page, requestParameters.perPage, requestParameters.sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every video from the specified portfolio belonging to the authenticated user.
         * @summary Get all the videos in a portfolio
         * @param {PortfoliosVideosApiGetAllPortfolioVideos0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllPortfolioVideos_1(requestParameters: PortfoliosVideosApiGetAllPortfolioVideos0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Video>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllPortfolioVideos_1(requestParameters.portfolioId, requestParameters.userId, requestParameters.containingUri, requestParameters.filter, requestParameters.filterEmbeddable, requestParameters.page, requestParameters.perPage, requestParameters.sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns a single video from the specified portfolio belonging to the authenticated user.
         * @summary Get a specific video in a portfolio
         * @param {PortfoliosVideosApiGetSpecificVideoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpecificVideo(requestParameters: PortfoliosVideosApiGetSpecificVideoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Video>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpecificVideo(requestParameters.portfolioId, requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns a single video from the specified portfolio belonging to the authenticated user.
         * @summary Get a specific video in a portfolio
         * @param {PortfoliosVideosApiGetSpecificVideo0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpecificVideo_2(requestParameters: PortfoliosVideosApiGetSpecificVideo0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Video>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpecificVideo_2(requestParameters.portfolioId, requestParameters.userId, requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method adds a video to the specified portfolio belonging to the authenticated user.
         * @summary Add a video to a portfolio
         * @param {PortfoliosVideosApiPutVideoToPortfolioRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putVideoToPortfolio(requestParameters: PortfoliosVideosApiPutVideoToPortfolioRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putVideoToPortfolio(requestParameters.portfolioId, requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method removes a video from the specified portfolio belonging to the authenticated user.
         * @summary Remove a video from a portfolio
         * @param {PortfoliosVideosApiRemoveFromPortfolioRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeFromPortfolio(requestParameters: PortfoliosVideosApiRemoveFromPortfolioRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeFromPortfolio(requestParameters.portfolioId, requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method removes a video from the specified portfolio belonging to the authenticated user.
         * @summary Remove a video from a portfolio
         * @param {PortfoliosVideosApiRemoveFromPortfolioVideoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeFromPortfolioVideo(requestParameters: PortfoliosVideosApiRemoveFromPortfolioVideoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeFromPortfolioVideo(requestParameters.portfolioId, requestParameters.userId, requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PortfoliosVideosApi - factory interface
 * @export
 */
export const PortfoliosVideosApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PortfoliosVideosApiFp(configuration)
    return {
        /**
         * This method adds a video to the specified portfolio belonging to the authenticated user.
         * @summary Add a video to a portfolio
         * @param {PortfoliosVideosApiAddVideoToPortfolioRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addVideoToPortfolio(requestParameters: PortfoliosVideosApiAddVideoToPortfolioRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addVideoToPortfolio(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every video from the specified portfolio belonging to the authenticated user.
         * @summary Get all the videos in a portfolio
         * @param {PortfoliosVideosApiGetAllPortfolioVideosRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPortfolioVideos(requestParameters: PortfoliosVideosApiGetAllPortfolioVideosRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Video>> {
            return localVarFp.getAllPortfolioVideos(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every video from the specified portfolio belonging to the authenticated user.
         * @summary Get all the videos in a portfolio
         * @param {PortfoliosVideosApiGetAllPortfolioVideos0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPortfolioVideos_1(requestParameters: PortfoliosVideosApiGetAllPortfolioVideos0Request, options?: AxiosRequestConfig): AxiosPromise<Array<Video>> {
            return localVarFp.getAllPortfolioVideos_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns a single video from the specified portfolio belonging to the authenticated user.
         * @summary Get a specific video in a portfolio
         * @param {PortfoliosVideosApiGetSpecificVideoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificVideo(requestParameters: PortfoliosVideosApiGetSpecificVideoRequest, options?: AxiosRequestConfig): AxiosPromise<Video> {
            return localVarFp.getSpecificVideo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns a single video from the specified portfolio belonging to the authenticated user.
         * @summary Get a specific video in a portfolio
         * @param {PortfoliosVideosApiGetSpecificVideo0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificVideo_2(requestParameters: PortfoliosVideosApiGetSpecificVideo0Request, options?: AxiosRequestConfig): AxiosPromise<Video> {
            return localVarFp.getSpecificVideo_2(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method adds a video to the specified portfolio belonging to the authenticated user.
         * @summary Add a video to a portfolio
         * @param {PortfoliosVideosApiPutVideoToPortfolioRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putVideoToPortfolio(requestParameters: PortfoliosVideosApiPutVideoToPortfolioRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.putVideoToPortfolio(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method removes a video from the specified portfolio belonging to the authenticated user.
         * @summary Remove a video from a portfolio
         * @param {PortfoliosVideosApiRemoveFromPortfolioRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFromPortfolio(requestParameters: PortfoliosVideosApiRemoveFromPortfolioRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeFromPortfolio(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method removes a video from the specified portfolio belonging to the authenticated user.
         * @summary Remove a video from a portfolio
         * @param {PortfoliosVideosApiRemoveFromPortfolioVideoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFromPortfolioVideo(requestParameters: PortfoliosVideosApiRemoveFromPortfolioVideoRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeFromPortfolioVideo(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addVideoToPortfolio operation in PortfoliosVideosApi.
 * @export
 * @interface PortfoliosVideosApiAddVideoToPortfolioRequest
 */
export type PortfoliosVideosApiAddVideoToPortfolioRequest = {
    
    /**
    * The ID of the portfolio.
    * @type {number}
    * @memberof PortfoliosVideosApiAddVideoToPortfolio
    */
    readonly portfolioId: number
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof PortfoliosVideosApiAddVideoToPortfolio
    */
    readonly userId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof PortfoliosVideosApiAddVideoToPortfolio
    */
    readonly videoId: number
    
}

/**
 * Request parameters for getAllPortfolioVideos operation in PortfoliosVideosApi.
 * @export
 * @interface PortfoliosVideosApiGetAllPortfolioVideosRequest
 */
export type PortfoliosVideosApiGetAllPortfolioVideosRequest = {
    
    /**
    * The ID of the portfolio.
    * @type {number}
    * @memberof PortfoliosVideosApiGetAllPortfolioVideos
    */
    readonly portfolioId: number
    
    /**
    * The page that contains the video URI.
    * @type {string}
    * @memberof PortfoliosVideosApiGetAllPortfolioVideos
    */
    readonly containingUri?: string
    
    /**
    * The attribute by which to filter the results.  Option descriptions:  * `embeddable` - Return embeddable videos. 
    * @type {'embeddable'}
    * @memberof PortfoliosVideosApiGetAllPortfolioVideos
    */
    readonly filter?: 'embeddable'
    
    /**
    * Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). This parameter is required only when **filter** is `embeddable`.
    * @type {boolean}
    * @memberof PortfoliosVideosApiGetAllPortfolioVideos
    */
    readonly filterEmbeddable?: boolean
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof PortfoliosVideosApiGetAllPortfolioVideos
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof PortfoliosVideosApiGetAllPortfolioVideos
    */
    readonly perPage?: number
    
    /**
    * The way to sort the results.  Option descriptions:  * `alphabetical` - Sort the results alphabetically.  * `comments` - Sort the results by number of comments.  * `date` - Sort the results by creation date.  * `default` - Use the default sorting method.  * `likes` - Sort the results by number of likes.  * `manual` - Sort the results by their user-specified order.  * `plays` - Sort the results by number of plays. 
    * @type {'alphabetical' | 'comments' | 'date' | 'default' | 'likes' | 'manual' | 'plays'}
    * @memberof PortfoliosVideosApiGetAllPortfolioVideos
    */
    readonly sort?: 'alphabetical' | 'comments' | 'date' | 'default' | 'likes' | 'manual' | 'plays'
    
}

/**
 * Request parameters for getAllPortfolioVideos_1 operation in PortfoliosVideosApi.
 * @export
 * @interface PortfoliosVideosApiGetAllPortfolioVideos0Request
 */
export type PortfoliosVideosApiGetAllPortfolioVideos0Request = {
    
    /**
    * The ID of the portfolio.
    * @type {number}
    * @memberof PortfoliosVideosApiGetAllPortfolioVideos0
    */
    readonly portfolioId: number
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof PortfoliosVideosApiGetAllPortfolioVideos0
    */
    readonly userId: number
    
    /**
    * The page that contains the video URI.
    * @type {string}
    * @memberof PortfoliosVideosApiGetAllPortfolioVideos0
    */
    readonly containingUri?: string
    
    /**
    * The attribute by which to filter the results.  Option descriptions:  * `embeddable` - Return embeddable videos. 
    * @type {'embeddable'}
    * @memberof PortfoliosVideosApiGetAllPortfolioVideos0
    */
    readonly filter?: 'embeddable'
    
    /**
    * Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). This parameter is required only when **filter** is `embeddable`.
    * @type {boolean}
    * @memberof PortfoliosVideosApiGetAllPortfolioVideos0
    */
    readonly filterEmbeddable?: boolean
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof PortfoliosVideosApiGetAllPortfolioVideos0
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof PortfoliosVideosApiGetAllPortfolioVideos0
    */
    readonly perPage?: number
    
    /**
    * The way to sort the results.  Option descriptions:  * `alphabetical` - Sort the results alphabetically.  * `comments` - Sort the results by number of comments.  * `date` - Sort the results by creation date.  * `default` - Use the default sorting method.  * `likes` - Sort the results by number of likes.  * `manual` - Sort the results by their user-specified order.  * `plays` - Sort the results by number of plays. 
    * @type {'alphabetical' | 'comments' | 'date' | 'default' | 'likes' | 'manual' | 'plays'}
    * @memberof PortfoliosVideosApiGetAllPortfolioVideos0
    */
    readonly sort?: 'alphabetical' | 'comments' | 'date' | 'default' | 'likes' | 'manual' | 'plays'
    
}

/**
 * Request parameters for getSpecificVideo operation in PortfoliosVideosApi.
 * @export
 * @interface PortfoliosVideosApiGetSpecificVideoRequest
 */
export type PortfoliosVideosApiGetSpecificVideoRequest = {
    
    /**
    * The ID of the portfolio.
    * @type {number}
    * @memberof PortfoliosVideosApiGetSpecificVideo
    */
    readonly portfolioId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof PortfoliosVideosApiGetSpecificVideo
    */
    readonly videoId: number
    
}

/**
 * Request parameters for getSpecificVideo_2 operation in PortfoliosVideosApi.
 * @export
 * @interface PortfoliosVideosApiGetSpecificVideo0Request
 */
export type PortfoliosVideosApiGetSpecificVideo0Request = {
    
    /**
    * The ID of the portfolio.
    * @type {number}
    * @memberof PortfoliosVideosApiGetSpecificVideo0
    */
    readonly portfolioId: number
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof PortfoliosVideosApiGetSpecificVideo0
    */
    readonly userId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof PortfoliosVideosApiGetSpecificVideo0
    */
    readonly videoId: number
    
}

/**
 * Request parameters for putVideoToPortfolio operation in PortfoliosVideosApi.
 * @export
 * @interface PortfoliosVideosApiPutVideoToPortfolioRequest
 */
export type PortfoliosVideosApiPutVideoToPortfolioRequest = {
    
    /**
    * The ID of the portfolio.
    * @type {number}
    * @memberof PortfoliosVideosApiPutVideoToPortfolio
    */
    readonly portfolioId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof PortfoliosVideosApiPutVideoToPortfolio
    */
    readonly videoId: number
    
}

/**
 * Request parameters for removeFromPortfolio operation in PortfoliosVideosApi.
 * @export
 * @interface PortfoliosVideosApiRemoveFromPortfolioRequest
 */
export type PortfoliosVideosApiRemoveFromPortfolioRequest = {
    
    /**
    * The ID of the portfolio.
    * @type {number}
    * @memberof PortfoliosVideosApiRemoveFromPortfolio
    */
    readonly portfolioId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof PortfoliosVideosApiRemoveFromPortfolio
    */
    readonly videoId: number
    
}

/**
 * Request parameters for removeFromPortfolioVideo operation in PortfoliosVideosApi.
 * @export
 * @interface PortfoliosVideosApiRemoveFromPortfolioVideoRequest
 */
export type PortfoliosVideosApiRemoveFromPortfolioVideoRequest = {
    
    /**
    * The ID of the portfolio.
    * @type {number}
    * @memberof PortfoliosVideosApiRemoveFromPortfolioVideo
    */
    readonly portfolioId: number
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof PortfoliosVideosApiRemoveFromPortfolioVideo
    */
    readonly userId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof PortfoliosVideosApiRemoveFromPortfolioVideo
    */
    readonly videoId: number
    
}

/**
 * PortfoliosVideosApiGenerated - object-oriented interface
 * @export
 * @class PortfoliosVideosApiGenerated
 * @extends {BaseAPI}
 */
export class PortfoliosVideosApiGenerated extends BaseAPI {
    /**
     * This method adds a video to the specified portfolio belonging to the authenticated user.
     * @summary Add a video to a portfolio
     * @param {PortfoliosVideosApiAddVideoToPortfolioRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfoliosVideosApiGenerated
     */
    public addVideoToPortfolio(requestParameters: PortfoliosVideosApiAddVideoToPortfolioRequest, options?: AxiosRequestConfig) {
        return PortfoliosVideosApiFp(this.configuration).addVideoToPortfolio(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every video from the specified portfolio belonging to the authenticated user.
     * @summary Get all the videos in a portfolio
     * @param {PortfoliosVideosApiGetAllPortfolioVideosRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfoliosVideosApiGenerated
     */
    public getAllPortfolioVideos(requestParameters: PortfoliosVideosApiGetAllPortfolioVideosRequest, options?: AxiosRequestConfig) {
        return PortfoliosVideosApiFp(this.configuration).getAllPortfolioVideos(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every video from the specified portfolio belonging to the authenticated user.
     * @summary Get all the videos in a portfolio
     * @param {PortfoliosVideosApiGetAllPortfolioVideos0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfoliosVideosApiGenerated
     */
    public getAllPortfolioVideos_1(requestParameters: PortfoliosVideosApiGetAllPortfolioVideos0Request, options?: AxiosRequestConfig) {
        return PortfoliosVideosApiFp(this.configuration).getAllPortfolioVideos_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns a single video from the specified portfolio belonging to the authenticated user.
     * @summary Get a specific video in a portfolio
     * @param {PortfoliosVideosApiGetSpecificVideoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfoliosVideosApiGenerated
     */
    public getSpecificVideo(requestParameters: PortfoliosVideosApiGetSpecificVideoRequest, options?: AxiosRequestConfig) {
        return PortfoliosVideosApiFp(this.configuration).getSpecificVideo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns a single video from the specified portfolio belonging to the authenticated user.
     * @summary Get a specific video in a portfolio
     * @param {PortfoliosVideosApiGetSpecificVideo0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfoliosVideosApiGenerated
     */
    public getSpecificVideo_2(requestParameters: PortfoliosVideosApiGetSpecificVideo0Request, options?: AxiosRequestConfig) {
        return PortfoliosVideosApiFp(this.configuration).getSpecificVideo_2(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method adds a video to the specified portfolio belonging to the authenticated user.
     * @summary Add a video to a portfolio
     * @param {PortfoliosVideosApiPutVideoToPortfolioRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfoliosVideosApiGenerated
     */
    public putVideoToPortfolio(requestParameters: PortfoliosVideosApiPutVideoToPortfolioRequest, options?: AxiosRequestConfig) {
        return PortfoliosVideosApiFp(this.configuration).putVideoToPortfolio(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method removes a video from the specified portfolio belonging to the authenticated user.
     * @summary Remove a video from a portfolio
     * @param {PortfoliosVideosApiRemoveFromPortfolioRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfoliosVideosApiGenerated
     */
    public removeFromPortfolio(requestParameters: PortfoliosVideosApiRemoveFromPortfolioRequest, options?: AxiosRequestConfig) {
        return PortfoliosVideosApiFp(this.configuration).removeFromPortfolio(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method removes a video from the specified portfolio belonging to the authenticated user.
     * @summary Remove a video from a portfolio
     * @param {PortfoliosVideosApiRemoveFromPortfolioVideoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfoliosVideosApiGenerated
     */
    public removeFromPortfolioVideo(requestParameters: PortfoliosVideosApiRemoveFromPortfolioVideoRequest, options?: AxiosRequestConfig) {
        return PortfoliosVideosApiFp(this.configuration).removeFromPortfolioVideo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
