/* tslint:disable */
/* eslint-disable */
/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

The version of the OpenAPI document: 3.4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { LiveEventDestination } from '../models';
// @ts-ignore
import { LiveEventDestinationsCreateDestinationRequest } from '../models';
// @ts-ignore
import { LiveEventDestinationsCreateEventDestinationRequest } from '../models';
// @ts-ignore
import { LiveEventDestinationsCreateOneTimeLiveEventDestinationRequest } from '../models';
// @ts-ignore
import { LiveEventDestinationsCreateOneTimeLiveEventDestinationRequest1 } from '../models';
// @ts-ignore
import { LiveEventDestinationsUpdateDestinationRequest } from '../models';
// @ts-ignore
import { ModelError } from '../models';
// @ts-ignore
import { OttDestination } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * LiveEventDestinationsApi - axios parameter creator
 * @export
 */
export const LiveEventDestinationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method creates a destination for the specified event. The authenticated user must be the owner of the event.
         * @summary Create a live event destination
         * @param {number} liveEventId The ID of the event.
         * @param {LiveEventDestinationsCreateDestinationRequest} liveEventDestinationsCreateDestinationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDestination: async (liveEventId: number, liveEventDestinationsCreateDestinationRequest: LiveEventDestinationsCreateDestinationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveEventId' is not null or undefined
            assertParamExists('createDestination', 'liveEventId', liveEventId)
            // verify required parameter 'liveEventDestinationsCreateDestinationRequest' is not null or undefined
            assertParamExists('createDestination', 'liveEventDestinationsCreateDestinationRequest', liveEventDestinationsCreateDestinationRequest)
            const localVarPath = `/me/live_events/{live_event_id}/destinations`
                .replace(`{${"live_event_id"}}`, encodeURIComponent(String(liveEventId !== undefined ? liveEventId : `-live_event_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["public"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["public"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.vimeo.live.simulcast.destination+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: liveEventDestinationsCreateDestinationRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/live_events/{live_event_id}/destinations',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(liveEventDestinationsCreateDestinationRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method creates a destination for the specified event. The authenticated user must be the owner of the event.
         * @summary Create a live event destination
         * @param {number} liveEventId The ID of the event.
         * @param {number} userId The ID of the user.
         * @param {LiveEventDestinationsCreateEventDestinationRequest} liveEventDestinationsCreateEventDestinationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEventDestination: async (liveEventId: number, userId: number, liveEventDestinationsCreateEventDestinationRequest: LiveEventDestinationsCreateEventDestinationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveEventId' is not null or undefined
            assertParamExists('createEventDestination', 'liveEventId', liveEventId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('createEventDestination', 'userId', userId)
            // verify required parameter 'liveEventDestinationsCreateEventDestinationRequest' is not null or undefined
            assertParamExists('createEventDestination', 'liveEventDestinationsCreateEventDestinationRequest', liveEventDestinationsCreateEventDestinationRequest)
            const localVarPath = `/users/{user_id}/live_events/{live_event_id}/destinations`
                .replace(`{${"live_event_id"}}`, encodeURIComponent(String(liveEventId !== undefined ? liveEventId : `-live_event_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["public"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["public"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.vimeo.live.simulcast.destination+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: liveEventDestinationsCreateEventDestinationRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/live_events/{live_event_id}/destinations',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(liveEventDestinationsCreateEventDestinationRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method creates a destination for the specified event. The authenticated user must be the owner of the event.
         * @summary Create a one-time live event destination
         * @param {number} videoId The ID of the video.
         * @param {LiveEventDestinationsCreateOneTimeLiveEventDestinationRequest} liveEventDestinationsCreateOneTimeLiveEventDestinationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOneTimeLiveEventDestination: async (videoId: number, liveEventDestinationsCreateOneTimeLiveEventDestinationRequest: LiveEventDestinationsCreateOneTimeLiveEventDestinationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('createOneTimeLiveEventDestination', 'videoId', videoId)
            // verify required parameter 'liveEventDestinationsCreateOneTimeLiveEventDestinationRequest' is not null or undefined
            assertParamExists('createOneTimeLiveEventDestination', 'liveEventDestinationsCreateOneTimeLiveEventDestinationRequest', liveEventDestinationsCreateOneTimeLiveEventDestinationRequest)
            const localVarPath = `/me/videos/{video_id}/destinations`
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["public"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["public"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.vimeo.live.simulcast.destination+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: liveEventDestinationsCreateOneTimeLiveEventDestinationRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/videos/{video_id}/destinations',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(liveEventDestinationsCreateOneTimeLiveEventDestinationRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method creates a destination for the specified event. The authenticated user must be the owner of the event.
         * @summary Create a one-time live event destination
         * @param {number} userId The ID of the user.
         * @param {number} videoId The ID of the video.
         * @param {LiveEventDestinationsCreateOneTimeLiveEventDestinationRequest1} liveEventDestinationsCreateOneTimeLiveEventDestinationRequest1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOneTimeLiveEventDestination_1: async (userId: number, videoId: number, liveEventDestinationsCreateOneTimeLiveEventDestinationRequest1: LiveEventDestinationsCreateOneTimeLiveEventDestinationRequest1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('createOneTimeLiveEventDestination_1', 'userId', userId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('createOneTimeLiveEventDestination_1', 'videoId', videoId)
            // verify required parameter 'liveEventDestinationsCreateOneTimeLiveEventDestinationRequest1' is not null or undefined
            assertParamExists('createOneTimeLiveEventDestination_1', 'liveEventDestinationsCreateOneTimeLiveEventDestinationRequest1', liveEventDestinationsCreateOneTimeLiveEventDestinationRequest1)
            const localVarPath = `/users/{user_id}/videos/{video_id}/destinations`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["public"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["public"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.vimeo.live.simulcast.destination+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: liveEventDestinationsCreateOneTimeLiveEventDestinationRequest1,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/videos/{video_id}/destinations',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(liveEventDestinationsCreateOneTimeLiveEventDestinationRequest1, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method creates an OTT channel as the destination of the specified event. The authenticated user must be the owner of the event.
         * @summary Create a live event OTT destination
         * @param {number} liveEventId The ID of the event.
         * @param {number} userId The ID of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOttDestination: async (liveEventId: number, userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveEventId' is not null or undefined
            assertParamExists('createOttDestination', 'liveEventId', liveEventId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('createOttDestination', 'userId', userId)
            const localVarPath = `/users/{user_id}/live_events/{live_event_id}/ott_destinations`
                .replace(`{${"live_event_id"}}`, encodeURIComponent(String(liveEventId !== undefined ? liveEventId : `-live_event_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/live_events/{live_event_id}/ott_destinations',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method deletes the specified event destination belonging to the authenticated user.
         * @summary Delete a live event destination
         * @param {number} destinationId The ID of the event destination.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDestination: async (destinationId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'destinationId' is not null or undefined
            assertParamExists('deleteDestination', 'destinationId', destinationId)
            const localVarPath = `/destination/{destination_id}`
                .replace(`{${"destination_id"}}`, encodeURIComponent(String(destinationId !== undefined ? destinationId : `-destination_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["public"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["public"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/destination/{destination_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method deletes an OTT channel as the destination of the specified event. The authenticated user must be the owner of the event.
         * @summary Delete a live event OTT destination
         * @param {number} liveEventId The ID of the event.
         * @param {number} userId The ID of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOttDestination: async (liveEventId: number, userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveEventId' is not null or undefined
            assertParamExists('deleteOttDestination', 'liveEventId', liveEventId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('deleteOttDestination', 'userId', userId)
            const localVarPath = `/users/{user_id}/live_events/{live_event_id}/ott_destination/{destination_id}`
                .replace(`{${"live_event_id"}}`, encodeURIComponent(String(liveEventId !== undefined ? liveEventId : `-live_event_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/live_events/{live_event_id}/ott_destination/{destination_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every available event destination for the authenticated user to stream to.
         * @summary Get all available live event destinations for the user to stream to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAvailableDestinations: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/destinations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["public"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["public"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/destinations',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every destination of the specified event. The authenticated user must be the owner of the event.
         * @summary Get all the destinations of a recurring live event
         * @param {number} liveEventId The ID of the event.
         * @param {number} userId The ID of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAvailableDestinations_2: async (liveEventId: number, userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveEventId' is not null or undefined
            assertParamExists('getAllAvailableDestinations_2', 'liveEventId', liveEventId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getAllAvailableDestinations_2', 'userId', userId)
            const localVarPath = `/users/{user_id}/live_events/{live_event_id}/destinations`
                .replace(`{${"live_event_id"}}`, encodeURIComponent(String(liveEventId !== undefined ? liveEventId : `-live_event_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["public"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["public"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/live_events/{live_event_id}/destinations',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every destination of the specified event. The authenticated user must be the owner of the event.
         * @summary Get all the destinations of a one-time live event
         * @param {number} userId The ID of the user.
         * @param {number} videoId The ID of the video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAvailableDestinations_3: async (userId: number, videoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getAllAvailableDestinations_3', 'userId', userId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('getAllAvailableDestinations_3', 'videoId', videoId)
            const localVarPath = `/users/{user_id}/videos/{video_id}/destinations`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["public"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["public"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/videos/{video_id}/destinations',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every destination of the specified event. The authenticated user must be the owner of the event.
         * @summary Get all the destinations of a one-time live event
         * @param {number} videoId The ID of the video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllDestinations: async (videoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('getAllDestinations', 'videoId', videoId)
            const localVarPath = `/me/videos/{video_id}/destinations`
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["public"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["public"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/videos/{video_id}/destinations',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every OTT destination of the specified event. The authenticated user must be the owner of the event.
         * @summary Get all the OTT destinations of a recurring live event
         * @param {number} liveEventId The ID of the event.
         * @param {number} userId The ID of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllOttDestinations: async (liveEventId: number, userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveEventId' is not null or undefined
            assertParamExists('getAllOttDestinations', 'liveEventId', liveEventId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getAllOttDestinations', 'userId', userId)
            const localVarPath = `/users/{user_id}/live_events/{live_event_id}/ott_destinations`
                .replace(`{${"live_event_id"}}`, encodeURIComponent(String(liveEventId !== undefined ? liveEventId : `-live_event_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/live_events/{live_event_id}/ott_destinations',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns the specified event destination belonging to the authenticated user.
         * @summary Get a live event destination
         * @param {number} destinationId The ID of the event destination.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDestination: async (destinationId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'destinationId' is not null or undefined
            assertParamExists('getDestination', 'destinationId', destinationId)
            const localVarPath = `/destination/{destination_id}`
                .replace(`{${"destination_id"}}`, encodeURIComponent(String(destinationId !== undefined ? destinationId : `-destination_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["public"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["public"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/destination/{destination_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every destination of the specified event. The authenticated user must be the owner of the event.
         * @summary Get all the destinations of a recurring live event
         * @param {number} liveEventId The ID of the event.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllAvailableDestinations: async (liveEventId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveEventId' is not null or undefined
            assertParamExists('listAllAvailableDestinations', 'liveEventId', liveEventId)
            const localVarPath = `/me/live_events/{live_event_id}/destinations`
                .replace(`{${"live_event_id"}}`, encodeURIComponent(String(liveEventId !== undefined ? liveEventId : `-live_event_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["public"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["public"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/live_events/{live_event_id}/destinations',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every available event destination for the authenticated user to stream to.
         * @summary Get all available live event destinations for the user to stream to
         * @param {number} userId The ID of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAvailableDestinations: async (userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('listAvailableDestinations', 'userId', userId)
            const localVarPath = `/users/{user_id}/destinations`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["public"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["public"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/destinations',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method updates the specified event destination belonging to the authenticated user.
         * @summary Update a live event destination
         * @param {number} destinationId The ID of the event destination.
         * @param {LiveEventDestinationsUpdateDestinationRequest} [liveEventDestinationsUpdateDestinationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDestination: async (destinationId: number, liveEventDestinationsUpdateDestinationRequest?: LiveEventDestinationsUpdateDestinationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'destinationId' is not null or undefined
            assertParamExists('updateDestination', 'destinationId', destinationId)
            const localVarPath = `/destination/{destination_id}`
                .replace(`{${"destination_id"}}`, encodeURIComponent(String(destinationId !== undefined ? destinationId : `-destination_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["public"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["public"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.vimeo.live.simulcast.destination+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: liveEventDestinationsUpdateDestinationRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/destination/{destination_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(liveEventDestinationsUpdateDestinationRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LiveEventDestinationsApi - functional programming interface
 * @export
 */
export const LiveEventDestinationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LiveEventDestinationsApiAxiosParamCreator(configuration)
    return {
        /**
         * This method creates a destination for the specified event. The authenticated user must be the owner of the event.
         * @summary Create a live event destination
         * @param {LiveEventDestinationsApiCreateDestinationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDestination(requestParameters: LiveEventDestinationsApiCreateDestinationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LiveEventDestination>> {
            const liveEventDestinationsCreateDestinationRequest: LiveEventDestinationsCreateDestinationRequest = {
                display_name: requestParameters.display_name,
                is_enabled: requestParameters.is_enabled,
                privacy: requestParameters.privacy,
                provider_destination_id: requestParameters.provider_destination_id,
                provider_video_id: requestParameters.provider_video_id,
                scheduled_at: requestParameters.scheduled_at,
                service_name: requestParameters.service_name,
                stream_key: requestParameters.stream_key,
                stream_url: requestParameters.stream_url,
                type: requestParameters.type
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDestination(requestParameters.liveEventId, liveEventDestinationsCreateDestinationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method creates a destination for the specified event. The authenticated user must be the owner of the event.
         * @summary Create a live event destination
         * @param {LiveEventDestinationsApiCreateEventDestinationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEventDestination(requestParameters: LiveEventDestinationsApiCreateEventDestinationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LiveEventDestination>> {
            const liveEventDestinationsCreateEventDestinationRequest: LiveEventDestinationsCreateEventDestinationRequest = {
                display_name: requestParameters.display_name,
                is_enabled: requestParameters.is_enabled,
                privacy: requestParameters.privacy,
                provider_destination_id: requestParameters.provider_destination_id,
                provider_video_id: requestParameters.provider_video_id,
                scheduled_at: requestParameters.scheduled_at,
                service_name: requestParameters.service_name,
                stream_key: requestParameters.stream_key,
                stream_url: requestParameters.stream_url,
                type: requestParameters.type
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEventDestination(requestParameters.liveEventId, requestParameters.userId, liveEventDestinationsCreateEventDestinationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method creates a destination for the specified event. The authenticated user must be the owner of the event.
         * @summary Create a one-time live event destination
         * @param {LiveEventDestinationsApiCreateOneTimeLiveEventDestinationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOneTimeLiveEventDestination(requestParameters: LiveEventDestinationsApiCreateOneTimeLiveEventDestinationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const liveEventDestinationsCreateOneTimeLiveEventDestinationRequest: LiveEventDestinationsCreateOneTimeLiveEventDestinationRequest = {
                display_name: requestParameters.display_name,
                is_enabled: requestParameters.is_enabled,
                privacy: requestParameters.privacy,
                provider_destination_id: requestParameters.provider_destination_id,
                provider_video_id: requestParameters.provider_video_id,
                scheduled_at: requestParameters.scheduled_at,
                service_name: requestParameters.service_name,
                stream_key: requestParameters.stream_key,
                stream_url: requestParameters.stream_url,
                type: requestParameters.type
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOneTimeLiveEventDestination(requestParameters.videoId, liveEventDestinationsCreateOneTimeLiveEventDestinationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method creates a destination for the specified event. The authenticated user must be the owner of the event.
         * @summary Create a one-time live event destination
         * @param {LiveEventDestinationsApiCreateOneTimeLiveEventDestination0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOneTimeLiveEventDestination_1(requestParameters: LiveEventDestinationsApiCreateOneTimeLiveEventDestination0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const liveEventDestinationsCreateOneTimeLiveEventDestinationRequest1: LiveEventDestinationsCreateOneTimeLiveEventDestinationRequest1 = {
                display_name: requestParameters.display_name,
                is_enabled: requestParameters.is_enabled,
                privacy: requestParameters.privacy,
                provider_destination_id: requestParameters.provider_destination_id,
                provider_video_id: requestParameters.provider_video_id,
                scheduled_at: requestParameters.scheduled_at,
                service_name: requestParameters.service_name,
                stream_key: requestParameters.stream_key,
                stream_url: requestParameters.stream_url,
                type: requestParameters.type
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOneTimeLiveEventDestination_1(requestParameters.userId, requestParameters.videoId, liveEventDestinationsCreateOneTimeLiveEventDestinationRequest1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method creates an OTT channel as the destination of the specified event. The authenticated user must be the owner of the event.
         * @summary Create a live event OTT destination
         * @param {LiveEventDestinationsApiCreateOttDestinationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOttDestination(requestParameters: LiveEventDestinationsApiCreateOttDestinationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OttDestination>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOttDestination(requestParameters.liveEventId, requestParameters.userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method deletes the specified event destination belonging to the authenticated user.
         * @summary Delete a live event destination
         * @param {LiveEventDestinationsApiDeleteDestinationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDestination(requestParameters: LiveEventDestinationsApiDeleteDestinationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDestination(requestParameters.destinationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method deletes an OTT channel as the destination of the specified event. The authenticated user must be the owner of the event.
         * @summary Delete a live event OTT destination
         * @param {LiveEventDestinationsApiDeleteOttDestinationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOttDestination(requestParameters: LiveEventDestinationsApiDeleteOttDestinationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOttDestination(requestParameters.liveEventId, requestParameters.userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every available event destination for the authenticated user to stream to.
         * @summary Get all available live event destinations for the user to stream to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllAvailableDestinations(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllAvailableDestinations(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every destination of the specified event. The authenticated user must be the owner of the event.
         * @summary Get all the destinations of a recurring live event
         * @param {LiveEventDestinationsApiGetAllAvailableDestinations0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllAvailableDestinations_2(requestParameters: LiveEventDestinationsApiGetAllAvailableDestinations0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LiveEventDestination>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllAvailableDestinations_2(requestParameters.liveEventId, requestParameters.userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every destination of the specified event. The authenticated user must be the owner of the event.
         * @summary Get all the destinations of a one-time live event
         * @param {LiveEventDestinationsApiGetAllAvailableDestinations1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllAvailableDestinations_3(requestParameters: LiveEventDestinationsApiGetAllAvailableDestinations1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LiveEventDestination>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllAvailableDestinations_3(requestParameters.userId, requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every destination of the specified event. The authenticated user must be the owner of the event.
         * @summary Get all the destinations of a one-time live event
         * @param {LiveEventDestinationsApiGetAllDestinationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllDestinations(requestParameters: LiveEventDestinationsApiGetAllDestinationsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LiveEventDestination>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllDestinations(requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every OTT destination of the specified event. The authenticated user must be the owner of the event.
         * @summary Get all the OTT destinations of a recurring live event
         * @param {LiveEventDestinationsApiGetAllOttDestinationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllOttDestinations(requestParameters: LiveEventDestinationsApiGetAllOttDestinationsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OttDestination>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllOttDestinations(requestParameters.liveEventId, requestParameters.userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns the specified event destination belonging to the authenticated user.
         * @summary Get a live event destination
         * @param {LiveEventDestinationsApiGetDestinationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDestination(requestParameters: LiveEventDestinationsApiGetDestinationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LiveEventDestination>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDestination(requestParameters.destinationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every destination of the specified event. The authenticated user must be the owner of the event.
         * @summary Get all the destinations of a recurring live event
         * @param {LiveEventDestinationsApiListAllAvailableDestinationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllAvailableDestinations(requestParameters: LiveEventDestinationsApiListAllAvailableDestinationsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LiveEventDestination>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllAvailableDestinations(requestParameters.liveEventId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every available event destination for the authenticated user to stream to.
         * @summary Get all available live event destinations for the user to stream to
         * @param {LiveEventDestinationsApiListAvailableDestinationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAvailableDestinations(requestParameters: LiveEventDestinationsApiListAvailableDestinationsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAvailableDestinations(requestParameters.userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method updates the specified event destination belonging to the authenticated user.
         * @summary Update a live event destination
         * @param {LiveEventDestinationsApiUpdateDestinationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDestination(requestParameters: LiveEventDestinationsApiUpdateDestinationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LiveEventDestination>> {
            const liveEventDestinationsUpdateDestinationRequest: LiveEventDestinationsUpdateDestinationRequest = {
                display_name: requestParameters.display_name,
                is_enabled: requestParameters.is_enabled,
                privacy: requestParameters.privacy,
                provider_destination_id: requestParameters.provider_destination_id,
                service_name: requestParameters.service_name,
                stream_key: requestParameters.stream_key,
                stream_url: requestParameters.stream_url,
                type: requestParameters.type
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDestination(requestParameters.destinationId, liveEventDestinationsUpdateDestinationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LiveEventDestinationsApi - factory interface
 * @export
 */
export const LiveEventDestinationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LiveEventDestinationsApiFp(configuration)
    return {
        /**
         * This method creates a destination for the specified event. The authenticated user must be the owner of the event.
         * @summary Create a live event destination
         * @param {LiveEventDestinationsApiCreateDestinationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDestination(requestParameters: LiveEventDestinationsApiCreateDestinationRequest, options?: AxiosRequestConfig): AxiosPromise<LiveEventDestination> {
            return localVarFp.createDestination(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method creates a destination for the specified event. The authenticated user must be the owner of the event.
         * @summary Create a live event destination
         * @param {LiveEventDestinationsApiCreateEventDestinationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEventDestination(requestParameters: LiveEventDestinationsApiCreateEventDestinationRequest, options?: AxiosRequestConfig): AxiosPromise<LiveEventDestination> {
            return localVarFp.createEventDestination(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method creates a destination for the specified event. The authenticated user must be the owner of the event.
         * @summary Create a one-time live event destination
         * @param {LiveEventDestinationsApiCreateOneTimeLiveEventDestinationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOneTimeLiveEventDestination(requestParameters: LiveEventDestinationsApiCreateOneTimeLiveEventDestinationRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createOneTimeLiveEventDestination(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method creates a destination for the specified event. The authenticated user must be the owner of the event.
         * @summary Create a one-time live event destination
         * @param {LiveEventDestinationsApiCreateOneTimeLiveEventDestination0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOneTimeLiveEventDestination_1(requestParameters: LiveEventDestinationsApiCreateOneTimeLiveEventDestination0Request, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createOneTimeLiveEventDestination_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method creates an OTT channel as the destination of the specified event. The authenticated user must be the owner of the event.
         * @summary Create a live event OTT destination
         * @param {LiveEventDestinationsApiCreateOttDestinationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOttDestination(requestParameters: LiveEventDestinationsApiCreateOttDestinationRequest, options?: AxiosRequestConfig): AxiosPromise<OttDestination> {
            return localVarFp.createOttDestination(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method deletes the specified event destination belonging to the authenticated user.
         * @summary Delete a live event destination
         * @param {LiveEventDestinationsApiDeleteDestinationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDestination(requestParameters: LiveEventDestinationsApiDeleteDestinationRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteDestination(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method deletes an OTT channel as the destination of the specified event. The authenticated user must be the owner of the event.
         * @summary Delete a live event OTT destination
         * @param {LiveEventDestinationsApiDeleteOttDestinationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOttDestination(requestParameters: LiveEventDestinationsApiDeleteOttDestinationRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteOttDestination(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every available event destination for the authenticated user to stream to.
         * @summary Get all available live event destinations for the user to stream to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAvailableDestinations(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getAllAvailableDestinations(options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every destination of the specified event. The authenticated user must be the owner of the event.
         * @summary Get all the destinations of a recurring live event
         * @param {LiveEventDestinationsApiGetAllAvailableDestinations0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAvailableDestinations_2(requestParameters: LiveEventDestinationsApiGetAllAvailableDestinations0Request, options?: AxiosRequestConfig): AxiosPromise<Array<LiveEventDestination>> {
            return localVarFp.getAllAvailableDestinations_2(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every destination of the specified event. The authenticated user must be the owner of the event.
         * @summary Get all the destinations of a one-time live event
         * @param {LiveEventDestinationsApiGetAllAvailableDestinations1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAvailableDestinations_3(requestParameters: LiveEventDestinationsApiGetAllAvailableDestinations1Request, options?: AxiosRequestConfig): AxiosPromise<Array<LiveEventDestination>> {
            return localVarFp.getAllAvailableDestinations_3(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every destination of the specified event. The authenticated user must be the owner of the event.
         * @summary Get all the destinations of a one-time live event
         * @param {LiveEventDestinationsApiGetAllDestinationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllDestinations(requestParameters: LiveEventDestinationsApiGetAllDestinationsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<LiveEventDestination>> {
            return localVarFp.getAllDestinations(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every OTT destination of the specified event. The authenticated user must be the owner of the event.
         * @summary Get all the OTT destinations of a recurring live event
         * @param {LiveEventDestinationsApiGetAllOttDestinationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllOttDestinations(requestParameters: LiveEventDestinationsApiGetAllOttDestinationsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<OttDestination>> {
            return localVarFp.getAllOttDestinations(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns the specified event destination belonging to the authenticated user.
         * @summary Get a live event destination
         * @param {LiveEventDestinationsApiGetDestinationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDestination(requestParameters: LiveEventDestinationsApiGetDestinationRequest, options?: AxiosRequestConfig): AxiosPromise<LiveEventDestination> {
            return localVarFp.getDestination(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every destination of the specified event. The authenticated user must be the owner of the event.
         * @summary Get all the destinations of a recurring live event
         * @param {LiveEventDestinationsApiListAllAvailableDestinationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllAvailableDestinations(requestParameters: LiveEventDestinationsApiListAllAvailableDestinationsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<LiveEventDestination>> {
            return localVarFp.listAllAvailableDestinations(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every available event destination for the authenticated user to stream to.
         * @summary Get all available live event destinations for the user to stream to
         * @param {LiveEventDestinationsApiListAvailableDestinationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAvailableDestinations(requestParameters: LiveEventDestinationsApiListAvailableDestinationsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.listAvailableDestinations(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method updates the specified event destination belonging to the authenticated user.
         * @summary Update a live event destination
         * @param {LiveEventDestinationsApiUpdateDestinationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDestination(requestParameters: LiveEventDestinationsApiUpdateDestinationRequest, options?: AxiosRequestConfig): AxiosPromise<LiveEventDestination> {
            return localVarFp.updateDestination(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createDestination operation in LiveEventDestinationsApi.
 * @export
 * @interface LiveEventDestinationsApiCreateDestinationRequest
 */
export type LiveEventDestinationsApiCreateDestinationRequest = {
    
    /**
    * The ID of the event.
    * @type {number}
    * @memberof LiveEventDestinationsApiCreateDestination
    */
    readonly liveEventId: number
    
} & LiveEventDestinationsCreateDestinationRequest

/**
 * Request parameters for createEventDestination operation in LiveEventDestinationsApi.
 * @export
 * @interface LiveEventDestinationsApiCreateEventDestinationRequest
 */
export type LiveEventDestinationsApiCreateEventDestinationRequest = {
    
    /**
    * The ID of the event.
    * @type {number}
    * @memberof LiveEventDestinationsApiCreateEventDestination
    */
    readonly liveEventId: number
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof LiveEventDestinationsApiCreateEventDestination
    */
    readonly userId: number
    
} & LiveEventDestinationsCreateEventDestinationRequest

/**
 * Request parameters for createOneTimeLiveEventDestination operation in LiveEventDestinationsApi.
 * @export
 * @interface LiveEventDestinationsApiCreateOneTimeLiveEventDestinationRequest
 */
export type LiveEventDestinationsApiCreateOneTimeLiveEventDestinationRequest = {
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof LiveEventDestinationsApiCreateOneTimeLiveEventDestination
    */
    readonly videoId: number
    
} & LiveEventDestinationsCreateOneTimeLiveEventDestinationRequest

/**
 * Request parameters for createOneTimeLiveEventDestination_1 operation in LiveEventDestinationsApi.
 * @export
 * @interface LiveEventDestinationsApiCreateOneTimeLiveEventDestination0Request
 */
export type LiveEventDestinationsApiCreateOneTimeLiveEventDestination0Request = {
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof LiveEventDestinationsApiCreateOneTimeLiveEventDestination0
    */
    readonly userId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof LiveEventDestinationsApiCreateOneTimeLiveEventDestination0
    */
    readonly videoId: number
    
} & LiveEventDestinationsCreateOneTimeLiveEventDestinationRequest1

/**
 * Request parameters for createOttDestination operation in LiveEventDestinationsApi.
 * @export
 * @interface LiveEventDestinationsApiCreateOttDestinationRequest
 */
export type LiveEventDestinationsApiCreateOttDestinationRequest = {
    
    /**
    * The ID of the event.
    * @type {number}
    * @memberof LiveEventDestinationsApiCreateOttDestination
    */
    readonly liveEventId: number
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof LiveEventDestinationsApiCreateOttDestination
    */
    readonly userId: number
    
}

/**
 * Request parameters for deleteDestination operation in LiveEventDestinationsApi.
 * @export
 * @interface LiveEventDestinationsApiDeleteDestinationRequest
 */
export type LiveEventDestinationsApiDeleteDestinationRequest = {
    
    /**
    * The ID of the event destination.
    * @type {number}
    * @memberof LiveEventDestinationsApiDeleteDestination
    */
    readonly destinationId: number
    
}

/**
 * Request parameters for deleteOttDestination operation in LiveEventDestinationsApi.
 * @export
 * @interface LiveEventDestinationsApiDeleteOttDestinationRequest
 */
export type LiveEventDestinationsApiDeleteOttDestinationRequest = {
    
    /**
    * The ID of the event.
    * @type {number}
    * @memberof LiveEventDestinationsApiDeleteOttDestination
    */
    readonly liveEventId: number
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof LiveEventDestinationsApiDeleteOttDestination
    */
    readonly userId: number
    
}

/**
 * Request parameters for getAllAvailableDestinations_2 operation in LiveEventDestinationsApi.
 * @export
 * @interface LiveEventDestinationsApiGetAllAvailableDestinations0Request
 */
export type LiveEventDestinationsApiGetAllAvailableDestinations0Request = {
    
    /**
    * The ID of the event.
    * @type {number}
    * @memberof LiveEventDestinationsApiGetAllAvailableDestinations0
    */
    readonly liveEventId: number
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof LiveEventDestinationsApiGetAllAvailableDestinations0
    */
    readonly userId: number
    
}

/**
 * Request parameters for getAllAvailableDestinations_3 operation in LiveEventDestinationsApi.
 * @export
 * @interface LiveEventDestinationsApiGetAllAvailableDestinations1Request
 */
export type LiveEventDestinationsApiGetAllAvailableDestinations1Request = {
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof LiveEventDestinationsApiGetAllAvailableDestinations1
    */
    readonly userId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof LiveEventDestinationsApiGetAllAvailableDestinations1
    */
    readonly videoId: number
    
}

/**
 * Request parameters for getAllDestinations operation in LiveEventDestinationsApi.
 * @export
 * @interface LiveEventDestinationsApiGetAllDestinationsRequest
 */
export type LiveEventDestinationsApiGetAllDestinationsRequest = {
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof LiveEventDestinationsApiGetAllDestinations
    */
    readonly videoId: number
    
}

/**
 * Request parameters for getAllOttDestinations operation in LiveEventDestinationsApi.
 * @export
 * @interface LiveEventDestinationsApiGetAllOttDestinationsRequest
 */
export type LiveEventDestinationsApiGetAllOttDestinationsRequest = {
    
    /**
    * The ID of the event.
    * @type {number}
    * @memberof LiveEventDestinationsApiGetAllOttDestinations
    */
    readonly liveEventId: number
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof LiveEventDestinationsApiGetAllOttDestinations
    */
    readonly userId: number
    
}

/**
 * Request parameters for getDestination operation in LiveEventDestinationsApi.
 * @export
 * @interface LiveEventDestinationsApiGetDestinationRequest
 */
export type LiveEventDestinationsApiGetDestinationRequest = {
    
    /**
    * The ID of the event destination.
    * @type {number}
    * @memberof LiveEventDestinationsApiGetDestination
    */
    readonly destinationId: number
    
}

/**
 * Request parameters for listAllAvailableDestinations operation in LiveEventDestinationsApi.
 * @export
 * @interface LiveEventDestinationsApiListAllAvailableDestinationsRequest
 */
export type LiveEventDestinationsApiListAllAvailableDestinationsRequest = {
    
    /**
    * The ID of the event.
    * @type {number}
    * @memberof LiveEventDestinationsApiListAllAvailableDestinations
    */
    readonly liveEventId: number
    
}

/**
 * Request parameters for listAvailableDestinations operation in LiveEventDestinationsApi.
 * @export
 * @interface LiveEventDestinationsApiListAvailableDestinationsRequest
 */
export type LiveEventDestinationsApiListAvailableDestinationsRequest = {
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof LiveEventDestinationsApiListAvailableDestinations
    */
    readonly userId: number
    
}

/**
 * Request parameters for updateDestination operation in LiveEventDestinationsApi.
 * @export
 * @interface LiveEventDestinationsApiUpdateDestinationRequest
 */
export type LiveEventDestinationsApiUpdateDestinationRequest = {
    
    /**
    * The ID of the event destination.
    * @type {number}
    * @memberof LiveEventDestinationsApiUpdateDestination
    */
    readonly destinationId: number
    
} & LiveEventDestinationsUpdateDestinationRequest

/**
 * LiveEventDestinationsApiGenerated - object-oriented interface
 * @export
 * @class LiveEventDestinationsApiGenerated
 * @extends {BaseAPI}
 */
export class LiveEventDestinationsApiGenerated extends BaseAPI {
    /**
     * This method creates a destination for the specified event. The authenticated user must be the owner of the event.
     * @summary Create a live event destination
     * @param {LiveEventDestinationsApiCreateDestinationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEventDestinationsApiGenerated
     */
    public createDestination(requestParameters: LiveEventDestinationsApiCreateDestinationRequest, options?: AxiosRequestConfig) {
        return LiveEventDestinationsApiFp(this.configuration).createDestination(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method creates a destination for the specified event. The authenticated user must be the owner of the event.
     * @summary Create a live event destination
     * @param {LiveEventDestinationsApiCreateEventDestinationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEventDestinationsApiGenerated
     */
    public createEventDestination(requestParameters: LiveEventDestinationsApiCreateEventDestinationRequest, options?: AxiosRequestConfig) {
        return LiveEventDestinationsApiFp(this.configuration).createEventDestination(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method creates a destination for the specified event. The authenticated user must be the owner of the event.
     * @summary Create a one-time live event destination
     * @param {LiveEventDestinationsApiCreateOneTimeLiveEventDestinationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEventDestinationsApiGenerated
     */
    public createOneTimeLiveEventDestination(requestParameters: LiveEventDestinationsApiCreateOneTimeLiveEventDestinationRequest, options?: AxiosRequestConfig) {
        return LiveEventDestinationsApiFp(this.configuration).createOneTimeLiveEventDestination(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method creates a destination for the specified event. The authenticated user must be the owner of the event.
     * @summary Create a one-time live event destination
     * @param {LiveEventDestinationsApiCreateOneTimeLiveEventDestination0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEventDestinationsApiGenerated
     */
    public createOneTimeLiveEventDestination_1(requestParameters: LiveEventDestinationsApiCreateOneTimeLiveEventDestination0Request, options?: AxiosRequestConfig) {
        return LiveEventDestinationsApiFp(this.configuration).createOneTimeLiveEventDestination_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method creates an OTT channel as the destination of the specified event. The authenticated user must be the owner of the event.
     * @summary Create a live event OTT destination
     * @param {LiveEventDestinationsApiCreateOttDestinationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEventDestinationsApiGenerated
     */
    public createOttDestination(requestParameters: LiveEventDestinationsApiCreateOttDestinationRequest, options?: AxiosRequestConfig) {
        return LiveEventDestinationsApiFp(this.configuration).createOttDestination(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method deletes the specified event destination belonging to the authenticated user.
     * @summary Delete a live event destination
     * @param {LiveEventDestinationsApiDeleteDestinationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEventDestinationsApiGenerated
     */
    public deleteDestination(requestParameters: LiveEventDestinationsApiDeleteDestinationRequest, options?: AxiosRequestConfig) {
        return LiveEventDestinationsApiFp(this.configuration).deleteDestination(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method deletes an OTT channel as the destination of the specified event. The authenticated user must be the owner of the event.
     * @summary Delete a live event OTT destination
     * @param {LiveEventDestinationsApiDeleteOttDestinationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEventDestinationsApiGenerated
     */
    public deleteOttDestination(requestParameters: LiveEventDestinationsApiDeleteOttDestinationRequest, options?: AxiosRequestConfig) {
        return LiveEventDestinationsApiFp(this.configuration).deleteOttDestination(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every available event destination for the authenticated user to stream to.
     * @summary Get all available live event destinations for the user to stream to
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEventDestinationsApiGenerated
     */
    public getAllAvailableDestinations(options?: AxiosRequestConfig) {
        return LiveEventDestinationsApiFp(this.configuration).getAllAvailableDestinations(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every destination of the specified event. The authenticated user must be the owner of the event.
     * @summary Get all the destinations of a recurring live event
     * @param {LiveEventDestinationsApiGetAllAvailableDestinations0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEventDestinationsApiGenerated
     */
    public getAllAvailableDestinations_2(requestParameters: LiveEventDestinationsApiGetAllAvailableDestinations0Request, options?: AxiosRequestConfig) {
        return LiveEventDestinationsApiFp(this.configuration).getAllAvailableDestinations_2(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every destination of the specified event. The authenticated user must be the owner of the event.
     * @summary Get all the destinations of a one-time live event
     * @param {LiveEventDestinationsApiGetAllAvailableDestinations1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEventDestinationsApiGenerated
     */
    public getAllAvailableDestinations_3(requestParameters: LiveEventDestinationsApiGetAllAvailableDestinations1Request, options?: AxiosRequestConfig) {
        return LiveEventDestinationsApiFp(this.configuration).getAllAvailableDestinations_3(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every destination of the specified event. The authenticated user must be the owner of the event.
     * @summary Get all the destinations of a one-time live event
     * @param {LiveEventDestinationsApiGetAllDestinationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEventDestinationsApiGenerated
     */
    public getAllDestinations(requestParameters: LiveEventDestinationsApiGetAllDestinationsRequest, options?: AxiosRequestConfig) {
        return LiveEventDestinationsApiFp(this.configuration).getAllDestinations(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every OTT destination of the specified event. The authenticated user must be the owner of the event.
     * @summary Get all the OTT destinations of a recurring live event
     * @param {LiveEventDestinationsApiGetAllOttDestinationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEventDestinationsApiGenerated
     */
    public getAllOttDestinations(requestParameters: LiveEventDestinationsApiGetAllOttDestinationsRequest, options?: AxiosRequestConfig) {
        return LiveEventDestinationsApiFp(this.configuration).getAllOttDestinations(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns the specified event destination belonging to the authenticated user.
     * @summary Get a live event destination
     * @param {LiveEventDestinationsApiGetDestinationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEventDestinationsApiGenerated
     */
    public getDestination(requestParameters: LiveEventDestinationsApiGetDestinationRequest, options?: AxiosRequestConfig) {
        return LiveEventDestinationsApiFp(this.configuration).getDestination(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every destination of the specified event. The authenticated user must be the owner of the event.
     * @summary Get all the destinations of a recurring live event
     * @param {LiveEventDestinationsApiListAllAvailableDestinationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEventDestinationsApiGenerated
     */
    public listAllAvailableDestinations(requestParameters: LiveEventDestinationsApiListAllAvailableDestinationsRequest, options?: AxiosRequestConfig) {
        return LiveEventDestinationsApiFp(this.configuration).listAllAvailableDestinations(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every available event destination for the authenticated user to stream to.
     * @summary Get all available live event destinations for the user to stream to
     * @param {LiveEventDestinationsApiListAvailableDestinationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEventDestinationsApiGenerated
     */
    public listAvailableDestinations(requestParameters: LiveEventDestinationsApiListAvailableDestinationsRequest, options?: AxiosRequestConfig) {
        return LiveEventDestinationsApiFp(this.configuration).listAvailableDestinations(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method updates the specified event destination belonging to the authenticated user.
     * @summary Update a live event destination
     * @param {LiveEventDestinationsApiUpdateDestinationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEventDestinationsApiGenerated
     */
    public updateDestination(requestParameters: LiveEventDestinationsApiUpdateDestinationRequest, options?: AxiosRequestConfig) {
        return LiveEventDestinationsApiFp(this.configuration).updateDestination(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
