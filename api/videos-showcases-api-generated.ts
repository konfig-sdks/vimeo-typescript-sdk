/* tslint:disable */
/* eslint-disable */
/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

The version of the OpenAPI document: 3.4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Album } from '../models';
// @ts-ignore
import { ModelError } from '../models';
// @ts-ignore
import { VideosShowcasesAddToMultipleShowcasesRequest } from '../models';
// @ts-ignore
import { VideosShowcasesAddToMultipleShowcasesRequestAddInner } from '../models';
// @ts-ignore
import { VideosShowcasesAddToMultipleShowcasesRequestRemoveInner } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * VideosShowcasesApi - axios parameter creator
 * @export
 */
export const VideosShowcasesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method adds or removes the specified video to or from multiple showcases.
         * @summary Add or remove a video from a list of showcases
         * @param {number} videoId The ID of the video.
         * @param {VideosShowcasesAddToMultipleShowcasesRequest} [videosShowcasesAddToMultipleShowcasesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToMultipleShowcases: async (videoId: number, videosShowcasesAddToMultipleShowcasesRequest?: VideosShowcasesAddToMultipleShowcasesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('addToMultipleShowcases', 'videoId', videoId)
            const localVarPath = `/videos/{video_id}/albums`
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.vimeo.album+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: videosShowcasesAddToMultipleShowcasesRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/videos/{video_id}/albums',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(videosShowcasesAddToMultipleShowcasesRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns all the showcases that contain the specified video.
         * @summary Get all the showcases that contain a video
         * @param {number} videoId The ID of the video.
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllContShowcases: async (videoId: number, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('getAllContShowcases', 'videoId', videoId)
            const localVarPath = `/videos/{video_id}/albums`
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/videos/{video_id}/albums',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VideosShowcasesApi - functional programming interface
 * @export
 */
export const VideosShowcasesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VideosShowcasesApiAxiosParamCreator(configuration)
    return {
        /**
         * This method adds or removes the specified video to or from multiple showcases.
         * @summary Add or remove a video from a list of showcases
         * @param {VideosShowcasesApiAddToMultipleShowcasesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addToMultipleShowcases(requestParameters: VideosShowcasesApiAddToMultipleShowcasesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Album>>> {
            const videosShowcasesAddToMultipleShowcasesRequest: VideosShowcasesAddToMultipleShowcasesRequest = {
                add: requestParameters.add,
                remove: requestParameters.remove
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addToMultipleShowcases(requestParameters.videoId, videosShowcasesAddToMultipleShowcasesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns all the showcases that contain the specified video.
         * @summary Get all the showcases that contain a video
         * @param {VideosShowcasesApiGetAllContShowcasesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllContShowcases(requestParameters: VideosShowcasesApiGetAllContShowcasesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Album>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllContShowcases(requestParameters.videoId, requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VideosShowcasesApi - factory interface
 * @export
 */
export const VideosShowcasesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VideosShowcasesApiFp(configuration)
    return {
        /**
         * This method adds or removes the specified video to or from multiple showcases.
         * @summary Add or remove a video from a list of showcases
         * @param {VideosShowcasesApiAddToMultipleShowcasesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToMultipleShowcases(requestParameters: VideosShowcasesApiAddToMultipleShowcasesRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Album>> {
            return localVarFp.addToMultipleShowcases(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns all the showcases that contain the specified video.
         * @summary Get all the showcases that contain a video
         * @param {VideosShowcasesApiGetAllContShowcasesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllContShowcases(requestParameters: VideosShowcasesApiGetAllContShowcasesRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Album>> {
            return localVarFp.getAllContShowcases(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addToMultipleShowcases operation in VideosShowcasesApi.
 * @export
 * @interface VideosShowcasesApiAddToMultipleShowcasesRequest
 */
export type VideosShowcasesApiAddToMultipleShowcasesRequest = {
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof VideosShowcasesApiAddToMultipleShowcases
    */
    readonly videoId: number
    
} & VideosShowcasesAddToMultipleShowcasesRequest

/**
 * Request parameters for getAllContShowcases operation in VideosShowcasesApi.
 * @export
 * @interface VideosShowcasesApiGetAllContShowcasesRequest
 */
export type VideosShowcasesApiGetAllContShowcasesRequest = {
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof VideosShowcasesApiGetAllContShowcases
    */
    readonly videoId: number
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof VideosShowcasesApiGetAllContShowcases
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof VideosShowcasesApiGetAllContShowcases
    */
    readonly perPage?: number
    
}

/**
 * VideosShowcasesApiGenerated - object-oriented interface
 * @export
 * @class VideosShowcasesApiGenerated
 * @extends {BaseAPI}
 */
export class VideosShowcasesApiGenerated extends BaseAPI {
    /**
     * This method adds or removes the specified video to or from multiple showcases.
     * @summary Add or remove a video from a list of showcases
     * @param {VideosShowcasesApiAddToMultipleShowcasesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosShowcasesApiGenerated
     */
    public addToMultipleShowcases(requestParameters: VideosShowcasesApiAddToMultipleShowcasesRequest, options?: AxiosRequestConfig) {
        return VideosShowcasesApiFp(this.configuration).addToMultipleShowcases(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns all the showcases that contain the specified video.
     * @summary Get all the showcases that contain a video
     * @param {VideosShowcasesApiGetAllContShowcasesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosShowcasesApiGenerated
     */
    public getAllContShowcases(requestParameters: VideosShowcasesApiGetAllContShowcasesRequest, options?: AxiosRequestConfig) {
        return VideosShowcasesApiFp(this.configuration).getAllContShowcases(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
