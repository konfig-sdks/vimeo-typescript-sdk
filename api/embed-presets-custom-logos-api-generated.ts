/* tslint:disable */
/* eslint-disable */
/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

The version of the OpenAPI document: 3.4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { LegacyError } from '../models';
// @ts-ignore
import { Picture } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * EmbedPresetsCustomLogosApi - axios parameter creator
 * @export
 */
export const EmbedPresetsCustomLogosApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method adds a custom logo representing the authenticated user for display in the embedded player. Be sure to use this method in the context of the multi-step upload procedure described in our [Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails#uploading-a-thumbnail) guide. This method represents Step 2 of the procedure.
         * @summary Add a custom user logo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserLogo: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/customlogos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["upload"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["upload"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/customlogos',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method adds a custom logo representing the authenticated user for display in the embedded player. Be sure to use this method in the context of the multi-step upload procedure described in our [Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails#uploading-a-thumbnail) guide. This method represents Step 2 of the procedure.
         * @summary Add a custom user logo
         * @param {number} userId The ID of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserLogo_1: async (userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('addUserLogo_1', 'userId', userId)
            const localVarPath = `/users/{user_id}/customlogos`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["upload"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["upload"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/customlogos',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method deletes the specified custom logo belonging to the authenticated user.
         * @summary Delete a custom user logo
         * @param {number} logoId The ID of the custom logo.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserLogo: async (logoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'logoId' is not null or undefined
            assertParamExists('deleteUserLogo', 'logoId', logoId)
            const localVarPath = `/me/customlogos/{logo_id}`
                .replace(`{${"logo_id"}}`, encodeURIComponent(String(logoId !== undefined ? logoId : `-logo_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["delete"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["delete"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/customlogos/{logo_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method deletes the specified custom logo belonging to the authenticated user.
         * @summary Delete a custom user logo
         * @param {number} logoId The ID of the custom logo.
         * @param {number} userId The ID of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserLogo_2: async (logoId: number, userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'logoId' is not null or undefined
            assertParamExists('deleteUserLogo_2', 'logoId', logoId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('deleteUserLogo_2', 'userId', userId)
            const localVarPath = `/users/{user_id}/customlogos/{logo_id}`
                .replace(`{${"logo_id"}}`, encodeURIComponent(String(logoId !== undefined ? logoId : `-logo_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["delete"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["delete"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/customlogos/{logo_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns a single custom logo belonging to the authenticated user.
         * @summary Get a specific custom user logo
         * @param {number} logoId The ID of the custom logo.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificUserLogo: async (logoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'logoId' is not null or undefined
            assertParamExists('getSpecificUserLogo', 'logoId', logoId)
            const localVarPath = `/me/customlogos/{logo_id}`
                .replace(`{${"logo_id"}}`, encodeURIComponent(String(logoId !== undefined ? logoId : `-logo_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/customlogos/{logo_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns a single custom logo belonging to the authenticated user.
         * @summary Get a specific custom user logo
         * @param {number} logoId The ID of the custom logo.
         * @param {number} userId The ID of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificUserLogo_3: async (logoId: number, userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'logoId' is not null or undefined
            assertParamExists('getSpecificUserLogo_3', 'logoId', logoId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getSpecificUserLogo_3', 'userId', userId)
            const localVarPath = `/users/{user_id}/customlogos/{logo_id}`
                .replace(`{${"logo_id"}}`, encodeURIComponent(String(logoId !== undefined ? logoId : `-logo_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/customlogos/{logo_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every custom logo that belongs to the authenticated user or team owner.
         * @summary Get all the custom logos that belong to the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/customlogos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/customlogos',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every custom logo that belongs to the authenticated user or team owner.
         * @summary Get all the custom logos that belong to the user
         * @param {number} userId The ID of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserLogos: async (userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('listUserLogos', 'userId', userId)
            const localVarPath = `/users/{user_id}/customlogos`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/customlogos',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmbedPresetsCustomLogosApi - functional programming interface
 * @export
 */
export const EmbedPresetsCustomLogosApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmbedPresetsCustomLogosApiAxiosParamCreator(configuration)
    return {
        /**
         * This method adds a custom logo representing the authenticated user for display in the embedded player. Be sure to use this method in the context of the multi-step upload procedure described in our [Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails#uploading-a-thumbnail) guide. This method represents Step 2 of the procedure.
         * @summary Add a custom user logo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addUserLogo(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Picture>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addUserLogo(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method adds a custom logo representing the authenticated user for display in the embedded player. Be sure to use this method in the context of the multi-step upload procedure described in our [Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails#uploading-a-thumbnail) guide. This method represents Step 2 of the procedure.
         * @summary Add a custom user logo
         * @param {EmbedPresetsCustomLogosApiAddUserLogo0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addUserLogo_1(requestParameters: EmbedPresetsCustomLogosApiAddUserLogo0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Picture>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addUserLogo_1(requestParameters.userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method deletes the specified custom logo belonging to the authenticated user.
         * @summary Delete a custom user logo
         * @param {EmbedPresetsCustomLogosApiDeleteUserLogoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserLogo(requestParameters: EmbedPresetsCustomLogosApiDeleteUserLogoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserLogo(requestParameters.logoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method deletes the specified custom logo belonging to the authenticated user.
         * @summary Delete a custom user logo
         * @param {EmbedPresetsCustomLogosApiDeleteUserLogo0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserLogo_2(requestParameters: EmbedPresetsCustomLogosApiDeleteUserLogo0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserLogo_2(requestParameters.logoId, requestParameters.userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns a single custom logo belonging to the authenticated user.
         * @summary Get a specific custom user logo
         * @param {EmbedPresetsCustomLogosApiGetSpecificUserLogoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpecificUserLogo(requestParameters: EmbedPresetsCustomLogosApiGetSpecificUserLogoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Picture>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpecificUserLogo(requestParameters.logoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns a single custom logo belonging to the authenticated user.
         * @summary Get a specific custom user logo
         * @param {EmbedPresetsCustomLogosApiGetSpecificUserLogo0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpecificUserLogo_3(requestParameters: EmbedPresetsCustomLogosApiGetSpecificUserLogo0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Picture>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpecificUserLogo_3(requestParameters.logoId, requestParameters.userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every custom logo that belongs to the authenticated user or team owner.
         * @summary Get all the custom logos that belong to the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Picture>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every custom logo that belongs to the authenticated user or team owner.
         * @summary Get all the custom logos that belong to the user
         * @param {EmbedPresetsCustomLogosApiListUserLogosRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserLogos(requestParameters: EmbedPresetsCustomLogosApiListUserLogosRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Picture>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUserLogos(requestParameters.userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EmbedPresetsCustomLogosApi - factory interface
 * @export
 */
export const EmbedPresetsCustomLogosApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmbedPresetsCustomLogosApiFp(configuration)
    return {
        /**
         * This method adds a custom logo representing the authenticated user for display in the embedded player. Be sure to use this method in the context of the multi-step upload procedure described in our [Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails#uploading-a-thumbnail) guide. This method represents Step 2 of the procedure.
         * @summary Add a custom user logo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserLogo(options?: AxiosRequestConfig): AxiosPromise<Picture> {
            return localVarFp.addUserLogo(options).then((request) => request(axios, basePath));
        },
        /**
         * This method adds a custom logo representing the authenticated user for display in the embedded player. Be sure to use this method in the context of the multi-step upload procedure described in our [Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails#uploading-a-thumbnail) guide. This method represents Step 2 of the procedure.
         * @summary Add a custom user logo
         * @param {EmbedPresetsCustomLogosApiAddUserLogo0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserLogo_1(requestParameters: EmbedPresetsCustomLogosApiAddUserLogo0Request, options?: AxiosRequestConfig): AxiosPromise<Picture> {
            return localVarFp.addUserLogo_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method deletes the specified custom logo belonging to the authenticated user.
         * @summary Delete a custom user logo
         * @param {EmbedPresetsCustomLogosApiDeleteUserLogoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserLogo(requestParameters: EmbedPresetsCustomLogosApiDeleteUserLogoRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteUserLogo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method deletes the specified custom logo belonging to the authenticated user.
         * @summary Delete a custom user logo
         * @param {EmbedPresetsCustomLogosApiDeleteUserLogo0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserLogo_2(requestParameters: EmbedPresetsCustomLogosApiDeleteUserLogo0Request, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteUserLogo_2(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns a single custom logo belonging to the authenticated user.
         * @summary Get a specific custom user logo
         * @param {EmbedPresetsCustomLogosApiGetSpecificUserLogoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificUserLogo(requestParameters: EmbedPresetsCustomLogosApiGetSpecificUserLogoRequest, options?: AxiosRequestConfig): AxiosPromise<Picture> {
            return localVarFp.getSpecificUserLogo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns a single custom logo belonging to the authenticated user.
         * @summary Get a specific custom user logo
         * @param {EmbedPresetsCustomLogosApiGetSpecificUserLogo0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificUserLogo_3(requestParameters: EmbedPresetsCustomLogosApiGetSpecificUserLogo0Request, options?: AxiosRequestConfig): AxiosPromise<Picture> {
            return localVarFp.getSpecificUserLogo_3(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every custom logo that belongs to the authenticated user or team owner.
         * @summary Get all the custom logos that belong to the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(options?: AxiosRequestConfig): AxiosPromise<Array<Picture>> {
            return localVarFp.list(options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every custom logo that belongs to the authenticated user or team owner.
         * @summary Get all the custom logos that belong to the user
         * @param {EmbedPresetsCustomLogosApiListUserLogosRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserLogos(requestParameters: EmbedPresetsCustomLogosApiListUserLogosRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Picture>> {
            return localVarFp.listUserLogos(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addUserLogo_1 operation in EmbedPresetsCustomLogosApi.
 * @export
 * @interface EmbedPresetsCustomLogosApiAddUserLogo0Request
 */
export type EmbedPresetsCustomLogosApiAddUserLogo0Request = {
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof EmbedPresetsCustomLogosApiAddUserLogo0
    */
    readonly userId: number
    
}

/**
 * Request parameters for deleteUserLogo operation in EmbedPresetsCustomLogosApi.
 * @export
 * @interface EmbedPresetsCustomLogosApiDeleteUserLogoRequest
 */
export type EmbedPresetsCustomLogosApiDeleteUserLogoRequest = {
    
    /**
    * The ID of the custom logo.
    * @type {number}
    * @memberof EmbedPresetsCustomLogosApiDeleteUserLogo
    */
    readonly logoId: number
    
}

/**
 * Request parameters for deleteUserLogo_2 operation in EmbedPresetsCustomLogosApi.
 * @export
 * @interface EmbedPresetsCustomLogosApiDeleteUserLogo0Request
 */
export type EmbedPresetsCustomLogosApiDeleteUserLogo0Request = {
    
    /**
    * The ID of the custom logo.
    * @type {number}
    * @memberof EmbedPresetsCustomLogosApiDeleteUserLogo0
    */
    readonly logoId: number
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof EmbedPresetsCustomLogosApiDeleteUserLogo0
    */
    readonly userId: number
    
}

/**
 * Request parameters for getSpecificUserLogo operation in EmbedPresetsCustomLogosApi.
 * @export
 * @interface EmbedPresetsCustomLogosApiGetSpecificUserLogoRequest
 */
export type EmbedPresetsCustomLogosApiGetSpecificUserLogoRequest = {
    
    /**
    * The ID of the custom logo.
    * @type {number}
    * @memberof EmbedPresetsCustomLogosApiGetSpecificUserLogo
    */
    readonly logoId: number
    
}

/**
 * Request parameters for getSpecificUserLogo_3 operation in EmbedPresetsCustomLogosApi.
 * @export
 * @interface EmbedPresetsCustomLogosApiGetSpecificUserLogo0Request
 */
export type EmbedPresetsCustomLogosApiGetSpecificUserLogo0Request = {
    
    /**
    * The ID of the custom logo.
    * @type {number}
    * @memberof EmbedPresetsCustomLogosApiGetSpecificUserLogo0
    */
    readonly logoId: number
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof EmbedPresetsCustomLogosApiGetSpecificUserLogo0
    */
    readonly userId: number
    
}

/**
 * Request parameters for listUserLogos operation in EmbedPresetsCustomLogosApi.
 * @export
 * @interface EmbedPresetsCustomLogosApiListUserLogosRequest
 */
export type EmbedPresetsCustomLogosApiListUserLogosRequest = {
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof EmbedPresetsCustomLogosApiListUserLogos
    */
    readonly userId: number
    
}

/**
 * EmbedPresetsCustomLogosApiGenerated - object-oriented interface
 * @export
 * @class EmbedPresetsCustomLogosApiGenerated
 * @extends {BaseAPI}
 */
export class EmbedPresetsCustomLogosApiGenerated extends BaseAPI {
    /**
     * This method adds a custom logo representing the authenticated user for display in the embedded player. Be sure to use this method in the context of the multi-step upload procedure described in our [Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails#uploading-a-thumbnail) guide. This method represents Step 2 of the procedure.
     * @summary Add a custom user logo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmbedPresetsCustomLogosApiGenerated
     */
    public addUserLogo(options?: AxiosRequestConfig) {
        return EmbedPresetsCustomLogosApiFp(this.configuration).addUserLogo(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method adds a custom logo representing the authenticated user for display in the embedded player. Be sure to use this method in the context of the multi-step upload procedure described in our [Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails#uploading-a-thumbnail) guide. This method represents Step 2 of the procedure.
     * @summary Add a custom user logo
     * @param {EmbedPresetsCustomLogosApiAddUserLogo0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmbedPresetsCustomLogosApiGenerated
     */
    public addUserLogo_1(requestParameters: EmbedPresetsCustomLogosApiAddUserLogo0Request, options?: AxiosRequestConfig) {
        return EmbedPresetsCustomLogosApiFp(this.configuration).addUserLogo_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method deletes the specified custom logo belonging to the authenticated user.
     * @summary Delete a custom user logo
     * @param {EmbedPresetsCustomLogosApiDeleteUserLogoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmbedPresetsCustomLogosApiGenerated
     */
    public deleteUserLogo(requestParameters: EmbedPresetsCustomLogosApiDeleteUserLogoRequest, options?: AxiosRequestConfig) {
        return EmbedPresetsCustomLogosApiFp(this.configuration).deleteUserLogo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method deletes the specified custom logo belonging to the authenticated user.
     * @summary Delete a custom user logo
     * @param {EmbedPresetsCustomLogosApiDeleteUserLogo0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmbedPresetsCustomLogosApiGenerated
     */
    public deleteUserLogo_2(requestParameters: EmbedPresetsCustomLogosApiDeleteUserLogo0Request, options?: AxiosRequestConfig) {
        return EmbedPresetsCustomLogosApiFp(this.configuration).deleteUserLogo_2(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns a single custom logo belonging to the authenticated user.
     * @summary Get a specific custom user logo
     * @param {EmbedPresetsCustomLogosApiGetSpecificUserLogoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmbedPresetsCustomLogosApiGenerated
     */
    public getSpecificUserLogo(requestParameters: EmbedPresetsCustomLogosApiGetSpecificUserLogoRequest, options?: AxiosRequestConfig) {
        return EmbedPresetsCustomLogosApiFp(this.configuration).getSpecificUserLogo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns a single custom logo belonging to the authenticated user.
     * @summary Get a specific custom user logo
     * @param {EmbedPresetsCustomLogosApiGetSpecificUserLogo0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmbedPresetsCustomLogosApiGenerated
     */
    public getSpecificUserLogo_3(requestParameters: EmbedPresetsCustomLogosApiGetSpecificUserLogo0Request, options?: AxiosRequestConfig) {
        return EmbedPresetsCustomLogosApiFp(this.configuration).getSpecificUserLogo_3(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every custom logo that belongs to the authenticated user or team owner.
     * @summary Get all the custom logos that belong to the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmbedPresetsCustomLogosApiGenerated
     */
    public list(options?: AxiosRequestConfig) {
        return EmbedPresetsCustomLogosApiFp(this.configuration).list(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every custom logo that belongs to the authenticated user or team owner.
     * @summary Get all the custom logos that belong to the user
     * @param {EmbedPresetsCustomLogosApiListUserLogosRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmbedPresetsCustomLogosApiGenerated
     */
    public listUserLogos(requestParameters: EmbedPresetsCustomLogosApiListUserLogosRequest, options?: AxiosRequestConfig) {
        return EmbedPresetsCustomLogosApiFp(this.configuration).listUserLogos(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
