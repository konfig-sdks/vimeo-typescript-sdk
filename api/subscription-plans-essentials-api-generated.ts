/* tslint:disable */
/* eslint-disable */
/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

The version of the OpenAPI document: 3.4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * SubscriptionPlansEssentialsApi - axios parameter creator
 * @export
 */
export const SubscriptionPlansEssentialsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method returns the specified subscription plan.
         * @summary Get a single subscription plan
         * @param {'advanced' | 'business' | 'free' | 'live_premium' | 'plus' | 'pro' | 'pro_unlimited' | 'standard' | 'starter'} tier The type of subscription plan.  Option descriptions:  * &#x60;advanced&#x60; - The plan type is Vimeo Advanced.  * &#x60;business&#x60; - The plan type is Vimeo Business.  * &#x60;free&#x60; - The plan type is Vimeo Free.  * &#x60;live_premium&#x60; - The plan type is Vimeo Premium.  * &#x60;plus&#x60; - The plan type is Vimeo Plus.  * &#x60;pro&#x60; - The plan type is Vimeo Pro.  * &#x60;pro_unlimited&#x60; - The plan type is Vimeo Pro Unlimited.  * &#x60;standard&#x60; - The plan type is Vimeo Standard.  * &#x60;starter&#x60; - The plan type is Vimeo Starter. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plan: async (tier: 'advanced' | 'business' | 'free' | 'live_premium' | 'plus' | 'pro' | 'pro_unlimited' | 'standard' | 'starter', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tier' is not null or undefined
            assertParamExists('plan', 'tier', tier)
            const localVarPath = `/subscription_plans/{tier}`
                .replace(`{${"tier"}}`, encodeURIComponent(String(tier !== undefined ? tier : `-tier-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/subscription_plans/{tier}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SubscriptionPlansEssentialsApi - functional programming interface
 * @export
 */
export const SubscriptionPlansEssentialsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SubscriptionPlansEssentialsApiAxiosParamCreator(configuration)
    return {
        /**
         * This method returns the specified subscription plan.
         * @summary Get a single subscription plan
         * @param {SubscriptionPlansEssentialsApiPlanRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async plan(requestParameters: SubscriptionPlansEssentialsApiPlanRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.plan(requestParameters.tier, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SubscriptionPlansEssentialsApi - factory interface
 * @export
 */
export const SubscriptionPlansEssentialsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SubscriptionPlansEssentialsApiFp(configuration)
    return {
        /**
         * This method returns the specified subscription plan.
         * @summary Get a single subscription plan
         * @param {SubscriptionPlansEssentialsApiPlanRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plan(requestParameters: SubscriptionPlansEssentialsApiPlanRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.plan(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for plan operation in SubscriptionPlansEssentialsApi.
 * @export
 * @interface SubscriptionPlansEssentialsApiPlanRequest
 */
export type SubscriptionPlansEssentialsApiPlanRequest = {
    
    /**
    * The type of subscription plan.  Option descriptions:  * `advanced` - The plan type is Vimeo Advanced.  * `business` - The plan type is Vimeo Business.  * `free` - The plan type is Vimeo Free.  * `live_premium` - The plan type is Vimeo Premium.  * `plus` - The plan type is Vimeo Plus.  * `pro` - The plan type is Vimeo Pro.  * `pro_unlimited` - The plan type is Vimeo Pro Unlimited.  * `standard` - The plan type is Vimeo Standard.  * `starter` - The plan type is Vimeo Starter. 
    * @type {'advanced' | 'business' | 'free' | 'live_premium' | 'plus' | 'pro' | 'pro_unlimited' | 'standard' | 'starter'}
    * @memberof SubscriptionPlansEssentialsApiPlan
    */
    readonly tier: 'advanced' | 'business' | 'free' | 'live_premium' | 'plus' | 'pro' | 'pro_unlimited' | 'standard' | 'starter'
    
}

/**
 * SubscriptionPlansEssentialsApiGenerated - object-oriented interface
 * @export
 * @class SubscriptionPlansEssentialsApiGenerated
 * @extends {BaseAPI}
 */
export class SubscriptionPlansEssentialsApiGenerated extends BaseAPI {
    /**
     * This method returns the specified subscription plan.
     * @summary Get a single subscription plan
     * @param {SubscriptionPlansEssentialsApiPlanRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionPlansEssentialsApiGenerated
     */
    public plan(requestParameters: SubscriptionPlansEssentialsApiPlanRequest, options?: AxiosRequestConfig) {
        return SubscriptionPlansEssentialsApiFp(this.configuration).plan(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
