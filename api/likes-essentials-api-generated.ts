/* tslint:disable */
/* eslint-disable */
/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

The version of the OpenAPI document: 3.4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { LegacyError } from '../models';
// @ts-ignore
import { User } from '../models';
// @ts-ignore
import { Video } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * LikesEssentialsApi - axios parameter creator
 * @export
 */
export const LikesEssentialsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method checks if the authenticated user has liked the specified video.
         * @summary Check if the user has liked a video
         * @param {number} videoId The ID of the video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkUserLikedVideo: async (videoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('checkUserLikedVideo', 'videoId', videoId)
            const localVarPath = `/me/likes/{video_id}`
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/likes/{video_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method checks if the authenticated user has liked the specified video.
         * @summary Check if the user has liked a video
         * @param {number} userId The ID of the user.
         * @param {number} videoId The ID of the video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkVideoLikedByUser: async (userId: number, videoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('checkVideoLikedByUser', 'userId', userId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('checkVideoLikedByUser', 'videoId', videoId)
            const localVarPath = `/users/{user_id}/likes/{video_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/likes/{video_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every user who has liked the specified video on an On Demand page.
         * @summary Get all the users who have liked a video on an On Demand page
         * @param {number} ondemandId The ID of the On Demand page.
         * @param {'asc' | 'desc'} [direction] The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order. 
         * @param {'extra' | 'main' | 'trailer'} [filter] The attribute by which to filter the results.  Option descriptions:  * &#x60;extra&#x60; - Consider extra content only.  * &#x60;main&#x60; - Consider main content only.  * &#x60;trailer&#x60; - Consider trailer content only. 
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {'alphabetical' | 'date'} [sort] The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by join date. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUserLikes: async (ondemandId: number, direction?: 'asc' | 'desc', filter?: 'extra' | 'main' | 'trailer', page?: number, perPage?: number, sort?: 'alphabetical' | 'date', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ondemandId' is not null or undefined
            assertParamExists('getAllUserLikes', 'ondemandId', ondemandId)
            const localVarPath = `/ondemand/pages/{ondemand_id}/likes`
                .replace(`{${"ondemand_id"}}`, encodeURIComponent(String(ondemandId !== undefined ? ondemandId : `-ondemand_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ondemand/pages/{ondemand_id}/likes',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every video that the authenticated user has liked.
         * @summary Get all the videos that a user has liked
         * @param {'embeddable'} [filter] The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Return embeddable videos. 
         * @param {boolean} [filterEmbeddable] Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;.
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {string} [query] The search query to use to filter the results.
         * @param {'alphabetical' | 'comments' | 'date' | 'duration' | 'likes' | 'plays'} [sort] The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by creation date.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;plays&#x60; - Sort the results by number of plays. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserLikedVideos: async (filter?: 'embeddable', filterEmbeddable?: boolean, page?: number, perPage?: number, query?: string, sort?: 'alphabetical' | 'comments' | 'date' | 'duration' | 'likes' | 'plays', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/likes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (filterEmbeddable !== undefined) {
                localVarQueryParameter['filter_embeddable'] = filterEmbeddable;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/likes',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every user who has liked the specified video.
         * @summary Get all the users who have liked a video
         * @param {number} videoId The ID of the video.
         * @param {'asc' | 'desc'} [direction] The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order. 
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {'alphabetical' | 'date'} [sort] The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by join date. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserLikes: async (videoId: number, direction?: 'asc' | 'desc', page?: number, perPage?: number, sort?: 'alphabetical' | 'date', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('getUserLikes', 'videoId', videoId)
            const localVarPath = `/videos/{video_id}/likes`
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/videos/{video_id}/likes',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every user who has liked the specified video.
         * @summary Get all the users who have liked a video
         * @param {number} channelId The ID of the channel.
         * @param {number} videoId The ID of the video.
         * @param {'asc' | 'desc'} [direction] The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order. 
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {'alphabetical' | 'date'} [sort] The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by join date. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersWhoLikedVideo: async (channelId: number, videoId: number, direction?: 'asc' | 'desc', page?: number, perPage?: number, sort?: 'alphabetical' | 'date', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('getUsersWhoLikedVideo', 'channelId', channelId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('getUsersWhoLikedVideo', 'videoId', videoId)
            const localVarPath = `/channels/{channel_id}/videos/{video_id}/likes`
                .replace(`{${"channel_id"}}`, encodeURIComponent(String(channelId !== undefined ? channelId : `-channel_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/channels/{channel_id}/videos/{video_id}/likes',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method causes the authenticated user to like the specified video. The user can\'t like their own video.
         * @summary Cause the user to like a video
         * @param {number} videoId The ID of the video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        likeVideo: async (videoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('likeVideo', 'videoId', videoId)
            const localVarPath = `/me/likes/{video_id}`
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["interact"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["interact"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/likes/{video_id}',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every video that the authenticated user has liked.
         * @summary Get all the videos that a user has liked
         * @param {number} userId The ID of the user.
         * @param {'embeddable'} [filter] The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Return embeddable videos. 
         * @param {boolean} [filterEmbeddable] Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;.
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {string} [query] The search query to use to filter the results.
         * @param {'alphabetical' | 'comments' | 'date' | 'duration' | 'likes' | 'plays'} [sort] The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by creation date.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;plays&#x60; - Sort the results by number of plays. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        likes: async (userId: number, filter?: 'embeddable', filterEmbeddable?: boolean, page?: number, perPage?: number, query?: string, sort?: 'alphabetical' | 'comments' | 'date' | 'duration' | 'likes' | 'plays', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('likes', 'userId', userId)
            const localVarPath = `/users/{user_id}/likes`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (filterEmbeddable !== undefined) {
                localVarQueryParameter['filter_embeddable'] = filterEmbeddable;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/likes',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method causes the authenticated user to unlike the specified video.
         * @summary Cause a user to unlike a video
         * @param {number} videoId The ID of the video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unlikeVideo: async (videoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('unlikeVideo', 'videoId', videoId)
            const localVarPath = `/me/likes/{video_id}`
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["interact"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["interact"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/likes/{video_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method causes the authenticated user to like the specified video. The user can\'t like their own video.
         * @summary Cause the user to like a video
         * @param {number} userId The ID of the user.
         * @param {number} videoId The ID of the video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        video: async (userId: number, videoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('video', 'userId', userId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('video', 'videoId', videoId)
            const localVarPath = `/users/{user_id}/likes/{video_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["interact"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["interact"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/likes/{video_id}',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method causes the authenticated user to unlike the specified video.
         * @summary Cause a user to unlike a video
         * @param {number} userId The ID of the user.
         * @param {number} videoId The ID of the video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        video_1: async (userId: number, videoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('video_1', 'userId', userId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('video_1', 'videoId', videoId)
            const localVarPath = `/users/{user_id}/likes/{video_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["interact"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["interact"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/likes/{video_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LikesEssentialsApi - functional programming interface
 * @export
 */
export const LikesEssentialsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LikesEssentialsApiAxiosParamCreator(configuration)
    return {
        /**
         * This method checks if the authenticated user has liked the specified video.
         * @summary Check if the user has liked a video
         * @param {LikesEssentialsApiCheckUserLikedVideoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkUserLikedVideo(requestParameters: LikesEssentialsApiCheckUserLikedVideoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkUserLikedVideo(requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method checks if the authenticated user has liked the specified video.
         * @summary Check if the user has liked a video
         * @param {LikesEssentialsApiCheckVideoLikedByUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkVideoLikedByUser(requestParameters: LikesEssentialsApiCheckVideoLikedByUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkVideoLikedByUser(requestParameters.userId, requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every user who has liked the specified video on an On Demand page.
         * @summary Get all the users who have liked a video on an On Demand page
         * @param {LikesEssentialsApiGetAllUserLikesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllUserLikes(requestParameters: LikesEssentialsApiGetAllUserLikesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllUserLikes(requestParameters.ondemandId, requestParameters.direction, requestParameters.filter, requestParameters.page, requestParameters.perPage, requestParameters.sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every video that the authenticated user has liked.
         * @summary Get all the videos that a user has liked
         * @param {LikesEssentialsApiGetUserLikedVideosRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserLikedVideos(requestParameters: LikesEssentialsApiGetUserLikedVideosRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Video>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserLikedVideos(requestParameters.filter, requestParameters.filterEmbeddable, requestParameters.page, requestParameters.perPage, requestParameters.query, requestParameters.sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every user who has liked the specified video.
         * @summary Get all the users who have liked a video
         * @param {LikesEssentialsApiGetUserLikesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserLikes(requestParameters: LikesEssentialsApiGetUserLikesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserLikes(requestParameters.videoId, requestParameters.direction, requestParameters.page, requestParameters.perPage, requestParameters.sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every user who has liked the specified video.
         * @summary Get all the users who have liked a video
         * @param {LikesEssentialsApiGetUsersWhoLikedVideoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersWhoLikedVideo(requestParameters: LikesEssentialsApiGetUsersWhoLikedVideoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsersWhoLikedVideo(requestParameters.channelId, requestParameters.videoId, requestParameters.direction, requestParameters.page, requestParameters.perPage, requestParameters.sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method causes the authenticated user to like the specified video. The user can\'t like their own video.
         * @summary Cause the user to like a video
         * @param {LikesEssentialsApiLikeVideoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async likeVideo(requestParameters: LikesEssentialsApiLikeVideoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.likeVideo(requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every video that the authenticated user has liked.
         * @summary Get all the videos that a user has liked
         * @param {LikesEssentialsApiLikesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async likes(requestParameters: LikesEssentialsApiLikesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Video>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.likes(requestParameters.userId, requestParameters.filter, requestParameters.filterEmbeddable, requestParameters.page, requestParameters.perPage, requestParameters.query, requestParameters.sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method causes the authenticated user to unlike the specified video.
         * @summary Cause a user to unlike a video
         * @param {LikesEssentialsApiUnlikeVideoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unlikeVideo(requestParameters: LikesEssentialsApiUnlikeVideoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unlikeVideo(requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method causes the authenticated user to like the specified video. The user can\'t like their own video.
         * @summary Cause the user to like a video
         * @param {LikesEssentialsApiVideoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async video(requestParameters: LikesEssentialsApiVideoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.video(requestParameters.userId, requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method causes the authenticated user to unlike the specified video.
         * @summary Cause a user to unlike a video
         * @param {LikesEssentialsApiVideo0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async video_1(requestParameters: LikesEssentialsApiVideo0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.video_1(requestParameters.userId, requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LikesEssentialsApi - factory interface
 * @export
 */
export const LikesEssentialsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LikesEssentialsApiFp(configuration)
    return {
        /**
         * This method checks if the authenticated user has liked the specified video.
         * @summary Check if the user has liked a video
         * @param {LikesEssentialsApiCheckUserLikedVideoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkUserLikedVideo(requestParameters: LikesEssentialsApiCheckUserLikedVideoRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.checkUserLikedVideo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method checks if the authenticated user has liked the specified video.
         * @summary Check if the user has liked a video
         * @param {LikesEssentialsApiCheckVideoLikedByUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkVideoLikedByUser(requestParameters: LikesEssentialsApiCheckVideoLikedByUserRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.checkVideoLikedByUser(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every user who has liked the specified video on an On Demand page.
         * @summary Get all the users who have liked a video on an On Demand page
         * @param {LikesEssentialsApiGetAllUserLikesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUserLikes(requestParameters: LikesEssentialsApiGetAllUserLikesRequest, options?: AxiosRequestConfig): AxiosPromise<Array<User>> {
            return localVarFp.getAllUserLikes(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every video that the authenticated user has liked.
         * @summary Get all the videos that a user has liked
         * @param {LikesEssentialsApiGetUserLikedVideosRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserLikedVideos(requestParameters: LikesEssentialsApiGetUserLikedVideosRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<Video>> {
            return localVarFp.getUserLikedVideos(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every user who has liked the specified video.
         * @summary Get all the users who have liked a video
         * @param {LikesEssentialsApiGetUserLikesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserLikes(requestParameters: LikesEssentialsApiGetUserLikesRequest, options?: AxiosRequestConfig): AxiosPromise<Array<User>> {
            return localVarFp.getUserLikes(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every user who has liked the specified video.
         * @summary Get all the users who have liked a video
         * @param {LikesEssentialsApiGetUsersWhoLikedVideoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersWhoLikedVideo(requestParameters: LikesEssentialsApiGetUsersWhoLikedVideoRequest, options?: AxiosRequestConfig): AxiosPromise<Array<User>> {
            return localVarFp.getUsersWhoLikedVideo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method causes the authenticated user to like the specified video. The user can\'t like their own video.
         * @summary Cause the user to like a video
         * @param {LikesEssentialsApiLikeVideoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        likeVideo(requestParameters: LikesEssentialsApiLikeVideoRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.likeVideo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every video that the authenticated user has liked.
         * @summary Get all the videos that a user has liked
         * @param {LikesEssentialsApiLikesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        likes(requestParameters: LikesEssentialsApiLikesRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Video>> {
            return localVarFp.likes(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method causes the authenticated user to unlike the specified video.
         * @summary Cause a user to unlike a video
         * @param {LikesEssentialsApiUnlikeVideoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unlikeVideo(requestParameters: LikesEssentialsApiUnlikeVideoRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.unlikeVideo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method causes the authenticated user to like the specified video. The user can\'t like their own video.
         * @summary Cause the user to like a video
         * @param {LikesEssentialsApiVideoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        video(requestParameters: LikesEssentialsApiVideoRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.video(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method causes the authenticated user to unlike the specified video.
         * @summary Cause a user to unlike a video
         * @param {LikesEssentialsApiVideo0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        video_1(requestParameters: LikesEssentialsApiVideo0Request, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.video_1(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for checkUserLikedVideo operation in LikesEssentialsApi.
 * @export
 * @interface LikesEssentialsApiCheckUserLikedVideoRequest
 */
export type LikesEssentialsApiCheckUserLikedVideoRequest = {
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof LikesEssentialsApiCheckUserLikedVideo
    */
    readonly videoId: number
    
}

/**
 * Request parameters for checkVideoLikedByUser operation in LikesEssentialsApi.
 * @export
 * @interface LikesEssentialsApiCheckVideoLikedByUserRequest
 */
export type LikesEssentialsApiCheckVideoLikedByUserRequest = {
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof LikesEssentialsApiCheckVideoLikedByUser
    */
    readonly userId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof LikesEssentialsApiCheckVideoLikedByUser
    */
    readonly videoId: number
    
}

/**
 * Request parameters for getAllUserLikes operation in LikesEssentialsApi.
 * @export
 * @interface LikesEssentialsApiGetAllUserLikesRequest
 */
export type LikesEssentialsApiGetAllUserLikesRequest = {
    
    /**
    * The ID of the On Demand page.
    * @type {number}
    * @memberof LikesEssentialsApiGetAllUserLikes
    */
    readonly ondemandId: number
    
    /**
    * The sort direction of the results.  Option descriptions:  * `asc` - Sort the results in ascending order.  * `desc` - Sort the results in descending order. 
    * @type {'asc' | 'desc'}
    * @memberof LikesEssentialsApiGetAllUserLikes
    */
    readonly direction?: 'asc' | 'desc'
    
    /**
    * The attribute by which to filter the results.  Option descriptions:  * `extra` - Consider extra content only.  * `main` - Consider main content only.  * `trailer` - Consider trailer content only. 
    * @type {'extra' | 'main' | 'trailer'}
    * @memberof LikesEssentialsApiGetAllUserLikes
    */
    readonly filter?: 'extra' | 'main' | 'trailer'
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof LikesEssentialsApiGetAllUserLikes
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof LikesEssentialsApiGetAllUserLikes
    */
    readonly perPage?: number
    
    /**
    * The way to sort the results.  Option descriptions:  * `alphabetical` - Sort the results alphabetically.  * `date` - Sort the results by join date. 
    * @type {'alphabetical' | 'date'}
    * @memberof LikesEssentialsApiGetAllUserLikes
    */
    readonly sort?: 'alphabetical' | 'date'
    
}

/**
 * Request parameters for getUserLikedVideos operation in LikesEssentialsApi.
 * @export
 * @interface LikesEssentialsApiGetUserLikedVideosRequest
 */
export type LikesEssentialsApiGetUserLikedVideosRequest = {
    
    /**
    * The attribute by which to filter the results.  Option descriptions:  * `embeddable` - Return embeddable videos. 
    * @type {'embeddable'}
    * @memberof LikesEssentialsApiGetUserLikedVideos
    */
    readonly filter?: 'embeddable'
    
    /**
    * Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). This parameter is required only when **filter** is `embeddable`.
    * @type {boolean}
    * @memberof LikesEssentialsApiGetUserLikedVideos
    */
    readonly filterEmbeddable?: boolean
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof LikesEssentialsApiGetUserLikedVideos
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof LikesEssentialsApiGetUserLikedVideos
    */
    readonly perPage?: number
    
    /**
    * The search query to use to filter the results.
    * @type {string}
    * @memberof LikesEssentialsApiGetUserLikedVideos
    */
    readonly query?: string
    
    /**
    * The way to sort the results.  Option descriptions:  * `alphabetical` - Sort the results alphabetically.  * `comments` - Sort the results by number of comments.  * `date` - Sort the results by creation date.  * `duration` - Sort the results by duration.  * `likes` - Sort the results by number of likes.  * `plays` - Sort the results by number of plays. 
    * @type {'alphabetical' | 'comments' | 'date' | 'duration' | 'likes' | 'plays'}
    * @memberof LikesEssentialsApiGetUserLikedVideos
    */
    readonly sort?: 'alphabetical' | 'comments' | 'date' | 'duration' | 'likes' | 'plays'
    
}

/**
 * Request parameters for getUserLikes operation in LikesEssentialsApi.
 * @export
 * @interface LikesEssentialsApiGetUserLikesRequest
 */
export type LikesEssentialsApiGetUserLikesRequest = {
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof LikesEssentialsApiGetUserLikes
    */
    readonly videoId: number
    
    /**
    * The sort direction of the results.  Option descriptions:  * `asc` - Sort the results in ascending order.  * `desc` - Sort the results in descending order. 
    * @type {'asc' | 'desc'}
    * @memberof LikesEssentialsApiGetUserLikes
    */
    readonly direction?: 'asc' | 'desc'
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof LikesEssentialsApiGetUserLikes
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof LikesEssentialsApiGetUserLikes
    */
    readonly perPage?: number
    
    /**
    * The way to sort the results.  Option descriptions:  * `alphabetical` - Sort the results alphabetically.  * `date` - Sort the results by join date. 
    * @type {'alphabetical' | 'date'}
    * @memberof LikesEssentialsApiGetUserLikes
    */
    readonly sort?: 'alphabetical' | 'date'
    
}

/**
 * Request parameters for getUsersWhoLikedVideo operation in LikesEssentialsApi.
 * @export
 * @interface LikesEssentialsApiGetUsersWhoLikedVideoRequest
 */
export type LikesEssentialsApiGetUsersWhoLikedVideoRequest = {
    
    /**
    * The ID of the channel.
    * @type {number}
    * @memberof LikesEssentialsApiGetUsersWhoLikedVideo
    */
    readonly channelId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof LikesEssentialsApiGetUsersWhoLikedVideo
    */
    readonly videoId: number
    
    /**
    * The sort direction of the results.  Option descriptions:  * `asc` - Sort the results in ascending order.  * `desc` - Sort the results in descending order. 
    * @type {'asc' | 'desc'}
    * @memberof LikesEssentialsApiGetUsersWhoLikedVideo
    */
    readonly direction?: 'asc' | 'desc'
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof LikesEssentialsApiGetUsersWhoLikedVideo
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof LikesEssentialsApiGetUsersWhoLikedVideo
    */
    readonly perPage?: number
    
    /**
    * The way to sort the results.  Option descriptions:  * `alphabetical` - Sort the results alphabetically.  * `date` - Sort the results by join date. 
    * @type {'alphabetical' | 'date'}
    * @memberof LikesEssentialsApiGetUsersWhoLikedVideo
    */
    readonly sort?: 'alphabetical' | 'date'
    
}

/**
 * Request parameters for likeVideo operation in LikesEssentialsApi.
 * @export
 * @interface LikesEssentialsApiLikeVideoRequest
 */
export type LikesEssentialsApiLikeVideoRequest = {
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof LikesEssentialsApiLikeVideo
    */
    readonly videoId: number
    
}

/**
 * Request parameters for likes operation in LikesEssentialsApi.
 * @export
 * @interface LikesEssentialsApiLikesRequest
 */
export type LikesEssentialsApiLikesRequest = {
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof LikesEssentialsApiLikes
    */
    readonly userId: number
    
    /**
    * The attribute by which to filter the results.  Option descriptions:  * `embeddable` - Return embeddable videos. 
    * @type {'embeddable'}
    * @memberof LikesEssentialsApiLikes
    */
    readonly filter?: 'embeddable'
    
    /**
    * Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). This parameter is required only when **filter** is `embeddable`.
    * @type {boolean}
    * @memberof LikesEssentialsApiLikes
    */
    readonly filterEmbeddable?: boolean
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof LikesEssentialsApiLikes
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof LikesEssentialsApiLikes
    */
    readonly perPage?: number
    
    /**
    * The search query to use to filter the results.
    * @type {string}
    * @memberof LikesEssentialsApiLikes
    */
    readonly query?: string
    
    /**
    * The way to sort the results.  Option descriptions:  * `alphabetical` - Sort the results alphabetically.  * `comments` - Sort the results by number of comments.  * `date` - Sort the results by creation date.  * `duration` - Sort the results by duration.  * `likes` - Sort the results by number of likes.  * `plays` - Sort the results by number of plays. 
    * @type {'alphabetical' | 'comments' | 'date' | 'duration' | 'likes' | 'plays'}
    * @memberof LikesEssentialsApiLikes
    */
    readonly sort?: 'alphabetical' | 'comments' | 'date' | 'duration' | 'likes' | 'plays'
    
}

/**
 * Request parameters for unlikeVideo operation in LikesEssentialsApi.
 * @export
 * @interface LikesEssentialsApiUnlikeVideoRequest
 */
export type LikesEssentialsApiUnlikeVideoRequest = {
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof LikesEssentialsApiUnlikeVideo
    */
    readonly videoId: number
    
}

/**
 * Request parameters for video operation in LikesEssentialsApi.
 * @export
 * @interface LikesEssentialsApiVideoRequest
 */
export type LikesEssentialsApiVideoRequest = {
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof LikesEssentialsApiVideo
    */
    readonly userId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof LikesEssentialsApiVideo
    */
    readonly videoId: number
    
}

/**
 * Request parameters for video_1 operation in LikesEssentialsApi.
 * @export
 * @interface LikesEssentialsApiVideo0Request
 */
export type LikesEssentialsApiVideo0Request = {
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof LikesEssentialsApiVideo0
    */
    readonly userId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof LikesEssentialsApiVideo0
    */
    readonly videoId: number
    
}

/**
 * LikesEssentialsApiGenerated - object-oriented interface
 * @export
 * @class LikesEssentialsApiGenerated
 * @extends {BaseAPI}
 */
export class LikesEssentialsApiGenerated extends BaseAPI {
    /**
     * This method checks if the authenticated user has liked the specified video.
     * @summary Check if the user has liked a video
     * @param {LikesEssentialsApiCheckUserLikedVideoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LikesEssentialsApiGenerated
     */
    public checkUserLikedVideo(requestParameters: LikesEssentialsApiCheckUserLikedVideoRequest, options?: AxiosRequestConfig) {
        return LikesEssentialsApiFp(this.configuration).checkUserLikedVideo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method checks if the authenticated user has liked the specified video.
     * @summary Check if the user has liked a video
     * @param {LikesEssentialsApiCheckVideoLikedByUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LikesEssentialsApiGenerated
     */
    public checkVideoLikedByUser(requestParameters: LikesEssentialsApiCheckVideoLikedByUserRequest, options?: AxiosRequestConfig) {
        return LikesEssentialsApiFp(this.configuration).checkVideoLikedByUser(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every user who has liked the specified video on an On Demand page.
     * @summary Get all the users who have liked a video on an On Demand page
     * @param {LikesEssentialsApiGetAllUserLikesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LikesEssentialsApiGenerated
     */
    public getAllUserLikes(requestParameters: LikesEssentialsApiGetAllUserLikesRequest, options?: AxiosRequestConfig) {
        return LikesEssentialsApiFp(this.configuration).getAllUserLikes(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every video that the authenticated user has liked.
     * @summary Get all the videos that a user has liked
     * @param {LikesEssentialsApiGetUserLikedVideosRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LikesEssentialsApiGenerated
     */
    public getUserLikedVideos(requestParameters: LikesEssentialsApiGetUserLikedVideosRequest = {}, options?: AxiosRequestConfig) {
        return LikesEssentialsApiFp(this.configuration).getUserLikedVideos(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every user who has liked the specified video.
     * @summary Get all the users who have liked a video
     * @param {LikesEssentialsApiGetUserLikesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LikesEssentialsApiGenerated
     */
    public getUserLikes(requestParameters: LikesEssentialsApiGetUserLikesRequest, options?: AxiosRequestConfig) {
        return LikesEssentialsApiFp(this.configuration).getUserLikes(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every user who has liked the specified video.
     * @summary Get all the users who have liked a video
     * @param {LikesEssentialsApiGetUsersWhoLikedVideoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LikesEssentialsApiGenerated
     */
    public getUsersWhoLikedVideo(requestParameters: LikesEssentialsApiGetUsersWhoLikedVideoRequest, options?: AxiosRequestConfig) {
        return LikesEssentialsApiFp(this.configuration).getUsersWhoLikedVideo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method causes the authenticated user to like the specified video. The user can\'t like their own video.
     * @summary Cause the user to like a video
     * @param {LikesEssentialsApiLikeVideoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LikesEssentialsApiGenerated
     */
    public likeVideo(requestParameters: LikesEssentialsApiLikeVideoRequest, options?: AxiosRequestConfig) {
        return LikesEssentialsApiFp(this.configuration).likeVideo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every video that the authenticated user has liked.
     * @summary Get all the videos that a user has liked
     * @param {LikesEssentialsApiLikesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LikesEssentialsApiGenerated
     */
    public likes(requestParameters: LikesEssentialsApiLikesRequest, options?: AxiosRequestConfig) {
        return LikesEssentialsApiFp(this.configuration).likes(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method causes the authenticated user to unlike the specified video.
     * @summary Cause a user to unlike a video
     * @param {LikesEssentialsApiUnlikeVideoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LikesEssentialsApiGenerated
     */
    public unlikeVideo(requestParameters: LikesEssentialsApiUnlikeVideoRequest, options?: AxiosRequestConfig) {
        return LikesEssentialsApiFp(this.configuration).unlikeVideo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method causes the authenticated user to like the specified video. The user can\'t like their own video.
     * @summary Cause the user to like a video
     * @param {LikesEssentialsApiVideoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LikesEssentialsApiGenerated
     */
    public video(requestParameters: LikesEssentialsApiVideoRequest, options?: AxiosRequestConfig) {
        return LikesEssentialsApiFp(this.configuration).video(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method causes the authenticated user to unlike the specified video.
     * @summary Cause a user to unlike a video
     * @param {LikesEssentialsApiVideo0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LikesEssentialsApiGenerated
     */
    public video_1(requestParameters: LikesEssentialsApiVideo0Request, options?: AxiosRequestConfig) {
        return LikesEssentialsApiFp(this.configuration).video_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
