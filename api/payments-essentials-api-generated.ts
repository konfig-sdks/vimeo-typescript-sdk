/* tslint:disable */
/* eslint-disable */
/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

The version of the OpenAPI document: 3.4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ModelError } from '../models';
// @ts-ignore
import { PaymentMethod } from '../models';
// @ts-ignore
import { PaymentsEssentialsListPaymentMethodsRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PaymentsEssentialsApi - axios parameter creator
 * @export
 */
export const PaymentsEssentialsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method returns information about the specified Vimeo payments service payment method.
         * @summary Get information about a payments service payment method
         * @param {string} paymentMethodId The ID of the payment method.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentMethodInfo: async (paymentMethodId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'paymentMethodId' is not null or undefined
            assertParamExists('getPaymentMethodInfo', 'paymentMethodId', paymentMethodId)
            const localVarPath = `/me/payment_methods/{payment_method_id}`
                .replace(`{${"payment_method_id"}}`, encodeURIComponent(String(paymentMethodId !== undefined ? paymentMethodId : `-payment_method_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["public"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["public"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/payment_methods/{payment_method_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns a list of all Vimeo payments service payment methods that are available to the authenticated user.
         * @summary Get a list of all payments service payment methods
         * @param {number} userId The ID of the user.
         * @param {string} [cardmemberName] The name of the card member.
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {boolean} [showDisabled] Whether to return disabled payment methods.
         * @param {PaymentsEssentialsListPaymentMethodsRequest} [paymentsEssentialsListPaymentMethodsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPaymentMethods: async (userId: number, cardmemberName?: string, page?: number, perPage?: number, showDisabled?: boolean, paymentsEssentialsListPaymentMethodsRequest?: PaymentsEssentialsListPaymentMethodsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('listPaymentMethods', 'userId', userId)
            const localVarPath = `/me/payment_methods`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            if (cardmemberName !== undefined) {
                localVarQueryParameter['cardmember_name'] = cardmemberName;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (showDisabled !== undefined) {
                localVarQueryParameter['show_disabled'] = showDisabled;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: paymentsEssentialsListPaymentMethodsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/payment_methods',
                httpMethod: 'GET'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(paymentsEssentialsListPaymentMethodsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PaymentsEssentialsApi - functional programming interface
 * @export
 */
export const PaymentsEssentialsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PaymentsEssentialsApiAxiosParamCreator(configuration)
    return {
        /**
         * This method returns information about the specified Vimeo payments service payment method.
         * @summary Get information about a payments service payment method
         * @param {PaymentsEssentialsApiGetPaymentMethodInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPaymentMethodInfo(requestParameters: PaymentsEssentialsApiGetPaymentMethodInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentMethod>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPaymentMethodInfo(requestParameters.paymentMethodId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns a list of all Vimeo payments service payment methods that are available to the authenticated user.
         * @summary Get a list of all payments service payment methods
         * @param {PaymentsEssentialsApiListPaymentMethodsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPaymentMethods(requestParameters: PaymentsEssentialsApiListPaymentMethodsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PaymentMethod>>> {
            const paymentsEssentialsListPaymentMethodsRequest: PaymentsEssentialsListPaymentMethodsRequest = {
                type: requestParameters.type
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPaymentMethods(requestParameters.userId, requestParameters.cardmemberName, requestParameters.page, requestParameters.perPage, requestParameters.showDisabled, paymentsEssentialsListPaymentMethodsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PaymentsEssentialsApi - factory interface
 * @export
 */
export const PaymentsEssentialsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PaymentsEssentialsApiFp(configuration)
    return {
        /**
         * This method returns information about the specified Vimeo payments service payment method.
         * @summary Get information about a payments service payment method
         * @param {PaymentsEssentialsApiGetPaymentMethodInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentMethodInfo(requestParameters: PaymentsEssentialsApiGetPaymentMethodInfoRequest, options?: AxiosRequestConfig): AxiosPromise<PaymentMethod> {
            return localVarFp.getPaymentMethodInfo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns a list of all Vimeo payments service payment methods that are available to the authenticated user.
         * @summary Get a list of all payments service payment methods
         * @param {PaymentsEssentialsApiListPaymentMethodsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPaymentMethods(requestParameters: PaymentsEssentialsApiListPaymentMethodsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<PaymentMethod>> {
            return localVarFp.listPaymentMethods(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getPaymentMethodInfo operation in PaymentsEssentialsApi.
 * @export
 * @interface PaymentsEssentialsApiGetPaymentMethodInfoRequest
 */
export type PaymentsEssentialsApiGetPaymentMethodInfoRequest = {
    
    /**
    * The ID of the payment method.
    * @type {string}
    * @memberof PaymentsEssentialsApiGetPaymentMethodInfo
    */
    readonly paymentMethodId: string
    
}

/**
 * Request parameters for listPaymentMethods operation in PaymentsEssentialsApi.
 * @export
 * @interface PaymentsEssentialsApiListPaymentMethodsRequest
 */
export type PaymentsEssentialsApiListPaymentMethodsRequest = {
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof PaymentsEssentialsApiListPaymentMethods
    */
    readonly userId: number
    
    /**
    * The name of the card member.
    * @type {string}
    * @memberof PaymentsEssentialsApiListPaymentMethods
    */
    readonly cardmemberName?: string
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof PaymentsEssentialsApiListPaymentMethods
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof PaymentsEssentialsApiListPaymentMethods
    */
    readonly perPage?: number
    
    /**
    * Whether to return disabled payment methods.
    * @type {boolean}
    * @memberof PaymentsEssentialsApiListPaymentMethods
    */
    readonly showDisabled?: boolean
    
} & PaymentsEssentialsListPaymentMethodsRequest

/**
 * PaymentsEssentialsApiGenerated - object-oriented interface
 * @export
 * @class PaymentsEssentialsApiGenerated
 * @extends {BaseAPI}
 */
export class PaymentsEssentialsApiGenerated extends BaseAPI {
    /**
     * This method returns information about the specified Vimeo payments service payment method.
     * @summary Get information about a payments service payment method
     * @param {PaymentsEssentialsApiGetPaymentMethodInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsEssentialsApiGenerated
     */
    public getPaymentMethodInfo(requestParameters: PaymentsEssentialsApiGetPaymentMethodInfoRequest, options?: AxiosRequestConfig) {
        return PaymentsEssentialsApiFp(this.configuration).getPaymentMethodInfo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns a list of all Vimeo payments service payment methods that are available to the authenticated user.
     * @summary Get a list of all payments service payment methods
     * @param {PaymentsEssentialsApiListPaymentMethodsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsEssentialsApiGenerated
     */
    public listPaymentMethods(requestParameters: PaymentsEssentialsApiListPaymentMethodsRequest, options?: AxiosRequestConfig) {
        return PaymentsEssentialsApiFp(this.configuration).listPaymentMethods(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
