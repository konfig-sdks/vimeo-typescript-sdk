/* tslint:disable */
/* eslint-disable */
/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

The version of the OpenAPI document: 3.4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { LiveEventVideosAddMultipleRequest } from '../models';
// @ts-ignore
import { LiveEventVideosAddMultipleRequestVideosInner } from '../models';
// @ts-ignore
import { LiveEventVideosAddMultipleVideosRequest } from '../models';
// @ts-ignore
import { LiveEventVideosAddMultipleVideosRequestVideosInner } from '../models';
// @ts-ignore
import { LiveEventVideosRemoveMultipleRequest } from '../models';
// @ts-ignore
import { LiveEventVideosRemoveMultipleRequest1 } from '../models';
// @ts-ignore
import { LiveEventVideosRemoveMultipleRequest1VideosInner } from '../models';
// @ts-ignore
import { LiveEventVideosRemoveMultipleRequestVideosInner } from '../models';
// @ts-ignore
import { LiveEventVideosRemoveMultipleVideosRequest } from '../models';
// @ts-ignore
import { LiveEventVideosRemoveMultipleVideosRequestVideosInner } from '../models';
// @ts-ignore
import { LiveEventVideosUploadMultipleRequest } from '../models';
// @ts-ignore
import { LiveEventVideosUploadMultipleRequestVideosInner } from '../models';
// @ts-ignore
import { ModelError } from '../models';
// @ts-ignore
import { Video } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * LiveEventVideosApi - axios parameter creator
 * @export
 */
export const LiveEventVideosApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method adds multiple videos to the specified event.
         * @summary Add a list of videos to a live event
         * @param {number} liveEventId The ID of the event.
         * @param {LiveEventVideosAddMultipleRequest} [liveEventVideosAddMultipleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMultiple: async (liveEventId: number, liveEventVideosAddMultipleRequest?: LiveEventVideosAddMultipleRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveEventId' is not null or undefined
            assertParamExists('addMultiple', 'liveEventId', liveEventId)
            const localVarPath = `/live_events/{live_event_id}/videos`
                .replace(`{${"live_event_id"}}`, encodeURIComponent(String(liveEventId !== undefined ? liveEventId : `-live_event_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit", "private"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit", "private"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: liveEventVideosAddMultipleRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/live_events/{live_event_id}/videos',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(liveEventVideosAddMultipleRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method adds multiple videos to the specified event.
         * @summary Add a list of videos to a live event
         * @param {number} liveEventId The ID of the event.
         * @param {number} userId The ID of the user.
         * @param {LiveEventVideosAddMultipleVideosRequest} [liveEventVideosAddMultipleVideosRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMultipleVideos: async (liveEventId: number, userId: number, liveEventVideosAddMultipleVideosRequest?: LiveEventVideosAddMultipleVideosRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveEventId' is not null or undefined
            assertParamExists('addMultipleVideos', 'liveEventId', liveEventId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('addMultipleVideos', 'userId', userId)
            const localVarPath = `/users/{user_id}/live_events/{live_event_id}/videos`
                .replace(`{${"live_event_id"}}`, encodeURIComponent(String(liveEventId !== undefined ? liveEventId : `-live_event_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit", "private"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit", "private"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: liveEventVideosAddMultipleVideosRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/live_events/{live_event_id}/videos',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(liveEventVideosAddMultipleVideosRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every video in the specified event.
         * @summary Get all the videos in a live event
         * @param {number} liveEventId The ID of the event.
         * @param {string} [containingUri] The page that contains the video URI.
         * @param {'asc' | 'desc'} [direction] The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order. 
         * @param {'embeddable'} [filter] The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Return embeddable events. 
         * @param {boolean} [filterEmbeddable] Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;.
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {string} [query] The search query to use to filter the results.
         * @param {'added' | 'alphabetical' | 'arranged' | 'comments' | 'date' | 'duration' | 'likes' | 'plays'} [sort] The way to sort the results.  Option descriptions:  * &#x60;added&#x60; - Sort the results by most recently added videos.  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;arranged&#x60; - Sort the results in the order that the user has arranged the videos.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by creation date.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;plays&#x60; - Sort the results by number of plays. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll: async (liveEventId: number, containingUri?: string, direction?: 'asc' | 'desc', filter?: 'embeddable', filterEmbeddable?: boolean, page?: number, perPage?: number, query?: string, sort?: 'added' | 'alphabetical' | 'arranged' | 'comments' | 'date' | 'duration' | 'likes' | 'plays', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveEventId' is not null or undefined
            assertParamExists('getAll', 'liveEventId', liveEventId)
            const localVarPath = `/me/live_events/{live_event_id}/videos`
                .replace(`{${"live_event_id"}}`, encodeURIComponent(String(liveEventId !== undefined ? liveEventId : `-live_event_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)
            if (containingUri !== undefined) {
                localVarQueryParameter['containing_uri'] = containingUri;
            }

            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (filterEmbeddable !== undefined) {
                localVarQueryParameter['filter_embeddable'] = filterEmbeddable;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/live_events/{live_event_id}/videos',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns a single video in the specified event.
         * @summary Get a specific video in a live event
         * @param {number} liveEventId The ID of the event.
         * @param {number} userId The ID of the user.
         * @param {number} videoId The ID of the video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificVideo: async (liveEventId: number, userId: number, videoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveEventId' is not null or undefined
            assertParamExists('getSpecificVideo', 'liveEventId', liveEventId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getSpecificVideo', 'userId', userId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('getSpecificVideo', 'videoId', videoId)
            const localVarPath = `/users/{user_id}/live_events/{live_event_id}/videos/{video_id}`
                .replace(`{${"live_event_id"}}`, encodeURIComponent(String(liveEventId !== undefined ? liveEventId : `-live_event_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/live_events/{live_event_id}/videos/{video_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every video in the specified event.
         * @summary Get all the videos in a live event
         * @param {number} liveEventId The ID of the event.
         * @param {number} userId The ID of the user.
         * @param {string} [containingUri] The page that contains the video URI.
         * @param {'asc' | 'desc'} [direction] The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order. 
         * @param {'embeddable'} [filter] The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Return embeddable events. 
         * @param {boolean} [filterEmbeddable] Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;.
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {string} [query] The search query to use to filter the results.
         * @param {'added' | 'alphabetical' | 'arranged' | 'comments' | 'date' | 'duration' | 'likes' | 'plays'} [sort] The way to sort the results.  Option descriptions:  * &#x60;added&#x60; - Sort the results by most recently added videos.  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;arranged&#x60; - Sort the results in the order that the user has arranged the videos.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by creation date.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;plays&#x60; - Sort the results by number of plays. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllVideosInEvent: async (liveEventId: number, userId: number, containingUri?: string, direction?: 'asc' | 'desc', filter?: 'embeddable', filterEmbeddable?: boolean, page?: number, perPage?: number, query?: string, sort?: 'added' | 'alphabetical' | 'arranged' | 'comments' | 'date' | 'duration' | 'likes' | 'plays', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveEventId' is not null or undefined
            assertParamExists('listAllVideosInEvent', 'liveEventId', liveEventId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('listAllVideosInEvent', 'userId', userId)
            const localVarPath = `/users/{user_id}/live_events/{live_event_id}/videos`
                .replace(`{${"live_event_id"}}`, encodeURIComponent(String(liveEventId !== undefined ? liveEventId : `-live_event_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)
            if (containingUri !== undefined) {
                localVarQueryParameter['containing_uri'] = containingUri;
            }

            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (filterEmbeddable !== undefined) {
                localVarQueryParameter['filter_embeddable'] = filterEmbeddable;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/live_events/{live_event_id}/videos',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every video in the specified event.
         * @summary Get all the videos in a live event
         * @param {number} liveEventId The ID of the event.
         * @param {string} [containingUri] The page that contains the video URI.
         * @param {'asc' | 'desc'} [direction] The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order. 
         * @param {'embeddable'} [filter] The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Return embeddable events. 
         * @param {boolean} [filterEmbeddable] Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;.
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {string} [query] The search query to use to filter the results.
         * @param {'added' | 'alphabetical' | 'arranged' | 'comments' | 'date' | 'duration' | 'likes' | 'plays'} [sort] The way to sort the results.  Option descriptions:  * &#x60;added&#x60; - Sort the results by most recently added videos.  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;arranged&#x60; - Sort the results in the order that the user has arranged the videos.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by creation date.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;plays&#x60; - Sort the results by number of plays. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLiveEventVideos: async (liveEventId: number, containingUri?: string, direction?: 'asc' | 'desc', filter?: 'embeddable', filterEmbeddable?: boolean, page?: number, perPage?: number, query?: string, sort?: 'added' | 'alphabetical' | 'arranged' | 'comments' | 'date' | 'duration' | 'likes' | 'plays', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveEventId' is not null or undefined
            assertParamExists('listLiveEventVideos', 'liveEventId', liveEventId)
            const localVarPath = `/live_events/{live_event_id}/videos`
                .replace(`{${"live_event_id"}}`, encodeURIComponent(String(liveEventId !== undefined ? liveEventId : `-live_event_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)
            if (containingUri !== undefined) {
                localVarQueryParameter['containing_uri'] = containingUri;
            }

            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (filterEmbeddable !== undefined) {
                localVarQueryParameter['filter_embeddable'] = filterEmbeddable;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/live_events/{live_event_id}/videos',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method removes multiple videos from the specified event.
         * @summary Remove a list of videos from a live event
         * @param {number} liveEventId The ID of the event.
         * @param {LiveEventVideosRemoveMultipleRequest} [liveEventVideosRemoveMultipleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeMultiple: async (liveEventId: number, liveEventVideosRemoveMultipleRequest?: LiveEventVideosRemoveMultipleRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveEventId' is not null or undefined
            assertParamExists('removeMultiple', 'liveEventId', liveEventId)
            const localVarPath = `/me/live_events/{live_event_id}/videos`
                .replace(`{${"live_event_id"}}`, encodeURIComponent(String(liveEventId !== undefined ? liveEventId : `-live_event_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit", "private"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit", "private"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: liveEventVideosRemoveMultipleRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/live_events/{live_event_id}/videos',
                httpMethod: 'DELETE'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(liveEventVideosRemoveMultipleRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method removes multiple videos from the specified event.
         * @summary Remove a list of videos from a live event
         * @param {number} liveEventId The ID of the event.
         * @param {LiveEventVideosRemoveMultipleVideosRequest} [liveEventVideosRemoveMultipleVideosRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeMultipleVideos: async (liveEventId: number, liveEventVideosRemoveMultipleVideosRequest?: LiveEventVideosRemoveMultipleVideosRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveEventId' is not null or undefined
            assertParamExists('removeMultipleVideos', 'liveEventId', liveEventId)
            const localVarPath = `/live_events/{live_event_id}/videos`
                .replace(`{${"live_event_id"}}`, encodeURIComponent(String(liveEventId !== undefined ? liveEventId : `-live_event_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit", "private"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit", "private"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: liveEventVideosRemoveMultipleVideosRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/live_events/{live_event_id}/videos',
                httpMethod: 'DELETE'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(liveEventVideosRemoveMultipleVideosRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method removes multiple videos from the specified event.
         * @summary Remove a list of videos from a live event
         * @param {number} liveEventId The ID of the event.
         * @param {number} userId The ID of the user.
         * @param {LiveEventVideosRemoveMultipleRequest1} [liveEventVideosRemoveMultipleRequest1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeMultiple_1: async (liveEventId: number, userId: number, liveEventVideosRemoveMultipleRequest1?: LiveEventVideosRemoveMultipleRequest1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveEventId' is not null or undefined
            assertParamExists('removeMultiple_1', 'liveEventId', liveEventId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('removeMultiple_1', 'userId', userId)
            const localVarPath = `/users/{user_id}/live_events/{live_event_id}/videos`
                .replace(`{${"live_event_id"}}`, encodeURIComponent(String(liveEventId !== undefined ? liveEventId : `-live_event_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit", "private"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit", "private"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: liveEventVideosRemoveMultipleRequest1,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/live_events/{live_event_id}/videos',
                httpMethod: 'DELETE'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(liveEventVideosRemoveMultipleRequest1, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns a single video in the specified event.
         * @summary Get a specific video in a live event
         * @param {number} liveEventId The ID of the event.
         * @param {number} videoId The ID of the video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        specificEventVideo: async (liveEventId: number, videoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveEventId' is not null or undefined
            assertParamExists('specificEventVideo', 'liveEventId', liveEventId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('specificEventVideo', 'videoId', videoId)
            const localVarPath = `/live_events/{live_event_id}/videos/{video_id}`
                .replace(`{${"live_event_id"}}`, encodeURIComponent(String(liveEventId !== undefined ? liveEventId : `-live_event_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/live_events/{live_event_id}/videos/{video_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns a single video in the specified event.
         * @summary Get a specific video in a live event
         * @param {number} liveEventId The ID of the event.
         * @param {number} videoId The ID of the video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        specificVideo: async (liveEventId: number, videoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveEventId' is not null or undefined
            assertParamExists('specificVideo', 'liveEventId', liveEventId)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('specificVideo', 'videoId', videoId)
            const localVarPath = `/me/live_events/{live_event_id}/videos/{video_id}`
                .replace(`{${"live_event_id"}}`, encodeURIComponent(String(liveEventId !== undefined ? liveEventId : `-live_event_id-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["private"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/live_events/{live_event_id}/videos/{video_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method adds multiple videos to the specified event.
         * @summary Add a list of videos to a live event
         * @param {number} liveEventId The ID of the event.
         * @param {LiveEventVideosUploadMultipleRequest} [liveEventVideosUploadMultipleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadMultiple: async (liveEventId: number, liveEventVideosUploadMultipleRequest?: LiveEventVideosUploadMultipleRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveEventId' is not null or undefined
            assertParamExists('uploadMultiple', 'liveEventId', liveEventId)
            const localVarPath = `/me/live_events/{live_event_id}/videos`
                .replace(`{${"live_event_id"}}`, encodeURIComponent(String(liveEventId !== undefined ? liveEventId : `-live_event_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit", "private"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit", "private"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: liveEventVideosUploadMultipleRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/live_events/{live_event_id}/videos',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(liveEventVideosUploadMultipleRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LiveEventVideosApi - functional programming interface
 * @export
 */
export const LiveEventVideosApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LiveEventVideosApiAxiosParamCreator(configuration)
    return {
        /**
         * This method adds multiple videos to the specified event.
         * @summary Add a list of videos to a live event
         * @param {LiveEventVideosApiAddMultipleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addMultiple(requestParameters: LiveEventVideosApiAddMultipleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const liveEventVideosAddMultipleRequest: LiveEventVideosAddMultipleRequest = {
                videos: requestParameters.videos
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addMultiple(requestParameters.liveEventId, liveEventVideosAddMultipleRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method adds multiple videos to the specified event.
         * @summary Add a list of videos to a live event
         * @param {LiveEventVideosApiAddMultipleVideosRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addMultipleVideos(requestParameters: LiveEventVideosApiAddMultipleVideosRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const liveEventVideosAddMultipleVideosRequest: LiveEventVideosAddMultipleVideosRequest = {
                videos: requestParameters.videos
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addMultipleVideos(requestParameters.liveEventId, requestParameters.userId, liveEventVideosAddMultipleVideosRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every video in the specified event.
         * @summary Get all the videos in a live event
         * @param {LiveEventVideosApiGetAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAll(requestParameters: LiveEventVideosApiGetAllRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Video>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAll(requestParameters.liveEventId, requestParameters.containingUri, requestParameters.direction, requestParameters.filter, requestParameters.filterEmbeddable, requestParameters.page, requestParameters.perPage, requestParameters.query, requestParameters.sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns a single video in the specified event.
         * @summary Get a specific video in a live event
         * @param {LiveEventVideosApiGetSpecificVideoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpecificVideo(requestParameters: LiveEventVideosApiGetSpecificVideoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Video>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpecificVideo(requestParameters.liveEventId, requestParameters.userId, requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every video in the specified event.
         * @summary Get all the videos in a live event
         * @param {LiveEventVideosApiListAllVideosInEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllVideosInEvent(requestParameters: LiveEventVideosApiListAllVideosInEventRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Video>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllVideosInEvent(requestParameters.liveEventId, requestParameters.userId, requestParameters.containingUri, requestParameters.direction, requestParameters.filter, requestParameters.filterEmbeddable, requestParameters.page, requestParameters.perPage, requestParameters.query, requestParameters.sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every video in the specified event.
         * @summary Get all the videos in a live event
         * @param {LiveEventVideosApiListLiveEventVideosRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listLiveEventVideos(requestParameters: LiveEventVideosApiListLiveEventVideosRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Video>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listLiveEventVideos(requestParameters.liveEventId, requestParameters.containingUri, requestParameters.direction, requestParameters.filter, requestParameters.filterEmbeddable, requestParameters.page, requestParameters.perPage, requestParameters.query, requestParameters.sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method removes multiple videos from the specified event.
         * @summary Remove a list of videos from a live event
         * @param {LiveEventVideosApiRemoveMultipleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeMultiple(requestParameters: LiveEventVideosApiRemoveMultipleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const liveEventVideosRemoveMultipleRequest: LiveEventVideosRemoveMultipleRequest = {
                videos: requestParameters.videos
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeMultiple(requestParameters.liveEventId, liveEventVideosRemoveMultipleRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method removes multiple videos from the specified event.
         * @summary Remove a list of videos from a live event
         * @param {LiveEventVideosApiRemoveMultipleVideosRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeMultipleVideos(requestParameters: LiveEventVideosApiRemoveMultipleVideosRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const liveEventVideosRemoveMultipleVideosRequest: LiveEventVideosRemoveMultipleVideosRequest = {
                videos: requestParameters.videos
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeMultipleVideos(requestParameters.liveEventId, liveEventVideosRemoveMultipleVideosRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method removes multiple videos from the specified event.
         * @summary Remove a list of videos from a live event
         * @param {LiveEventVideosApiRemoveMultiple0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeMultiple_1(requestParameters: LiveEventVideosApiRemoveMultiple0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const liveEventVideosRemoveMultipleRequest1: LiveEventVideosRemoveMultipleRequest1 = {
                videos: requestParameters.videos
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeMultiple_1(requestParameters.liveEventId, requestParameters.userId, liveEventVideosRemoveMultipleRequest1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns a single video in the specified event.
         * @summary Get a specific video in a live event
         * @param {LiveEventVideosApiSpecificEventVideoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async specificEventVideo(requestParameters: LiveEventVideosApiSpecificEventVideoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Video>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.specificEventVideo(requestParameters.liveEventId, requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns a single video in the specified event.
         * @summary Get a specific video in a live event
         * @param {LiveEventVideosApiSpecificVideoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async specificVideo(requestParameters: LiveEventVideosApiSpecificVideoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Video>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.specificVideo(requestParameters.liveEventId, requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method adds multiple videos to the specified event.
         * @summary Add a list of videos to a live event
         * @param {LiveEventVideosApiUploadMultipleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadMultiple(requestParameters: LiveEventVideosApiUploadMultipleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const liveEventVideosUploadMultipleRequest: LiveEventVideosUploadMultipleRequest = {
                videos: requestParameters.videos
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadMultiple(requestParameters.liveEventId, liveEventVideosUploadMultipleRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LiveEventVideosApi - factory interface
 * @export
 */
export const LiveEventVideosApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LiveEventVideosApiFp(configuration)
    return {
        /**
         * This method adds multiple videos to the specified event.
         * @summary Add a list of videos to a live event
         * @param {LiveEventVideosApiAddMultipleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMultiple(requestParameters: LiveEventVideosApiAddMultipleRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addMultiple(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method adds multiple videos to the specified event.
         * @summary Add a list of videos to a live event
         * @param {LiveEventVideosApiAddMultipleVideosRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMultipleVideos(requestParameters: LiveEventVideosApiAddMultipleVideosRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addMultipleVideos(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every video in the specified event.
         * @summary Get all the videos in a live event
         * @param {LiveEventVideosApiGetAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(requestParameters: LiveEventVideosApiGetAllRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Video>> {
            return localVarFp.getAll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns a single video in the specified event.
         * @summary Get a specific video in a live event
         * @param {LiveEventVideosApiGetSpecificVideoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificVideo(requestParameters: LiveEventVideosApiGetSpecificVideoRequest, options?: AxiosRequestConfig): AxiosPromise<Video> {
            return localVarFp.getSpecificVideo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every video in the specified event.
         * @summary Get all the videos in a live event
         * @param {LiveEventVideosApiListAllVideosInEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllVideosInEvent(requestParameters: LiveEventVideosApiListAllVideosInEventRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Video>> {
            return localVarFp.listAllVideosInEvent(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every video in the specified event.
         * @summary Get all the videos in a live event
         * @param {LiveEventVideosApiListLiveEventVideosRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLiveEventVideos(requestParameters: LiveEventVideosApiListLiveEventVideosRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Video>> {
            return localVarFp.listLiveEventVideos(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method removes multiple videos from the specified event.
         * @summary Remove a list of videos from a live event
         * @param {LiveEventVideosApiRemoveMultipleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeMultiple(requestParameters: LiveEventVideosApiRemoveMultipleRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeMultiple(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method removes multiple videos from the specified event.
         * @summary Remove a list of videos from a live event
         * @param {LiveEventVideosApiRemoveMultipleVideosRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeMultipleVideos(requestParameters: LiveEventVideosApiRemoveMultipleVideosRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeMultipleVideos(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method removes multiple videos from the specified event.
         * @summary Remove a list of videos from a live event
         * @param {LiveEventVideosApiRemoveMultiple0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeMultiple_1(requestParameters: LiveEventVideosApiRemoveMultiple0Request, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeMultiple_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns a single video in the specified event.
         * @summary Get a specific video in a live event
         * @param {LiveEventVideosApiSpecificEventVideoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        specificEventVideo(requestParameters: LiveEventVideosApiSpecificEventVideoRequest, options?: AxiosRequestConfig): AxiosPromise<Video> {
            return localVarFp.specificEventVideo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns a single video in the specified event.
         * @summary Get a specific video in a live event
         * @param {LiveEventVideosApiSpecificVideoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        specificVideo(requestParameters: LiveEventVideosApiSpecificVideoRequest, options?: AxiosRequestConfig): AxiosPromise<Video> {
            return localVarFp.specificVideo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method adds multiple videos to the specified event.
         * @summary Add a list of videos to a live event
         * @param {LiveEventVideosApiUploadMultipleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadMultiple(requestParameters: LiveEventVideosApiUploadMultipleRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.uploadMultiple(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addMultiple operation in LiveEventVideosApi.
 * @export
 * @interface LiveEventVideosApiAddMultipleRequest
 */
export type LiveEventVideosApiAddMultipleRequest = {
    
    /**
    * The ID of the event.
    * @type {number}
    * @memberof LiveEventVideosApiAddMultiple
    */
    readonly liveEventId: number
    
} & LiveEventVideosAddMultipleRequest

/**
 * Request parameters for addMultipleVideos operation in LiveEventVideosApi.
 * @export
 * @interface LiveEventVideosApiAddMultipleVideosRequest
 */
export type LiveEventVideosApiAddMultipleVideosRequest = {
    
    /**
    * The ID of the event.
    * @type {number}
    * @memberof LiveEventVideosApiAddMultipleVideos
    */
    readonly liveEventId: number
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof LiveEventVideosApiAddMultipleVideos
    */
    readonly userId: number
    
} & LiveEventVideosAddMultipleVideosRequest

/**
 * Request parameters for getAll operation in LiveEventVideosApi.
 * @export
 * @interface LiveEventVideosApiGetAllRequest
 */
export type LiveEventVideosApiGetAllRequest = {
    
    /**
    * The ID of the event.
    * @type {number}
    * @memberof LiveEventVideosApiGetAll
    */
    readonly liveEventId: number
    
    /**
    * The page that contains the video URI.
    * @type {string}
    * @memberof LiveEventVideosApiGetAll
    */
    readonly containingUri?: string
    
    /**
    * The sort direction of the results.  Option descriptions:  * `asc` - Sort the results in ascending order.  * `desc` - Sort the results in descending order. 
    * @type {'asc' | 'desc'}
    * @memberof LiveEventVideosApiGetAll
    */
    readonly direction?: 'asc' | 'desc'
    
    /**
    * The attribute by which to filter the results.  Option descriptions:  * `embeddable` - Return embeddable events. 
    * @type {'embeddable'}
    * @memberof LiveEventVideosApiGetAll
    */
    readonly filter?: 'embeddable'
    
    /**
    * Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). This parameter is required only when **filter** is `embeddable`.
    * @type {boolean}
    * @memberof LiveEventVideosApiGetAll
    */
    readonly filterEmbeddable?: boolean
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof LiveEventVideosApiGetAll
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof LiveEventVideosApiGetAll
    */
    readonly perPage?: number
    
    /**
    * The search query to use to filter the results.
    * @type {string}
    * @memberof LiveEventVideosApiGetAll
    */
    readonly query?: string
    
    /**
    * The way to sort the results.  Option descriptions:  * `added` - Sort the results by most recently added videos.  * `alphabetical` - Sort the results alphabetically.  * `arranged` - Sort the results in the order that the user has arranged the videos.  * `comments` - Sort the results by number of comments.  * `date` - Sort the results by creation date.  * `duration` - Sort the results by duration.  * `likes` - Sort the results by number of likes.  * `plays` - Sort the results by number of plays. 
    * @type {'added' | 'alphabetical' | 'arranged' | 'comments' | 'date' | 'duration' | 'likes' | 'plays'}
    * @memberof LiveEventVideosApiGetAll
    */
    readonly sort?: 'added' | 'alphabetical' | 'arranged' | 'comments' | 'date' | 'duration' | 'likes' | 'plays'
    
}

/**
 * Request parameters for getSpecificVideo operation in LiveEventVideosApi.
 * @export
 * @interface LiveEventVideosApiGetSpecificVideoRequest
 */
export type LiveEventVideosApiGetSpecificVideoRequest = {
    
    /**
    * The ID of the event.
    * @type {number}
    * @memberof LiveEventVideosApiGetSpecificVideo
    */
    readonly liveEventId: number
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof LiveEventVideosApiGetSpecificVideo
    */
    readonly userId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof LiveEventVideosApiGetSpecificVideo
    */
    readonly videoId: number
    
}

/**
 * Request parameters for listAllVideosInEvent operation in LiveEventVideosApi.
 * @export
 * @interface LiveEventVideosApiListAllVideosInEventRequest
 */
export type LiveEventVideosApiListAllVideosInEventRequest = {
    
    /**
    * The ID of the event.
    * @type {number}
    * @memberof LiveEventVideosApiListAllVideosInEvent
    */
    readonly liveEventId: number
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof LiveEventVideosApiListAllVideosInEvent
    */
    readonly userId: number
    
    /**
    * The page that contains the video URI.
    * @type {string}
    * @memberof LiveEventVideosApiListAllVideosInEvent
    */
    readonly containingUri?: string
    
    /**
    * The sort direction of the results.  Option descriptions:  * `asc` - Sort the results in ascending order.  * `desc` - Sort the results in descending order. 
    * @type {'asc' | 'desc'}
    * @memberof LiveEventVideosApiListAllVideosInEvent
    */
    readonly direction?: 'asc' | 'desc'
    
    /**
    * The attribute by which to filter the results.  Option descriptions:  * `embeddable` - Return embeddable events. 
    * @type {'embeddable'}
    * @memberof LiveEventVideosApiListAllVideosInEvent
    */
    readonly filter?: 'embeddable'
    
    /**
    * Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). This parameter is required only when **filter** is `embeddable`.
    * @type {boolean}
    * @memberof LiveEventVideosApiListAllVideosInEvent
    */
    readonly filterEmbeddable?: boolean
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof LiveEventVideosApiListAllVideosInEvent
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof LiveEventVideosApiListAllVideosInEvent
    */
    readonly perPage?: number
    
    /**
    * The search query to use to filter the results.
    * @type {string}
    * @memberof LiveEventVideosApiListAllVideosInEvent
    */
    readonly query?: string
    
    /**
    * The way to sort the results.  Option descriptions:  * `added` - Sort the results by most recently added videos.  * `alphabetical` - Sort the results alphabetically.  * `arranged` - Sort the results in the order that the user has arranged the videos.  * `comments` - Sort the results by number of comments.  * `date` - Sort the results by creation date.  * `duration` - Sort the results by duration.  * `likes` - Sort the results by number of likes.  * `plays` - Sort the results by number of plays. 
    * @type {'added' | 'alphabetical' | 'arranged' | 'comments' | 'date' | 'duration' | 'likes' | 'plays'}
    * @memberof LiveEventVideosApiListAllVideosInEvent
    */
    readonly sort?: 'added' | 'alphabetical' | 'arranged' | 'comments' | 'date' | 'duration' | 'likes' | 'plays'
    
}

/**
 * Request parameters for listLiveEventVideos operation in LiveEventVideosApi.
 * @export
 * @interface LiveEventVideosApiListLiveEventVideosRequest
 */
export type LiveEventVideosApiListLiveEventVideosRequest = {
    
    /**
    * The ID of the event.
    * @type {number}
    * @memberof LiveEventVideosApiListLiveEventVideos
    */
    readonly liveEventId: number
    
    /**
    * The page that contains the video URI.
    * @type {string}
    * @memberof LiveEventVideosApiListLiveEventVideos
    */
    readonly containingUri?: string
    
    /**
    * The sort direction of the results.  Option descriptions:  * `asc` - Sort the results in ascending order.  * `desc` - Sort the results in descending order. 
    * @type {'asc' | 'desc'}
    * @memberof LiveEventVideosApiListLiveEventVideos
    */
    readonly direction?: 'asc' | 'desc'
    
    /**
    * The attribute by which to filter the results.  Option descriptions:  * `embeddable` - Return embeddable events. 
    * @type {'embeddable'}
    * @memberof LiveEventVideosApiListLiveEventVideos
    */
    readonly filter?: 'embeddable'
    
    /**
    * Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). This parameter is required only when **filter** is `embeddable`.
    * @type {boolean}
    * @memberof LiveEventVideosApiListLiveEventVideos
    */
    readonly filterEmbeddable?: boolean
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof LiveEventVideosApiListLiveEventVideos
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof LiveEventVideosApiListLiveEventVideos
    */
    readonly perPage?: number
    
    /**
    * The search query to use to filter the results.
    * @type {string}
    * @memberof LiveEventVideosApiListLiveEventVideos
    */
    readonly query?: string
    
    /**
    * The way to sort the results.  Option descriptions:  * `added` - Sort the results by most recently added videos.  * `alphabetical` - Sort the results alphabetically.  * `arranged` - Sort the results in the order that the user has arranged the videos.  * `comments` - Sort the results by number of comments.  * `date` - Sort the results by creation date.  * `duration` - Sort the results by duration.  * `likes` - Sort the results by number of likes.  * `plays` - Sort the results by number of plays. 
    * @type {'added' | 'alphabetical' | 'arranged' | 'comments' | 'date' | 'duration' | 'likes' | 'plays'}
    * @memberof LiveEventVideosApiListLiveEventVideos
    */
    readonly sort?: 'added' | 'alphabetical' | 'arranged' | 'comments' | 'date' | 'duration' | 'likes' | 'plays'
    
}

/**
 * Request parameters for removeMultiple operation in LiveEventVideosApi.
 * @export
 * @interface LiveEventVideosApiRemoveMultipleRequest
 */
export type LiveEventVideosApiRemoveMultipleRequest = {
    
    /**
    * The ID of the event.
    * @type {number}
    * @memberof LiveEventVideosApiRemoveMultiple
    */
    readonly liveEventId: number
    
} & LiveEventVideosRemoveMultipleRequest

/**
 * Request parameters for removeMultipleVideos operation in LiveEventVideosApi.
 * @export
 * @interface LiveEventVideosApiRemoveMultipleVideosRequest
 */
export type LiveEventVideosApiRemoveMultipleVideosRequest = {
    
    /**
    * The ID of the event.
    * @type {number}
    * @memberof LiveEventVideosApiRemoveMultipleVideos
    */
    readonly liveEventId: number
    
} & LiveEventVideosRemoveMultipleVideosRequest

/**
 * Request parameters for removeMultiple_1 operation in LiveEventVideosApi.
 * @export
 * @interface LiveEventVideosApiRemoveMultiple0Request
 */
export type LiveEventVideosApiRemoveMultiple0Request = {
    
    /**
    * The ID of the event.
    * @type {number}
    * @memberof LiveEventVideosApiRemoveMultiple0
    */
    readonly liveEventId: number
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof LiveEventVideosApiRemoveMultiple0
    */
    readonly userId: number
    
} & LiveEventVideosRemoveMultipleRequest1

/**
 * Request parameters for specificEventVideo operation in LiveEventVideosApi.
 * @export
 * @interface LiveEventVideosApiSpecificEventVideoRequest
 */
export type LiveEventVideosApiSpecificEventVideoRequest = {
    
    /**
    * The ID of the event.
    * @type {number}
    * @memberof LiveEventVideosApiSpecificEventVideo
    */
    readonly liveEventId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof LiveEventVideosApiSpecificEventVideo
    */
    readonly videoId: number
    
}

/**
 * Request parameters for specificVideo operation in LiveEventVideosApi.
 * @export
 * @interface LiveEventVideosApiSpecificVideoRequest
 */
export type LiveEventVideosApiSpecificVideoRequest = {
    
    /**
    * The ID of the event.
    * @type {number}
    * @memberof LiveEventVideosApiSpecificVideo
    */
    readonly liveEventId: number
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof LiveEventVideosApiSpecificVideo
    */
    readonly videoId: number
    
}

/**
 * Request parameters for uploadMultiple operation in LiveEventVideosApi.
 * @export
 * @interface LiveEventVideosApiUploadMultipleRequest
 */
export type LiveEventVideosApiUploadMultipleRequest = {
    
    /**
    * The ID of the event.
    * @type {number}
    * @memberof LiveEventVideosApiUploadMultiple
    */
    readonly liveEventId: number
    
} & LiveEventVideosUploadMultipleRequest

/**
 * LiveEventVideosApiGenerated - object-oriented interface
 * @export
 * @class LiveEventVideosApiGenerated
 * @extends {BaseAPI}
 */
export class LiveEventVideosApiGenerated extends BaseAPI {
    /**
     * This method adds multiple videos to the specified event.
     * @summary Add a list of videos to a live event
     * @param {LiveEventVideosApiAddMultipleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEventVideosApiGenerated
     */
    public addMultiple(requestParameters: LiveEventVideosApiAddMultipleRequest, options?: AxiosRequestConfig) {
        return LiveEventVideosApiFp(this.configuration).addMultiple(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method adds multiple videos to the specified event.
     * @summary Add a list of videos to a live event
     * @param {LiveEventVideosApiAddMultipleVideosRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEventVideosApiGenerated
     */
    public addMultipleVideos(requestParameters: LiveEventVideosApiAddMultipleVideosRequest, options?: AxiosRequestConfig) {
        return LiveEventVideosApiFp(this.configuration).addMultipleVideos(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every video in the specified event.
     * @summary Get all the videos in a live event
     * @param {LiveEventVideosApiGetAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEventVideosApiGenerated
     */
    public getAll(requestParameters: LiveEventVideosApiGetAllRequest, options?: AxiosRequestConfig) {
        return LiveEventVideosApiFp(this.configuration).getAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns a single video in the specified event.
     * @summary Get a specific video in a live event
     * @param {LiveEventVideosApiGetSpecificVideoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEventVideosApiGenerated
     */
    public getSpecificVideo(requestParameters: LiveEventVideosApiGetSpecificVideoRequest, options?: AxiosRequestConfig) {
        return LiveEventVideosApiFp(this.configuration).getSpecificVideo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every video in the specified event.
     * @summary Get all the videos in a live event
     * @param {LiveEventVideosApiListAllVideosInEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEventVideosApiGenerated
     */
    public listAllVideosInEvent(requestParameters: LiveEventVideosApiListAllVideosInEventRequest, options?: AxiosRequestConfig) {
        return LiveEventVideosApiFp(this.configuration).listAllVideosInEvent(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every video in the specified event.
     * @summary Get all the videos in a live event
     * @param {LiveEventVideosApiListLiveEventVideosRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEventVideosApiGenerated
     */
    public listLiveEventVideos(requestParameters: LiveEventVideosApiListLiveEventVideosRequest, options?: AxiosRequestConfig) {
        return LiveEventVideosApiFp(this.configuration).listLiveEventVideos(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method removes multiple videos from the specified event.
     * @summary Remove a list of videos from a live event
     * @param {LiveEventVideosApiRemoveMultipleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEventVideosApiGenerated
     */
    public removeMultiple(requestParameters: LiveEventVideosApiRemoveMultipleRequest, options?: AxiosRequestConfig) {
        return LiveEventVideosApiFp(this.configuration).removeMultiple(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method removes multiple videos from the specified event.
     * @summary Remove a list of videos from a live event
     * @param {LiveEventVideosApiRemoveMultipleVideosRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEventVideosApiGenerated
     */
    public removeMultipleVideos(requestParameters: LiveEventVideosApiRemoveMultipleVideosRequest, options?: AxiosRequestConfig) {
        return LiveEventVideosApiFp(this.configuration).removeMultipleVideos(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method removes multiple videos from the specified event.
     * @summary Remove a list of videos from a live event
     * @param {LiveEventVideosApiRemoveMultiple0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEventVideosApiGenerated
     */
    public removeMultiple_1(requestParameters: LiveEventVideosApiRemoveMultiple0Request, options?: AxiosRequestConfig) {
        return LiveEventVideosApiFp(this.configuration).removeMultiple_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns a single video in the specified event.
     * @summary Get a specific video in a live event
     * @param {LiveEventVideosApiSpecificEventVideoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEventVideosApiGenerated
     */
    public specificEventVideo(requestParameters: LiveEventVideosApiSpecificEventVideoRequest, options?: AxiosRequestConfig) {
        return LiveEventVideosApiFp(this.configuration).specificEventVideo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns a single video in the specified event.
     * @summary Get a specific video in a live event
     * @param {LiveEventVideosApiSpecificVideoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEventVideosApiGenerated
     */
    public specificVideo(requestParameters: LiveEventVideosApiSpecificVideoRequest, options?: AxiosRequestConfig) {
        return LiveEventVideosApiFp(this.configuration).specificVideo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method adds multiple videos to the specified event.
     * @summary Add a list of videos to a live event
     * @param {LiveEventVideosApiUploadMultipleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveEventVideosApiGenerated
     */
    public uploadMultiple(requestParameters: LiveEventVideosApiUploadMultipleRequest, options?: AxiosRequestConfig) {
        return LiveEventVideosApiFp(this.configuration).uploadMultiple(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
