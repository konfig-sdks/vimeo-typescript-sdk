/* tslint:disable */
/* eslint-disable */
/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

The version of the OpenAPI document: 3.4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * TeamsMembersApi - axios parameter creator
 * @export
 */
export const TeamsMembersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method returns information about the membership of the specified team. Usage is currently limited to the team join forms.
         * @summary Get membership information about a team
         * @param {string} code The code corresponding to the desired team. This value appears under &#x60;TeamUser&#x60; &gt; &#x60;code&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMembershipInformation: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('getMembershipInformation', 'code', code)
            const localVarPath = `/teammembers/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code !== undefined ? code : `-code-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/teammembers/{code}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns information about the membership of the specified team. Usage is currently limited to the team join forms.
         * @summary Get membership information about a team
         * @param {number} teamUserId The ID of the team user.
         * @param {number} userId The ID of the team owner.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamMembershipInformation: async (teamUserId: number, userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamUserId' is not null or undefined
            assertParamExists('getTeamMembershipInformation', 'teamUserId', teamUserId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getTeamMembershipInformation', 'userId', userId)
            const localVarPath = `/users/{user_id}/team_users/{team_user_id}`
                .replace(`{${"team_user_id"}}`, encodeURIComponent(String(teamUserId !== undefined ? teamUserId : `-team_user_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/team_users/{team_user_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns information about the authenticated user\'s role on the specified team owner\'s team.
         * @summary Get information about the user\'s role on a team
         * @param {number} userId The ID of the team owner.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserTeamRole: async (userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUserTeamRole', 'userId', userId)
            const localVarPath = `/users/{user_id}/team/role`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/team/role',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TeamsMembersApi - functional programming interface
 * @export
 */
export const TeamsMembersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TeamsMembersApiAxiosParamCreator(configuration)
    return {
        /**
         * This method returns information about the membership of the specified team. Usage is currently limited to the team join forms.
         * @summary Get membership information about a team
         * @param {TeamsMembersApiGetMembershipInformationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMembershipInformation(requestParameters: TeamsMembersApiGetMembershipInformationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMembershipInformation(requestParameters.code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns information about the membership of the specified team. Usage is currently limited to the team join forms.
         * @summary Get membership information about a team
         * @param {TeamsMembersApiGetTeamMembershipInformationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTeamMembershipInformation(requestParameters: TeamsMembersApiGetTeamMembershipInformationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTeamMembershipInformation(requestParameters.teamUserId, requestParameters.userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns information about the authenticated user\'s role on the specified team owner\'s team.
         * @summary Get information about the user\'s role on a team
         * @param {TeamsMembersApiGetUserTeamRoleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserTeamRole(requestParameters: TeamsMembersApiGetUserTeamRoleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserTeamRole(requestParameters.userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TeamsMembersApi - factory interface
 * @export
 */
export const TeamsMembersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TeamsMembersApiFp(configuration)
    return {
        /**
         * This method returns information about the membership of the specified team. Usage is currently limited to the team join forms.
         * @summary Get membership information about a team
         * @param {TeamsMembersApiGetMembershipInformationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMembershipInformation(requestParameters: TeamsMembersApiGetMembershipInformationRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getMembershipInformation(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns information about the membership of the specified team. Usage is currently limited to the team join forms.
         * @summary Get membership information about a team
         * @param {TeamsMembersApiGetTeamMembershipInformationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamMembershipInformation(requestParameters: TeamsMembersApiGetTeamMembershipInformationRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getTeamMembershipInformation(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns information about the authenticated user\'s role on the specified team owner\'s team.
         * @summary Get information about the user\'s role on a team
         * @param {TeamsMembersApiGetUserTeamRoleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserTeamRole(requestParameters: TeamsMembersApiGetUserTeamRoleRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getUserTeamRole(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getMembershipInformation operation in TeamsMembersApi.
 * @export
 * @interface TeamsMembersApiGetMembershipInformationRequest
 */
export type TeamsMembersApiGetMembershipInformationRequest = {
    
    /**
    * The code corresponding to the desired team. This value appears under `TeamUser` > `code`.
    * @type {string}
    * @memberof TeamsMembersApiGetMembershipInformation
    */
    readonly code: string
    
}

/**
 * Request parameters for getTeamMembershipInformation operation in TeamsMembersApi.
 * @export
 * @interface TeamsMembersApiGetTeamMembershipInformationRequest
 */
export type TeamsMembersApiGetTeamMembershipInformationRequest = {
    
    /**
    * The ID of the team user.
    * @type {number}
    * @memberof TeamsMembersApiGetTeamMembershipInformation
    */
    readonly teamUserId: number
    
    /**
    * The ID of the team owner.
    * @type {number}
    * @memberof TeamsMembersApiGetTeamMembershipInformation
    */
    readonly userId: number
    
}

/**
 * Request parameters for getUserTeamRole operation in TeamsMembersApi.
 * @export
 * @interface TeamsMembersApiGetUserTeamRoleRequest
 */
export type TeamsMembersApiGetUserTeamRoleRequest = {
    
    /**
    * The ID of the team owner.
    * @type {number}
    * @memberof TeamsMembersApiGetUserTeamRole
    */
    readonly userId: number
    
}

/**
 * TeamsMembersApiGenerated - object-oriented interface
 * @export
 * @class TeamsMembersApiGenerated
 * @extends {BaseAPI}
 */
export class TeamsMembersApiGenerated extends BaseAPI {
    /**
     * This method returns information about the membership of the specified team. Usage is currently limited to the team join forms.
     * @summary Get membership information about a team
     * @param {TeamsMembersApiGetMembershipInformationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsMembersApiGenerated
     */
    public getMembershipInformation(requestParameters: TeamsMembersApiGetMembershipInformationRequest, options?: AxiosRequestConfig) {
        return TeamsMembersApiFp(this.configuration).getMembershipInformation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns information about the membership of the specified team. Usage is currently limited to the team join forms.
     * @summary Get membership information about a team
     * @param {TeamsMembersApiGetTeamMembershipInformationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsMembersApiGenerated
     */
    public getTeamMembershipInformation(requestParameters: TeamsMembersApiGetTeamMembershipInformationRequest, options?: AxiosRequestConfig) {
        return TeamsMembersApiFp(this.configuration).getTeamMembershipInformation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns information about the authenticated user\'s role on the specified team owner\'s team.
     * @summary Get information about the user\'s role on a team
     * @param {TeamsMembersApiGetUserTeamRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsMembersApiGenerated
     */
    public getUserTeamRole(requestParameters: TeamsMembersApiGetUserTeamRoleRequest, options?: AxiosRequestConfig) {
        return TeamsMembersApiFp(this.configuration).getUserTeamRole(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
