/* tslint:disable */
/* eslint-disable */
/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

The version of the OpenAPI document: 3.4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CategoriesVideosSetVideoCategoriesRequest } from '../models';
// @ts-ignore
import { Category } from '../models';
// @ts-ignore
import { LegacyError } from '../models';
// @ts-ignore
import { Video } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CategoriesVideosApi - axios parameter creator
 * @export
 */
export const CategoriesVideosApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method returns every category that contains the specified video.
         * @summary Get all the categories to which a video belongs
         * @param {number} videoId The ID of the video.
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllVideoCategories: async (videoId: number, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('getAllVideoCategories', 'videoId', videoId)
            const localVarPath = `/videos/{video_id}/categories`
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/videos/{video_id}/categories',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns a single video in the specified category. You can use this method to determine whether the video belongs to the category.
         * @summary Get a specific video in a category
         * @param {string} category The name of the category.
         * @param {number} videoId The ID of the video.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVideoInCategory: async (category: string, videoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'category' is not null or undefined
            assertParamExists('getVideoInCategory', 'category', category)
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('getVideoInCategory', 'videoId', videoId)
            const localVarPath = `/categories/{category}/videos/{video_id}`
                .replace(`{${"category"}}`, encodeURIComponent(String(category !== undefined ? category : `-category-`)))
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/categories/{category}/videos/{video_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every video that belongs to the specified category.
         * @summary Get all the videos in a category
         * @param {string} category The name of the category.
         * @param {'asc' | 'desc'} [direction] The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order. 
         * @param {'conditional_featured' | 'embeddable'} [filter] The attribute by which to filter the results.  Option descriptions:  * &#x60;conditional_featured&#x60; - Return featured videos.  * &#x60;embeddable&#x60; - Return embeddable videos. 
         * @param {boolean} [filterEmbeddable] Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;.
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {string} [query] The search query to use to filter the results.
         * @param {'alphabetical' | 'comments' | 'date' | 'duration' | 'featured' | 'likes' | 'plays' | 'relevant'} [sort] The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;featured&#x60; - Sort the results by featured status.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;plays&#x60; - Sort the results by number of plays.  * &#x60;relevant&#x60; - Sort the results by relevance. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVideosInCategory: async (category: string, direction?: 'asc' | 'desc', filter?: 'conditional_featured' | 'embeddable', filterEmbeddable?: boolean, page?: number, perPage?: number, query?: string, sort?: 'alphabetical' | 'comments' | 'date' | 'duration' | 'featured' | 'likes' | 'plays' | 'relevant', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'category' is not null or undefined
            assertParamExists('listVideosInCategory', 'category', category)
            const localVarPath = `/categories/{category}/videos`
                .replace(`{${"category"}}`, encodeURIComponent(String(category !== undefined ? category : `-category-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (filterEmbeddable !== undefined) {
                localVarQueryParameter['filter_embeddable'] = filterEmbeddable;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/categories/{category}/videos',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method sets multiple categories and subcategories for the specified video. Include the categories as a JSON block in the body of the request using the **category** field, like this: `[{ \"category\": \"Tech\" }, { \"category\": \"Music\" }]`. The authenticated user must have edit access to the video. For more information on batch requests like this one, see [Using Common Formats and Parameters](https://developer.vimeo.com/api/common-formats#working-with-batch-requests).
         * @summary Suggest categories for a video
         * @param {number} videoId The ID of the video.
         * @param {CategoriesVideosSetVideoCategoriesRequest} categoriesVideosSetVideoCategoriesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setVideoCategories: async (videoId: number, categoriesVideosSetVideoCategoriesRequest: CategoriesVideosSetVideoCategoriesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('setVideoCategories', 'videoId', videoId)
            // verify required parameter 'categoriesVideosSetVideoCategoriesRequest' is not null or undefined
            assertParamExists('setVideoCategories', 'categoriesVideosSetVideoCategoriesRequest', categoriesVideosSetVideoCategoriesRequest)
            const localVarPath = `/videos/{video_id}/categories`
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["edit"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.vimeo.category+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: categoriesVideosSetVideoCategoriesRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/videos/{video_id}/categories',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(categoriesVideosSetVideoCategoriesRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CategoriesVideosApi - functional programming interface
 * @export
 */
export const CategoriesVideosApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CategoriesVideosApiAxiosParamCreator(configuration)
    return {
        /**
         * This method returns every category that contains the specified video.
         * @summary Get all the categories to which a video belongs
         * @param {CategoriesVideosApiGetAllVideoCategoriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllVideoCategories(requestParameters: CategoriesVideosApiGetAllVideoCategoriesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Category>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllVideoCategories(requestParameters.videoId, requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns a single video in the specified category. You can use this method to determine whether the video belongs to the category.
         * @summary Get a specific video in a category
         * @param {CategoriesVideosApiGetVideoInCategoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVideoInCategory(requestParameters: CategoriesVideosApiGetVideoInCategoryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Video>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVideoInCategory(requestParameters.category, requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every video that belongs to the specified category.
         * @summary Get all the videos in a category
         * @param {CategoriesVideosApiListVideosInCategoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listVideosInCategory(requestParameters: CategoriesVideosApiListVideosInCategoryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Video>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listVideosInCategory(requestParameters.category, requestParameters.direction, requestParameters.filter, requestParameters.filterEmbeddable, requestParameters.page, requestParameters.perPage, requestParameters.query, requestParameters.sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method sets multiple categories and subcategories for the specified video. Include the categories as a JSON block in the body of the request using the **category** field, like this: `[{ \"category\": \"Tech\" }, { \"category\": \"Music\" }]`. The authenticated user must have edit access to the video. For more information on batch requests like this one, see [Using Common Formats and Parameters](https://developer.vimeo.com/api/common-formats#working-with-batch-requests).
         * @summary Suggest categories for a video
         * @param {CategoriesVideosApiSetVideoCategoriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setVideoCategories(requestParameters: CategoriesVideosApiSetVideoCategoriesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Category>> {
            const categoriesVideosSetVideoCategoriesRequest: CategoriesVideosSetVideoCategoriesRequest = {
                category: requestParameters.category
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.setVideoCategories(requestParameters.videoId, categoriesVideosSetVideoCategoriesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CategoriesVideosApi - factory interface
 * @export
 */
export const CategoriesVideosApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CategoriesVideosApiFp(configuration)
    return {
        /**
         * This method returns every category that contains the specified video.
         * @summary Get all the categories to which a video belongs
         * @param {CategoriesVideosApiGetAllVideoCategoriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllVideoCategories(requestParameters: CategoriesVideosApiGetAllVideoCategoriesRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Category>> {
            return localVarFp.getAllVideoCategories(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns a single video in the specified category. You can use this method to determine whether the video belongs to the category.
         * @summary Get a specific video in a category
         * @param {CategoriesVideosApiGetVideoInCategoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVideoInCategory(requestParameters: CategoriesVideosApiGetVideoInCategoryRequest, options?: AxiosRequestConfig): AxiosPromise<Video> {
            return localVarFp.getVideoInCategory(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every video that belongs to the specified category.
         * @summary Get all the videos in a category
         * @param {CategoriesVideosApiListVideosInCategoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVideosInCategory(requestParameters: CategoriesVideosApiListVideosInCategoryRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Video>> {
            return localVarFp.listVideosInCategory(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method sets multiple categories and subcategories for the specified video. Include the categories as a JSON block in the body of the request using the **category** field, like this: `[{ \"category\": \"Tech\" }, { \"category\": \"Music\" }]`. The authenticated user must have edit access to the video. For more information on batch requests like this one, see [Using Common Formats and Parameters](https://developer.vimeo.com/api/common-formats#working-with-batch-requests).
         * @summary Suggest categories for a video
         * @param {CategoriesVideosApiSetVideoCategoriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setVideoCategories(requestParameters: CategoriesVideosApiSetVideoCategoriesRequest, options?: AxiosRequestConfig): AxiosPromise<Category> {
            return localVarFp.setVideoCategories(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAllVideoCategories operation in CategoriesVideosApi.
 * @export
 * @interface CategoriesVideosApiGetAllVideoCategoriesRequest
 */
export type CategoriesVideosApiGetAllVideoCategoriesRequest = {
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof CategoriesVideosApiGetAllVideoCategories
    */
    readonly videoId: number
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof CategoriesVideosApiGetAllVideoCategories
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof CategoriesVideosApiGetAllVideoCategories
    */
    readonly perPage?: number
    
}

/**
 * Request parameters for getVideoInCategory operation in CategoriesVideosApi.
 * @export
 * @interface CategoriesVideosApiGetVideoInCategoryRequest
 */
export type CategoriesVideosApiGetVideoInCategoryRequest = {
    
    /**
    * The name of the category.
    * @type {string}
    * @memberof CategoriesVideosApiGetVideoInCategory
    */
    readonly category: string
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof CategoriesVideosApiGetVideoInCategory
    */
    readonly videoId: number
    
}

/**
 * Request parameters for listVideosInCategory operation in CategoriesVideosApi.
 * @export
 * @interface CategoriesVideosApiListVideosInCategoryRequest
 */
export type CategoriesVideosApiListVideosInCategoryRequest = {
    
    /**
    * The name of the category.
    * @type {string}
    * @memberof CategoriesVideosApiListVideosInCategory
    */
    readonly category: string
    
    /**
    * The sort direction of the results.  Option descriptions:  * `asc` - Sort the results in ascending order.  * `desc` - Sort the results in descending order. 
    * @type {'asc' | 'desc'}
    * @memberof CategoriesVideosApiListVideosInCategory
    */
    readonly direction?: 'asc' | 'desc'
    
    /**
    * The attribute by which to filter the results.  Option descriptions:  * `conditional_featured` - Return featured videos.  * `embeddable` - Return embeddable videos. 
    * @type {'conditional_featured' | 'embeddable'}
    * @memberof CategoriesVideosApiListVideosInCategory
    */
    readonly filter?: 'conditional_featured' | 'embeddable'
    
    /**
    * Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). This parameter is required only when **filter** is `embeddable`.
    * @type {boolean}
    * @memberof CategoriesVideosApiListVideosInCategory
    */
    readonly filterEmbeddable?: boolean
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof CategoriesVideosApiListVideosInCategory
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof CategoriesVideosApiListVideosInCategory
    */
    readonly perPage?: number
    
    /**
    * The search query to use to filter the results.
    * @type {string}
    * @memberof CategoriesVideosApiListVideosInCategory
    */
    readonly query?: string
    
    /**
    * The way to sort the results.  Option descriptions:  * `alphabetical` - Sort the results alphabetically.  * `comments` - Sort the results by number of comments.  * `date` - Sort the results by date.  * `duration` - Sort the results by duration.  * `featured` - Sort the results by featured status.  * `likes` - Sort the results by number of likes.  * `plays` - Sort the results by number of plays.  * `relevant` - Sort the results by relevance. 
    * @type {'alphabetical' | 'comments' | 'date' | 'duration' | 'featured' | 'likes' | 'plays' | 'relevant'}
    * @memberof CategoriesVideosApiListVideosInCategory
    */
    readonly sort?: 'alphabetical' | 'comments' | 'date' | 'duration' | 'featured' | 'likes' | 'plays' | 'relevant'
    
}

/**
 * Request parameters for setVideoCategories operation in CategoriesVideosApi.
 * @export
 * @interface CategoriesVideosApiSetVideoCategoriesRequest
 */
export type CategoriesVideosApiSetVideoCategoriesRequest = {
    
    /**
    * The ID of the video.
    * @type {number}
    * @memberof CategoriesVideosApiSetVideoCategories
    */
    readonly videoId: number
    
} & CategoriesVideosSetVideoCategoriesRequest

/**
 * CategoriesVideosApiGenerated - object-oriented interface
 * @export
 * @class CategoriesVideosApiGenerated
 * @extends {BaseAPI}
 */
export class CategoriesVideosApiGenerated extends BaseAPI {
    /**
     * This method returns every category that contains the specified video.
     * @summary Get all the categories to which a video belongs
     * @param {CategoriesVideosApiGetAllVideoCategoriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesVideosApiGenerated
     */
    public getAllVideoCategories(requestParameters: CategoriesVideosApiGetAllVideoCategoriesRequest, options?: AxiosRequestConfig) {
        return CategoriesVideosApiFp(this.configuration).getAllVideoCategories(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns a single video in the specified category. You can use this method to determine whether the video belongs to the category.
     * @summary Get a specific video in a category
     * @param {CategoriesVideosApiGetVideoInCategoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesVideosApiGenerated
     */
    public getVideoInCategory(requestParameters: CategoriesVideosApiGetVideoInCategoryRequest, options?: AxiosRequestConfig) {
        return CategoriesVideosApiFp(this.configuration).getVideoInCategory(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every video that belongs to the specified category.
     * @summary Get all the videos in a category
     * @param {CategoriesVideosApiListVideosInCategoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesVideosApiGenerated
     */
    public listVideosInCategory(requestParameters: CategoriesVideosApiListVideosInCategoryRequest, options?: AxiosRequestConfig) {
        return CategoriesVideosApiFp(this.configuration).listVideosInCategory(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method sets multiple categories and subcategories for the specified video. Include the categories as a JSON block in the body of the request using the **category** field, like this: `[{ \"category\": \"Tech\" }, { \"category\": \"Music\" }]`. The authenticated user must have edit access to the video. For more information on batch requests like this one, see [Using Common Formats and Parameters](https://developer.vimeo.com/api/common-formats#working-with-batch-requests).
     * @summary Suggest categories for a video
     * @param {CategoriesVideosApiSetVideoCategoriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesVideosApiGenerated
     */
    public setVideoCategories(requestParameters: CategoriesVideosApiSetVideoCategoriesRequest, options?: AxiosRequestConfig) {
        return CategoriesVideosApiFp(this.configuration).setVideoCategories(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
