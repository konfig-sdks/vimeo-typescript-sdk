/* tslint:disable */
/* eslint-disable */
/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

The version of the OpenAPI document: 3.4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ModelError } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * FoldersItemsApi - axios parameter creator
 * @export
 */
export const FoldersItemsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method returns every item that belongs to the specified folder.
         * @summary Get all the items in a folder
         * @param {number} projectId The ID of the folder.
         * @param {number} userId The ID of the user.
         * @param {'asc' | 'desc'} [direction] The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order. 
         * @param {'folder' | 'live_event' | 'video'} [filter] The attribute by which to filter the results.  Option descriptions:  * &#x60;folder&#x60; - Filter the results by folder.  * &#x60;live_event&#x60; - Filter the results by event.  * &#x60;video&#x60; - Filter the results by video. 
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {'alphabetical' | 'date' | 'default' | 'duration' | 'last_user_action_event_date'} [sort] The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Use the default sort order.  * &#x60;duration&#x60; - Sort the results by duration. Items without a duration, namely events and folders, are grouped by type in ascending alphabetical order, with events first.  * &#x60;last_user_action_event_date&#x60; - Sort the results by the date of the last user action. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFolderContents: async (projectId: number, userId: number, direction?: 'asc' | 'desc', filter?: 'folder' | 'live_event' | 'video', page?: number, perPage?: number, sort?: 'alphabetical' | 'date' | 'default' | 'duration' | 'last_user_action_event_date', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getFolderContents', 'projectId', projectId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getFolderContents', 'userId', userId)
            const localVarPath = `/users/{user_id}/projects/{project_id}/items`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-project_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/projects/{project_id}/items',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every item that belongs to the specified folder.
         * @summary Get all the items in a folder
         * @param {number} projectId The ID of the folder.
         * @param {'asc' | 'desc'} [direction] The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order. 
         * @param {'folder' | 'live_event' | 'video'} [filter] The attribute by which to filter the results.  Option descriptions:  * &#x60;folder&#x60; - Filter the results by folder.  * &#x60;live_event&#x60; - Filter the results by event.  * &#x60;video&#x60; - Filter the results by video. 
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {'alphabetical' | 'date' | 'default' | 'duration' | 'last_user_action_event_date'} [sort] The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Use the default sort order.  * &#x60;duration&#x60; - Sort the results by duration. Items without a duration, namely events and folders, are grouped by type in ascending alphabetical order, with events first.  * &#x60;last_user_action_event_date&#x60; - Sort the results by the date of the last user action. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFolderItems: async (projectId: number, direction?: 'asc' | 'desc', filter?: 'folder' | 'live_event' | 'video', page?: number, perPage?: number, sort?: 'alphabetical' | 'date' | 'default' | 'duration' | 'last_user_action_event_date', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getFolderItems', 'projectId', projectId)
            const localVarPath = `/me/projects/{project_id}/items`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-project_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/projects/{project_id}/items',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method removes all items from the specified folder.
         * @summary Remove items from a folder
         * @param {number} projectId The ID of the folder.
         * @param {string} uris A comma-separated list of video or event URIs to remove.
         * @param {boolean} [shouldDeleteItems] Whether to delete the items when removing them from the folder.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFromFolder: async (projectId: number, uris: string, shouldDeleteItems?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('removeFromFolder', 'projectId', projectId)
            // verify required parameter 'uris' is not null or undefined
            assertParamExists('removeFromFolder', 'uris', uris)
            const localVarPath = `/me/projects/{project_id}/items`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-project_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["interact"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["interact"], configuration)
            if (shouldDeleteItems !== undefined) {
                localVarQueryParameter['should_delete_items'] = shouldDeleteItems;
            }

            if (uris !== undefined) {
                localVarQueryParameter['uris'] = uris;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/projects/{project_id}/items',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FoldersItemsApi - functional programming interface
 * @export
 */
export const FoldersItemsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FoldersItemsApiAxiosParamCreator(configuration)
    return {
        /**
         * This method returns every item that belongs to the specified folder.
         * @summary Get all the items in a folder
         * @param {FoldersItemsApiGetFolderContentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFolderContents(requestParameters: FoldersItemsApiGetFolderContentsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFolderContents(requestParameters.projectId, requestParameters.userId, requestParameters.direction, requestParameters.filter, requestParameters.page, requestParameters.perPage, requestParameters.sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every item that belongs to the specified folder.
         * @summary Get all the items in a folder
         * @param {FoldersItemsApiGetFolderItemsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFolderItems(requestParameters: FoldersItemsApiGetFolderItemsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFolderItems(requestParameters.projectId, requestParameters.direction, requestParameters.filter, requestParameters.page, requestParameters.perPage, requestParameters.sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method removes all items from the specified folder.
         * @summary Remove items from a folder
         * @param {FoldersItemsApiRemoveFromFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeFromFolder(requestParameters: FoldersItemsApiRemoveFromFolderRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeFromFolder(requestParameters.projectId, requestParameters.uris, requestParameters.shouldDeleteItems, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FoldersItemsApi - factory interface
 * @export
 */
export const FoldersItemsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FoldersItemsApiFp(configuration)
    return {
        /**
         * This method returns every item that belongs to the specified folder.
         * @summary Get all the items in a folder
         * @param {FoldersItemsApiGetFolderContentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFolderContents(requestParameters: FoldersItemsApiGetFolderContentsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getFolderContents(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every item that belongs to the specified folder.
         * @summary Get all the items in a folder
         * @param {FoldersItemsApiGetFolderItemsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFolderItems(requestParameters: FoldersItemsApiGetFolderItemsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getFolderItems(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method removes all items from the specified folder.
         * @summary Remove items from a folder
         * @param {FoldersItemsApiRemoveFromFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFromFolder(requestParameters: FoldersItemsApiRemoveFromFolderRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeFromFolder(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getFolderContents operation in FoldersItemsApi.
 * @export
 * @interface FoldersItemsApiGetFolderContentsRequest
 */
export type FoldersItemsApiGetFolderContentsRequest = {
    
    /**
    * The ID of the folder.
    * @type {number}
    * @memberof FoldersItemsApiGetFolderContents
    */
    readonly projectId: number
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof FoldersItemsApiGetFolderContents
    */
    readonly userId: number
    
    /**
    * The sort direction of the results.  Option descriptions:  * `asc` - Sort the results in ascending order.  * `desc` - Sort the results in descending order. 
    * @type {'asc' | 'desc'}
    * @memberof FoldersItemsApiGetFolderContents
    */
    readonly direction?: 'asc' | 'desc'
    
    /**
    * The attribute by which to filter the results.  Option descriptions:  * `folder` - Filter the results by folder.  * `live_event` - Filter the results by event.  * `video` - Filter the results by video. 
    * @type {'folder' | 'live_event' | 'video'}
    * @memberof FoldersItemsApiGetFolderContents
    */
    readonly filter?: 'folder' | 'live_event' | 'video'
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof FoldersItemsApiGetFolderContents
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof FoldersItemsApiGetFolderContents
    */
    readonly perPage?: number
    
    /**
    * The way to sort the results.  Option descriptions:  * `alphabetical` - Sort the results alphabetically.  * `date` - Sort the results by date.  * `default` - Use the default sort order.  * `duration` - Sort the results by duration. Items without a duration, namely events and folders, are grouped by type in ascending alphabetical order, with events first.  * `last_user_action_event_date` - Sort the results by the date of the last user action. 
    * @type {'alphabetical' | 'date' | 'default' | 'duration' | 'last_user_action_event_date'}
    * @memberof FoldersItemsApiGetFolderContents
    */
    readonly sort?: 'alphabetical' | 'date' | 'default' | 'duration' | 'last_user_action_event_date'
    
}

/**
 * Request parameters for getFolderItems operation in FoldersItemsApi.
 * @export
 * @interface FoldersItemsApiGetFolderItemsRequest
 */
export type FoldersItemsApiGetFolderItemsRequest = {
    
    /**
    * The ID of the folder.
    * @type {number}
    * @memberof FoldersItemsApiGetFolderItems
    */
    readonly projectId: number
    
    /**
    * The sort direction of the results.  Option descriptions:  * `asc` - Sort the results in ascending order.  * `desc` - Sort the results in descending order. 
    * @type {'asc' | 'desc'}
    * @memberof FoldersItemsApiGetFolderItems
    */
    readonly direction?: 'asc' | 'desc'
    
    /**
    * The attribute by which to filter the results.  Option descriptions:  * `folder` - Filter the results by folder.  * `live_event` - Filter the results by event.  * `video` - Filter the results by video. 
    * @type {'folder' | 'live_event' | 'video'}
    * @memberof FoldersItemsApiGetFolderItems
    */
    readonly filter?: 'folder' | 'live_event' | 'video'
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof FoldersItemsApiGetFolderItems
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof FoldersItemsApiGetFolderItems
    */
    readonly perPage?: number
    
    /**
    * The way to sort the results.  Option descriptions:  * `alphabetical` - Sort the results alphabetically.  * `date` - Sort the results by date.  * `default` - Use the default sort order.  * `duration` - Sort the results by duration. Items without a duration, namely events and folders, are grouped by type in ascending alphabetical order, with events first.  * `last_user_action_event_date` - Sort the results by the date of the last user action. 
    * @type {'alphabetical' | 'date' | 'default' | 'duration' | 'last_user_action_event_date'}
    * @memberof FoldersItemsApiGetFolderItems
    */
    readonly sort?: 'alphabetical' | 'date' | 'default' | 'duration' | 'last_user_action_event_date'
    
}

/**
 * Request parameters for removeFromFolder operation in FoldersItemsApi.
 * @export
 * @interface FoldersItemsApiRemoveFromFolderRequest
 */
export type FoldersItemsApiRemoveFromFolderRequest = {
    
    /**
    * The ID of the folder.
    * @type {number}
    * @memberof FoldersItemsApiRemoveFromFolder
    */
    readonly projectId: number
    
    /**
    * A comma-separated list of video or event URIs to remove.
    * @type {string}
    * @memberof FoldersItemsApiRemoveFromFolder
    */
    readonly uris: string
    
    /**
    * Whether to delete the items when removing them from the folder.
    * @type {boolean}
    * @memberof FoldersItemsApiRemoveFromFolder
    */
    readonly shouldDeleteItems?: boolean
    
}

/**
 * FoldersItemsApiGenerated - object-oriented interface
 * @export
 * @class FoldersItemsApiGenerated
 * @extends {BaseAPI}
 */
export class FoldersItemsApiGenerated extends BaseAPI {
    /**
     * This method returns every item that belongs to the specified folder.
     * @summary Get all the items in a folder
     * @param {FoldersItemsApiGetFolderContentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersItemsApiGenerated
     */
    public getFolderContents(requestParameters: FoldersItemsApiGetFolderContentsRequest, options?: AxiosRequestConfig) {
        return FoldersItemsApiFp(this.configuration).getFolderContents(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every item that belongs to the specified folder.
     * @summary Get all the items in a folder
     * @param {FoldersItemsApiGetFolderItemsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersItemsApiGenerated
     */
    public getFolderItems(requestParameters: FoldersItemsApiGetFolderItemsRequest, options?: AxiosRequestConfig) {
        return FoldersItemsApiFp(this.configuration).getFolderItems(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method removes all items from the specified folder.
     * @summary Remove items from a folder
     * @param {FoldersItemsApiRemoveFromFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersItemsApiGenerated
     */
    public removeFromFolder(requestParameters: FoldersItemsApiRemoveFromFolderRequest, options?: AxiosRequestConfig) {
        return FoldersItemsApiFp(this.configuration).removeFromFolder(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
