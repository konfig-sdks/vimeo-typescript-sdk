/* tslint:disable */
/* eslint-disable */
/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

The version of the OpenAPI document: 3.4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ModelError } from '../models';
// @ts-ignore
import { UploadAttempt } from '../models';
// @ts-ignore
import { UploadVideoRequest } from '../models';
// @ts-ignore
import { UploadVideoRequestEmbed } from '../models';
// @ts-ignore
import { UploadVideoRequestPrivacy } from '../models';
// @ts-ignore
import { UploadVideoRequestReviewPage } from '../models';
// @ts-ignore
import { UploadVideoRequestSpatial } from '../models';
// @ts-ignore
import { UploadVideoRequestUpload } from '../models';
// @ts-ignore
import { Video } from '../models';
// @ts-ignore
import { VideosUploadsBeginVideoUploadProcessRequest } from '../models';
// @ts-ignore
import { VideosUploadsBeginVideoUploadProcessRequestEmbed } from '../models';
// @ts-ignore
import { VideosUploadsBeginVideoUploadProcessRequestPrivacy } from '../models';
// @ts-ignore
import { VideosUploadsBeginVideoUploadProcessRequestReviewPage } from '../models';
// @ts-ignore
import { VideosUploadsBeginVideoUploadProcessRequestSpatial } from '../models';
// @ts-ignore
import { VideosUploadsBeginVideoUploadProcessRequestUpload } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * VideosUploadsApi - axios parameter creator
 * @export
 */
export const VideosUploadsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method begins the video upload process for the authenticated user. For more information, see our [upload documentation](https://developer.vimeo.com/api/upload/videos).
         * @summary Upload a video
         * @param {VideosUploadsBeginVideoUploadProcessRequest} videosUploadsBeginVideoUploadProcessRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beginVideoUploadProcess: async (videosUploadsBeginVideoUploadProcessRequest: VideosUploadsBeginVideoUploadProcessRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'videosUploadsBeginVideoUploadProcessRequest' is not null or undefined
            assertParamExists('beginVideoUploadProcess', 'videosUploadsBeginVideoUploadProcessRequest', videosUploadsBeginVideoUploadProcessRequest)
            const localVarPath = `/me/videos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["upload"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["upload"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.vimeo.video+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: videosUploadsBeginVideoUploadProcessRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/me/videos',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(videosUploadsBeginVideoUploadProcessRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method completes the specified streaming upload of the authenticated user.
         * @summary Complete a streaming upload
         * @param {number} uploadId The ID of the streaming upload.
         * @param {number} userId The ID of the user.
         * @param {string} signature The crypto signature of the completed upload.
         * @param {number} videoFileId The ID of the uploaded file.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeStreamingUpload: async (uploadId: number, userId: number, signature: string, videoFileId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uploadId' is not null or undefined
            assertParamExists('completeStreamingUpload', 'uploadId', uploadId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('completeStreamingUpload', 'userId', userId)
            // verify required parameter 'signature' is not null or undefined
            assertParamExists('completeStreamingUpload', 'signature', signature)
            // verify required parameter 'videoFileId' is not null or undefined
            assertParamExists('completeStreamingUpload', 'videoFileId', videoFileId)
            const localVarPath = `/users/{user_id}/uploads/{upload_id}`
                .replace(`{${"upload_id"}}`, encodeURIComponent(String(uploadId !== undefined ? uploadId : `-upload_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["upload"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["upload"], configuration)
            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            if (videoFileId !== undefined) {
                localVarQueryParameter['video_file_id'] = videoFileId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/uploads/{upload_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns the specified upload attempt of the authenticated user. _This method has been deprecated. For information on our currently supported upload approaches, see our [Working with Video Uploads](https://developer.vimeo.com/api/upload/videos) guide._
         * @summary Get an upload attempt
         * @param {number} uploadId The ID of the upload attempt.
         * @param {number} userId The ID of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUploadAttempt: async (uploadId: number, userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uploadId' is not null or undefined
            assertParamExists('getUploadAttempt', 'uploadId', uploadId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUploadAttempt', 'userId', userId)
            const localVarPath = `/users/{user_id}/uploads/{upload_id}`
                .replace(`{${"upload_id"}}`, encodeURIComponent(String(uploadId !== undefined ? uploadId : `-upload_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["upload"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["upload"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/uploads/{upload_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method begins the video upload process for the authenticated user. For more information, see our [upload documentation](https://developer.vimeo.com/api/upload/videos).
         * @summary Upload a video
         * @param {number} userId The ID of the user.
         * @param {UploadVideoRequest} uploadVideoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        video: async (userId: number, uploadVideoRequest: UploadVideoRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('video', 'userId', userId)
            // verify required parameter 'uploadVideoRequest' is not null or undefined
            assertParamExists('video', 'uploadVideoRequest', uploadVideoRequest)
            const localVarPath = `/users/{user_id}/videos`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["upload"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["upload"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.vimeo.video+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: uploadVideoRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/videos',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(uploadVideoRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VideosUploadsApi - functional programming interface
 * @export
 */
export const VideosUploadsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VideosUploadsApiAxiosParamCreator(configuration)
    return {
        /**
         * This method begins the video upload process for the authenticated user. For more information, see our [upload documentation](https://developer.vimeo.com/api/upload/videos).
         * @summary Upload a video
         * @param {VideosUploadsApiBeginVideoUploadProcessRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async beginVideoUploadProcess(requestParameters: VideosUploadsApiBeginVideoUploadProcessRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Video>> {
            const videosUploadsBeginVideoUploadProcessRequest: VideosUploadsBeginVideoUploadProcessRequest = {
                description: requestParameters.description,
                content_rating: requestParameters.content_rating,
                embed: requestParameters.embed,
                embed_domains: requestParameters.embed_domains,
                folder_uri: requestParameters.folder_uri,
                hide_from_vimeo: requestParameters.hide_from_vimeo,
                license: requestParameters.license,
                locale: requestParameters.locale,
                name: requestParameters.name,
                password: requestParameters.password,
                privacy: requestParameters.privacy,
                review_page: requestParameters.review_page,
                spatial: requestParameters.spatial,
                upload: requestParameters.upload
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.beginVideoUploadProcess(videosUploadsBeginVideoUploadProcessRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method completes the specified streaming upload of the authenticated user.
         * @summary Complete a streaming upload
         * @param {VideosUploadsApiCompleteStreamingUploadRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async completeStreamingUpload(requestParameters: VideosUploadsApiCompleteStreamingUploadRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.completeStreamingUpload(requestParameters.uploadId, requestParameters.userId, requestParameters.signature, requestParameters.videoFileId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns the specified upload attempt of the authenticated user. _This method has been deprecated. For information on our currently supported upload approaches, see our [Working with Video Uploads](https://developer.vimeo.com/api/upload/videos) guide._
         * @summary Get an upload attempt
         * @param {VideosUploadsApiGetUploadAttemptRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUploadAttempt(requestParameters: VideosUploadsApiGetUploadAttemptRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadAttempt>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUploadAttempt(requestParameters.uploadId, requestParameters.userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method begins the video upload process for the authenticated user. For more information, see our [upload documentation](https://developer.vimeo.com/api/upload/videos).
         * @summary Upload a video
         * @param {VideosUploadsApiVideoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async video(requestParameters: VideosUploadsApiVideoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Video>> {
            const uploadVideoRequest: UploadVideoRequest = {
                description: requestParameters.description,
                content_rating: requestParameters.content_rating,
                embed: requestParameters.embed,
                embed_domains: requestParameters.embed_domains,
                folder_uri: requestParameters.folder_uri,
                hide_from_vimeo: requestParameters.hide_from_vimeo,
                license: requestParameters.license,
                locale: requestParameters.locale,
                name: requestParameters.name,
                password: requestParameters.password,
                privacy: requestParameters.privacy,
                review_page: requestParameters.review_page,
                spatial: requestParameters.spatial,
                upload: requestParameters.upload
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.video(requestParameters.userId, uploadVideoRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VideosUploadsApi - factory interface
 * @export
 */
export const VideosUploadsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VideosUploadsApiFp(configuration)
    return {
        /**
         * This method begins the video upload process for the authenticated user. For more information, see our [upload documentation](https://developer.vimeo.com/api/upload/videos).
         * @summary Upload a video
         * @param {VideosUploadsApiBeginVideoUploadProcessRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beginVideoUploadProcess(requestParameters: VideosUploadsApiBeginVideoUploadProcessRequest, options?: AxiosRequestConfig): AxiosPromise<Video> {
            return localVarFp.beginVideoUploadProcess(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method completes the specified streaming upload of the authenticated user.
         * @summary Complete a streaming upload
         * @param {VideosUploadsApiCompleteStreamingUploadRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeStreamingUpload(requestParameters: VideosUploadsApiCompleteStreamingUploadRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.completeStreamingUpload(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns the specified upload attempt of the authenticated user. _This method has been deprecated. For information on our currently supported upload approaches, see our [Working with Video Uploads](https://developer.vimeo.com/api/upload/videos) guide._
         * @summary Get an upload attempt
         * @param {VideosUploadsApiGetUploadAttemptRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUploadAttempt(requestParameters: VideosUploadsApiGetUploadAttemptRequest, options?: AxiosRequestConfig): AxiosPromise<UploadAttempt> {
            return localVarFp.getUploadAttempt(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method begins the video upload process for the authenticated user. For more information, see our [upload documentation](https://developer.vimeo.com/api/upload/videos).
         * @summary Upload a video
         * @param {VideosUploadsApiVideoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        video(requestParameters: VideosUploadsApiVideoRequest, options?: AxiosRequestConfig): AxiosPromise<Video> {
            return localVarFp.video(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for beginVideoUploadProcess operation in VideosUploadsApi.
 * @export
 * @interface VideosUploadsApiBeginVideoUploadProcessRequest
 */
export type VideosUploadsApiBeginVideoUploadProcessRequest = {
    
} & VideosUploadsBeginVideoUploadProcessRequest

/**
 * Request parameters for completeStreamingUpload operation in VideosUploadsApi.
 * @export
 * @interface VideosUploadsApiCompleteStreamingUploadRequest
 */
export type VideosUploadsApiCompleteStreamingUploadRequest = {
    
    /**
    * The ID of the streaming upload.
    * @type {number}
    * @memberof VideosUploadsApiCompleteStreamingUpload
    */
    readonly uploadId: number
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof VideosUploadsApiCompleteStreamingUpload
    */
    readonly userId: number
    
    /**
    * The crypto signature of the completed upload.
    * @type {string}
    * @memberof VideosUploadsApiCompleteStreamingUpload
    */
    readonly signature: string
    
    /**
    * The ID of the uploaded file.
    * @type {number}
    * @memberof VideosUploadsApiCompleteStreamingUpload
    */
    readonly videoFileId: number
    
}

/**
 * Request parameters for getUploadAttempt operation in VideosUploadsApi.
 * @export
 * @interface VideosUploadsApiGetUploadAttemptRequest
 */
export type VideosUploadsApiGetUploadAttemptRequest = {
    
    /**
    * The ID of the upload attempt.
    * @type {number}
    * @memberof VideosUploadsApiGetUploadAttempt
    */
    readonly uploadId: number
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof VideosUploadsApiGetUploadAttempt
    */
    readonly userId: number
    
}

/**
 * Request parameters for video operation in VideosUploadsApi.
 * @export
 * @interface VideosUploadsApiVideoRequest
 */
export type VideosUploadsApiVideoRequest = {
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof VideosUploadsApiVideo
    */
    readonly userId: number
    
} & UploadVideoRequest

/**
 * VideosUploadsApiGenerated - object-oriented interface
 * @export
 * @class VideosUploadsApiGenerated
 * @extends {BaseAPI}
 */
export class VideosUploadsApiGenerated extends BaseAPI {
    /**
     * This method begins the video upload process for the authenticated user. For more information, see our [upload documentation](https://developer.vimeo.com/api/upload/videos).
     * @summary Upload a video
     * @param {VideosUploadsApiBeginVideoUploadProcessRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosUploadsApiGenerated
     */
    public beginVideoUploadProcess(requestParameters: VideosUploadsApiBeginVideoUploadProcessRequest, options?: AxiosRequestConfig) {
        return VideosUploadsApiFp(this.configuration).beginVideoUploadProcess(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method completes the specified streaming upload of the authenticated user.
     * @summary Complete a streaming upload
     * @param {VideosUploadsApiCompleteStreamingUploadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosUploadsApiGenerated
     */
    public completeStreamingUpload(requestParameters: VideosUploadsApiCompleteStreamingUploadRequest, options?: AxiosRequestConfig) {
        return VideosUploadsApiFp(this.configuration).completeStreamingUpload(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns the specified upload attempt of the authenticated user. _This method has been deprecated. For information on our currently supported upload approaches, see our [Working with Video Uploads](https://developer.vimeo.com/api/upload/videos) guide._
     * @summary Get an upload attempt
     * @param {VideosUploadsApiGetUploadAttemptRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosUploadsApiGenerated
     */
    public getUploadAttempt(requestParameters: VideosUploadsApiGetUploadAttemptRequest, options?: AxiosRequestConfig) {
        return VideosUploadsApiFp(this.configuration).getUploadAttempt(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method begins the video upload process for the authenticated user. For more information, see our [upload documentation](https://developer.vimeo.com/api/upload/videos).
     * @summary Upload a video
     * @param {VideosUploadsApiVideoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosUploadsApiGenerated
     */
    public video(requestParameters: VideosUploadsApiVideoRequest, options?: AxiosRequestConfig) {
        return VideosUploadsApiFp(this.configuration).video(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
