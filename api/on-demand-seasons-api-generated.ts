/* tslint:disable */
/* eslint-disable */
/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

The version of the OpenAPI document: 3.4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { LegacyError } from '../models';
// @ts-ignore
import { OnDemandSeason } from '../models';
// @ts-ignore
import { Video } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * OnDemandSeasonsApi - axios parameter creator
 * @export
 */
export const OnDemandSeasonsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method returns every video in the specified season on an On Demand page.
         * @summary Get all the videos in a season on an On Demand page
         * @param {number} ondemandId The ID of the On Demand page.
         * @param {number} seasonId The ID of the season.
         * @param {'viewable'} [filter] The attribute by which to filter the results.  Option descriptions:  * &#x60;viewable&#x60; - Filter by viewable videos. 
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {'date' | 'default' | 'manual' | 'name' | 'purchase_time' | 'release_date'} [sort] The way to sort the results.  Option descriptions:  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Use the default sorting method.  * &#x60;manual&#x60; - Sort the results manually.  * &#x60;name&#x60; - Sort the results by name.  * &#x60;purchase_time&#x60; - Sort the results by time of purchase.  * &#x60;release_date&#x60; - Sort the results by release date. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllVideosInSeason: async (ondemandId: number, seasonId: number, filter?: 'viewable', page?: number, perPage?: number, sort?: 'date' | 'default' | 'manual' | 'name' | 'purchase_time' | 'release_date', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ondemandId' is not null or undefined
            assertParamExists('getAllVideosInSeason', 'ondemandId', ondemandId)
            // verify required parameter 'seasonId' is not null or undefined
            assertParamExists('getAllVideosInSeason', 'seasonId', seasonId)
            const localVarPath = `/ondemand/pages/{ondemand_id}/seasons/{season_id}/videos`
                .replace(`{${"ondemand_id"}}`, encodeURIComponent(String(ondemandId !== undefined ? ondemandId : `-ondemand_id-`)))
                .replace(`{${"season_id"}}`, encodeURIComponent(String(seasonId !== undefined ? seasonId : `-season_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ondemand/pages/{ondemand_id}/seasons/{season_id}/videos',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns every season on the specified On Demand page.
         * @summary Get all the seasons on an On Demand page
         * @param {number} ondemandId The ID of the On Demand page.
         * @param {'asc' | 'desc'} [direction] The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order. 
         * @param {'viewable'} [filter] The attribute by which to filter the results.  Option descriptions:  * &#x60;viewable&#x60; - Filter by viewable seasons. 
         * @param {number} [page] The page number of the results to show.
         * @param {number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
         * @param {'date' | 'manual'} [sort] The way to sort the results.  Option descriptions:  * &#x60;date&#x60; - Sort the results by date.  * &#x60;manual&#x60; - Sort the results manually. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAll: async (ondemandId: number, direction?: 'asc' | 'desc', filter?: 'viewable', page?: number, perPage?: number, sort?: 'date' | 'manual', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ondemandId' is not null or undefined
            assertParamExists('listAll', 'ondemandId', ondemandId)
            const localVarPath = `/ondemand/pages/{ondemand_id}/seasons`
                .replace(`{${"ondemand_id"}}`, encodeURIComponent(String(ondemandId !== undefined ? ondemandId : `-ondemand_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ondemand/pages/{ondemand_id}/seasons',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns a single season on the specified On Demand page.
         * @summary Get a specific season on an On Demand page
         * @param {number} ondemandId The ID of the On Demand page.
         * @param {number} seasonId The ID of the season.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        specificGet: async (ondemandId: number, seasonId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ondemandId' is not null or undefined
            assertParamExists('specificGet', 'ondemandId', ondemandId)
            // verify required parameter 'seasonId' is not null or undefined
            assertParamExists('specificGet', 'seasonId', seasonId)
            const localVarPath = `/ondemand/pages/{ondemand_id}/seasons/{season_id}`
                .replace(`{${"ondemand_id"}}`, encodeURIComponent(String(ondemandId !== undefined ? ondemandId : `-ondemand_id-`)))
                .replace(`{${"season_id"}}`, encodeURIComponent(String(seasonId !== undefined ? seasonId : `-season_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["create", "delete", "edit", "email", "interact", "private", "promo_codes", "public", "purchase", "purchased", "scim", "stats", "upload", "video_files"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ondemand/pages/{ondemand_id}/seasons/{season_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OnDemandSeasonsApi - functional programming interface
 * @export
 */
export const OnDemandSeasonsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OnDemandSeasonsApiAxiosParamCreator(configuration)
    return {
        /**
         * This method returns every video in the specified season on an On Demand page.
         * @summary Get all the videos in a season on an On Demand page
         * @param {OnDemandSeasonsApiGetAllVideosInSeasonRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllVideosInSeason(requestParameters: OnDemandSeasonsApiGetAllVideosInSeasonRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Video>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllVideosInSeason(requestParameters.ondemandId, requestParameters.seasonId, requestParameters.filter, requestParameters.page, requestParameters.perPage, requestParameters.sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns every season on the specified On Demand page.
         * @summary Get all the seasons on an On Demand page
         * @param {OnDemandSeasonsApiListAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAll(requestParameters: OnDemandSeasonsApiListAllRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OnDemandSeason>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAll(requestParameters.ondemandId, requestParameters.direction, requestParameters.filter, requestParameters.page, requestParameters.perPage, requestParameters.sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns a single season on the specified On Demand page.
         * @summary Get a specific season on an On Demand page
         * @param {OnDemandSeasonsApiSpecificGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async specificGet(requestParameters: OnDemandSeasonsApiSpecificGetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OnDemandSeason>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.specificGet(requestParameters.ondemandId, requestParameters.seasonId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OnDemandSeasonsApi - factory interface
 * @export
 */
export const OnDemandSeasonsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OnDemandSeasonsApiFp(configuration)
    return {
        /**
         * This method returns every video in the specified season on an On Demand page.
         * @summary Get all the videos in a season on an On Demand page
         * @param {OnDemandSeasonsApiGetAllVideosInSeasonRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllVideosInSeason(requestParameters: OnDemandSeasonsApiGetAllVideosInSeasonRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Video>> {
            return localVarFp.getAllVideosInSeason(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns every season on the specified On Demand page.
         * @summary Get all the seasons on an On Demand page
         * @param {OnDemandSeasonsApiListAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAll(requestParameters: OnDemandSeasonsApiListAllRequest, options?: AxiosRequestConfig): AxiosPromise<Array<OnDemandSeason>> {
            return localVarFp.listAll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns a single season on the specified On Demand page.
         * @summary Get a specific season on an On Demand page
         * @param {OnDemandSeasonsApiSpecificGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        specificGet(requestParameters: OnDemandSeasonsApiSpecificGetRequest, options?: AxiosRequestConfig): AxiosPromise<OnDemandSeason> {
            return localVarFp.specificGet(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAllVideosInSeason operation in OnDemandSeasonsApi.
 * @export
 * @interface OnDemandSeasonsApiGetAllVideosInSeasonRequest
 */
export type OnDemandSeasonsApiGetAllVideosInSeasonRequest = {
    
    /**
    * The ID of the On Demand page.
    * @type {number}
    * @memberof OnDemandSeasonsApiGetAllVideosInSeason
    */
    readonly ondemandId: number
    
    /**
    * The ID of the season.
    * @type {number}
    * @memberof OnDemandSeasonsApiGetAllVideosInSeason
    */
    readonly seasonId: number
    
    /**
    * The attribute by which to filter the results.  Option descriptions:  * `viewable` - Filter by viewable videos. 
    * @type {'viewable'}
    * @memberof OnDemandSeasonsApiGetAllVideosInSeason
    */
    readonly filter?: 'viewable'
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof OnDemandSeasonsApiGetAllVideosInSeason
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof OnDemandSeasonsApiGetAllVideosInSeason
    */
    readonly perPage?: number
    
    /**
    * The way to sort the results.  Option descriptions:  * `date` - Sort the results by date.  * `default` - Use the default sorting method.  * `manual` - Sort the results manually.  * `name` - Sort the results by name.  * `purchase_time` - Sort the results by time of purchase.  * `release_date` - Sort the results by release date. 
    * @type {'date' | 'default' | 'manual' | 'name' | 'purchase_time' | 'release_date'}
    * @memberof OnDemandSeasonsApiGetAllVideosInSeason
    */
    readonly sort?: 'date' | 'default' | 'manual' | 'name' | 'purchase_time' | 'release_date'
    
}

/**
 * Request parameters for listAll operation in OnDemandSeasonsApi.
 * @export
 * @interface OnDemandSeasonsApiListAllRequest
 */
export type OnDemandSeasonsApiListAllRequest = {
    
    /**
    * The ID of the On Demand page.
    * @type {number}
    * @memberof OnDemandSeasonsApiListAll
    */
    readonly ondemandId: number
    
    /**
    * The sort direction of the results.  Option descriptions:  * `asc` - Sort the results in ascending order.  * `desc` - Sort the results in descending order. 
    * @type {'asc' | 'desc'}
    * @memberof OnDemandSeasonsApiListAll
    */
    readonly direction?: 'asc' | 'desc'
    
    /**
    * The attribute by which to filter the results.  Option descriptions:  * `viewable` - Filter by viewable seasons. 
    * @type {'viewable'}
    * @memberof OnDemandSeasonsApiListAll
    */
    readonly filter?: 'viewable'
    
    /**
    * The page number of the results to show.
    * @type {number}
    * @memberof OnDemandSeasonsApiListAll
    */
    readonly page?: number
    
    /**
    * The number of items to show on each page of results, up to a maximum of 100.
    * @type {number}
    * @memberof OnDemandSeasonsApiListAll
    */
    readonly perPage?: number
    
    /**
    * The way to sort the results.  Option descriptions:  * `date` - Sort the results by date.  * `manual` - Sort the results manually. 
    * @type {'date' | 'manual'}
    * @memberof OnDemandSeasonsApiListAll
    */
    readonly sort?: 'date' | 'manual'
    
}

/**
 * Request parameters for specificGet operation in OnDemandSeasonsApi.
 * @export
 * @interface OnDemandSeasonsApiSpecificGetRequest
 */
export type OnDemandSeasonsApiSpecificGetRequest = {
    
    /**
    * The ID of the On Demand page.
    * @type {number}
    * @memberof OnDemandSeasonsApiSpecificGet
    */
    readonly ondemandId: number
    
    /**
    * The ID of the season.
    * @type {number}
    * @memberof OnDemandSeasonsApiSpecificGet
    */
    readonly seasonId: number
    
}

/**
 * OnDemandSeasonsApiGenerated - object-oriented interface
 * @export
 * @class OnDemandSeasonsApiGenerated
 * @extends {BaseAPI}
 */
export class OnDemandSeasonsApiGenerated extends BaseAPI {
    /**
     * This method returns every video in the specified season on an On Demand page.
     * @summary Get all the videos in a season on an On Demand page
     * @param {OnDemandSeasonsApiGetAllVideosInSeasonRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnDemandSeasonsApiGenerated
     */
    public getAllVideosInSeason(requestParameters: OnDemandSeasonsApiGetAllVideosInSeasonRequest, options?: AxiosRequestConfig) {
        return OnDemandSeasonsApiFp(this.configuration).getAllVideosInSeason(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns every season on the specified On Demand page.
     * @summary Get all the seasons on an On Demand page
     * @param {OnDemandSeasonsApiListAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnDemandSeasonsApiGenerated
     */
    public listAll(requestParameters: OnDemandSeasonsApiListAllRequest, options?: AxiosRequestConfig) {
        return OnDemandSeasonsApiFp(this.configuration).listAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns a single season on the specified On Demand page.
     * @summary Get a specific season on an On Demand page
     * @param {OnDemandSeasonsApiSpecificGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnDemandSeasonsApiGenerated
     */
    public specificGet(requestParameters: OnDemandSeasonsApiSpecificGetRequest, options?: AxiosRequestConfig) {
        return OnDemandSeasonsApiFp(this.configuration).specificGet(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
