/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

The version of the OpenAPI document: 3.4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/
import type * as buffer from "buffer"

import { LiveEventEmbedEmbedProperties } from './live-event-embed-embed-properties';
import { LiveEventRecurringEmbedColors } from './live-event-recurring-embed-colors';
import { LiveEventRecurringEmbedLogos } from './live-event-recurring-embed-logos';

/**
 * The event\'s embed data.
 * @export
 * @interface LiveEventRecurringEmbed
 */
export interface LiveEventRecurringEmbed {
    /**
     * Whether the embedded RLE player should display the video title.
     * @type {boolean}
     * @memberof LiveEventRecurringEmbed
     */
    'title': boolean;
    /**
     * Whether AirPlay is enabled in the embeddable player.
     * @type {boolean}
     * @memberof LiveEventRecurringEmbed
     */
    'airplay': boolean;
    /**
     * Whether the embedded RLE player should autoplay the RLE content.
     * @type {boolean}
     * @memberof LiveEventRecurringEmbed
     */
    'autoplay': boolean;
    /**
     * The list of user-uploaded logos for configuration of the embed player.
     * @type {Array<string>}
     * @memberof LiveEventRecurringEmbed
     */
    'available_player_logos': Array<string>;
    /**
     * Whether the embedded RLE player should display the author\'s name.
     * @type {boolean}
     * @memberof LiveEventRecurringEmbed
     */
    'byline': boolean;
    /**
     * The chat\'s iFrame source URL.
     * @type {string}
     * @memberof LiveEventRecurringEmbed
     */
    'chat_embed_source': string | null;
    /**
     * Whether the Chromecast button appears in the embeddable player.
     * @type {boolean}
     * @memberof LiveEventRecurringEmbed
     */
    'chromecast': boolean;
    /**
     * Whether closed captions are enabled in the embeddable player.
     * @type {boolean}
     * @memberof LiveEventRecurringEmbed
     */
    'closed_captions': boolean;
    /**
     * The first player color, which controls the color of the progress bar, buttons, and more.
     * @type {string}
     * @memberof LiveEventRecurringEmbed
     */
    'color': string;
    /**
     * 
     * @type {LiveEventRecurringEmbedColors}
     * @memberof LiveEventRecurringEmbed
     */
    'colors': LiveEventRecurringEmbedColors;
    /**
     * The embed code for RLE chat.
     * @type {string}
     * @memberof LiveEventRecurringEmbed
     */
    'embed_chat': string | null;
    /**
     * 
     * @type {LiveEventEmbedEmbedProperties}
     * @memberof LiveEventRecurringEmbed
     */
    'embed_properties': LiveEventEmbedEmbedProperties | null;
    /**
     * Whether the embedded RLE player should display the event schedule.
     * @type {boolean}
     * @memberof LiveEventRecurringEmbed
     */
    'event_schedule': boolean;
    /**
     * Whether the embedded RLE player should include the fullscreen controls.
     * @type {boolean}
     * @memberof LiveEventRecurringEmbed
     */
    'fullscreen_button': boolean;
    /**
     * Whether the Live label should be visible over the player.
     * @type {boolean}
     * @memberof LiveEventRecurringEmbed
     */
    'hide_live_label': boolean;
    /**
     * Whether the embedded RLE player should hide the viewer counter.
     * @type {boolean}
     * @memberof LiveEventRecurringEmbed
     */
    'hide_viewer_count': boolean;
    /**
     * The fixed HTML code to embed the event\'s playlist on a website.
     * @type {string}
     * @memberof LiveEventRecurringEmbed
     */
    'html': string | null;
    /**
     * Whether the embedded RLE player should include the `like` button.
     * @type {boolean}
     * @memberof LiveEventRecurringEmbed
     */
    'like_button': boolean;
    /**
     * 
     * @type {LiveEventRecurringEmbedLogos}
     * @memberof LiveEventRecurringEmbed
     */
    'logos': LiveEventRecurringEmbedLogos;
    /**
     * Whether the embedded RLE player should loop back to the first video once content is exhausted.
     * @type {boolean}
     * @memberof LiveEventRecurringEmbed
     */
    'loop': boolean;
    /**
     * Whether picture-in-picture is enabled and the button appears in the embeddable player.
     * @type {boolean}
     * @memberof LiveEventRecurringEmbed
     */
    'pip': boolean;
    /**
     * The position of the player\'s play button.  Option descriptions:  * `0` - The play button has the default position.  * `1` - The play button appears at the bottom of the interface.  * `2` - The play button appears in the center of the interface. 
     * @type {string}
     * @memberof LiveEventRecurringEmbed
     */
    'play_button_position': LiveEventRecurringEmbedPlayButtonPositionEnum;
    /**
     * Whether the embedded RLE player should include the playbar.
     * @type {boolean}
     * @memberof LiveEventRecurringEmbed
     */
    'playbar': boolean;
    /**
     * Whether the playlist component appears in the embeddable player for this RLE.
     * @type {boolean}
     * @memberof LiveEventRecurringEmbed
     */
    'playlist': boolean;
    /**
     * Whether the embedded RLE player should display the author\'s portrait.
     * @type {boolean}
     * @memberof LiveEventRecurringEmbed
     */
    'portrait': boolean;
    /**
     * The responsive HTML code to embed the event\'s playlist on a website.
     * @type {string}
     * @memberof LiveEventRecurringEmbed
     */
    'responsive_html': string | null;
    /**
     * Whether the schedule component appears in the embeddable player for this RLE.
     * @type {boolean}
     * @memberof LiveEventRecurringEmbed
     */
    'schedule': boolean;
    /**
     * Whether the embedded RLE player should display the latest video placeholder.
     * @type {boolean}
     * @memberof LiveEventRecurringEmbed
     */
    'show_latest_archived_clip': boolean;
    /**
     * Whether the embedded RLE player should display the schedule timezone.
     * @type {boolean}
     * @memberof LiveEventRecurringEmbed
     */
    'show_timezone': boolean;
    /**
     * Whether the embedded RLE player should use a custom color or the default Vimeo blue.
     * @type {string}
     * @memberof LiveEventRecurringEmbed
     */
    'use_color': string;
    /**
     * Whether the embedded RLE player should include the volume controls.
     * @type {boolean}
     * @memberof LiveEventRecurringEmbed
     */
    'volume': boolean;
}

type LiveEventRecurringEmbedPlayButtonPositionEnum = '0' | '1' | '2'


