/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

The version of the OpenAPI document: 3.4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/
import type * as buffer from "buffer"

import { ApiApp } from './api-app';
import { Category } from './category';
import { DisabledVideoProperties } from './disabled-video-properties';
import { EditingSession } from './editing-session';
import { EmbedSettings } from './embed-settings';
import { Picture } from './picture';
import { Play } from './play';
import { Project } from './project';
import { Tag } from './tag';
import { User } from './user';
import { VersionTranscodeStatus } from './version-transcode-status';
import { VideoContext } from './video-context';
import { VideoFile } from './video-file';
import { VideoMetadata } from './video-metadata';
import { VideoPrivacy } from './video-privacy';
import { VideoSpatial } from './video-spatial';
import { VideoStats } from './video-stats';
import { VideoTranscode } from './video-transcode';
import { VideoTranscript } from './video-transcript';
import { VideoUpload } from './video-upload';
import { VideoUploader } from './video-uploader';
import { VideoVod } from './video-vod';

/**
 * 
 * @export
 * @interface Video
 */
export interface Video {
    /**
     * An array of all tags assigned to the video.
     * @type {Array<Tag>}
     * @memberof Video
     */
    'tags': Array<Tag>;
    /**
     * A brief explanation of the video\'s content.
     * @type {string}
     * @memberof Video
     */
    'description': string | null;
    /**
     * An array of privacy settings supported for this video and the requesting user.
     * @type {Array<string>}
     * @memberof Video
     */
    'allowed_privacies': Array<string>;
    /**
     * The API application associated with the video owner\'s token.
     * @type {ApiApp}
     * @memberof Video
     */
    'app': ApiApp;
    /**
     * Whether the video can be moved to a folder. This data requires a bearer token with the `private` scope.
     * @type {boolean}
     * @memberof Video
     */
    'can_move_to_project': boolean | null;
    /**
     * The categories that the video belongs to.
     * @type {Array<Category>}
     * @memberof Video
     */
    'categories': Array<Category>;
    /**
     * The video\'s granular content rating.  Option descriptions:  * `advertisement` - The video contains advertisements.  * `drugs` - The video contains drug or alcohol use.  * `language` - The video contains profanity or sexually suggestive content.  * `nudity` - The video contains nudity.  * `safe` - The video is safe for all audiences.  * `unrated` - The video hasn\'t been rated.  * `violence` - The video contains violence. 
     * @type {Array<string>}
     * @memberof Video
     */
    'content_rating': VideoContentRatingEnum;
    /**
     * The video\'s high-level content rating class.  Option descriptions:  * `explicit` - The video contains one or more explicit content rating types.  * `safe` - The video contains no explicit content rating types.  * `unrated` - The video doesn\'t belong to a content rating class. 
     * @type {string}
     * @memberof Video
     */
    'content_rating_class': VideoContentRatingClassEnum;
    /**
     * 
     * @type {VideoContext}
     * @memberof Video
     */
    'context': VideoContext;
    /**
     * The time in ISO 8601 format when the video was created.
     * @type {string}
     * @memberof Video
     */
    'created_time': string;
    /**
     * The custom URL of the video.
     * @type {string}
     * @memberof Video
     */
    'custom_url': string | null;
    /**
     * A brief explanation of the video\'s content, formatted with HTML entities.
     * @type {string}
     * @memberof Video
     */
    'description_html': string | null;
    /**
     * A JSON representation of the description.
     * @type {string}
     * @memberof Video
     */
    'description_rich'?: string;
    /**
     * Information about what features may be disabled on the video.
     * @type {DisabledVideoProperties}
     * @memberof Video
     */
    'disabled_properties'?: DisabledVideoProperties;
    /**
     * The list of downloadable files for the video. This data requires a bearer token with the `private` scope.
     * @type {Array<VideoFile>}
     * @memberof Video
     */
    'download': Array<VideoFile>;
    /**
     * The video\'s duration in seconds. A value of `0` indicates the duration hasn\'t been calculated yet.
     * @type {number}
     * @memberof Video
     */
    'duration': number;
    /**
     * Information about the video\'s Vimeo Create editing session. This data requires a bearer token with the `private` scope.
     * @type {EditingSession}
     * @memberof Video
     */
    'edit_session'?: EditingSession;
    /**
     * Information about embedding the video.
     * @type {EmbedSettings}
     * @memberof Video
     */
    'embed': EmbedSettings;
    /**
     * The list of files for the video. This data requires a bearer token with the `private` scope.
     * @type {Array<VideoFile>}
     * @memberof Video
     */
    'files': Array<VideoFile>;
    /**
     * Whether the video has audio.
     * @type {boolean}
     * @memberof Video
     */
    'has_audio': boolean;
    /**
     * Whether the video has alternate audio tracks.
     * @type {boolean}
     * @memberof Video
     */
    'has_audio_tracks': boolean;
    /**
     * Whether the video has chapters.
     * @type {boolean}
     * @memberof Video
     */
    'has_chapters': boolean;
    /**
     * Whether the video has interactive capability.
     * @type {boolean}
     * @memberof Video
     */
    'has_interactive': boolean;
    /**
     * Whether the video has text tracks.
     * @type {boolean}
     * @memberof Video
     */
    'has_text_tracks': boolean;
    /**
     * The video\'s height in pixels.
     * @type {number}
     * @memberof Video
     */
    'height': number;
    /**
     * Whether the video is privacy restricted due to a copyright infringement. This data requires a bearer token with the `private` scope.
     * @type {boolean}
     * @memberof Video
     */
    'is_copyright_restricted': boolean;
    /**
     * Whether the video is a free Vimeo Stock video.
     * @type {boolean}
     * @memberof Video
     */
    'is_free'?: boolean;
    /**
     * Whether the video is playable.
     * @type {boolean}
     * @memberof Video
     */
    'is_playable': boolean;
    /**
     * The video\'s primary language.
     * @type {string}
     * @memberof Video
     */
    'language': string | null;
    /**
     * The time in ISO 8601 format when the user last modified the video.
     * @type {string}
     * @memberof Video
     */
    'last_user_action_event_date'?: string | null;
    /**
     * The [Creative Commons](http://creativecommons.org/licenses/) license that the video is given under.  Option descriptions:  * `by` - The video is given under the Attribution license.  * `by-nc` - The video is given under the Attribution Non-Commercial license.  * `by-nc-nd` - The video is given under the Attribution Non-Commercial No Derivatives license.  * `by-nc-sa` - The video is given under the Attribution Non-Commercial Share Alike license.  * `by-nd` - The video is given under the Attribution No Derivatives license.  * `by-sa` - The video is given under the Attribution Share Alike license.  * `cc0` - The video is given under the Public Domain Dedication license. 
     * @type {string}
     * @memberof Video
     */
    'license': VideoLicenseEnum;
    /**
     * The link to the video.
     * @type {string}
     * @memberof Video
     */
    'link': string;
    /**
     * The link to the video management page. This data requires a bearer token with the `private` scope.
     * @type {string}
     * @memberof Video
     */
    'manage_link'?: string;
    /**
     * 
     * @type {VideoMetadata}
     * @memberof Video
     */
    'metadata': VideoMetadata;
    /**
     * The time in ISO 8601 format when the video metadata was last modified.
     * @type {string}
     * @memberof Video
     */
    'modified_time': string;
    /**
     * The video\'s title.
     * @type {string}
     * @memberof Video
     */
    'name': string;
    /**
     * Whether the video has unified resolution. If the value of this field is `false`, the video requires transcoding.
     * @type {boolean}
     * @memberof Video
     */
    'origin_variable_frame_resolution': boolean;
    /**
     * Information about the folder that contains the video.
     * @type {Project}
     * @memberof Video
     */
    'parent_folder'?: Project;
    /**
     * The privacy-enabled password to watch the video. Only the video\'s owner and team members with permission can access the video\'s password. This data requires a bearer token with the `private` scope.
     * @type {string}
     * @memberof Video
     */
    'password'?: string;
    /**
     * The video\'s active picture.
     * @type {Picture}
     * @memberof Video
     */
    'pictures': Picture;
    /**
     * The `Play` representation.
     * @type {Play}
     * @memberof Video
     */
    'play'?: Play;
    /**
     * The video\'s player embed URL.
     * @type {string}
     * @memberof Video
     */
    'player_embed_url': string;
    /**
     * 
     * @type {VideoPrivacy}
     * @memberof Video
     */
    'privacy': VideoPrivacy;
    /**
     * Whether the video\'s content rating is locked by a mod.
     * @type {boolean}
     * @memberof Video
     */
    'rating_mod_locked': boolean;
    /**
     * The time in ISO 8601 format when the video was released.
     * @type {string}
     * @memberof Video
     */
    'release_time': string;
    /**
     * The resource key string of the video.
     * @type {string}
     * @memberof Video
     */
    'resource_key': string;
    /**
     * Whether to show the `Review` button on single video view recipient pages. This data requires a bearer token with the `private` scope.
     * @type {boolean}
     * @memberof Video
     */
    'show_review_page': boolean | null;
    /**
     * Whether to show the single video view footer banner on recipient pages. This data requires a bearer token with the `private` scope.
     * @type {boolean}
     * @memberof Video
     */
    'show_svv_footer_banner': boolean | null;
    /**
     * Whether to enable timecoded comments on the single video view recipient page. This data requires a bearer token with the `private` scope.
     * @type {boolean}
     * @memberof Video
     */
    'show_svv_timecoded_comments': boolean | null;
    /**
     * 
     * @type {VideoSpatial}
     * @memberof Video
     */
    'spatial': VideoSpatial;
    /**
     * 
     * @type {VideoStats}
     * @memberof Video
     */
    'stats': VideoStats;
    /**
     * The status code for the availability of the video.  Option descriptions:  * `available` - The video is available.  * `quota_exceeded` - The user\'s weekly upload quota is exceeded with this video.  * `total_cap_exceeded` - The user\'s total storage limit is exceeded with this video.  * `transcode_starting` - Transcoding is starting for the video.  * `transcoding` - Transcoding has started and is currently underway for the video.  * `transcoding_error` - There was an error in transcoding the video.  * `unavailable` - The video is unavailable.  * `uploading` - The video is being uploaded.  * `uploading_error` - There was an error in uploading the video. 
     * @type {string}
     * @memberof Video
     */
    'status': VideoStatusEnum;
    /**
     * 
     * @type {VideoTranscode}
     * @memberof Video
     */
    'transcode': VideoTranscode | null;
    /**
     * 
     * @type {VideoTranscript}
     * @memberof Video
     */
    'transcript': VideoTranscript | null;
    /**
     * The type of the video.  Option descriptions:  * `live` - The video is or was an event.  * `stock` - The video is a Vimeo Stock video.  * `video` - The video is a standard Vimeo video. 
     * @type {string}
     * @memberof Video
     */
    'type': VideoTypeEnum;
    /**
     * 
     * @type {VideoUpload}
     * @memberof Video
     */
    'upload': VideoUpload | null;
    /**
     * 
     * @type {VideoUploader}
     * @memberof Video
     */
    'uploader': VideoUploader;
    /**
     * The video\'s canonical relative URI.
     * @type {string}
     * @memberof Video
     */
    'uri': string;
    /**
     * The video\'s owner.
     * @type {User}
     * @memberof Video
     */
    'user': User;
    /**
     * Detailed transcode status information for the current version of the video upload.
     * @type {VersionTranscodeStatus}
     * @memberof Video
     */
    'version_transcode_status': VersionTranscodeStatus;
    /**
     * 
     * @type {VideoVod}
     * @memberof Video
     */
    'vod': VideoVod | null;
    /**
     * The video\'s width in pixels.
     * @type {number}
     * @memberof Video
     */
    'width': number;
}

type VideoContentRatingEnum = 
type VideoContentRatingClassEnum = 'explicit' | 'safe' | 'unrated'
type VideoLicenseEnum = 'by' | 'by-nc' | 'by-nc-nd' | 'by-nc-sa' | 'by-nd' | 'by-sa' | 'cc0'
type VideoStatusEnum = 'available' | 'quota_exceeded' | 'total_cap_exceeded' | 'transcode_starting' | 'transcoding' | 'transcoding_error' | 'unavailable' | 'uploading' | 'uploading_error'
type VideoTypeEnum = 'live' | 'stock' | 'video'


