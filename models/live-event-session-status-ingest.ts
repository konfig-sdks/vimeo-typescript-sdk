/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

The version of the OpenAPI document: 3.4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/
import type * as buffer from "buffer"


/**
 * The ingest of the video.
 * @export
 * @interface LiveEventSessionStatusIngest
 */
export interface LiveEventSessionStatusIngest {
    /**
     * The protocol used for this session.  Option descriptions:  * `dash` - The protocol is DASH.  * `rtmp` - The protocol is RTMP.  * `simple_live` - The protocol is Simplelive.  * `studio_cloud` - The protocol is StudioCloud.  * `unknown` - The protocol is unknown or not set.  * `webrtc` - The protocol is WebRTC. 
     * @type {string}
     * @memberof LiveEventSessionStatusIngest
     */
    'encoder_type': LiveEventSessionStatusIngestEncoderTypeEnum;
    /**
     * The timestamp in UTC format when the live stream ended.
     * @type {number}
     * @memberof LiveEventSessionStatusIngest
     */
    'end_time': number | null;
    /**
     * The height of the live video in pixels.
     * @type {number}
     * @memberof LiveEventSessionStatusIngest
     */
    'height': number | null;
    /**
     * Whether the session is using RTMP.
     * @type {boolean}
     * @memberof LiveEventSessionStatusIngest
     */
    'is_rtmp_session': boolean;
    /**
     * Whether the stream is scheduled media playback.
     * @type {boolean}
     * @memberof LiveEventSessionStatusIngest
     */
    'is_scheduled_playback': boolean | null;
    /**
     * The time in ISO 8601 format when the RTMP expires.
     * @type {string}
     * @memberof LiveEventSessionStatusIngest
     */
    'rtmp_expires_at': string | null;
    /**
     * The upstream RTMP link. Send your live content to this link to create a live video on the event.
     * @type {string}
     * @memberof LiveEventSessionStatusIngest
     */
    'rtmp_link': string | null;
    /**
     * The upstream RTMPS link. Send your live content to this secure link to create a live video on the event.
     * @type {string}
     * @memberof LiveEventSessionStatusIngest
     */
    'rtmps_link': string | null;
    /**
     * The scheduled start time of the live video in ISO 8601 format.
     * @type {string}
     * @memberof LiveEventSessionStatusIngest
     */
    'scheduled_start_time': string | null;
    /**
     * The session ID.
     * @type {string}
     * @memberof LiveEventSessionStatusIngest
     */
    'session_id': string | null;
    /**
     * The timestamp in UTC format when the live video started.
     * @type {number}
     * @memberof LiveEventSessionStatusIngest
     */
    'start_time': number | null;
    /**
     * The ingest status of the live video.  Option descriptions:  * `0` - There’s a live video, but no RMTP URL or key.  * `1` - There’s an RMTP URL and key, but the machine is provisioning.  * `2` - There’s an RMTP URL and key, and the machine is provisioned, but the stream hasn’t started yet.  * `3` - There’s an RMTP URL and key, and the machine is provisioned, but the stream didn’t start before the machine timed out.  * `4` - The stream has started and is currently underway.  * `5` - The stream has ended. 
     * @type {string}
     * @memberof LiveEventSessionStatusIngest
     */
    'status': LiveEventSessionStatusIngestStatusEnum;
    /**
     * The reason why the stream ended. If the stream hasn\'t ended, this field is empty.
     * @type {number}
     * @memberof LiveEventSessionStatusIngest
     */
    'stream_ended_reason': number | null;
    /**
     * The stream key used in conjunction with the RTMP and RTMPS links.
     * @type {string}
     * @memberof LiveEventSessionStatusIngest
     */
    'stream_key': string | null;
    /**
     * The width of the live video in pixels.
     * @type {number}
     * @memberof LiveEventSessionStatusIngest
     */
    'width': number | null;
}

type LiveEventSessionStatusIngestEncoderTypeEnum = 'dash' | 'rtmp' | 'simple_live' | 'studio_cloud' | 'unknown' | 'webrtc'
type LiveEventSessionStatusIngestStatusEnum = '0' | '1' | '2' | '3' | '4' | '5'


